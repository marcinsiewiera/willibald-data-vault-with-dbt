{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.9.3", "generated_at": "2025-04-04T06:37:21.415028Z", "invocation_id": "4c87e35e-b709-425f-9d82-6a273ce49d8a", "env": {}, "project_name": "ddvug_willibald_samen", "project_id": "ec8d0640637389387aae714fa785a6f0", "user_id": null, "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.ddvug_willibald_samen.pre_stg_error_webshop": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_03_err", "name": "pre_stg_error_webshop", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_03_err/pre_stg_error_webshop.sql", "original_file_path": "models/dwh_03_err/pre_stg_error_webshop.sql", "unique_id": "model.ddvug_willibald_samen.pre_stg_error_webshop", "fqn": ["ddvug_willibald_samen", "dwh_03_err", "pre_stg_error_webshop"], "alias": "pre_stg_error_webshop", "checksum": {"name": "sha256", "checksum": "d7ee59613ee81677e72015241c16f08be298416a0e1d17821abb11539d4d4d3b"}, "config": {"enabled": true, "alias": null, "schema": "dwh_03_err", "database": null, "tags": ["error"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["error"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_03_err", "tags": ["error"]}, "created_at": 1743626379.1473122, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.pre_stg_error_webshop", "raw_code": "select ROW_NUMBER, ldts_source AS ldts, rsrc_source as rsrc, raw_data, CHK_ALL_MSG\nfrom  {{ ref(\"load_webshop_bestellung\") }}\nwhere not is_check_ok\nunion all\nselect ROW_NUMBER, ldts_source AS ldts, rsrc_source as rsrc, raw_data, CHK_ALL_MSG\nfrom {{ ref(\"load_webshop_kunde\") }}\nwhere not is_check_ok\nunion all\nselect ROW_NUMBER, ldts_source AS ldts, rsrc_source as rsrc, raw_data, CHK_ALL_MSG\nfrom {{ ref(\"load_webshop_lieferadresse\") }}\nwhere not is_check_ok\nunion all\nselect ROW_NUMBER, ldts_source AS ldts, rsrc_source as rsrc, raw_data, CHK_ALL_MSG\nfrom {{ ref(\"load_webshop_lieferdienst\") }}\nwhere not is_check_ok\nUNION all\nselect ROW_NUMBER, ldts_source AS ldts, rsrc_source as rsrc, raw_data, CHK_ALL_MSG\nfrom {{ ref(\"load_webshop_lieferung\") }}\nwhere not is_check_ok\nUNION all\nselect ROW_NUMBER, ldts_source AS ldts, rsrc_source as rsrc, raw_data, CHK_ALL_MSG\nfrom {{ ref(\"load_webshop_position\") }}\nwhere not is_check_ok\nUNION all\nselect ROW_NUMBER, ldts_source AS ldts, rsrc_source as rsrc, raw_data, CHK_ALL_MSG\nfrom {{ ref(\"load_webshop_produkt\") }}\nwhere not is_check_ok\nUNION all\nselect ROW_NUMBER, ldts_source AS ldts, rsrc_source as rsrc, raw_data, CHK_ALL_MSG\nfrom {{ ref(\"load_webshop_produktkategorie\") }}\nwhere not is_check_ok\nUNION all\nselect ROW_NUMBER, ldts_source AS ldts, rsrc_source as rsrc, raw_data, CHK_ALL_MSG\nfrom {{ ref(\"load_webshop_ref_produkt_typ\") }}\nwhere not is_check_ok\nUNION all\nselect ROW_NUMBER, ldts_source AS ldts, rsrc_source as rsrc, raw_data, CHK_ALL_MSG\nfrom {{ ref(\"load_webshop_vereinspartner\") }}\nwhere not is_check_ok\nUNION all\nselect ROW_NUMBER, ldts_source AS ldts, rsrc_source as rsrc, raw_data, CHK_ALL_MSG\nfrom {{ ref(\"load_webshop_wohnort\") }}\nwhere not is_check_ok", "language": "sql", "refs": [{"name": "load_webshop_bestellung", "package": null, "version": null}, {"name": "load_webshop_kunde", "package": null, "version": null}, {"name": "load_webshop_lieferadresse", "package": null, "version": null}, {"name": "load_webshop_lieferdienst", "package": null, "version": null}, {"name": "load_webshop_lieferung", "package": null, "version": null}, {"name": "load_webshop_position", "package": null, "version": null}, {"name": "load_webshop_produkt", "package": null, "version": null}, {"name": "load_webshop_produktkategorie", "package": null, "version": null}, {"name": "load_webshop_ref_produkt_typ", "package": null, "version": null}, {"name": "load_webshop_vereinspartner", "package": null, "version": null}, {"name": "load_webshop_wohnort", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ddvug_willibald_samen.load_webshop_bestellung", "model.ddvug_willibald_samen.load_webshop_kunde", "model.ddvug_willibald_samen.load_webshop_lieferadresse", "model.ddvug_willibald_samen.load_webshop_lieferdienst", "model.ddvug_willibald_samen.load_webshop_lieferung", "model.ddvug_willibald_samen.load_webshop_position", "model.ddvug_willibald_samen.load_webshop_produkt", "model.ddvug_willibald_samen.load_webshop_produktkategorie", "model.ddvug_willibald_samen.load_webshop_ref_produkt_typ", "model.ddvug_willibald_samen.load_webshop_vereinspartner", "model.ddvug_willibald_samen.load_webshop_wohnort"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.pre_stg_error_roadshow": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_03_err", "name": "pre_stg_error_roadshow", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_03_err/pre_stg_error_roadshow.sql", "original_file_path": "models/dwh_03_err/pre_stg_error_roadshow.sql", "unique_id": "model.ddvug_willibald_samen.pre_stg_error_roadshow", "fqn": ["ddvug_willibald_samen", "dwh_03_err", "pre_stg_error_roadshow"], "alias": "pre_stg_error_roadshow", "checksum": {"name": "sha256", "checksum": "cf1655d85decbdb4dccf9c1d909f1def66746863f8269696b1e34b4d13aa40e0"}, "config": {"enabled": true, "alias": null, "schema": "dwh_03_err", "database": null, "tags": ["error"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["error"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_03_err", "tags": ["error"]}, "created_at": 1743626379.155963, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.pre_stg_error_roadshow", "raw_code": "select ROW_NUMBER, ldts_source as LDTS, rsrc_source as RSRC, raw_data, CHK_ALL_MSG\nfrom  {{ ref(\"load_roadshow_bestellung\") }}\nwhere not is_check_ok", "language": "sql", "refs": [{"name": "load_roadshow_bestellung", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ddvug_willibald_samen.load_roadshow_bestellung"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.error_msc_s": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_03_err", "name": "error_msc_s", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_03_err/error_msc_s.sql", "original_file_path": "models/dwh_03_err/error_msc_s.sql", "unique_id": "model.ddvug_willibald_samen.error_msc_s", "fqn": ["ddvug_willibald_samen", "dwh_03_err", "error_msc_s"], "alias": "error_msc_s", "checksum": {"name": "sha256", "checksum": "b9d2c811caf6d42038295e1c1ee6656a029cfafe23460e6f0bca5df856ebd923"}, "config": {"enabled": true, "alias": null, "schema": "dwh_03_err", "database": null, "tags": ["error"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["error"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_03_err", "tags": ["error"], "materialized": "incremental"}, "created_at": 1743626379.156949, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.error_msc_s", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nparent_hashkey: 'hk_error_h'\nsrc_hashdiff: 'hd_error_s'\nsrc_payload:\n    - raw_data\n    - chk_all_msg \n\nsource_model: 'stg_error_misc'\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set parent_hashkey = metadata_dict['parent_hashkey'] -%}\n{%- set src_hashdiff = metadata_dict['src_hashdiff'] -%}\n{%- set source_model = metadata_dict['source_model'] -%}\n{%- set src_payload = metadata_dict['src_payload'] -%}\n\n\n{{ datavault4dbt.sat_v0(parent_hashkey=parent_hashkey,\n                        src_hashdiff=src_hashdiff,\n                        source_model=source_model,\n                        src_payload=src_payload) }}", "language": "sql", "refs": [{"name": "stg_error_misc", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.sat_v0"], "nodes": ["model.ddvug_willibald_samen.stg_error_misc"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.stg_error_webshop": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_03_err", "name": "stg_error_webshop", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_03_err/stg_error_webshop.sql", "original_file_path": "models/dwh_03_err/stg_error_webshop.sql", "unique_id": "model.ddvug_willibald_samen.stg_error_webshop", "fqn": ["ddvug_willibald_samen", "dwh_03_err", "stg_error_webshop"], "alias": "stg_error_webshop", "checksum": {"name": "sha256", "checksum": "3580b555ba8004f4acf33c8840c84e710c5c2b95672a73ed48a29609a46c6aac"}, "config": {"enabled": true, "alias": null, "schema": "dwh_03_err", "database": null, "tags": ["error"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["error"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_03_err", "tags": ["error"], "materialized": "view"}, "created_at": 1743626379.18158, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.stg_error_webshop", "raw_code": "{{ config(materialized='view') }}\n{%- set yaml_metadata -%}\nsource_model: pre_stg_error_webshop\nldts: LDTS\nrsrc: RSRC\nderived_columns: \n    ERROR_ROW_NO_BK:\n        value: to_varchar(row_number)\n        datatype: 'VARCHAR'\n    ERROR_FILE_BK:\n        value: to_varchar(rsrc)\n        datatype: 'VARCHAR'\nhashed_columns: \n    HK_ERROR_H:\n        - ERROR_FILE_BK\n        - ERROR_ROW_NO_BK\n    HD_ERROR_S:\n        - RAW_DATA\n        - CHK_ALL_MSG \n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{{ datavault4dbt.stage(source_model=metadata_dict['source_model'],\n                    ldts=metadata_dict['ldts'],\n                    rsrc=metadata_dict['rsrc'],\n                    hashed_columns=metadata_dict['hashed_columns'],\n                    derived_columns=metadata_dict['derived_columns'])\n                     }}", "language": "sql", "refs": [{"name": "pre_stg_error_webshop", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.stage"], "nodes": ["model.ddvug_willibald_samen.pre_stg_error_webshop"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.error_ws_s": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_03_err", "name": "error_ws_s", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_03_err/error_ws_s.sql", "original_file_path": "models/dwh_03_err/error_ws_s.sql", "unique_id": "model.ddvug_willibald_samen.error_ws_s", "fqn": ["ddvug_willibald_samen", "dwh_03_err", "error_ws_s"], "alias": "error_ws_s", "checksum": {"name": "sha256", "checksum": "147825f6ef7f3c0eb238235ed55e33883da909424a3d60f4e2e5df0fefe3cbb8"}, "config": {"enabled": true, "alias": null, "schema": "dwh_03_err", "database": null, "tags": ["error"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["error"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_03_err", "tags": ["error"], "materialized": "incremental"}, "created_at": 1743626379.279328, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.error_ws_s", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nparent_hashkey: 'hk_error_h'\nsrc_hashdiff: 'hd_error_s'\nsrc_payload:\n    - raw_data\n    - chk_all_msg \n\nsource_model: 'stg_error_webshop'\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set parent_hashkey = metadata_dict['parent_hashkey'] -%}\n{%- set src_hashdiff = metadata_dict['src_hashdiff'] -%}\n{%- set source_model = metadata_dict['source_model'] -%}\n{%- set src_payload = metadata_dict['src_payload'] -%}\n\n\n{{ datavault4dbt.sat_v0(parent_hashkey=parent_hashkey,\n                        src_hashdiff=src_hashdiff,\n                        source_model=source_model,\n                        src_payload=src_payload) }}", "language": "sql", "refs": [{"name": "stg_error_webshop", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.sat_v0"], "nodes": ["model.ddvug_willibald_samen.stg_error_webshop"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.error_rs_s": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_03_err", "name": "error_rs_s", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_03_err/error_rs_s.sql", "original_file_path": "models/dwh_03_err/error_rs_s.sql", "unique_id": "model.ddvug_willibald_samen.error_rs_s", "fqn": ["ddvug_willibald_samen", "dwh_03_err", "error_rs_s"], "alias": "error_rs_s", "checksum": {"name": "sha256", "checksum": "bdd13abcd4f1f9860e0f1be4047a817b521325332a369cb7ca0b8a73d367bdfc"}, "config": {"enabled": true, "alias": null, "schema": "dwh_03_err", "database": null, "tags": ["error"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["error"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_03_err", "tags": ["error"], "materialized": "incremental"}, "created_at": 1743626379.2829509, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.error_rs_s", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nparent_hashkey: 'hk_error_h'\nsrc_hashdiff: 'hd_error_s'\nsrc_payload:\n    - raw_data\n    - chk_all_msg \n\nsource_model: 'stg_error_roadshow'\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set parent_hashkey = metadata_dict['parent_hashkey'] -%}\n{%- set src_hashdiff = metadata_dict['src_hashdiff'] -%}\n{%- set source_model = metadata_dict['source_model'] -%}\n{%- set src_payload = metadata_dict['src_payload'] -%}\n\n\n{{ datavault4dbt.sat_v0(parent_hashkey=parent_hashkey,\n                        src_hashdiff=src_hashdiff,\n                        source_model=source_model,\n                        src_payload=src_payload) }}", "language": "sql", "refs": [{"name": "stg_error_roadshow", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.sat_v0"], "nodes": ["model.ddvug_willibald_samen.stg_error_roadshow"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.stg_error_misc": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_03_err", "name": "stg_error_misc", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_03_err/stg_error_misc.sql", "original_file_path": "models/dwh_03_err/stg_error_misc.sql", "unique_id": "model.ddvug_willibald_samen.stg_error_misc", "fqn": ["ddvug_willibald_samen", "dwh_03_err", "stg_error_misc"], "alias": "stg_error_misc", "checksum": {"name": "sha256", "checksum": "11d6858e0f21cde9e16ee55a66b87c151398c53a0f34b562311466fa2e3a3a3a"}, "config": {"enabled": true, "alias": null, "schema": "dwh_03_err", "database": null, "tags": ["error"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["error"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_03_err", "tags": ["error"], "materialized": "view"}, "created_at": 1743626379.286334, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.stg_error_misc", "raw_code": "{{ config(materialized='view') }}\n--LOAD_TIMESTAMP, RECORD_SOURCE, JSON_DATA, CHK_ALL_MSG\n{%- set yaml_metadata -%}\nsource_model: pre_stg_error_misc\nldts: LDTS\nrsrc: RSRC\nderived_columns: \n    ERROR_ROW_NO_BK:\n        value: to_varchar(row_number)\n        datatype: 'VARCHAR'\n    ERROR_FILE_BK:\n        value: to_varchar(rsrc)\n        datatype: 'VARCHAR'\nhashed_columns: \n    HK_ERROR_H:\n            - ERROR_FILE_BK\n            - ERROR_ROW_NO_BK\n    HD_ERROR_S:\n        - RAW_DATA\n        - CHK_ALL_MSG \n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{{ datavault4dbt.stage(source_model=metadata_dict['source_model'],\n                    ldts=metadata_dict['ldts'],\n                    rsrc=metadata_dict['rsrc'],\n                    hashed_columns=metadata_dict['hashed_columns'],\n                    derived_columns=metadata_dict['derived_columns'])\n                     }}", "language": "sql", "refs": [{"name": "pre_stg_error_misc", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.stage"], "nodes": ["model.ddvug_willibald_samen.pre_stg_error_misc"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.stg_error_roadshow": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_03_err", "name": "stg_error_roadshow", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_03_err/stg_error_roadshow.sql", "original_file_path": "models/dwh_03_err/stg_error_roadshow.sql", "unique_id": "model.ddvug_willibald_samen.stg_error_roadshow", "fqn": ["ddvug_willibald_samen", "dwh_03_err", "stg_error_roadshow"], "alias": "stg_error_roadshow", "checksum": {"name": "sha256", "checksum": "b95e1b9bb60f3912ed4d4d94a785ffc6287d9d8961a535ae55a13a1486dd363c"}, "config": {"enabled": true, "alias": null, "schema": "dwh_03_err", "database": null, "tags": ["error"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["error"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_03_err", "tags": ["error"], "materialized": "view"}, "created_at": 1743626379.296402, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.stg_error_roadshow", "raw_code": "{{ config(materialized='view') }}\n{%- set yaml_metadata -%}\nsource_model: pre_stg_error_roadshow\nldts: LDTS\nrsrc: RSRC\nderived_columns: \n    ERROR_ROW_NO_BK:\n        value: to_varchar(row_number)\n        datatype: 'VARCHAR'\n    ERROR_FILE_BK:\n        value: to_varchar(rsrc)\n        datatype: 'VARCHAR'\nhashed_columns: \n    HK_ERROR_H:\n        - ERROR_FILE_BK\n        - ERROR_ROW_NO_BK\n    HD_ERROR_S:\n        - RAW_DATA\n        - CHK_ALL_MSG \n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{{ datavault4dbt.stage(source_model=metadata_dict['source_model'],\n                    ldts=metadata_dict['ldts'],\n                    rsrc=metadata_dict['rsrc'],\n                    hashed_columns=metadata_dict['hashed_columns'],\n                    derived_columns=metadata_dict['derived_columns'])\n                     }}", "language": "sql", "refs": [{"name": "pre_stg_error_roadshow", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.stage"], "nodes": ["model.ddvug_willibald_samen.pre_stg_error_roadshow"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.error_h": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_03_err", "name": "error_h", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_03_err/error_h.sql", "original_file_path": "models/dwh_03_err/error_h.sql", "unique_id": "model.ddvug_willibald_samen.error_h", "fqn": ["ddvug_willibald_samen", "dwh_03_err", "error_h"], "alias": "error_h", "checksum": {"name": "sha256", "checksum": "68445b30d63cfb946721ee8211ef876475d026f75dae91b9d8eb2649a3834b9d"}, "config": {"enabled": true, "alias": null, "schema": "dwh_03_err", "database": null, "tags": ["error"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["error"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_03_err", "tags": ["error"], "materialized": "incremental"}, "created_at": 1743626379.306196, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.error_h", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nhashkey: hk_error_h\nbusiness_keys: \n   - error_row_no_bk\n   - error_file_bk\nsource_models: \n   stg_error_roadshow:\n      hk_column: 'hk_error_h'\n   stg_error_webshop:\n      hk_column: 'hk_error_h'\n   stg_error_misc:\n      hk_column: 'hk_error_h'\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{{ datavault4dbt.hub(hashkey=metadata_dict['hashkey'],\n                     business_keys=metadata_dict['business_keys'],\n                     source_models=metadata_dict['source_models']) }}", "language": "sql", "refs": [{"name": "stg_error_roadshow", "package": null, "version": null}, {"name": "stg_error_webshop", "package": null, "version": null}, {"name": "stg_error_misc", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.hub"], "nodes": ["model.ddvug_willibald_samen.stg_error_roadshow", "model.ddvug_willibald_samen.stg_error_webshop", "model.ddvug_willibald_samen.stg_error_misc"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.pre_stg_error_misc": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_03_err", "name": "pre_stg_error_misc", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_03_err/pre_stg_error_misc.sql", "original_file_path": "models/dwh_03_err/pre_stg_error_misc.sql", "unique_id": "model.ddvug_willibald_samen.pre_stg_error_misc", "fqn": ["ddvug_willibald_samen", "dwh_03_err", "pre_stg_error_misc"], "alias": "pre_stg_error_misc", "checksum": {"name": "sha256", "checksum": "c3e783fbce51cc8ee2da197ce7dec79422405a9eafe61f06d12c3a9448fae9af"}, "config": {"enabled": true, "alias": null, "schema": "dwh_03_err", "database": null, "tags": ["error"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["error"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_03_err", "tags": ["error"]}, "created_at": 1743626379.332811, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.pre_stg_error_misc", "raw_code": "select ROW_NUMBER, ldts_source as LDTS, rsrc_source as RSRC, raw_data, CHK_ALL_MSG, true as IS_CHECK_OK\nfrom  {{ ref(\"load_misc_kategorie_termintreue\") }}\nwhere not is_check_ok", "language": "sql", "refs": [{"name": "load_misc_kategorie_termintreue", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ddvug_willibald_samen.load_misc_kategorie_termintreue"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.order_customer_sns": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "order_customer_sns", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/order/order_customer_sns.sql", "original_file_path": "models/dwh_05_sn/order/order_customer_sns.sql", "unique_id": "model.ddvug_willibald_samen.order_customer_sns", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "order", "order_customer_sns"], "alias": "order_customer_sns", "checksum": {"name": "sha256", "checksum": "d5b34d5c7590117d5d258f184b82be271273c067bce129c8a5d163601501584f"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "snapshot satellite of order_customer", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_05_sn/_not_dataspot_sourced/order/test_order_customer.yml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "view"}, "created_at": 1743626380.749312, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.order_customer_sns", "raw_code": "{# template sns Version: 0.1.0 #}\n{# automatically generated based on dataspot#}\n{{ config(materialized='view') }}\n\n{%- set yaml_metadata -%}\npit: 'order_customer_snp'\nbase_entity: 'order_customer_l'\npit_hk: 'hk_order_customer_l'\npit_satellites: \n  - 'order_customer_rs_es'\n  - 'order_customer_ws_es'\nprimary_sourcesystem: 'ws'\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault_extension.sns(pit=metadata_dict['pit'],\n                    pit_hk=metadata_dict['pit_hk'],\n                    pit_satellites=metadata_dict['pit_satellites'],\n                    base_entity=metadata_dict['base_entity'],\n                    primary_sourcesystem=metadata_dict['primary_sourcesystem']) }}", "language": "sql", "refs": [{"name": "order_customer_snp", "package": null, "version": null}, {"name": "order_customer_l", "package": null, "version": null}, {"name": "order_customer_l", "package": null, "version": null}, {"name": "order_customer_rs_es", "package": null, "version": null}, {"name": "order_customer_ws_es", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sns"], "nodes": ["model.ddvug_willibald_samen.order_customer_snp", "model.ddvug_willibald_samen.order_customer_l", "model.ddvug_willibald_samen.order_customer_rs_es", "model.ddvug_willibald_samen.order_customer_ws_es"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_customer_h", "hk_order_h", "sdts"], "time_spine": null}, "model.ddvug_willibald_samen.order_customer_snp": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "order_customer_snp", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/order/order_customer_snp.sql", "original_file_path": "models/dwh_05_sn/order/order_customer_snp.sql", "unique_id": "model.ddvug_willibald_samen.order_customer_snp", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "order", "order_customer_snp"], "alias": "order_customer_snp", "checksum": {"name": "sha256", "checksum": "b088aa98708c81e04acb251ecdcab175d5fa408feb070138f1a7dadb27c2d181"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "Pit of order_customer", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_05_sn/_not_dataspot_sourced/order/test_order_customer.yml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "incremental", "post-hook": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}"}, "created_at": 1743626380.7494972, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.order_customer_snp", "raw_code": "{# template pit Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n{{ config(materialized='incremental',\n        post_hook=\"{{ datavault4dbt.clean_up_pit('control_snap_v1') }}\") }}\n\n{%- set yaml_metadata -%}\npit_type: 'Regular PIT'\ntracked_entity: 'order_customer_l'\nhashkey: 'hk_order_customer_l'\nsat_names:\n  - 'order_customer_rs_es'\n  - 'order_customer_rs_sts'\n  - 'order_customer_ws_es'\n  - 'order_customer_ws_sts'\nsnapshot_relation: 'control_snap_v1'\nsnapshot_trigger_column: 'is_active'\ndimension_key: 'hk_order_customer_d'\ncustom_rsrc: 'PIT table for order_customer'\n\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set pit_type = metadata_dict['pit_type'] -%}\n{%- set tracked_entity = metadata_dict['tracked_entity'] -%}\n{%- set hashkey = metadata_dict['hashkey'] -%}\n{%- set sat_names = metadata_dict['sat_names'] -%}\n{%- set snapshot_relation = metadata_dict['snapshot_relation'] -%}\n{%- set snapshot_trigger_column = metadata_dict['snapshot_trigger_column'] -%}\n{%- set dimension_key = metadata_dict['dimension_key'] -%}\n{%- set custom_rsrc = metadata_dict['custom_rsrc'] -%}\n\n{{ datavault4dbt.pit(pit_type=pit_type\n                        , tracked_entity=tracked_entity\n                        , hashkey=hashkey\n                        , sat_names=sat_names\n                        , snapshot_relation=snapshot_relation\n                        , snapshot_trigger_column=snapshot_trigger_column\n                        , dimension_key=dimension_key\n                        , custom_rsrc=custom_rsrc\n                        ) }}", "language": "sql", "refs": [{"name": "order_customer_l", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}, {"name": "order_customer_rs_es", "package": null, "version": null}, {"name": "order_customer_rs_es", "package": null, "version": null}, {"name": "order_customer_rs_sts", "package": null, "version": null}, {"name": "order_customer_rs_sts", "package": null, "version": null}, {"name": "order_customer_ws_es", "package": null, "version": null}, {"name": "order_customer_ws_es", "package": null, "version": null}, {"name": "order_customer_ws_sts", "package": null, "version": null}, {"name": "order_customer_ws_sts", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.pit", "macro.datavault4dbt.clean_up_pit"], "nodes": ["model.ddvug_willibald_samen.order_customer_l", "model.ddvug_willibald_samen.control_snap_v1", "model.ddvug_willibald_samen.order_customer_rs_es", "model.ddvug_willibald_samen.order_customer_rs_sts", "model.ddvug_willibald_samen.order_customer_ws_es", "model.ddvug_willibald_samen.order_customer_ws_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_order_customer_l", "sdts"], "time_spine": null}, "model.ddvug_willibald_samen.order_sns": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "order_sns", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/order/order_sns.sql", "original_file_path": "models/dwh_05_sn/order/order_sns.sql", "unique_id": "model.ddvug_willibald_samen.order_sns", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "order", "order_sns"], "alias": "order_sns", "checksum": {"name": "sha256", "checksum": "fa634436dabc11bac0de4ad856d14ee5f2e91fb085731c642c66224a7252b65f"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "snapshot satellite of order", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_05_sn/_not_dataspot_sourced/order/test_order.yml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "view"}, "created_at": 1743626380.747495, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.order_sns", "raw_code": "{# template sns Version: 0.1.0 #}\n{# automatically generated based on dataspot#}\n{{ config(materialized='view') }}\n\n{%- set yaml_metadata -%}\npit: 'order_snp'\nbase_entity: 'order_h'\npit_hk: 'hk_order_h'\npit_satellites: \n  - 'order_rs_sts'\n  - 'order_ws_s'\n  - 'order_ws_sts'\nprimary_sourcesystem: 'ws'\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault_extension.sns(pit=metadata_dict['pit'],\n                    pit_hk=metadata_dict['pit_hk'],\n                    pit_satellites=metadata_dict['pit_satellites'],\n                    base_entity=metadata_dict['base_entity'],\n                    primary_sourcesystem=metadata_dict['primary_sourcesystem']) }}", "language": "sql", "refs": [{"name": "order_snp", "package": null, "version": null}, {"name": "order_ws_s", "package": null, "version": null}, {"name": "order_h", "package": null, "version": null}, {"name": "order_rs_sts", "package": null, "version": null}, {"name": "order_ws_s", "package": null, "version": null}, {"name": "order_ws_sts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sns"], "nodes": ["model.ddvug_willibald_samen.order_snp", "model.ddvug_willibald_samen.order_ws_s", "model.ddvug_willibald_samen.order_h", "model.ddvug_willibald_samen.order_rs_sts", "model.ddvug_willibald_samen.order_ws_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_order_h", "sdts"], "time_spine": null}, "model.ddvug_willibald_samen.order_position_snp": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "order_position_snp", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/order/order_position_snp.sql", "original_file_path": "models/dwh_05_sn/order/order_position_snp.sql", "unique_id": "model.ddvug_willibald_samen.order_position_snp", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "order", "order_position_snp"], "alias": "order_position_snp", "checksum": {"name": "sha256", "checksum": "5eb0ca7e32666e9322fd275d1a5bfb290e48c80679a0694bf649ff5b97f3c40b"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "Pit of order_position", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_05_sn/_not_dataspot_sourced/order/test_order_position.yml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "incremental", "post-hook": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}"}, "created_at": 1743626380.709333, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.order_position_snp", "raw_code": "{# template pit Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n{{ config(materialized='incremental',\n        post_hook=\"{{ datavault4dbt.clean_up_pit('control_snap_v1') }}\") }}\n\n{%- set yaml_metadata -%}\npit_type: 'Regular PIT'\ntracked_entity: 'order_position_l'\nhashkey: 'hk_order_position_l'\nsat_names:\n  - 'order_position_rs_sts'\n  - 'order_position_ws_sts'\nsnapshot_relation: 'control_snap_v1'\nsnapshot_trigger_column: 'is_active'\ndimension_key: 'hk_order_position_d'\ncustom_rsrc: 'PIT table for order_position'\n\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set pit_type = metadata_dict['pit_type'] -%}\n{%- set tracked_entity = metadata_dict['tracked_entity'] -%}\n{%- set hashkey = metadata_dict['hashkey'] -%}\n{%- set sat_names = metadata_dict['sat_names'] -%}\n{%- set snapshot_relation = metadata_dict['snapshot_relation'] -%}\n{%- set snapshot_trigger_column = metadata_dict['snapshot_trigger_column'] -%}\n{%- set dimension_key = metadata_dict['dimension_key'] -%}\n{%- set custom_rsrc = metadata_dict['custom_rsrc'] -%}\n\n{{ datavault4dbt.pit(pit_type=pit_type\n                        , tracked_entity=tracked_entity\n                        , hashkey=hashkey\n                        , sat_names=sat_names\n                        , snapshot_relation=snapshot_relation\n                        , snapshot_trigger_column=snapshot_trigger_column\n                        , dimension_key=dimension_key\n                        , custom_rsrc=custom_rsrc\n                        ) }}", "language": "sql", "refs": [{"name": "order_position_l", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}, {"name": "order_position_rs_sts", "package": null, "version": null}, {"name": "order_position_rs_sts", "package": null, "version": null}, {"name": "order_position_ws_sts", "package": null, "version": null}, {"name": "order_position_ws_sts", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.pit", "macro.datavault4dbt.clean_up_pit"], "nodes": ["model.ddvug_willibald_samen.order_position_l", "model.ddvug_willibald_samen.control_snap_v1", "model.ddvug_willibald_samen.order_position_rs_sts", "model.ddvug_willibald_samen.order_position_ws_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_order_position_l", "sdts"], "time_spine": null}, "model.ddvug_willibald_samen.order_snp": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "order_snp", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/order/order_snp.sql", "original_file_path": "models/dwh_05_sn/order/order_snp.sql", "unique_id": "model.ddvug_willibald_samen.order_snp", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "order", "order_snp"], "alias": "order_snp", "checksum": {"name": "sha256", "checksum": "8faf52179862876e4475fe0331c4b15835acc2b7e50e24038fbbbd018cab92cd"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "incremental", "post-hook": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}"}, "created_at": 1743626379.385029, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.order_snp", "raw_code": "{# template pit Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n{{ config(materialized='incremental',\n        post_hook=\"{{ datavault4dbt.clean_up_pit('control_snap_v1') }}\") }}\n\n{%- set yaml_metadata -%}\npit_type: 'Regular PIT'\ntracked_entity: 'order_h'\nhashkey: 'hk_order_h'\nsat_names:\n  - 'order_rs_sts'\n  - 'order_ws_s'\n  - 'order_ws_sts'\nsnapshot_relation: 'control_snap_v1'\nsnapshot_trigger_column: 'is_active'\ndimension_key: 'hk_order_d'\ncustom_rsrc: 'PIT table for order'\n\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set pit_type = metadata_dict['pit_type'] -%}\n{%- set tracked_entity = metadata_dict['tracked_entity'] -%}\n{%- set hashkey = metadata_dict['hashkey'] -%}\n{%- set sat_names = metadata_dict['sat_names'] -%}\n{%- set snapshot_relation = metadata_dict['snapshot_relation'] -%}\n{%- set snapshot_trigger_column = metadata_dict['snapshot_trigger_column'] -%}\n{%- set dimension_key = metadata_dict['dimension_key'] -%}\n{%- set custom_rsrc = metadata_dict['custom_rsrc'] -%}\n\n{{ datavault4dbt.pit(pit_type=pit_type\n                        , tracked_entity=tracked_entity\n                        , hashkey=hashkey\n                        , sat_names=sat_names\n                        , snapshot_relation=snapshot_relation\n                        , snapshot_trigger_column=snapshot_trigger_column\n                        , dimension_key=dimension_key\n                        , custom_rsrc=custom_rsrc\n                        ) }}", "language": "sql", "refs": [{"name": "order_h", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}, {"name": "order_rs_sts", "package": null, "version": null}, {"name": "order_rs_sts", "package": null, "version": null}, {"name": "order_ws_s", "package": null, "version": null}, {"name": "order_ws_s", "package": null, "version": null}, {"name": "order_ws_sts", "package": null, "version": null}, {"name": "order_ws_sts", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.pit", "macro.datavault4dbt.clean_up_pit"], "nodes": ["model.ddvug_willibald_samen.order_h", "model.ddvug_willibald_samen.control_snap_v1", "model.ddvug_willibald_samen.order_rs_sts", "model.ddvug_willibald_samen.order_ws_s", "model.ddvug_willibald_samen.order_ws_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.order_position_sns": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "order_position_sns", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/order/order_position_sns.sql", "original_file_path": "models/dwh_05_sn/order/order_position_sns.sql", "unique_id": "model.ddvug_willibald_samen.order_position_sns", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "order", "order_position_sns"], "alias": "order_position_sns", "checksum": {"name": "sha256", "checksum": "e41a8e007519b67fe10b4b13828a1cf56af7a01cde084c668b3cd5a53021ebb5"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "snapshot satellite of order_position", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_05_sn/_not_dataspot_sourced/order/test_order_position.yml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "view"}, "created_at": 1743626380.708975, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.order_position_sns", "raw_code": "{# template sns Version: 0.1.0 #}\n{# automatically generated based on dataspot#}\n{{ config(materialized='view') }}\n\n{%- set yaml_metadata -%}\npit: 'order_position_snp'\nbase_entity: 'order_position_l'\npit_hk: 'hk_order_position_l'\npit_satellites: \n  - 'order_position_rs_sts'\n  - 'order_position_ws_sts'\nprimary_sourcesystem: 'ws'\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault_extension.sns(pit=metadata_dict['pit'],\n                    pit_hk=metadata_dict['pit_hk'],\n                    pit_satellites=metadata_dict['pit_satellites'],\n                    base_entity=metadata_dict['base_entity'],\n                    primary_sourcesystem=metadata_dict['primary_sourcesystem']) }}", "language": "sql", "refs": [{"name": "order_position_snp", "package": null, "version": null}, {"name": "order_position_l", "package": null, "version": null}, {"name": "order_position_l", "package": null, "version": null}, {"name": "order_position_rs_sts", "package": null, "version": null}, {"name": "order_position_ws_sts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sns"], "nodes": ["model.ddvug_willibald_samen.order_position_snp", "model.ddvug_willibald_samen.order_position_l", "model.ddvug_willibald_samen.order_position_rs_sts", "model.ddvug_willibald_samen.order_position_ws_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_order_h", "hk_position_h", "sdts"], "time_spine": null}, "model.ddvug_willibald_samen.order_associationpartner_sns": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "order_associationpartner_sns", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/order/order_associationpartner_sns.sql", "original_file_path": "models/dwh_05_sn/order/order_associationpartner_sns.sql", "unique_id": "model.ddvug_willibald_samen.order_associationpartner_sns", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "order", "order_associationpartner_sns"], "alias": "order_associationpartner_sns", "checksum": {"name": "sha256", "checksum": "ce677a1b601da59e4a5b7dd893389f55929909c93b08847ae1b2e3537025b620"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "snapshot satellite of order_associationpartner", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_05_sn/_not_dataspot_sourced/order/test_order_associationpartner.yml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "view"}, "created_at": 1743626380.75295, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.order_associationpartner_sns", "raw_code": "{# template sns Version: 0.1.0 #}\n{# automatically generated based on dataspot#}\n{{ config(materialized='view') }}\n\n{%- set yaml_metadata -%}\npit: 'order_associationpartner_snp'\nbase_entity: 'order_associationpartner_l'\npit_hk: 'hk_order_associationpartner_l'\npit_satellites: \n  - 'order_associationpartner_rs_es'\nprimary_sourcesystem: 'ws'\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault_extension.sns(pit=metadata_dict['pit'],\n                    pit_hk=metadata_dict['pit_hk'],\n                    pit_satellites=metadata_dict['pit_satellites'],\n                    base_entity=metadata_dict['base_entity'],\n                    primary_sourcesystem=metadata_dict['primary_sourcesystem']) }}", "language": "sql", "refs": [{"name": "order_associationpartner_snp", "package": null, "version": null}, {"name": "order_associationpartner_l", "package": null, "version": null}, {"name": "order_associationpartner_l", "package": null, "version": null}, {"name": "order_associationpartner_rs_es", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sns"], "nodes": ["model.ddvug_willibald_samen.order_associationpartner_snp", "model.ddvug_willibald_samen.order_associationpartner_l", "model.ddvug_willibald_samen.order_associationpartner_rs_es"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_associationpartner_h", "hk_order_h", "sdts"], "time_spine": null}, "model.ddvug_willibald_samen.order_associationpartner_snp": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "order_associationpartner_snp", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/order/order_associationpartner_snp.sql", "original_file_path": "models/dwh_05_sn/order/order_associationpartner_snp.sql", "unique_id": "model.ddvug_willibald_samen.order_associationpartner_snp", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "order", "order_associationpartner_snp"], "alias": "order_associationpartner_snp", "checksum": {"name": "sha256", "checksum": "d1b42530dcdeb19c87da4bb7fc30158c2f9109c9069f627c1f8119217719cfd9"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "Pit of order_associationpartner", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_05_sn/_not_dataspot_sourced/order/test_order_associationpartner.yml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "incremental", "post-hook": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}"}, "created_at": 1743626380.753133, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.order_associationpartner_snp", "raw_code": "{# template pit Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n{{ config(materialized='incremental',\n        post_hook=\"{{ datavault4dbt.clean_up_pit('control_snap_v1') }}\") }}\n\n{%- set yaml_metadata -%}\npit_type: 'Regular PIT'\ntracked_entity: 'order_associationpartner_l'\nhashkey: 'hk_order_associationpartner_l'\nsat_names:\n  - 'order_associationpartner_rs_es'\n  - 'order_associationpartner_rs_sts'\nsnapshot_relation: 'control_snap_v1'\nsnapshot_trigger_column: 'is_active'\ndimension_key: 'hk_order_associationpartner_d'\ncustom_rsrc: 'PIT table for order_associationpartner'\n\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set pit_type = metadata_dict['pit_type'] -%}\n{%- set tracked_entity = metadata_dict['tracked_entity'] -%}\n{%- set hashkey = metadata_dict['hashkey'] -%}\n{%- set sat_names = metadata_dict['sat_names'] -%}\n{%- set snapshot_relation = metadata_dict['snapshot_relation'] -%}\n{%- set snapshot_trigger_column = metadata_dict['snapshot_trigger_column'] -%}\n{%- set dimension_key = metadata_dict['dimension_key'] -%}\n{%- set custom_rsrc = metadata_dict['custom_rsrc'] -%}\n\n{{ datavault4dbt.pit(pit_type=pit_type\n                        , tracked_entity=tracked_entity\n                        , hashkey=hashkey\n                        , sat_names=sat_names\n                        , snapshot_relation=snapshot_relation\n                        , snapshot_trigger_column=snapshot_trigger_column\n                        , dimension_key=dimension_key\n                        , custom_rsrc=custom_rsrc\n                        ) }}", "language": "sql", "refs": [{"name": "order_associationpartner_l", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}, {"name": "order_associationpartner_rs_es", "package": null, "version": null}, {"name": "order_associationpartner_rs_es", "package": null, "version": null}, {"name": "order_associationpartner_rs_sts", "package": null, "version": null}, {"name": "order_associationpartner_rs_sts", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.pit", "macro.datavault4dbt.clean_up_pit"], "nodes": ["model.ddvug_willibald_samen.order_associationpartner_l", "model.ddvug_willibald_samen.control_snap_v1", "model.ddvug_willibald_samen.order_associationpartner_rs_es", "model.ddvug_willibald_samen.order_associationpartner_rs_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_order_associationpartner_l", "sdts"], "time_spine": null}, "model.ddvug_willibald_samen.category_deliveryadherence_r_snp": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "category_deliveryadherence_r_snp", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/category/category_deliveryadherence_r_snp.sql", "original_file_path": "models/dwh_05_sn/category/category_deliveryadherence_r_snp.sql", "unique_id": "model.ddvug_willibald_samen.category_deliveryadherence_r_snp", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "category", "category_deliveryadherence_r_snp"], "alias": "category_deliveryadherence_r_snp", "checksum": {"name": "sha256", "checksum": "a9c65380d0ba2abafb6d9f98d67165f5e2d574ec40973d68beab30d42f6f0b58"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "incremental", "post-hook": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}"}, "created_at": 1743626379.40468, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.category_deliveryadherence_r_snp", "raw_code": "{{ config(materialized='incremental',\n        post_hook=\"{{ datavault4dbt.clean_up_pit('control_snap_v1') }}\") }}\n\n{%- set yaml_metadata -%}\npit_type: 'Regular PIT'\ntracked_entity: 'category_deliveryadherence_r'\nhashkey: 'category_deliveryadherence_nk'\nsat_names:\n  - 'category_deliveryadherence_misc_rs'\nsnapshot_relation: 'control_snap_v1'\nsnapshot_trigger_column: 'is_active'\ndimension_key: 'd_category_deliveryadherence_nk'\ncustom_rsrc: 'PIT table for category_deliveryadherence_r'\n\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set pit_type = metadata_dict['pit_type'] -%}\n{%- set tracked_entity = metadata_dict['tracked_entity'] -%}\n{%- set hashkey = metadata_dict['hashkey'] -%}\n{%- set sat_names = metadata_dict['sat_names'] -%}\n{%- set snapshot_relation = metadata_dict['snapshot_relation'] -%}\n{%- set snapshot_trigger_column = metadata_dict['snapshot_trigger_column'] -%}\n{%- set dimension_key = metadata_dict['dimension_key'] -%}\n{%- set custom_rsrc = metadata_dict['custom_rsrc'] -%}\n\n{{ datavault4dbt.pit(pit_type=pit_type\n                        , tracked_entity=tracked_entity\n                        , hashkey=hashkey\n                        , sat_names=sat_names\n                        , snapshot_relation=snapshot_relation\n                        , snapshot_trigger_column=snapshot_trigger_column\n                        , dimension_key=dimension_key\n                        , custom_rsrc=custom_rsrc\n                        ) }}", "language": "sql", "refs": [{"name": "category_deliveryadherence_r", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}, {"name": "category_deliveryadherence_misc_rs", "package": null, "version": null}, {"name": "category_deliveryadherence_misc_rs", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.pit", "macro.datavault4dbt.clean_up_pit"], "nodes": ["model.ddvug_willibald_samen.category_deliveryadherence_r", "model.ddvug_willibald_samen.control_snap_v1", "model.ddvug_willibald_samen.category_deliveryadherence_misc_rs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.position_snp": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "position_snp", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/position/position_snp.sql", "original_file_path": "models/dwh_05_sn/position/position_snp.sql", "unique_id": "model.ddvug_willibald_samen.position_snp", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "position", "position_snp"], "alias": "position_snp", "checksum": {"name": "sha256", "checksum": "945047addfc9ee70dc254d41523dbbcc5904c7f65f9a8aa89a9cf1b85ef649f7"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "Pit of position", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_05_sn/_not_dataspot_sourced/position/test_position.yml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "incremental", "post-hook": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}"}, "created_at": 1743626380.760242, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.position_snp", "raw_code": "{# template pit Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n{{ config(materialized='incremental',\n        post_hook=\"{{ datavault4dbt.clean_up_pit('control_snap_v1') }}\") }}\n\n{%- set yaml_metadata -%}\npit_type: 'Regular PIT'\ntracked_entity: 'position_h'\nhashkey: 'hk_position_h'\nsat_names:\n  - 'position_rs_s'\n  - 'position_rs_sts'\n  - 'position_ws_s'\n  - 'position_ws_sts'\nsnapshot_relation: 'control_snap_v1'\nsnapshot_trigger_column: 'is_active'\ndimension_key: 'hk_position_d'\ncustom_rsrc: 'PIT table for position'\n\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set pit_type = metadata_dict['pit_type'] -%}\n{%- set tracked_entity = metadata_dict['tracked_entity'] -%}\n{%- set hashkey = metadata_dict['hashkey'] -%}\n{%- set sat_names = metadata_dict['sat_names'] -%}\n{%- set snapshot_relation = metadata_dict['snapshot_relation'] -%}\n{%- set snapshot_trigger_column = metadata_dict['snapshot_trigger_column'] -%}\n{%- set dimension_key = metadata_dict['dimension_key'] -%}\n{%- set custom_rsrc = metadata_dict['custom_rsrc'] -%}\n\n{{ datavault4dbt.pit(pit_type=pit_type\n                        , tracked_entity=tracked_entity\n                        , hashkey=hashkey\n                        , sat_names=sat_names\n                        , snapshot_relation=snapshot_relation\n                        , snapshot_trigger_column=snapshot_trigger_column\n                        , dimension_key=dimension_key\n                        , custom_rsrc=custom_rsrc\n                        ) }}", "language": "sql", "refs": [{"name": "position_h", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}, {"name": "position_rs_s", "package": null, "version": null}, {"name": "position_rs_s", "package": null, "version": null}, {"name": "position_rs_sts", "package": null, "version": null}, {"name": "position_rs_sts", "package": null, "version": null}, {"name": "position_ws_s", "package": null, "version": null}, {"name": "position_ws_s", "package": null, "version": null}, {"name": "position_ws_sts", "package": null, "version": null}, {"name": "position_ws_sts", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.pit", "macro.datavault4dbt.clean_up_pit"], "nodes": ["model.ddvug_willibald_samen.position_h", "model.ddvug_willibald_samen.control_snap_v1", "model.ddvug_willibald_samen.position_rs_s", "model.ddvug_willibald_samen.position_rs_sts", "model.ddvug_willibald_samen.position_ws_s", "model.ddvug_willibald_samen.position_ws_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_position_h", "sdts"], "time_spine": null}, "model.ddvug_willibald_samen.position_sns": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "position_sns", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/position/position_sns.sql", "original_file_path": "models/dwh_05_sn/position/position_sns.sql", "unique_id": "model.ddvug_willibald_samen.position_sns", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "position", "position_sns"], "alias": "position_sns", "checksum": {"name": "sha256", "checksum": "39fcd3e1f5917a591db7913c705fe35d4899cc4cb9723c640d98bd3c4c40ad54"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "snapshot satellite of position", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_05_sn/_not_dataspot_sourced/position/test_position.yml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "view"}, "created_at": 1743626380.7600598, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.position_sns", "raw_code": "{# template sns Version: 0.1.0 #}\n{# automatically generated based on dataspot#}\n{{ config(materialized='view') }}\n\n{%- set yaml_metadata -%}\npit: 'position_snp'\nbase_entity: 'position_h'\npit_hk: 'hk_position_h'\npit_satellites: \n  - 'position_rs_s'\n  - 'position_rs_sts'\n  - 'position_ws_s'\n  - 'position_ws_sts'\nprimary_sourcesystem: 'ws'\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault_extension.sns(pit=metadata_dict['pit'],\n                    pit_hk=metadata_dict['pit_hk'],\n                    pit_satellites=metadata_dict['pit_satellites'],\n                    base_entity=metadata_dict['base_entity'],\n                    primary_sourcesystem=metadata_dict['primary_sourcesystem']) }}", "language": "sql", "refs": [{"name": "position_snp", "package": null, "version": null}, {"name": "position_rs_s", "package": null, "version": null}, {"name": "position_ws_s", "package": null, "version": null}, {"name": "position_h", "package": null, "version": null}, {"name": "position_rs_s", "package": null, "version": null}, {"name": "position_rs_sts", "package": null, "version": null}, {"name": "position_ws_s", "package": null, "version": null}, {"name": "position_ws_sts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sns"], "nodes": ["model.ddvug_willibald_samen.position_snp", "model.ddvug_willibald_samen.position_rs_s", "model.ddvug_willibald_samen.position_ws_s", "model.ddvug_willibald_samen.position_h", "model.ddvug_willibald_samen.position_rs_sts", "model.ddvug_willibald_samen.position_ws_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_position_h", "sdts"], "time_spine": null}, "model.ddvug_willibald_samen.position_product_sns": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "position_product_sns", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/position/position_product_sns.sql", "original_file_path": "models/dwh_05_sn/position/position_product_sns.sql", "unique_id": "model.ddvug_willibald_samen.position_product_sns", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "position", "position_product_sns"], "alias": "position_product_sns", "checksum": {"name": "sha256", "checksum": "9408c6fc1238574c546fce7e161b5a1156dc4a78e528505ff7f02c25d4e6fb79"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "snapshot satellite of position_product", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_05_sn/_not_dataspot_sourced/position/test_position_product.yml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "view"}, "created_at": 1743626380.7564878, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.position_product_sns", "raw_code": "{# template sns Version: 0.1.0 #}\n{# automatically generated based on dataspot#}\n{{ config(materialized='view') }}\n\n{%- set yaml_metadata -%}\npit: 'position_product_snp'\nbase_entity: 'position_product_l'\npit_hk: 'hk_position_product_l'\npit_satellites: \n  - 'position_product_rs_es'\n  - 'position_product_ws_es'\nprimary_sourcesystem: 'ws'\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault_extension.sns(pit=metadata_dict['pit'],\n                    pit_hk=metadata_dict['pit_hk'],\n                    pit_satellites=metadata_dict['pit_satellites'],\n                    base_entity=metadata_dict['base_entity'],\n                    primary_sourcesystem=metadata_dict['primary_sourcesystem']) }}", "language": "sql", "refs": [{"name": "position_product_snp", "package": null, "version": null}, {"name": "position_product_l", "package": null, "version": null}, {"name": "position_product_l", "package": null, "version": null}, {"name": "position_product_rs_es", "package": null, "version": null}, {"name": "position_product_ws_es", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sns"], "nodes": ["model.ddvug_willibald_samen.position_product_snp", "model.ddvug_willibald_samen.position_product_l", "model.ddvug_willibald_samen.position_product_rs_es", "model.ddvug_willibald_samen.position_product_ws_es"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_position_h", "hk_product_h", "sdts"], "time_spine": null}, "model.ddvug_willibald_samen.position_product_snp": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "position_product_snp", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/position/position_product_snp.sql", "original_file_path": "models/dwh_05_sn/position/position_product_snp.sql", "unique_id": "model.ddvug_willibald_samen.position_product_snp", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "position", "position_product_snp"], "alias": "position_product_snp", "checksum": {"name": "sha256", "checksum": "0cf6ad2e260092977710c94844a649f1bd7ee986d4f723e9f46b5fc958f2d7b3"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "Pit of position_product", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_05_sn/_not_dataspot_sourced/position/test_position_product.yml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "incremental", "post-hook": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}"}, "created_at": 1743626380.756667, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.position_product_snp", "raw_code": "{# template pit Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n{{ config(materialized='incremental',\n        post_hook=\"{{ datavault4dbt.clean_up_pit('control_snap_v1') }}\") }}\n\n{%- set yaml_metadata -%}\npit_type: 'Regular PIT'\ntracked_entity: 'position_product_l'\nhashkey: 'hk_position_product_l'\nsat_names:\n  - 'position_product_rs_es'\n  - 'position_product_rs_sts'\n  - 'position_product_ws_es'\n  - 'position_product_ws_sts'\nsnapshot_relation: 'control_snap_v1'\nsnapshot_trigger_column: 'is_active'\ndimension_key: 'hk_position_product_d'\ncustom_rsrc: 'PIT table for position_product'\n\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set pit_type = metadata_dict['pit_type'] -%}\n{%- set tracked_entity = metadata_dict['tracked_entity'] -%}\n{%- set hashkey = metadata_dict['hashkey'] -%}\n{%- set sat_names = metadata_dict['sat_names'] -%}\n{%- set snapshot_relation = metadata_dict['snapshot_relation'] -%}\n{%- set snapshot_trigger_column = metadata_dict['snapshot_trigger_column'] -%}\n{%- set dimension_key = metadata_dict['dimension_key'] -%}\n{%- set custom_rsrc = metadata_dict['custom_rsrc'] -%}\n\n{{ datavault4dbt.pit(pit_type=pit_type\n                        , tracked_entity=tracked_entity\n                        , hashkey=hashkey\n                        , sat_names=sat_names\n                        , snapshot_relation=snapshot_relation\n                        , snapshot_trigger_column=snapshot_trigger_column\n                        , dimension_key=dimension_key\n                        , custom_rsrc=custom_rsrc\n                        ) }}", "language": "sql", "refs": [{"name": "position_product_l", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}, {"name": "position_product_rs_es", "package": null, "version": null}, {"name": "position_product_rs_es", "package": null, "version": null}, {"name": "position_product_rs_sts", "package": null, "version": null}, {"name": "position_product_rs_sts", "package": null, "version": null}, {"name": "position_product_ws_es", "package": null, "version": null}, {"name": "position_product_ws_es", "package": null, "version": null}, {"name": "position_product_ws_sts", "package": null, "version": null}, {"name": "position_product_ws_sts", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.pit", "macro.datavault4dbt.clean_up_pit"], "nodes": ["model.ddvug_willibald_samen.position_product_l", "model.ddvug_willibald_samen.control_snap_v1", "model.ddvug_willibald_samen.position_product_rs_es", "model.ddvug_willibald_samen.position_product_rs_sts", "model.ddvug_willibald_samen.position_product_ws_es", "model.ddvug_willibald_samen.position_product_ws_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_position_product_l", "sdts"], "time_spine": null}, "model.ddvug_willibald_samen.deliveryservice_sns": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "deliveryservice_sns", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/deliveryservice/deliveryservice_sns.sql", "original_file_path": "models/dwh_05_sn/deliveryservice/deliveryservice_sns.sql", "unique_id": "model.ddvug_willibald_samen.deliveryservice_sns", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "deliveryservice", "deliveryservice_sns"], "alias": "deliveryservice_sns", "checksum": {"name": "sha256", "checksum": "9d89283938a00335d0a6efba3494a7a92dfec4e5ac7c0fffa7ab802756d650ff"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "view"}, "created_at": 1743626379.43068, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.deliveryservice_sns", "raw_code": "{# template sns Version: 0.1.0 #}\n{# automatically generated based on dataspot#}\n{{ config(materialized='view') }}\n\n{%- set yaml_metadata -%}\npit: 'deliveryservice_snp'\nbase_entity: 'deliveryservice_h'\npit_hk: 'hk_deliveryservice_h'\npit_satellites: \n  - 'deliveryservice_ws_s'\n  - 'deliveryservice_ws_sts'\nprimary_sourcesystem: 'ws'\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault_extension.sns(pit=metadata_dict['pit'],\n                    pit_hk=metadata_dict['pit_hk'],\n                    pit_satellites=metadata_dict['pit_satellites'],\n                    base_entity=metadata_dict['base_entity'],\n                    primary_sourcesystem=metadata_dict['primary_sourcesystem']) }}", "language": "sql", "refs": [{"name": "deliveryservice_snp", "package": null, "version": null}, {"name": "deliveryservice_ws_s", "package": null, "version": null}, {"name": "deliveryservice_h", "package": null, "version": null}, {"name": "deliveryservice_ws_s", "package": null, "version": null}, {"name": "deliveryservice_ws_sts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sns"], "nodes": ["model.ddvug_willibald_samen.deliveryservice_snp", "model.ddvug_willibald_samen.deliveryservice_ws_s", "model.ddvug_willibald_samen.deliveryservice_h", "model.ddvug_willibald_samen.deliveryservice_ws_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.deliveryservice_snp": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "deliveryservice_snp", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/deliveryservice/deliveryservice_snp.sql", "original_file_path": "models/dwh_05_sn/deliveryservice/deliveryservice_snp.sql", "unique_id": "model.ddvug_willibald_samen.deliveryservice_snp", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "deliveryservice", "deliveryservice_snp"], "alias": "deliveryservice_snp", "checksum": {"name": "sha256", "checksum": "7483b14f8135a47246e1682a8178a4032f0367d645b40e0abf71b1e20079c262"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "incremental", "post-hook": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}"}, "created_at": 1743626379.434228, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.deliveryservice_snp", "raw_code": "{# template pit Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n{{ config(materialized='incremental',\n        post_hook=\"{{ datavault4dbt.clean_up_pit('control_snap_v1') }}\") }}\n\n{%- set yaml_metadata -%}\npit_type: 'Regular PIT'\ntracked_entity: 'deliveryservice_h'\nhashkey: 'hk_deliveryservice_h'\nsat_names:\n  - 'deliveryservice_ws_s'\n  - 'deliveryservice_ws_sts'\nsnapshot_relation: 'control_snap_v1'\nsnapshot_trigger_column: 'is_active'\ndimension_key: 'hk_deliveryservice_d'\ncustom_rsrc: 'PIT table for deliveryservice'\n\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set pit_type = metadata_dict['pit_type'] -%}\n{%- set tracked_entity = metadata_dict['tracked_entity'] -%}\n{%- set hashkey = metadata_dict['hashkey'] -%}\n{%- set sat_names = metadata_dict['sat_names'] -%}\n{%- set snapshot_relation = metadata_dict['snapshot_relation'] -%}\n{%- set snapshot_trigger_column = metadata_dict['snapshot_trigger_column'] -%}\n{%- set dimension_key = metadata_dict['dimension_key'] -%}\n{%- set custom_rsrc = metadata_dict['custom_rsrc'] -%}\n\n{{ datavault4dbt.pit(pit_type=pit_type\n                        , tracked_entity=tracked_entity\n                        , hashkey=hashkey\n                        , sat_names=sat_names\n                        , snapshot_relation=snapshot_relation\n                        , snapshot_trigger_column=snapshot_trigger_column\n                        , dimension_key=dimension_key\n                        , custom_rsrc=custom_rsrc\n                        ) }}", "language": "sql", "refs": [{"name": "deliveryservice_h", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}, {"name": "deliveryservice_ws_s", "package": null, "version": null}, {"name": "deliveryservice_ws_s", "package": null, "version": null}, {"name": "deliveryservice_ws_sts", "package": null, "version": null}, {"name": "deliveryservice_ws_sts", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.pit", "macro.datavault4dbt.clean_up_pit"], "nodes": ["model.ddvug_willibald_samen.deliveryservice_h", "model.ddvug_willibald_samen.control_snap_v1", "model.ddvug_willibald_samen.deliveryservice_ws_s", "model.ddvug_willibald_samen.deliveryservice_ws_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.productcategory_snp": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "productcategory_snp", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/productcategory/productcategory_snp.sql", "original_file_path": "models/dwh_05_sn/productcategory/productcategory_snp.sql", "unique_id": "model.ddvug_willibald_samen.productcategory_snp", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "productcategory", "productcategory_snp"], "alias": "productcategory_snp", "checksum": {"name": "sha256", "checksum": "853d46fa154a39e6041d5d320a130ac09c51e17037e51b796318edc8dab88ff7"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "PIT of productcategory", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_05_sn/_not_dataspot_sourced/productcategory/test_productcategory.yaml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "incremental", "post-hook": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}"}, "created_at": 1743626380.7895381, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.productcategory_snp", "raw_code": "{# template pit Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n{{ config(materialized='incremental',\n        post_hook=\"{{ datavault4dbt.clean_up_pit('control_snap_v1') }}\") }}\n\n{%- set yaml_metadata -%}\npit_type: 'Regular PIT'\ntracked_entity: 'productcategory_h'\nhashkey: 'hk_productcategory_h'\nsat_names:\n  - 'productcategory_ws_s'\nsnapshot_relation: 'control_snap_v1'\nsnapshot_trigger_column: 'is_active'\ndimension_key: 'hk_productcategory_d'\ncustom_rsrc: 'PIT table for productcategory'\n\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set pit_type = metadata_dict['pit_type'] -%}\n{%- set tracked_entity = metadata_dict['tracked_entity'] -%}\n{%- set hashkey = metadata_dict['hashkey'] -%}\n{%- set sat_names = metadata_dict['sat_names'] -%}\n{%- set snapshot_relation = metadata_dict['snapshot_relation'] -%}\n{%- set snapshot_trigger_column = metadata_dict['snapshot_trigger_column'] -%}\n{%- set dimension_key = metadata_dict['dimension_key'] -%}\n{%- set custom_rsrc = metadata_dict['custom_rsrc'] -%}\n\n{{ datavault4dbt.pit(pit_type=pit_type\n                        , tracked_entity=tracked_entity\n                        , hashkey=hashkey\n                        , sat_names=sat_names\n                        , snapshot_relation=snapshot_relation\n                        , snapshot_trigger_column=snapshot_trigger_column\n                        , dimension_key=dimension_key\n                        , custom_rsrc=custom_rsrc\n                        ) }}", "language": "sql", "refs": [{"name": "productcategory_h", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}, {"name": "productcategory_ws_s", "package": null, "version": null}, {"name": "productcategory_ws_s", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.pit", "macro.datavault4dbt.clean_up_pit"], "nodes": ["model.ddvug_willibald_samen.productcategory_h", "model.ddvug_willibald_samen.control_snap_v1", "model.ddvug_willibald_samen.productcategory_ws_s"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_productcategory_h", "sdts"], "time_spine": null}, "model.ddvug_willibald_samen.productcategory_sns": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "productcategory_sns", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/productcategory/productcategory_sns.sql", "original_file_path": "models/dwh_05_sn/productcategory/productcategory_sns.sql", "unique_id": "model.ddvug_willibald_samen.productcategory_sns", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "productcategory", "productcategory_sns"], "alias": "productcategory_sns", "checksum": {"name": "sha256", "checksum": "6f4e714ab3811feb0cd054289ddcd9a3d97a4360cbbdef685a9d1b810a350b5d"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "Business-Satellite of productcategory", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_05_sn/_not_dataspot_sourced/productcategory/test_productcategory.yaml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "view"}, "created_at": 1743626380.789359, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.productcategory_sns", "raw_code": "{# template sns Version: 0.1.0 #}\n{# automatically generated based on dataspot#}\n{{ config(materialized='view') }}\n\n{%- set yaml_metadata -%}\npit: 'productcategory_snp'\nbase_entity: 'productcategory_h'\npit_hk: 'hk_productcategory_h'\npit_satellites: \n  - 'productcategory_ws_s'\nprimary_sourcesystem: 'ws'\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault_extension.sns(pit=metadata_dict['pit'],\n                    pit_hk=metadata_dict['pit_hk'],\n                    pit_satellites=metadata_dict['pit_satellites'],\n                    base_entity=metadata_dict['base_entity'],\n                    primary_sourcesystem=metadata_dict['primary_sourcesystem']) }}", "language": "sql", "refs": [{"name": "productcategory_snp", "package": null, "version": null}, {"name": "productcategory_ws_s", "package": null, "version": null}, {"name": "productcategory_h", "package": null, "version": null}, {"name": "productcategory_ws_s", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sns"], "nodes": ["model.ddvug_willibald_samen.productcategory_snp", "model.ddvug_willibald_samen.productcategory_ws_s", "model.ddvug_willibald_samen.productcategory_h"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_productcategory_h", "sdts"], "time_spine": null}, "model.ddvug_willibald_samen.productcategory_hierarchy_sns": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "productcategory_hierarchy_sns", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/productcategory/productcategory_hierarchy_sns.sql", "original_file_path": "models/dwh_05_sn/productcategory/productcategory_hierarchy_sns.sql", "unique_id": "model.ddvug_willibald_samen.productcategory_hierarchy_sns", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "productcategory", "productcategory_hierarchy_sns"], "alias": "productcategory_hierarchy_sns", "checksum": {"name": "sha256", "checksum": "1b14af7b9603813504b8eea8b6c8e75b119e065315e44324b19a1c41453a5938"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "Business-Satellite of productcategory", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_05_sn/_not_dataspot_sourced/productcategory/test_productcategory_hierarchy.yaml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "view"}, "created_at": 1743626380.7858791, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.productcategory_hierarchy_sns", "raw_code": "{# template sns Version: 0.1.0 #}\n{# automatically generated based on dataspot#}\n{{ config(materialized='view') }}\n\n{%- set yaml_metadata -%}\npit: 'productcategory_hierarchy_snp'\nbase_entity: 'productcategory_hierarchy_l'\npit_hk: 'hk_productcategory_hierarchy_l'\npit_satellites: \n  - 'productcategory_hierarchy_ws_sts'\nprimary_sourcesystem: 'ws'\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault_extension.sns(pit=metadata_dict['pit'],\n                    pit_hk=metadata_dict['pit_hk'],\n                    pit_satellites=metadata_dict['pit_satellites'],\n                    base_entity=metadata_dict['base_entity'],\n                    primary_sourcesystem=metadata_dict['primary_sourcesystem']) }}", "language": "sql", "refs": [{"name": "productcategory_hierarchy_snp", "package": null, "version": null}, {"name": "productcategory_hierarchy_l", "package": null, "version": null}, {"name": "productcategory_hierarchy_l", "package": null, "version": null}, {"name": "productcategory_hierarchy_ws_sts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sns"], "nodes": ["model.ddvug_willibald_samen.productcategory_hierarchy_snp", "model.ddvug_willibald_samen.productcategory_hierarchy_l", "model.ddvug_willibald_samen.productcategory_hierarchy_ws_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_productcategory_h", "hk_productcategory_parent_h", "sdts"], "time_spine": null}, "model.ddvug_willibald_samen.productcategory_hierarchy_snp": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "productcategory_hierarchy_snp", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/productcategory/productcategory_hierarchy_snp.sql", "original_file_path": "models/dwh_05_sn/productcategory/productcategory_hierarchy_snp.sql", "unique_id": "model.ddvug_willibald_samen.productcategory_hierarchy_snp", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "productcategory", "productcategory_hierarchy_snp"], "alias": "productcategory_hierarchy_snp", "checksum": {"name": "sha256", "checksum": "1ab92eb90bd6f147f53e1777978a474667b4d02d67ad8bc1130c364a1f5d0924"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "PIT of productcategory_hierarchy", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_05_sn/_not_dataspot_sourced/productcategory/test_productcategory_hierarchy.yaml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "incremental", "post-hook": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}"}, "created_at": 1743626380.786061, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.productcategory_hierarchy_snp", "raw_code": "{# template pit Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n{{ config(materialized='incremental',\n        post_hook=\"{{ datavault4dbt.clean_up_pit('control_snap_v1') }}\") }}\n\n{%- set yaml_metadata -%}\npit_type: 'Regular PIT'\ntracked_entity: 'productcategory_hierarchy_l'\nhashkey: 'hk_productcategory_hierarchy_l'\nsat_names:\n  - 'productcategory_hierarchy_ws_sts'\nsnapshot_relation: 'control_snap_v1'\nsnapshot_trigger_column: 'is_active'\ndimension_key: 'hk_productcategory_hierarchy_d'\ncustom_rsrc: 'PIT table for productcategory_hierarchy'\n\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set pit_type = metadata_dict['pit_type'] -%}\n{%- set tracked_entity = metadata_dict['tracked_entity'] -%}\n{%- set hashkey = metadata_dict['hashkey'] -%}\n{%- set sat_names = metadata_dict['sat_names'] -%}\n{%- set snapshot_relation = metadata_dict['snapshot_relation'] -%}\n{%- set snapshot_trigger_column = metadata_dict['snapshot_trigger_column'] -%}\n{%- set dimension_key = metadata_dict['dimension_key'] -%}\n{%- set custom_rsrc = metadata_dict['custom_rsrc'] -%}\n\n{{ datavault4dbt.pit(pit_type=pit_type\n                        , tracked_entity=tracked_entity\n                        , hashkey=hashkey\n                        , sat_names=sat_names\n                        , snapshot_relation=snapshot_relation\n                        , snapshot_trigger_column=snapshot_trigger_column\n                        , dimension_key=dimension_key\n                        , custom_rsrc=custom_rsrc\n                        ) }}", "language": "sql", "refs": [{"name": "productcategory_hierarchy_l", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}, {"name": "productcategory_hierarchy_ws_sts", "package": null, "version": null}, {"name": "productcategory_hierarchy_ws_sts", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.pit", "macro.datavault4dbt.clean_up_pit"], "nodes": ["model.ddvug_willibald_samen.productcategory_hierarchy_l", "model.ddvug_willibald_samen.control_snap_v1", "model.ddvug_willibald_samen.productcategory_hierarchy_ws_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_productcategory_hierarchy_l", "sdts"], "time_spine": null}, "model.ddvug_willibald_samen.product_productcategory_sns": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "product_productcategory_sns", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/product/product_productcategory_sns.sql", "original_file_path": "models/dwh_05_sn/product/product_productcategory_sns.sql", "unique_id": "model.ddvug_willibald_samen.product_productcategory_sns", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "product", "product_productcategory_sns"], "alias": "product_productcategory_sns", "checksum": {"name": "sha256", "checksum": "5d8cafab08e660b9c93c6cf2fd36961dd9b2cecf22e6ea5165ee1a6a3ae2c813"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "snapshot satellite of product_productcategory", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_05_sn/_not_dataspot_sourced/product/test_product_productcategory.yml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "view"}, "created_at": 1743626380.766695, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.product_productcategory_sns", "raw_code": "{# template sns Version: 0.1.0 #}\n{# automatically generated based on dataspot#}\n{{ config(materialized='view') }}\n\n{%- set yaml_metadata -%}\npit: 'product_productcategory_snp'\nbase_entity: 'product_productcategory_l'\npit_hk: 'hk_product_productcategory_l'\npit_satellites: \n  - 'product_productcategory_ws_es'\nprimary_sourcesystem: 'ws'\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault_extension.sns(pit=metadata_dict['pit'],\n                    pit_hk=metadata_dict['pit_hk'],\n                    pit_satellites=metadata_dict['pit_satellites'],\n                    base_entity=metadata_dict['base_entity'],\n                    primary_sourcesystem=metadata_dict['primary_sourcesystem']) }}", "language": "sql", "refs": [{"name": "product_productcategory_snp", "package": null, "version": null}, {"name": "product_productcategory_l", "package": null, "version": null}, {"name": "product_productcategory_l", "package": null, "version": null}, {"name": "product_productcategory_ws_es", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sns"], "nodes": ["model.ddvug_willibald_samen.product_productcategory_snp", "model.ddvug_willibald_samen.product_productcategory_l", "model.ddvug_willibald_samen.product_productcategory_ws_es"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_product_h", "hk_productcategory_h", "sdts"], "time_spine": null}, "model.ddvug_willibald_samen.product_productcategory_snp": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "product_productcategory_snp", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/product/product_productcategory_snp.sql", "original_file_path": "models/dwh_05_sn/product/product_productcategory_snp.sql", "unique_id": "model.ddvug_willibald_samen.product_productcategory_snp", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "product", "product_productcategory_snp"], "alias": "product_productcategory_snp", "checksum": {"name": "sha256", "checksum": "f53058afcfac8263174f00ac697d3ad3f64cd6720ab073a0c664bceb1ddeb5c0"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "Pit of product_productcategory", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_05_sn/_not_dataspot_sourced/product/test_product_productcategory.yml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "incremental", "post-hook": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}"}, "created_at": 1743626380.7668748, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.product_productcategory_snp", "raw_code": "{# template pit Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n{{ config(materialized='incremental',\n        post_hook=\"{{ datavault4dbt.clean_up_pit('control_snap_v1') }}\") }}\n\n{%- set yaml_metadata -%}\npit_type: 'Regular PIT'\ntracked_entity: 'product_productcategory_l'\nhashkey: 'hk_product_productcategory_l'\nsat_names:\n  - 'product_productcategory_ws_es'\n  - 'product_productcategory_ws_sts'\nsnapshot_relation: 'control_snap_v1'\nsnapshot_trigger_column: 'is_active'\ndimension_key: 'hk_product_productcategory_d'\ncustom_rsrc: 'PIT table for product_productcategory'\n\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set pit_type = metadata_dict['pit_type'] -%}\n{%- set tracked_entity = metadata_dict['tracked_entity'] -%}\n{%- set hashkey = metadata_dict['hashkey'] -%}\n{%- set sat_names = metadata_dict['sat_names'] -%}\n{%- set snapshot_relation = metadata_dict['snapshot_relation'] -%}\n{%- set snapshot_trigger_column = metadata_dict['snapshot_trigger_column'] -%}\n{%- set dimension_key = metadata_dict['dimension_key'] -%}\n{%- set custom_rsrc = metadata_dict['custom_rsrc'] -%}\n\n{{ datavault4dbt.pit(pit_type=pit_type\n                        , tracked_entity=tracked_entity\n                        , hashkey=hashkey\n                        , sat_names=sat_names\n                        , snapshot_relation=snapshot_relation\n                        , snapshot_trigger_column=snapshot_trigger_column\n                        , dimension_key=dimension_key\n                        , custom_rsrc=custom_rsrc\n                        ) }}", "language": "sql", "refs": [{"name": "product_productcategory_l", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}, {"name": "product_productcategory_ws_es", "package": null, "version": null}, {"name": "product_productcategory_ws_es", "package": null, "version": null}, {"name": "product_productcategory_ws_sts", "package": null, "version": null}, {"name": "product_productcategory_ws_sts", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.pit", "macro.datavault4dbt.clean_up_pit"], "nodes": ["model.ddvug_willibald_samen.product_productcategory_l", "model.ddvug_willibald_samen.control_snap_v1", "model.ddvug_willibald_samen.product_productcategory_ws_es", "model.ddvug_willibald_samen.product_productcategory_ws_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_product_productcategory_l", "sdts"], "time_spine": null}, "model.ddvug_willibald_samen.product_sns": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "product_sns", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/product/product_sns.sql", "original_file_path": "models/dwh_05_sn/product/product_sns.sql", "unique_id": "model.ddvug_willibald_samen.product_sns", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "product", "product_sns"], "alias": "product_sns", "checksum": {"name": "sha256", "checksum": "662f2809ed5b89bc97304e7210be85c6136ef1705ec0cc4ff328429c591d8708"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "snapshot satellite of product", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_05_sn/_not_dataspot_sourced/product/test_product.yml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "view"}, "created_at": 1743626380.763419, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.product_sns", "raw_code": "{# template sns Version: 0.1.0 #}\n{# automatically generated based on dataspot#}\n{{ config(materialized='view') }}\n\n{%- set yaml_metadata -%}\npit: 'product_snp'\nbase_entity: 'product_h'\npit_hk: 'hk_product_h'\npit_satellites: \n  - 'product_ws_s'\n  - 'product_ws_sts'\nprimary_sourcesystem: 'ws'\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault_extension.sns(pit=metadata_dict['pit'],\n                    pit_hk=metadata_dict['pit_hk'],\n                    pit_satellites=metadata_dict['pit_satellites'],\n                    base_entity=metadata_dict['base_entity'],\n                    primary_sourcesystem=metadata_dict['primary_sourcesystem']) }}", "language": "sql", "refs": [{"name": "product_snp", "package": null, "version": null}, {"name": "product_ws_s", "package": null, "version": null}, {"name": "product_h", "package": null, "version": null}, {"name": "product_ws_s", "package": null, "version": null}, {"name": "product_ws_sts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sns"], "nodes": ["model.ddvug_willibald_samen.product_snp", "model.ddvug_willibald_samen.product_ws_s", "model.ddvug_willibald_samen.product_h", "model.ddvug_willibald_samen.product_ws_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_product_h", "sdts"], "time_spine": null}, "model.ddvug_willibald_samen.product_snp": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "product_snp", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/product/product_snp.sql", "original_file_path": "models/dwh_05_sn/product/product_snp.sql", "unique_id": "model.ddvug_willibald_samen.product_snp", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "product", "product_snp"], "alias": "product_snp", "checksum": {"name": "sha256", "checksum": "6a706cc38b32c344d875349d92fd293f8dd5e71c20cdef52cb1657ee9a90028c"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "Pit of product", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_05_sn/_not_dataspot_sourced/product/test_product.yml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "incremental", "post-hook": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}"}, "created_at": 1743626380.763598, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.product_snp", "raw_code": "{# template pit Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n{{ config(materialized='incremental',\n        post_hook=\"{{ datavault4dbt.clean_up_pit('control_snap_v1') }}\") }}\n\n{%- set yaml_metadata -%}\npit_type: 'Regular PIT'\ntracked_entity: 'product_h'\nhashkey: 'hk_product_h'\nsat_names:\n  - 'product_ws_s'\n  - 'product_ws_sts'\nsnapshot_relation: 'control_snap_v1'\nsnapshot_trigger_column: 'is_active'\ndimension_key: 'hk_product_d'\ncustom_rsrc: 'PIT table for product'\n\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set pit_type = metadata_dict['pit_type'] -%}\n{%- set tracked_entity = metadata_dict['tracked_entity'] -%}\n{%- set hashkey = metadata_dict['hashkey'] -%}\n{%- set sat_names = metadata_dict['sat_names'] -%}\n{%- set snapshot_relation = metadata_dict['snapshot_relation'] -%}\n{%- set snapshot_trigger_column = metadata_dict['snapshot_trigger_column'] -%}\n{%- set dimension_key = metadata_dict['dimension_key'] -%}\n{%- set custom_rsrc = metadata_dict['custom_rsrc'] -%}\n\n{{ datavault4dbt.pit(pit_type=pit_type\n                        , tracked_entity=tracked_entity\n                        , hashkey=hashkey\n                        , sat_names=sat_names\n                        , snapshot_relation=snapshot_relation\n                        , snapshot_trigger_column=snapshot_trigger_column\n                        , dimension_key=dimension_key\n                        , custom_rsrc=custom_rsrc\n                        ) }}", "language": "sql", "refs": [{"name": "product_h", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}, {"name": "product_ws_s", "package": null, "version": null}, {"name": "product_ws_s", "package": null, "version": null}, {"name": "product_ws_sts", "package": null, "version": null}, {"name": "product_ws_sts", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.pit", "macro.datavault4dbt.clean_up_pit"], "nodes": ["model.ddvug_willibald_samen.product_h", "model.ddvug_willibald_samen.control_snap_v1", "model.ddvug_willibald_samen.product_ws_s", "model.ddvug_willibald_samen.product_ws_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_product_h", "sdts"], "time_spine": null}, "model.ddvug_willibald_samen.delivery_sns": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "delivery_sns", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/_not_dataspot_sourced/delivery/delivery_sns.sql", "original_file_path": "models/dwh_05_sn/_not_dataspot_sourced/delivery/delivery_sns.sql", "unique_id": "model.ddvug_willibald_samen.delivery_sns", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "_not_dataspot_sourced", "delivery", "delivery_sns"], "alias": "delivery_sns", "checksum": {"name": "sha256", "checksum": "6496340704c5e07811515ab880fd01b4e7035841897abc08db5a358199375655"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"]}, "created_at": 1743626379.5013278, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.delivery_sns", "raw_code": "WITH cte_relevant_date as\n(\n\tselect sdts\n\tfrom {{ ref(\"relevant_date\") }} \n)\nselect\n\t  cte_relevant_date.sdts\n\t, delivery_nhl.hk_position_h\n\t, delivery_nhl.hk_deliveryadress_h\n\t, delivery_nhl.lieferdatum\n\t, delivery_nhl.rsrc \n\t, delivery_nhl.ldts\nfrom  {{ ref(\"delivery_nhl\") }}\ninner join  cte_relevant_date\non cte_relevant_date.sdts >= delivery_nhl.ldts", "language": "sql", "refs": [{"name": "relevant_date", "package": null, "version": null}, {"name": "delivery_nhl", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ddvug_willibald_samen.relevant_date", "model.ddvug_willibald_samen.delivery_nhl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.relevant_date": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "relevant_date", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/_not_dataspot_sourced/reference/relevant_date.sql", "original_file_path": "models/dwh_05_sn/_not_dataspot_sourced/reference/relevant_date.sql", "unique_id": "model.ddvug_willibald_samen.relevant_date", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "_not_dataspot_sourced", "reference", "relevant_date"], "alias": "relevant_date", "checksum": {"name": "sha256", "checksum": "136ebf37248981a818ef479f0332cfa21e28d0759d53100a7b6cd0475602bab7"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "table"}, "created_at": 1743626379.502495, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.relevant_date", "raw_code": "{{ config(materialized='table') }}\n\tselect *\n\tfrom {{ ref(\"control_snap_v1\") }} b", "language": "sql", "refs": [{"name": "control_snap_v1", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ddvug_willibald_samen.control_snap_v1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.category_deliveryadherence_snp": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "category_deliveryadherence_snp", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/_not_dataspot_sourced/reference/category_deliveryadherence/category_deliveryadherence_snp.sql", "original_file_path": "models/dwh_05_sn/_not_dataspot_sourced/reference/category_deliveryadherence/category_deliveryadherence_snp.sql", "unique_id": "model.ddvug_willibald_samen.category_deliveryadherence_snp", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "_not_dataspot_sourced", "reference", "category_deliveryadherence", "category_deliveryadherence_snp"], "alias": "category_deliveryadherence_snp", "checksum": {"name": "sha256", "checksum": "fa7730642dbb8831c28a492cab528a7fc09315858db83e7a3bc46eccfd2c3ae1"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "incremental", "post-hook": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}"}, "created_at": 1743626379.5035079, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.category_deliveryadherence_snp", "raw_code": "{{ config(materialized='incremental',\n        post_hook=\"{{ datavault4dbt.clean_up_pit('control_snap_v1') }}\") }}\n\n{%- set yaml_metadata -%}\npit_type: 'Regular PIT'\ntracked_entity: 'category_deliveryadherence_r'\nhashkey: 'category_deliveryadherence_nk'\nsat_names:\n    - category_deliveryadherence_misc_rs\n    - category_deliveryadherence_misc_sts\nsnapshot_relation: 'control_snap_v1'\nsnapshot_trigger_column: 'is_active'\ndimension_key: 'hk_category_deliveryadherence_d'\ncustom_rsrc: 'PIT table for category delivery adherence'\n\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set pit_type = metadata_dict['pit_type'] -%}\n{%- set tracked_entity = metadata_dict['tracked_entity'] -%}\n{%- set hashkey = metadata_dict['hashkey'] -%}\n{%- set sat_names = metadata_dict['sat_names'] -%}\n{%- set snapshot_relation = metadata_dict['snapshot_relation'] -%}\n{%- set snapshot_trigger_column = metadata_dict['snapshot_trigger_column'] -%}\n{%- set dimension_key = metadata_dict['dimension_key'] -%}\n{%- set custom_rsrc = metadata_dict['custom_rsrc'] -%}\n\n{{ datavault4dbt.pit(pit_type=pit_type\n                        , tracked_entity=tracked_entity\n                        , hashkey=hashkey\n                        , sat_names=sat_names\n                        , snapshot_relation=snapshot_relation\n                        , snapshot_trigger_column=snapshot_trigger_column\n                        , dimension_key=dimension_key\n                        , custom_rsrc=custom_rsrc\n                        ) }}", "language": "sql", "refs": [{"name": "category_deliveryadherence_r", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}, {"name": "category_deliveryadherence_misc_rs", "package": null, "version": null}, {"name": "category_deliveryadherence_misc_rs", "package": null, "version": null}, {"name": "category_deliveryadherence_misc_sts", "package": null, "version": null}, {"name": "category_deliveryadherence_misc_sts", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.pit", "macro.datavault4dbt.clean_up_pit"], "nodes": ["model.ddvug_willibald_samen.category_deliveryadherence_r", "model.ddvug_willibald_samen.control_snap_v1", "model.ddvug_willibald_samen.category_deliveryadherence_misc_rs", "model.ddvug_willibald_samen.category_deliveryadherence_misc_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.category_deliveryadherence_sns": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "category_deliveryadherence_sns", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/_not_dataspot_sourced/reference/category_deliveryadherence/category_deliveryadherence_sns.sql", "original_file_path": "models/dwh_05_sn/_not_dataspot_sourced/reference/category_deliveryadherence/category_deliveryadherence_sns.sql", "unique_id": "model.ddvug_willibald_samen.category_deliveryadherence_sns", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "_not_dataspot_sourced", "reference", "category_deliveryadherence", "category_deliveryadherence_sns"], "alias": "category_deliveryadherence_sns", "checksum": {"name": "sha256", "checksum": "b238e10f1fa22acbf2f9bf3adedc19d285bea9fbdce55aa8e81b61deb1ceba1f"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "snapshot satellite of category_deliveryadherence", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_05_sn/_not_dataspot_sourced/reference/category_deliveryadherence/category_deliveryadherence_test.yml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"]}, "created_at": 1743626380.770613, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.category_deliveryadherence_sns", "raw_code": "select \n\t  category_deliveryadherence_snp.sdts\n\t, category_deliveryadherence_r.category_deliveryadherence_nk\n\t, category_deliveryadherence_r.ldts \n\t, category_deliveryadherence_r.rsrc\n\t, category_deliveryadherence_snp.hk_category_deliveryadherence_d\n    , {{ dbt_utils.star(ref(\"category_deliveryadherence_misc_rs\"), except=['nk_category_deliveryadherence_misc_r', 'ldts', 'rsrc'], relation_alias= \"category_deliveryadherence_misc_rs\", prefix=\"cdm_\")|replace('\"','') }}\nfrom {{ ref(\"category_deliveryadherence_snp\") }} category_deliveryadherence_snp\ninner join {{ ref(\"category_deliveryadherence_r\") }} category_deliveryadherence_r \n\ton  category_deliveryadherence_snp.hk_category_deliveryadherence_misc_rs=category_deliveryadherence_r.category_deliveryadherence_nk\ninner join {{ ref(\"category_deliveryadherence_misc_rs\") }} category_deliveryadherence_misc_rs\n\ton  category_deliveryadherence_snp.hk_category_deliveryadherence_misc_rs  =category_deliveryadherence_misc_rs.category_deliveryadherence_nk\n\tand category_deliveryadherence_snp.ldts_category_deliveryadherence_misc_rs=category_deliveryadherence_misc_rs.ldts\nINNER JOIN {{ ref(\"category_deliveryadherence_misc_sts\") }}\n\tON category_deliveryadherence_snp.hk_category_deliveryadherence_misc_sts=category_deliveryadherence_misc_sts.category_deliveryadherence_nk\n\tAND category_deliveryadherence_snp.ldts_category_deliveryadherence_misc_sts = category_deliveryadherence_misc_sts.ldts\nWHERE  category_deliveryadherence_misc_sts.cdc <>'D'", "language": "sql", "refs": [{"name": "category_deliveryadherence_misc_rs", "package": null, "version": null}, {"name": "category_deliveryadherence_snp", "package": null, "version": null}, {"name": "category_deliveryadherence_r", "package": null, "version": null}, {"name": "category_deliveryadherence_misc_rs", "package": null, "version": null}, {"name": "category_deliveryadherence_misc_sts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["model.ddvug_willibald_samen.category_deliveryadherence_misc_rs", "model.ddvug_willibald_samen.category_deliveryadherence_snp", "model.ddvug_willibald_samen.category_deliveryadherence_r", "model.ddvug_willibald_samen.category_deliveryadherence_misc_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["category_deliveryadherence_nk", "sdts"], "time_spine": null}, "model.ddvug_willibald_samen.product_type_sns": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "product_type_sns", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/_not_dataspot_sourced/reference/product_type/product_type_sns.sql", "original_file_path": "models/dwh_05_sn/_not_dataspot_sourced/reference/product_type/product_type_sns.sql", "unique_id": "model.ddvug_willibald_samen.product_type_sns", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "_not_dataspot_sourced", "reference", "product_type", "product_type_sns"], "alias": "product_type_sns", "checksum": {"name": "sha256", "checksum": "3ef702d11e569b348d0002cc6234652db0fe4e5ee1e491cc439a4508a2ef82c8"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"]}, "created_at": 1743626379.512321, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.product_type_sns", "raw_code": "select \n\t  --control_snap_v1.sdts\n\t  product_type_ws_rs.product_type_nk\n\t, product_type_ws_rs.ldts \n\t, product_type_ws_rs.rsrc\n    , product_type_ws_rs.bezeichnung\nfrom {{ ref(\"product_type_ws_rs\") }} product_type_ws_rs", "language": "sql", "refs": [{"name": "product_type_ws_rs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ddvug_willibald_samen.product_type_ws_rs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.deliveryadress_sns": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "deliveryadress_sns", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/deliveryadress/deliveryadress_sns.sql", "original_file_path": "models/dwh_05_sn/deliveryadress/deliveryadress_sns.sql", "unique_id": "model.ddvug_willibald_samen.deliveryadress_sns", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "deliveryadress", "deliveryadress_sns"], "alias": "deliveryadress_sns", "checksum": {"name": "sha256", "checksum": "5104b7e4a17a0973c59e6dfac8d117eea1f5f676364f3330c81a5b096de7ad54"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "view"}, "created_at": 1743626379.513317, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.deliveryadress_sns", "raw_code": "{# template sns Version: 0.1.0 #}\n{# automatically generated based on dataspot#}\n{{ config(materialized='view') }}\n\n{%- set yaml_metadata -%}\npit: 'deliveryadress_snp'\nbase_entity: 'deliveryadress_h'\npit_hk: 'hk_deliveryadress_h'\npit_satellites: \n  - 'deliveryadress_ws_s'\nprimary_sourcesystem: 'ws'\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault_extension.sns(pit=metadata_dict['pit'],\n                    pit_hk=metadata_dict['pit_hk'],\n                    pit_satellites=metadata_dict['pit_satellites'],\n                    base_entity=metadata_dict['base_entity'],\n                    primary_sourcesystem=metadata_dict['primary_sourcesystem']) }}", "language": "sql", "refs": [{"name": "deliveryadress_snp", "package": null, "version": null}, {"name": "deliveryadress_ws_s", "package": null, "version": null}, {"name": "deliveryadress_h", "package": null, "version": null}, {"name": "deliveryadress_ws_s", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sns"], "nodes": ["model.ddvug_willibald_samen.deliveryadress_snp", "model.ddvug_willibald_samen.deliveryadress_ws_s", "model.ddvug_willibald_samen.deliveryadress_h"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.deliveryadress_snp": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "deliveryadress_snp", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/deliveryadress/deliveryadress_snp.sql", "original_file_path": "models/dwh_05_sn/deliveryadress/deliveryadress_snp.sql", "unique_id": "model.ddvug_willibald_samen.deliveryadress_snp", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "deliveryadress", "deliveryadress_snp"], "alias": "deliveryadress_snp", "checksum": {"name": "sha256", "checksum": "b71deb3eb0c17940585b75ad5a6bd368ec1df3d49ea968fb857d694bb63ea7fd"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "incremental", "post-hook": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}"}, "created_at": 1743626379.517152, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.deliveryadress_snp", "raw_code": "{# template pit Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n{{ config(materialized='incremental',\n        post_hook=\"{{ datavault4dbt.clean_up_pit('control_snap_v1') }}\") }}\n\n{%- set yaml_metadata -%}\npit_type: 'Regular PIT'\ntracked_entity: 'deliveryadress_h'\nhashkey: 'hk_deliveryadress_h'\nsat_names:\n  - 'deliveryadress_ws_s'\nsnapshot_relation: 'control_snap_v1'\nsnapshot_trigger_column: 'is_active'\ndimension_key: 'hk_deliveryadress_d'\ncustom_rsrc: 'PIT table for deliveryadress'\n\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set pit_type = metadata_dict['pit_type'] -%}\n{%- set tracked_entity = metadata_dict['tracked_entity'] -%}\n{%- set hashkey = metadata_dict['hashkey'] -%}\n{%- set sat_names = metadata_dict['sat_names'] -%}\n{%- set snapshot_relation = metadata_dict['snapshot_relation'] -%}\n{%- set snapshot_trigger_column = metadata_dict['snapshot_trigger_column'] -%}\n{%- set dimension_key = metadata_dict['dimension_key'] -%}\n{%- set custom_rsrc = metadata_dict['custom_rsrc'] -%}\n\n{{ datavault4dbt.pit(pit_type=pit_type\n                        , tracked_entity=tracked_entity\n                        , hashkey=hashkey\n                        , sat_names=sat_names\n                        , snapshot_relation=snapshot_relation\n                        , snapshot_trigger_column=snapshot_trigger_column\n                        , dimension_key=dimension_key\n                        , custom_rsrc=custom_rsrc\n                        ) }}", "language": "sql", "refs": [{"name": "deliveryadress_h", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}, {"name": "deliveryadress_ws_s", "package": null, "version": null}, {"name": "deliveryadress_ws_s", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.pit", "macro.datavault4dbt.clean_up_pit"], "nodes": ["model.ddvug_willibald_samen.deliveryadress_h", "model.ddvug_willibald_samen.control_snap_v1", "model.ddvug_willibald_samen.deliveryadress_ws_s"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.deliveryadress_customer_sns": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "deliveryadress_customer_sns", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/deliveryadress/deliveryadress_customer_sns.sql", "original_file_path": "models/dwh_05_sn/deliveryadress/deliveryadress_customer_sns.sql", "unique_id": "model.ddvug_willibald_samen.deliveryadress_customer_sns", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "deliveryadress", "deliveryadress_customer_sns"], "alias": "deliveryadress_customer_sns", "checksum": {"name": "sha256", "checksum": "eec16f7145873aaead03820734c5ae267e6044648df39b30ebd61d65f2fe2929"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "view"}, "created_at": 1743626379.522725, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.deliveryadress_customer_sns", "raw_code": "{# template sns Version: 0.1.0 #}\n{# automatically generated based on dataspot#}\n{{ config(materialized='view') }}\n\n{%- set yaml_metadata -%}\npit: 'deliveryadress_customer_snp'\nbase_entity: 'deliveryadress_customer_l'\npit_hk: 'hk_deliveryadress_customer_l'\npit_satellites: \n  - 'deliveryadress_customer_ws_es'\nprimary_sourcesystem: 'ws'\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault_extension.sns(pit=metadata_dict['pit'],\n                    pit_hk=metadata_dict['pit_hk'],\n                    pit_satellites=metadata_dict['pit_satellites'],\n                    base_entity=metadata_dict['base_entity'],\n                    primary_sourcesystem=metadata_dict['primary_sourcesystem']) }}", "language": "sql", "refs": [{"name": "deliveryadress_customer_snp", "package": null, "version": null}, {"name": "deliveryadress_customer_l", "package": null, "version": null}, {"name": "deliveryadress_customer_l", "package": null, "version": null}, {"name": "deliveryadress_customer_ws_es", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sns"], "nodes": ["model.ddvug_willibald_samen.deliveryadress_customer_snp", "model.ddvug_willibald_samen.deliveryadress_customer_l", "model.ddvug_willibald_samen.deliveryadress_customer_ws_es"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.deliveryadress_customer_snp": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "deliveryadress_customer_snp", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/deliveryadress/deliveryadress_customer_snp.sql", "original_file_path": "models/dwh_05_sn/deliveryadress/deliveryadress_customer_snp.sql", "unique_id": "model.ddvug_willibald_samen.deliveryadress_customer_snp", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "deliveryadress", "deliveryadress_customer_snp"], "alias": "deliveryadress_customer_snp", "checksum": {"name": "sha256", "checksum": "435144b4d3d90a914935db71684993c4cd324d5fb65811824676f80ec0f44f99"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "incremental", "post-hook": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}"}, "created_at": 1743626379.526109, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.deliveryadress_customer_snp", "raw_code": "{# template pit Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n{{ config(materialized='incremental',\n        post_hook=\"{{ datavault4dbt.clean_up_pit('control_snap_v1') }}\") }}\n\n{%- set yaml_metadata -%}\npit_type: 'Regular PIT'\ntracked_entity: 'deliveryadress_customer_l'\nhashkey: 'hk_deliveryadress_customer_l'\nsat_names:\n  - 'deliveryadress_customer_ws_es'\n  - 'deliveryadress_customer_ws_sts'\nsnapshot_relation: 'control_snap_v1'\nsnapshot_trigger_column: 'is_active'\ndimension_key: 'hk_deliveryadress_customer_d'\ncustom_rsrc: 'PIT table for deliveryadress_customer'\n\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set pit_type = metadata_dict['pit_type'] -%}\n{%- set tracked_entity = metadata_dict['tracked_entity'] -%}\n{%- set hashkey = metadata_dict['hashkey'] -%}\n{%- set sat_names = metadata_dict['sat_names'] -%}\n{%- set snapshot_relation = metadata_dict['snapshot_relation'] -%}\n{%- set snapshot_trigger_column = metadata_dict['snapshot_trigger_column'] -%}\n{%- set dimension_key = metadata_dict['dimension_key'] -%}\n{%- set custom_rsrc = metadata_dict['custom_rsrc'] -%}\n\n{{ datavault4dbt.pit(pit_type=pit_type\n                        , tracked_entity=tracked_entity\n                        , hashkey=hashkey\n                        , sat_names=sat_names\n                        , snapshot_relation=snapshot_relation\n                        , snapshot_trigger_column=snapshot_trigger_column\n                        , dimension_key=dimension_key\n                        , custom_rsrc=custom_rsrc\n                        ) }}", "language": "sql", "refs": [{"name": "deliveryadress_customer_l", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}, {"name": "deliveryadress_customer_ws_es", "package": null, "version": null}, {"name": "deliveryadress_customer_ws_es", "package": null, "version": null}, {"name": "deliveryadress_customer_ws_sts", "package": null, "version": null}, {"name": "deliveryadress_customer_ws_sts", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.pit", "macro.datavault4dbt.clean_up_pit"], "nodes": ["model.ddvug_willibald_samen.deliveryadress_customer_l", "model.ddvug_willibald_samen.control_snap_v1", "model.ddvug_willibald_samen.deliveryadress_customer_ws_es", "model.ddvug_willibald_samen.deliveryadress_customer_ws_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.customer_associationpartner_snp": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "customer_associationpartner_snp", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/customer/customer_associationpartner_snp.sql", "original_file_path": "models/dwh_05_sn/customer/customer_associationpartner_snp.sql", "unique_id": "model.ddvug_willibald_samen.customer_associationpartner_snp", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "customer", "customer_associationpartner_snp"], "alias": "customer_associationpartner_snp", "checksum": {"name": "sha256", "checksum": "2998611a804444238af2efa556876c1bada634f6358d63c365c07dc0a266db36"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "Pit of customer_associationpartner", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_05_sn/_not_dataspot_sourced/customer/test_customer_associationpartner.yml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "incremental", "post-hook": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}"}, "created_at": 1743626380.7726452, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.customer_associationpartner_snp", "raw_code": "{# template pit Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n{{ config(materialized='incremental',\n        post_hook=\"{{ datavault4dbt.clean_up_pit('control_snap_v1') }}\") }}\n\n{%- set yaml_metadata -%}\npit_type: 'Regular PIT'\ntracked_entity: 'customer_associationpartner_l'\nhashkey: 'hk_customer_associationpartner_l'\nsat_names:\n  - 'customer_associationpartner_ws_es'\n  - 'customer_associationpartner_ws_sts'\nsnapshot_relation: 'control_snap_v1'\nsnapshot_trigger_column: 'is_active'\ndimension_key: 'hk_customer_associationpartner_d'\ncustom_rsrc: 'PIT table for customer_associationpartner'\n\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set pit_type = metadata_dict['pit_type'] -%}\n{%- set tracked_entity = metadata_dict['tracked_entity'] -%}\n{%- set hashkey = metadata_dict['hashkey'] -%}\n{%- set sat_names = metadata_dict['sat_names'] -%}\n{%- set snapshot_relation = metadata_dict['snapshot_relation'] -%}\n{%- set snapshot_trigger_column = metadata_dict['snapshot_trigger_column'] -%}\n{%- set dimension_key = metadata_dict['dimension_key'] -%}\n{%- set custom_rsrc = metadata_dict['custom_rsrc'] -%}\n\n{{ datavault4dbt.pit(pit_type=pit_type\n                        , tracked_entity=tracked_entity\n                        , hashkey=hashkey\n                        , sat_names=sat_names\n                        , snapshot_relation=snapshot_relation\n                        , snapshot_trigger_column=snapshot_trigger_column\n                        , dimension_key=dimension_key\n                        , custom_rsrc=custom_rsrc\n                        ) }}", "language": "sql", "refs": [{"name": "customer_associationpartner_l", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}, {"name": "customer_associationpartner_ws_es", "package": null, "version": null}, {"name": "customer_associationpartner_ws_es", "package": null, "version": null}, {"name": "customer_associationpartner_ws_sts", "package": null, "version": null}, {"name": "customer_associationpartner_ws_sts", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.pit", "macro.datavault4dbt.clean_up_pit"], "nodes": ["model.ddvug_willibald_samen.customer_associationpartner_l", "model.ddvug_willibald_samen.control_snap_v1", "model.ddvug_willibald_samen.customer_associationpartner_ws_es", "model.ddvug_willibald_samen.customer_associationpartner_ws_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_customer_associationpartner_l", "sdts"], "time_spine": null}, "model.ddvug_willibald_samen.customer_associationpartner_sns": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "customer_associationpartner_sns", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/customer/customer_associationpartner_sns.sql", "original_file_path": "models/dwh_05_sn/customer/customer_associationpartner_sns.sql", "unique_id": "model.ddvug_willibald_samen.customer_associationpartner_sns", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "customer", "customer_associationpartner_sns"], "alias": "customer_associationpartner_sns", "checksum": {"name": "sha256", "checksum": "d5621f1a42f696f249897a43eb08c92d411b2d2d1f6b2e18b8d958f86ae1c097"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "snapshot satellite of customer_associationpartner", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_05_sn/_not_dataspot_sourced/customer/test_customer_associationpartner.yml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "view"}, "created_at": 1743626380.772464, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.customer_associationpartner_sns", "raw_code": "{# template sns Version: 0.1.0 #}\n{# automatically generated based on dataspot#}\n{{ config(materialized='view') }}\n\n{%- set yaml_metadata -%}\npit: 'customer_associationpartner_snp'\nbase_entity: 'customer_associationpartner_l'\npit_hk: 'hk_customer_associationpartner_l'\npit_satellites: \n  - 'customer_associationpartner_ws_es'\nprimary_sourcesystem: 'ws'\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault_extension.sns(pit=metadata_dict['pit'],\n                    pit_hk=metadata_dict['pit_hk'],\n                    pit_satellites=metadata_dict['pit_satellites'],\n                    base_entity=metadata_dict['base_entity'],\n                    primary_sourcesystem=metadata_dict['primary_sourcesystem']) }}", "language": "sql", "refs": [{"name": "customer_associationpartner_snp", "package": null, "version": null}, {"name": "customer_associationpartner_l", "package": null, "version": null}, {"name": "customer_associationpartner_l", "package": null, "version": null}, {"name": "customer_associationpartner_ws_es", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sns"], "nodes": ["model.ddvug_willibald_samen.customer_associationpartner_snp", "model.ddvug_willibald_samen.customer_associationpartner_l", "model.ddvug_willibald_samen.customer_associationpartner_ws_es"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_associationpartner_h", "hk_customer_h", "sdts"], "time_spine": null}, "model.ddvug_willibald_samen.customer_sns": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "customer_sns", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/customer/customer_sns.sql", "original_file_path": "models/dwh_05_sn/customer/customer_sns.sql", "unique_id": "model.ddvug_willibald_samen.customer_sns", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "customer", "customer_sns"], "alias": "customer_sns", "checksum": {"name": "sha256", "checksum": "88ab25431aba80175da536aa1b6cfd706904b3b662f57bc41d03407a3711ee2e"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "snapshot satellite of customer", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_05_sn/_not_dataspot_sourced/customer/test_customer.yml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "view"}, "created_at": 1743626380.775894, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.customer_sns", "raw_code": "{# template sns Version: 0.1.0 #}\n{# automatically generated based on dataspot#}\n{{ config(materialized='view') }}\n\n{%- set yaml_metadata -%}\npit: 'customer_snp'\nbase_entity: 'customer_h'\npit_hk: 'hk_customer_h'\npit_satellites: \n  - 'customer_ws_s'\n  - 'customer_ws_sts'\nprimary_sourcesystem: 'ws'\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault_extension.sns(pit=metadata_dict['pit'],\n                    pit_hk=metadata_dict['pit_hk'],\n                    pit_satellites=metadata_dict['pit_satellites'],\n                    base_entity=metadata_dict['base_entity'],\n                    primary_sourcesystem=metadata_dict['primary_sourcesystem']) }}", "language": "sql", "refs": [{"name": "customer_snp", "package": null, "version": null}, {"name": "customer_ws_s", "package": null, "version": null}, {"name": "customer_h", "package": null, "version": null}, {"name": "customer_ws_s", "package": null, "version": null}, {"name": "customer_ws_sts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sns"], "nodes": ["model.ddvug_willibald_samen.customer_snp", "model.ddvug_willibald_samen.customer_ws_s", "model.ddvug_willibald_samen.customer_h", "model.ddvug_willibald_samen.customer_ws_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_customer_h", "sdts"], "time_spine": null}, "model.ddvug_willibald_samen.customer_snp": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "customer_snp", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/customer/customer_snp.sql", "original_file_path": "models/dwh_05_sn/customer/customer_snp.sql", "unique_id": "model.ddvug_willibald_samen.customer_snp", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "customer", "customer_snp"], "alias": "customer_snp", "checksum": {"name": "sha256", "checksum": "bb9615d680ae884a5fe8fc6c329fe4a15579cedf64a1b568c0df9bb37a694e6f"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "Pit of customer", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_05_sn/_not_dataspot_sourced/customer/test_customer.yml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "incremental", "post-hook": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}"}, "created_at": 1743626380.776072, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.customer_snp", "raw_code": "{# template pit Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n{{ config(materialized='incremental',\n        post_hook=\"{{ datavault4dbt.clean_up_pit('control_snap_v1') }}\") }}\n\n{%- set yaml_metadata -%}\npit_type: 'Regular PIT'\ntracked_entity: 'customer_h'\nhashkey: 'hk_customer_h'\nsat_names:\n  - 'customer_ws_la_ms'\n  - 'customer_ws_s'\n  - 'customer_ws_sts'\nsnapshot_relation: 'control_snap_v1'\nsnapshot_trigger_column: 'is_active'\ndimension_key: 'hk_customer_d'\ncustom_rsrc: 'PIT table for customer'\n\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set pit_type = metadata_dict['pit_type'] -%}\n{%- set tracked_entity = metadata_dict['tracked_entity'] -%}\n{%- set hashkey = metadata_dict['hashkey'] -%}\n{%- set sat_names = metadata_dict['sat_names'] -%}\n{%- set snapshot_relation = metadata_dict['snapshot_relation'] -%}\n{%- set snapshot_trigger_column = metadata_dict['snapshot_trigger_column'] -%}\n{%- set dimension_key = metadata_dict['dimension_key'] -%}\n{%- set custom_rsrc = metadata_dict['custom_rsrc'] -%}\n\n{{ datavault4dbt.pit(pit_type=pit_type\n                        , tracked_entity=tracked_entity\n                        , hashkey=hashkey\n                        , sat_names=sat_names\n                        , snapshot_relation=snapshot_relation\n                        , snapshot_trigger_column=snapshot_trigger_column\n                        , dimension_key=dimension_key\n                        , custom_rsrc=custom_rsrc\n                        ) }}", "language": "sql", "refs": [{"name": "customer_h", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}, {"name": "customer_ws_la_ms", "package": null, "version": null}, {"name": "customer_ws_la_ms", "package": null, "version": null}, {"name": "customer_ws_s", "package": null, "version": null}, {"name": "customer_ws_s", "package": null, "version": null}, {"name": "customer_ws_sts", "package": null, "version": null}, {"name": "customer_ws_sts", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.pit", "macro.datavault4dbt.clean_up_pit"], "nodes": ["model.ddvug_willibald_samen.customer_h", "model.ddvug_willibald_samen.control_snap_v1", "model.ddvug_willibald_samen.customer_ws_la_ms", "model.ddvug_willibald_samen.customer_ws_s", "model.ddvug_willibald_samen.customer_ws_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_customer_h", "sdts"], "time_spine": null}, "model.ddvug_willibald_samen.associationpartner_customer_sns": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "associationpartner_customer_sns", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/associationpartner/associationpartner_customer_sns.sql", "original_file_path": "models/dwh_05_sn/associationpartner/associationpartner_customer_sns.sql", "unique_id": "model.ddvug_willibald_samen.associationpartner_customer_sns", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "associationpartner", "associationpartner_customer_sns"], "alias": "associationpartner_customer_sns", "checksum": {"name": "sha256", "checksum": "aa4aa695d286863773110e58f474fabad71ee5d4c308e37aa1d79319f516c627"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "snapshot satellite of associationpartner_customer", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_05_sn/_not_dataspot_sourced/associationpartner/test_associationpartner_customer.yml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "view"}, "created_at": 1743626380.782464, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.associationpartner_customer_sns", "raw_code": "{# template sns Version: 0.1.0 #}\n{# automatically generated based on dataspot#}\n{{ config(materialized='view') }}\n\n{%- set yaml_metadata -%}\npit: 'associationpartner_customer_snp'\nbase_entity: 'associationpartner_customer_l'\npit_hk: 'hk_associationpartner_customer_l'\npit_satellites: \n  - 'associationpartner_customer_ws_es'\nprimary_sourcesystem: 'ws'\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault_extension.sns(pit=metadata_dict['pit'],\n                    pit_hk=metadata_dict['pit_hk'],\n                    pit_satellites=metadata_dict['pit_satellites'],\n                    base_entity=metadata_dict['base_entity'],\n                    primary_sourcesystem=metadata_dict['primary_sourcesystem']) }}", "language": "sql", "refs": [{"name": "associationpartner_customer_snp", "package": null, "version": null}, {"name": "associationpartner_customer_l", "package": null, "version": null}, {"name": "associationpartner_customer_l", "package": null, "version": null}, {"name": "associationpartner_customer_ws_es", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sns"], "nodes": ["model.ddvug_willibald_samen.associationpartner_customer_snp", "model.ddvug_willibald_samen.associationpartner_customer_l", "model.ddvug_willibald_samen.associationpartner_customer_ws_es"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_associationpartner_h", "hk_customer_h", "sdts"], "time_spine": null}, "model.ddvug_willibald_samen.associationpartner_customer_snp": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "associationpartner_customer_snp", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/associationpartner/associationpartner_customer_snp.sql", "original_file_path": "models/dwh_05_sn/associationpartner/associationpartner_customer_snp.sql", "unique_id": "model.ddvug_willibald_samen.associationpartner_customer_snp", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "associationpartner", "associationpartner_customer_snp"], "alias": "associationpartner_customer_snp", "checksum": {"name": "sha256", "checksum": "732c363e75e49eb1045f417bddaa324ab135ac76064441176ed8a2816e57a7e8"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "Pit of associationpartner_customer", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_05_sn/_not_dataspot_sourced/associationpartner/test_associationpartner_customer.yml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "incremental", "post-hook": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}"}, "created_at": 1743626380.782644, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.associationpartner_customer_snp", "raw_code": "{# template pit Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n{{ config(materialized='incremental',\n        post_hook=\"{{ datavault4dbt.clean_up_pit('control_snap_v1') }}\") }}\n\n{%- set yaml_metadata -%}\npit_type: 'Regular PIT'\ntracked_entity: 'associationpartner_customer_l'\nhashkey: 'hk_associationpartner_customer_l'\nsat_names:\n  - 'associationpartner_customer_ws_es'\n  - 'associationpartner_customer_ws_sts'\nsnapshot_relation: 'control_snap_v1'\nsnapshot_trigger_column: 'is_active'\ndimension_key: 'hk_associationpartner_customer_d'\ncustom_rsrc: 'PIT table for associationpartner_customer'\n\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set pit_type = metadata_dict['pit_type'] -%}\n{%- set tracked_entity = metadata_dict['tracked_entity'] -%}\n{%- set hashkey = metadata_dict['hashkey'] -%}\n{%- set sat_names = metadata_dict['sat_names'] -%}\n{%- set snapshot_relation = metadata_dict['snapshot_relation'] -%}\n{%- set snapshot_trigger_column = metadata_dict['snapshot_trigger_column'] -%}\n{%- set dimension_key = metadata_dict['dimension_key'] -%}\n{%- set custom_rsrc = metadata_dict['custom_rsrc'] -%}\n\n{{ datavault4dbt.pit(pit_type=pit_type\n                        , tracked_entity=tracked_entity\n                        , hashkey=hashkey\n                        , sat_names=sat_names\n                        , snapshot_relation=snapshot_relation\n                        , snapshot_trigger_column=snapshot_trigger_column\n                        , dimension_key=dimension_key\n                        , custom_rsrc=custom_rsrc\n                        ) }}", "language": "sql", "refs": [{"name": "associationpartner_customer_l", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}, {"name": "associationpartner_customer_ws_es", "package": null, "version": null}, {"name": "associationpartner_customer_ws_es", "package": null, "version": null}, {"name": "associationpartner_customer_ws_sts", "package": null, "version": null}, {"name": "associationpartner_customer_ws_sts", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.pit", "macro.datavault4dbt.clean_up_pit"], "nodes": ["model.ddvug_willibald_samen.associationpartner_customer_l", "model.ddvug_willibald_samen.control_snap_v1", "model.ddvug_willibald_samen.associationpartner_customer_ws_es", "model.ddvug_willibald_samen.associationpartner_customer_ws_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_associationpartner_customer_l", "sdts"], "time_spine": null}, "model.ddvug_willibald_samen.associationpartner_sns": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "associationpartner_sns", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/associationpartner/associationpartner_sns.sql", "original_file_path": "models/dwh_05_sn/associationpartner/associationpartner_sns.sql", "unique_id": "model.ddvug_willibald_samen.associationpartner_sns", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "associationpartner", "associationpartner_sns"], "alias": "associationpartner_sns", "checksum": {"name": "sha256", "checksum": "c1da90b26e2c3f44f22fa79dd511d13cd1d314941bd58f38d8c3626dcf56aec4"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "snapshot satellite of associationpartner", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_05_sn/_not_dataspot_sourced/associationpartner/test_associationpartner.yml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "view"}, "created_at": 1743626380.7791622, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.associationpartner_sns", "raw_code": "{# template sns Version: 0.1.0 #}\n{# automatically generated based on dataspot#}\n{{ config(materialized='view') }}\n\n{%- set yaml_metadata -%}\npit: 'associationpartner_snp'\nbase_entity: 'associationpartner_h'\npit_hk: 'hk_associationpartner_h'\npit_satellites: \n  - 'associationpartner_ws_s'\n  - 'associationpartner_ws_sts'\nprimary_sourcesystem: 'ws'\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault_extension.sns(pit=metadata_dict['pit'],\n                    pit_hk=metadata_dict['pit_hk'],\n                    pit_satellites=metadata_dict['pit_satellites'],\n                    base_entity=metadata_dict['base_entity'],\n                    primary_sourcesystem=metadata_dict['primary_sourcesystem']) }}", "language": "sql", "refs": [{"name": "associationpartner_snp", "package": null, "version": null}, {"name": "associationpartner_ws_s", "package": null, "version": null}, {"name": "associationpartner_h", "package": null, "version": null}, {"name": "associationpartner_ws_s", "package": null, "version": null}, {"name": "associationpartner_ws_sts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sns"], "nodes": ["model.ddvug_willibald_samen.associationpartner_snp", "model.ddvug_willibald_samen.associationpartner_ws_s", "model.ddvug_willibald_samen.associationpartner_h", "model.ddvug_willibald_samen.associationpartner_ws_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_associationpartner_h", "sdts"], "time_spine": null}, "model.ddvug_willibald_samen.associationpartner_snp": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_05_sn", "name": "associationpartner_snp", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_05_sn/associationpartner/associationpartner_snp.sql", "original_file_path": "models/dwh_05_sn/associationpartner/associationpartner_snp.sql", "unique_id": "model.ddvug_willibald_samen.associationpartner_snp", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "associationpartner", "associationpartner_snp"], "alias": "associationpartner_snp", "checksum": {"name": "sha256", "checksum": "84c6873feb4385244788aa5a17dcc3f52644126d19d32b0168eec9fac2787272"}, "config": {"enabled": true, "alias": null, "schema": "dwh_05_sn", "database": null, "tags": ["sn"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["sn"], "description": "Pit of associationpartner", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_05_sn/_not_dataspot_sourced/associationpartner/test_associationpartner.yml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_05_sn", "tags": ["sn"], "materialized": "incremental", "post-hook": "{{ datavault4dbt.clean_up_pit('control_snap_v1') }}"}, "created_at": 1743626380.779338, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.associationpartner_snp", "raw_code": "{# template pit Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n{{ config(materialized='incremental',\n        post_hook=\"{{ datavault4dbt.clean_up_pit('control_snap_v1') }}\") }}\n\n{%- set yaml_metadata -%}\npit_type: 'Regular PIT'\ntracked_entity: 'associationpartner_h'\nhashkey: 'hk_associationpartner_h'\nsat_names:\n  - 'associationpartner_ws_s'\n  - 'associationpartner_ws_sts'\nsnapshot_relation: 'control_snap_v1'\nsnapshot_trigger_column: 'is_active'\ndimension_key: 'hk_associationpartner_d'\ncustom_rsrc: 'PIT table for associationpartner'\n\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set pit_type = metadata_dict['pit_type'] -%}\n{%- set tracked_entity = metadata_dict['tracked_entity'] -%}\n{%- set hashkey = metadata_dict['hashkey'] -%}\n{%- set sat_names = metadata_dict['sat_names'] -%}\n{%- set snapshot_relation = metadata_dict['snapshot_relation'] -%}\n{%- set snapshot_trigger_column = metadata_dict['snapshot_trigger_column'] -%}\n{%- set dimension_key = metadata_dict['dimension_key'] -%}\n{%- set custom_rsrc = metadata_dict['custom_rsrc'] -%}\n\n{{ datavault4dbt.pit(pit_type=pit_type\n                        , tracked_entity=tracked_entity\n                        , hashkey=hashkey\n                        , sat_names=sat_names\n                        , snapshot_relation=snapshot_relation\n                        , snapshot_trigger_column=snapshot_trigger_column\n                        , dimension_key=dimension_key\n                        , custom_rsrc=custom_rsrc\n                        ) }}", "language": "sql", "refs": [{"name": "associationpartner_h", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}, {"name": "associationpartner_ws_s", "package": null, "version": null}, {"name": "associationpartner_ws_s", "package": null, "version": null}, {"name": "associationpartner_ws_sts", "package": null, "version": null}, {"name": "associationpartner_ws_sts", "package": null, "version": null}, {"name": "control_snap_v1", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.pit", "macro.datavault4dbt.clean_up_pit"], "nodes": ["model.ddvug_willibald_samen.associationpartner_h", "model.ddvug_willibald_samen.control_snap_v1", "model.ddvug_willibald_samen.associationpartner_ws_s", "model.ddvug_willibald_samen.associationpartner_ws_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_associationpartner_h", "sdts"], "time_spine": null}, "model.ddvug_willibald_samen.stg_misc_kategorie_termintreue": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_03_stage", "name": "stg_misc_kategorie_termintreue", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_03_stage/kategorie_termintreue/stg_misc_kategorie_termintreue.sql", "original_file_path": "models/dwh_03_stage/kategorie_termintreue/stg_misc_kategorie_termintreue.sql", "unique_id": "model.ddvug_willibald_samen.stg_misc_kategorie_termintreue", "fqn": ["ddvug_willibald_samen", "dwh_03_stage", "kategorie_termintreue", "stg_misc_kategorie_termintreue"], "alias": "stg_misc_kategorie_termintreue", "checksum": {"name": "sha256", "checksum": "80be99db1cb2fa973d5e072c09db7514a0839e969fe6ba54afcc97302e96f00a"}, "config": {"enabled": true, "alias": null, "schema": "dwh_03_stage", "database": null, "tags": ["stage"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["stage"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_03_stage", "tags": ["stage"], "materialized": "view"}, "created_at": 1743626379.569512, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_misc_kategorie_termintreue", "raw_code": "{# template stage Version:0.1.1 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='view') }}\n{%- set unknown_key = get_dict_hash_value(\"unknown_key\") -%}\n{%- set error_key = get_dict_hash_value(\"error_key\") -%}\n\n{%- set yaml_metadata -%}\nsource_model: \n  'load_misc_kategorie_termintreue'\nhashed_columns:\n  HD_CATEGORY_DELIVERYADHERENCE_MISC_RS:\n    is_hashdiff: true\n    columns:\n      - ANZAHL_TAGE_VON\n      - ANZAHL_TAGE_BIS\n      - BEZEICHNUNG\n\n\n\n\nderived_columns:\n    CATEGORY_DELIVERYADHERENCE_NK:\n      value: BEWERTUNG\n      datatype: 'VARCHAR'\n    COUNT_DAYS_FROM:\n      value: ANZAHL_TAGE_VON\n      datatype: 'VARCHAR'\n    COUNT_DAYS_TO:\n      value: ANZAHL_TAGE_BIS\n      datatype: 'VARCHAR'\n    NAME:\n      value: BEZEICHNUNG\n      datatype: 'VARCHAR'\n\n    CDTS:\n      value: {{var(\"local_timestamp\")}}\n      datatype: 'TIMESTAMP'\n    EDTS:      \n      value: EDTS_IN\n      datatype: 'DATE'\n\nrsrc: 'RSRC_SOURCE' \nldts: 'LDTS_SOURCE'\ninclude_source_columns: true\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.stage(include_source_columns=metadata_dict['include_source_columns'],\n                  source_model=metadata_dict['source_model'],\n                  hashed_columns=metadata_dict['hashed_columns'],\n                  derived_columns=metadata_dict['derived_columns'],                  \n                  rsrc=metadata_dict['rsrc'],\n                  ldts=metadata_dict['ldts'],\n                  prejoined_columns=metadata_dict['prejoined_columns'],\n                  multi_active_config=metadata_dict['multi_active_config']) }}\nwhere is_check_ok or rsrc ='SYSTEM'", "language": "sql", "refs": [{"name": "load_misc_kategorie_termintreue", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.ddvug_willibald_samen.get_dict_hash_value", "macro.datavault4dbt.stage"], "nodes": ["model.ddvug_willibald_samen.load_misc_kategorie_termintreue"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.stg_webshop_position": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_03_stage", "name": "stg_webshop_position", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_03_stage/position/stg_webshop_position.sql", "original_file_path": "models/dwh_03_stage/position/stg_webshop_position.sql", "unique_id": "model.ddvug_willibald_samen.stg_webshop_position", "fqn": ["ddvug_willibald_samen", "dwh_03_stage", "position", "stg_webshop_position"], "alias": "stg_webshop_position", "checksum": {"name": "sha256", "checksum": "7fe2d365c412437cdebc8cff96a1c0580198643ae3a520d2454a527525dd557b"}, "config": {"enabled": true, "alias": null, "schema": "dwh_03_stage", "database": null, "tags": ["stage"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["stage"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_03_stage", "tags": ["stage"], "materialized": "view"}, "created_at": 1743626379.583185, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_position", "raw_code": "{# template stage Version:0.1.1 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='view') }}\n{%- set unknown_key = get_dict_hash_value(\"unknown_key\") -%}\n{%- set error_key = get_dict_hash_value(\"error_key\") -%}\n\n{%- set yaml_metadata -%}\nsource_model: \n  'load_webshop_position'\nhashed_columns:\n  HK_ORDER_H:\n    - BESTELLUNGID\n  HK_POSITION_H:\n    - BESTELLUNGID\n    - POSID\n  HK_PRODUCT_H:\n    - PRODUKTID\n  HK_ORDER_POSITION_L:\n    - POSITION_BK\n    - ORDER_BK\n  HK_POSITION_PRODUCT_L:\n    - PRODUCT_BK\n    - POSITION_BK\n  HD_POSITION_WS_S:\n    is_hashdiff: true\n    columns:\n      - BESTELLUNGID\n      - MENGE\n      - POSID\n      - PREIS\n      - SPEZLIEFERADRID\n\n\n\n\nderived_columns:\n    ORDER_BK:\n      value: BESTELLUNGID\n      datatype: 'VARCHAR'\n    POSITION_BK:\n      value: BESTELLUNGID||'_'||POSID\n      datatype: 'VARCHAR'\n    PRODUCT_BK:\n      value: PRODUKTID\n      datatype: 'VARCHAR'\n\n    CDTS:\n      value: {{var(\"local_timestamp\")}}\n      datatype: 'TIMESTAMP'\n    EDTS:      \n      value: EDTS_IN\n      datatype: 'DATE'\n\nrsrc: 'RSRC_SOURCE' \nldts: 'LDTS_SOURCE'\ninclude_source_columns: true\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.stage(include_source_columns=metadata_dict['include_source_columns'],\n                  source_model=metadata_dict['source_model'],\n                  hashed_columns=metadata_dict['hashed_columns'],\n                  derived_columns=metadata_dict['derived_columns'],                  \n                  rsrc=metadata_dict['rsrc'],\n                  ldts=metadata_dict['ldts'],\n                  prejoined_columns=metadata_dict['prejoined_columns'],\n                  multi_active_config=metadata_dict['multi_active_config']) }}\nwhere is_check_ok or rsrc ='SYSTEM'", "language": "sql", "refs": [{"name": "load_webshop_position", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.ddvug_willibald_samen.get_dict_hash_value", "macro.datavault4dbt.stage"], "nodes": ["model.ddvug_willibald_samen.load_webshop_position"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.stg_webshop_wohnort": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_03_stage", "name": "stg_webshop_wohnort", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_03_stage/wohnort/stg_webshop_wohnort.sql", "original_file_path": "models/dwh_03_stage/wohnort/stg_webshop_wohnort.sql", "unique_id": "model.ddvug_willibald_samen.stg_webshop_wohnort", "fqn": ["ddvug_willibald_samen", "dwh_03_stage", "wohnort", "stg_webshop_wohnort"], "alias": "stg_webshop_wohnort", "checksum": {"name": "sha256", "checksum": "c67d8ec2aa0df28dc3e128ff91dfbb21f911beffb25bdba33136ec6da1da30ac"}, "config": {"enabled": true, "alias": null, "schema": "dwh_03_stage", "database": null, "tags": ["stage"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["stage"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_03_stage", "tags": ["stage"], "materialized": "view"}, "created_at": 1743626379.60032, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_wohnort", "raw_code": "{# template stage Version:0.1.1 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='view') }}\n{%- set unknown_key = get_dict_hash_value(\"unknown_key\") -%}\n{%- set error_key = get_dict_hash_value(\"error_key\") -%}\n\n{%- set yaml_metadata -%}\nsource_model: \n  'load_webshop_wohnort'\nhashed_columns:\n  HK_CUSTOMER_H:\n    - KUNDEID\n  HD_CUSTOMER_WS_LA_MS:\n    is_hashdiff: true\n    columns:\n      - ADRESSZUSATZ\n      - BIS\n      - HAUSNUMMER\n      - LAND\n      - ORT\n      - PLZ\n      - STRASSE\n\n\nmulti_active_config:\n    multi_active_key:\n      - VON\n    main_hashkey_column: HK_CUSTOMER_H\n\n\nderived_columns:\n    CUSTOMER_BK:\n      value: KUNDEID\n      datatype: 'VARCHAR'\n\n    CDTS:\n      value: {{var(\"local_timestamp\")}}\n      datatype: 'TIMESTAMP'\n    EDTS:      \n      value: EDTS_IN\n      datatype: 'DATE'\n\nrsrc: 'RSRC_SOURCE' \nldts: 'LDTS_SOURCE'\ninclude_source_columns: true\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.stage(include_source_columns=metadata_dict['include_source_columns'],\n                  source_model=metadata_dict['source_model'],\n                  hashed_columns=metadata_dict['hashed_columns'],\n                  derived_columns=metadata_dict['derived_columns'],                  \n                  rsrc=metadata_dict['rsrc'],\n                  ldts=metadata_dict['ldts'],\n                  prejoined_columns=metadata_dict['prejoined_columns'],\n                  multi_active_config=metadata_dict['multi_active_config']) }}\nwhere is_check_ok or rsrc ='SYSTEM'", "language": "sql", "refs": [{"name": "load_webshop_wohnort", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.ddvug_willibald_samen.get_dict_hash_value", "macro.datavault4dbt.stage"], "nodes": ["model.ddvug_willibald_samen.load_webshop_wohnort"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.stg_webshop_lieferadresse": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_03_stage", "name": "stg_webshop_lieferadresse", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_03_stage/lieferadresse/stg_webshop_lieferadresse.sql", "original_file_path": "models/dwh_03_stage/lieferadresse/stg_webshop_lieferadresse.sql", "unique_id": "model.ddvug_willibald_samen.stg_webshop_lieferadresse", "fqn": ["ddvug_willibald_samen", "dwh_03_stage", "lieferadresse", "stg_webshop_lieferadresse"], "alias": "stg_webshop_lieferadresse", "checksum": {"name": "sha256", "checksum": "5be2d577baa3cca121dffb06052c534b0f80b7feddd1680090b37c9c05241bcb"}, "config": {"enabled": true, "alias": null, "schema": "dwh_03_stage", "database": null, "tags": ["stage"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["stage"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_03_stage", "tags": ["stage"], "materialized": "view"}, "created_at": 1743626379.616977, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_lieferadresse", "raw_code": "{# template stage Version:0.1.1 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='view') }}\n{%- set unknown_key = get_dict_hash_value(\"unknown_key\") -%}\n{%- set error_key = get_dict_hash_value(\"error_key\") -%}\n\n{%- set yaml_metadata -%}\nsource_model: \n  'load_webshop_lieferadresse'\nhashed_columns:\n  HK_CUSTOMER_H:\n    - KUNDEID\n  HK_DELIVERYADRESS_H:\n    - LIEFERADRID\n  HK_DELIVERYADRESS_CUSTOMER_L:\n    - DELIVERYADRESS_BK\n    - CUSTOMER_BK\n  HD_DELIVERYADRESS_WS_S:\n    is_hashdiff: true\n    columns:\n      - ADRESSZUSATZ\n      - HAUSNUMMER\n      - LAND\n      - ORT\n      - PLZ\n      - STRASSE\n\n\n\n\nderived_columns:\n    CUSTOMER_BK:\n      value: KUNDEID\n      datatype: 'VARCHAR'\n    DELIVERYADRESS_BK:\n      value: LIEFERADRID\n      datatype: 'VARCHAR'\n\n    CDTS:\n      value: {{var(\"local_timestamp\")}}\n      datatype: 'TIMESTAMP'\n    EDTS:      \n      value: EDTS_IN\n      datatype: 'DATE'\n\nrsrc: 'RSRC_SOURCE' \nldts: 'LDTS_SOURCE'\ninclude_source_columns: true\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.stage(include_source_columns=metadata_dict['include_source_columns'],\n                  source_model=metadata_dict['source_model'],\n                  hashed_columns=metadata_dict['hashed_columns'],\n                  derived_columns=metadata_dict['derived_columns'],                  \n                  rsrc=metadata_dict['rsrc'],\n                  ldts=metadata_dict['ldts'],\n                  prejoined_columns=metadata_dict['prejoined_columns'],\n                  multi_active_config=metadata_dict['multi_active_config']) }}\nwhere is_check_ok or rsrc ='SYSTEM'", "language": "sql", "refs": [{"name": "load_webshop_lieferadresse", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.ddvug_willibald_samen.get_dict_hash_value", "macro.datavault4dbt.stage"], "nodes": ["model.ddvug_willibald_samen.load_webshop_lieferadresse"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.stg_webshop_produkt": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_03_stage", "name": "stg_webshop_produkt", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_03_stage/produkt/stg_webshop_produkt.sql", "original_file_path": "models/dwh_03_stage/produkt/stg_webshop_produkt.sql", "unique_id": "model.ddvug_willibald_samen.stg_webshop_produkt", "fqn": ["ddvug_willibald_samen", "dwh_03_stage", "produkt", "stg_webshop_produkt"], "alias": "stg_webshop_produkt", "checksum": {"name": "sha256", "checksum": "4c03497c292734a8a0f9c75d62ab06cc7e93534ae27d332ab09cf9869a980604"}, "config": {"enabled": true, "alias": null, "schema": "dwh_03_stage", "database": null, "tags": ["stage"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["stage"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_03_stage", "tags": ["stage"], "materialized": "view"}, "created_at": 1743626379.631341, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_produkt", "raw_code": "{# template stage Version:0.1.1 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='view') }}\n{%- set unknown_key = get_dict_hash_value(\"unknown_key\") -%}\n{%- set error_key = get_dict_hash_value(\"error_key\") -%}\n\n{%- set yaml_metadata -%}\nsource_model: \n  'load_webshop_produkt'\nhashed_columns:\n  HK_PRODUCT_H:\n    - PRODUKTID\n  HK_PRODUCTCATEGORY_H:\n    - KATID\n  HK_PRODUCT_PRODUCTCATEGORY_L:\n    - PRODUCTCATEGORY_BK\n    - PRODUCT_BK\n  HD_PRODUCT_WS_S:\n    is_hashdiff: true\n    columns:\n      - BEZEICHNUNG\n      - PFLANZABSTAND\n      - PFLANZORT\n      - PREIS\n      - TYP\n      - UMFANG\n\n\n\n\nderived_columns:\n    PRODUCT_BK:\n      value: PRODUKTID\n      datatype: 'VARCHAR'\n    PRODUCTCATEGORY_BK:\n      value: KATID\n      datatype: 'VARCHAR'\n\n    CDTS:\n      value: {{var(\"local_timestamp\")}}\n      datatype: 'TIMESTAMP'\n    EDTS:      \n      value: EDTS_IN\n      datatype: 'DATE'\n\nrsrc: 'RSRC_SOURCE' \nldts: 'LDTS_SOURCE'\ninclude_source_columns: true\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.stage(include_source_columns=metadata_dict['include_source_columns'],\n                  source_model=metadata_dict['source_model'],\n                  hashed_columns=metadata_dict['hashed_columns'],\n                  derived_columns=metadata_dict['derived_columns'],                  \n                  rsrc=metadata_dict['rsrc'],\n                  ldts=metadata_dict['ldts'],\n                  prejoined_columns=metadata_dict['prejoined_columns'],\n                  multi_active_config=metadata_dict['multi_active_config']) }}\nwhere is_check_ok or rsrc ='SYSTEM'", "language": "sql", "refs": [{"name": "load_webshop_produkt", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.ddvug_willibald_samen.get_dict_hash_value", "macro.datavault4dbt.stage"], "nodes": ["model.ddvug_willibald_samen.load_webshop_produkt"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.stg_webshop_kunde": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_03_stage", "name": "stg_webshop_kunde", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_03_stage/kunde/stg_webshop_kunde.sql", "original_file_path": "models/dwh_03_stage/kunde/stg_webshop_kunde.sql", "unique_id": "model.ddvug_willibald_samen.stg_webshop_kunde", "fqn": ["ddvug_willibald_samen", "dwh_03_stage", "kunde", "stg_webshop_kunde"], "alias": "stg_webshop_kunde", "checksum": {"name": "sha256", "checksum": "5916e6303680d04397936c2a7a777d3e9ed3faa4fd44342841543953f9b1a4bf"}, "config": {"enabled": true, "alias": null, "schema": "dwh_03_stage", "database": null, "tags": ["stage"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["stage"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_03_stage", "tags": ["stage"], "materialized": "view"}, "created_at": 1743626379.645833, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_kunde", "raw_code": "{# template stage Version:0.1.1 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='view') }}\n{%- set unknown_key = get_dict_hash_value(\"unknown_key\") -%}\n{%- set error_key = get_dict_hash_value(\"error_key\") -%}\n\n{%- set yaml_metadata -%}\nsource_model: \n  'load_webshop_kunde'\nhashed_columns:\n  HK_ASSOCIATIONPARTNER_H:\n    - VEREINSPARTNERID\n  HK_CUSTOMER_H:\n    - KUNDEID\n  HK_CUSTOMER_ASSOCIATIONPARTNER_L:\n    - CUSTOMER_BK\n    - ASSOCIATIONPARTNER_BK\n  HD_CUSTOMER_WS_S:\n    is_hashdiff: true\n    columns:\n      - EMAIL\n      - GEBURTSDATUM\n      - GESCHLECHT\n      - GUELTIGBIS\n      - KKFIRMA\n      - KREDITKARTE\n      - MOBIL\n      - NAME\n      - TELEFON\n      - VORNAME\n\n\n\n\nderived_columns:\n    ASSOCIATIONPARTNER_BK:\n      value: VEREINSPARTNERID\n      datatype: 'VARCHAR'\n    CUSTOMER_BK:\n      value: KUNDEID\n      datatype: 'VARCHAR'\n\n    CDTS:\n      value: {{var(\"local_timestamp\")}}\n      datatype: 'TIMESTAMP'\n    EDTS:      \n      value: EDTS_IN\n      datatype: 'DATE'\n\nrsrc: 'RSRC_SOURCE' \nldts: 'LDTS_SOURCE'\ninclude_source_columns: true\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.stage(include_source_columns=metadata_dict['include_source_columns'],\n                  source_model=metadata_dict['source_model'],\n                  hashed_columns=metadata_dict['hashed_columns'],\n                  derived_columns=metadata_dict['derived_columns'],                  \n                  rsrc=metadata_dict['rsrc'],\n                  ldts=metadata_dict['ldts'],\n                  prejoined_columns=metadata_dict['prejoined_columns'],\n                  multi_active_config=metadata_dict['multi_active_config']) }}\nwhere is_check_ok or rsrc ='SYSTEM'", "language": "sql", "refs": [{"name": "load_webshop_kunde", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.ddvug_willibald_samen.get_dict_hash_value", "macro.datavault4dbt.stage"], "nodes": ["model.ddvug_willibald_samen.load_webshop_kunde"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.stg_webshop_ref_produkt_typ": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_03_stage", "name": "stg_webshop_ref_produkt_typ", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_03_stage/_not_dataspot_sourced/stg_webshop_ref_produkt_typ.sql", "original_file_path": "models/dwh_03_stage/_not_dataspot_sourced/stg_webshop_ref_produkt_typ.sql", "unique_id": "model.ddvug_willibald_samen.stg_webshop_ref_produkt_typ", "fqn": ["ddvug_willibald_samen", "dwh_03_stage", "_not_dataspot_sourced", "stg_webshop_ref_produkt_typ"], "alias": "stg_webshop_ref_produkt_typ", "checksum": {"name": "sha256", "checksum": "c8b76a1bc4f226d4554744cfcb30aa582e7233714759d24b43429ed982bc304f"}, "config": {"enabled": true, "alias": null, "schema": "dwh_03_stage", "database": null, "tags": ["stage"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["stage"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_03_stage", "tags": ["stage"], "materialized": "view"}, "created_at": 1743626379.660641, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_ref_produkt_typ", "raw_code": "{{ config(materialized='view') }}\n{%- set unknown_key = get_dict_hash_value(\"unknown_key\") -%}\n{%- set error_key = get_dict_hash_value(\"error_key\") -%}\n\n{%- set yaml_metadata -%}\nsource_model: load_webshop_ref_produkt_typ\nldts: 'LDTS_SOURCE'\nrsrc: 'RSRC_SOURCE'\nderived_columns:\n    CDTS:\n        value: {{var(\"local_timestamp\")}}\n        datatype: 'TIMESTAMP'        \n    PRODUCT_TYPE_NK:\n        value: typ::string\n        datatype: 'VARCHAR' \n    EDTS:      \n        value: edts_in\n        datatype: 'DATE'   \n\nhashed_columns:\n    HD_PRODUCT_TYPE_WS_RS:\n        is_hashdiff: true\n        columns:\n            - 'BEZEICHNUNG'            \n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set source_model = metadata_dict['source_model'] -%}\n{%- set ldts = metadata_dict['ldts'] -%}\n{%- set rsrc = metadata_dict['rsrc'] -%}\n{%- set hashed_columns = metadata_dict['hashed_columns'] -%}\n{%- set derived_columns = metadata_dict['derived_columns'] -%}\n{%- set prejoined_columns = metadata_dict['prejoined_columns'] -%}\n{%- set missing_columns = metadata_dict['missing_columns'] -%}\n{%- set multi_active_config = metadata_dict['multi_active_config'] -%}\n\n\n{{ datavault4dbt.stage(source_model=source_model,\n                    ldts=ldts,\n                    rsrc=rsrc,\n                    hashed_columns=hashed_columns,\n                    derived_columns=derived_columns,\n                    multi_active_config=multi_active_config) }}\nwhere is_check_ok or (typ in ('{{ unknown_key }}'::string, '{{ error_key }}'::string) )", "language": "sql", "refs": [{"name": "load_webshop_ref_produkt_typ", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.ddvug_willibald_samen.get_dict_hash_value", "macro.datavault4dbt.stage"], "nodes": ["model.ddvug_willibald_samen.load_webshop_ref_produkt_typ"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.stg_webshop_lieferung": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_03_stage", "name": "stg_webshop_lieferung", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_03_stage/lieferung/stg_webshop_lieferung.sql", "original_file_path": "models/dwh_03_stage/lieferung/stg_webshop_lieferung.sql", "unique_id": "model.ddvug_willibald_samen.stg_webshop_lieferung", "fqn": ["ddvug_willibald_samen", "dwh_03_stage", "lieferung", "stg_webshop_lieferung"], "alias": "stg_webshop_lieferung", "checksum": {"name": "sha256", "checksum": "0915b2e56267f26315ff1e5e4da33005a874a5f18c00fb7b80c64103e8e351f2"}, "config": {"enabled": true, "alias": null, "schema": "dwh_03_stage", "database": null, "tags": ["stage"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["stage"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_03_stage", "tags": ["stage"], "materialized": "view"}, "created_at": 1743626379.6710799, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_lieferung", "raw_code": "{# template stage Version:0.1.1 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='view') }}\n{%- set unknown_key = get_dict_hash_value(\"unknown_key\") -%}\n{%- set error_key = get_dict_hash_value(\"error_key\") -%}\n\n{%- set yaml_metadata -%}\nsource_model: \n  'load_webshop_lieferung'\nhashed_columns:\n  HK_DELIVERYADRESS_H:\n    - LIEFERADRID\n  HK_DELIVERYSERVICE_H:\n    - LIEFERDIENSTID\n  HK_ORDER_H:\n    - BESTELLUNGID\n  HK_POSITION_H:\n    - BESTELLUNGID\n    - POSID\n  HK_ORDER_POSITION_L:\n    - POSITION_BK\n    - ORDER_BK\n  HK_DELIVERY_L:\n    - LIEFERADRID\n    - LIEFERDIENSTID\n    - BESTELLUNGID\n    - BESTELLUNGID\n    - POSID\n  HD_POSITION_WS_S:\n    is_hashdiff: true\n    columns:\n      - BESTELLUNGID\n      - POSID\n\n\n\n\nderived_columns:\n    DELIVERYADRESS_BK:\n      value: LIEFERADRID\n      datatype: 'VARCHAR'\n    DELIVERYSERVICE_BK:\n      value: LIEFERDIENSTID\n      datatype: 'VARCHAR'\n    ORDER_BK:\n      value: BESTELLUNGID\n      datatype: 'VARCHAR'\n    POSITION_BK:\n      value: BESTELLUNGID||'_'||POSID\n      datatype: 'VARCHAR'\n\n    CDTS:\n      value: {{var(\"local_timestamp\")}}\n      datatype: 'TIMESTAMP'\n    EDTS:      \n      value: EDTS_IN\n      datatype: 'DATE'\n\nrsrc: 'RSRC_SOURCE' \nldts: 'LDTS_SOURCE'\ninclude_source_columns: true\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.stage(include_source_columns=metadata_dict['include_source_columns'],\n                  source_model=metadata_dict['source_model'],\n                  hashed_columns=metadata_dict['hashed_columns'],\n                  derived_columns=metadata_dict['derived_columns'],                  \n                  rsrc=metadata_dict['rsrc'],\n                  ldts=metadata_dict['ldts'],\n                  prejoined_columns=metadata_dict['prejoined_columns'],\n                  multi_active_config=metadata_dict['multi_active_config']) }}\nwhere is_check_ok or rsrc ='SYSTEM'", "language": "sql", "refs": [{"name": "load_webshop_lieferung", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.ddvug_willibald_samen.get_dict_hash_value", "macro.datavault4dbt.stage"], "nodes": ["model.ddvug_willibald_samen.load_webshop_lieferung"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.stg_webshop_produktkategorie": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_03_stage", "name": "stg_webshop_produktkategorie", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_03_stage/produktkategorie/stg_webshop_produktkategorie.sql", "original_file_path": "models/dwh_03_stage/produktkategorie/stg_webshop_produktkategorie.sql", "unique_id": "model.ddvug_willibald_samen.stg_webshop_produktkategorie", "fqn": ["ddvug_willibald_samen", "dwh_03_stage", "produktkategorie", "stg_webshop_produktkategorie"], "alias": "stg_webshop_produktkategorie", "checksum": {"name": "sha256", "checksum": "55b5904a9affa76fed9ba1d8beaceb94cba70c837dd3348cbeb61ee638c1b705"}, "config": {"enabled": true, "alias": null, "schema": "dwh_03_stage", "database": null, "tags": ["stage"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["stage"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_03_stage", "tags": ["stage"], "materialized": "view"}, "created_at": 1743626379.689656, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_produktkategorie", "raw_code": "{# template stage Version:0.1.1 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='view') }}\n{%- set unknown_key = get_dict_hash_value(\"unknown_key\") -%}\n{%- set error_key = get_dict_hash_value(\"error_key\") -%}\n\n{%- set yaml_metadata -%}\nsource_model: \n  'load_webshop_produktkategorie'\nhashed_columns:\n  HK_PRODUCTCATEGORY_H:\n    - KATID\n  HK_PRODUCTCATEGORY_PARENT_H:\n    - OBERKATID\n  HK_PRODUCTCATEGORY_HIERARCHY_L:\n    - PRODUCTCATEGORY_PARENT_BK\n    - PRODUCTCATEGORY_BK\n  HD_PRODUCTCATEGORY_WS_S:\n    is_hashdiff: true\n    columns:\n      - NAME\n\n\n\n\nderived_columns:\n    PRODUCTCATEGORY_BK:\n      value: KATID\n      datatype: 'VARCHAR'\n    PRODUCTCATEGORY_PARENT_BK:\n      value: OBERKATID\n      datatype: 'VARCHAR'\n\n    CDTS:\n      value: {{var(\"local_timestamp\")}}\n      datatype: 'TIMESTAMP'\n    EDTS:      \n      value: EDTS_IN\n      datatype: 'DATE'\n\nrsrc: 'RSRC_SOURCE' \nldts: 'LDTS_SOURCE'\ninclude_source_columns: true\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.stage(include_source_columns=metadata_dict['include_source_columns'],\n                  source_model=metadata_dict['source_model'],\n                  hashed_columns=metadata_dict['hashed_columns'],\n                  derived_columns=metadata_dict['derived_columns'],                  \n                  rsrc=metadata_dict['rsrc'],\n                  ldts=metadata_dict['ldts'],\n                  prejoined_columns=metadata_dict['prejoined_columns'],\n                  multi_active_config=metadata_dict['multi_active_config']) }}\nwhere is_check_ok or rsrc ='SYSTEM'", "language": "sql", "refs": [{"name": "load_webshop_produktkategorie", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.ddvug_willibald_samen.get_dict_hash_value", "macro.datavault4dbt.stage"], "nodes": ["model.ddvug_willibald_samen.load_webshop_produktkategorie"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.stg_webshop_lieferdienst": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_03_stage", "name": "stg_webshop_lieferdienst", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_03_stage/lieferdienst/stg_webshop_lieferdienst.sql", "original_file_path": "models/dwh_03_stage/lieferdienst/stg_webshop_lieferdienst.sql", "unique_id": "model.ddvug_willibald_samen.stg_webshop_lieferdienst", "fqn": ["ddvug_willibald_samen", "dwh_03_stage", "lieferdienst", "stg_webshop_lieferdienst"], "alias": "stg_webshop_lieferdienst", "checksum": {"name": "sha256", "checksum": "e2c35643b2f1e6459d0b964d61edf202c28fb8c6ca77d882e098bae14f826662"}, "config": {"enabled": true, "alias": null, "schema": "dwh_03_stage", "database": null, "tags": ["stage"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["stage"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_03_stage", "tags": ["stage"], "materialized": "view"}, "created_at": 1743626379.703288, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_lieferdienst", "raw_code": "{# template stage Version:0.1.1 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='view') }}\n{%- set unknown_key = get_dict_hash_value(\"unknown_key\") -%}\n{%- set error_key = get_dict_hash_value(\"error_key\") -%}\n\n{%- set yaml_metadata -%}\nsource_model: \n  'load_webshop_lieferdienst'\nhashed_columns:\n  HK_DELIVERYSERVICE_H:\n    - LIEFERDIENSTID\n  HD_DELIVERYSERVICE_WS_S:\n    is_hashdiff: true\n    columns:\n      - EMAIL\n      - FAX\n      - HAUSNUMMER\n      - LAND\n      - NAME\n      - ORT\n      - PLZ\n      - STRASSE\n      - TELEFON\n\n\n\n\nderived_columns:\n    DELIVERYSERVICE_BK:\n      value: LIEFERDIENSTID\n      datatype: 'VARCHAR'\n\n    CDTS:\n      value: {{var(\"local_timestamp\")}}\n      datatype: 'TIMESTAMP'\n    EDTS:      \n      value: EDTS_IN\n      datatype: 'DATE'\n\nrsrc: 'RSRC_SOURCE' \nldts: 'LDTS_SOURCE'\ninclude_source_columns: true\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.stage(include_source_columns=metadata_dict['include_source_columns'],\n                  source_model=metadata_dict['source_model'],\n                  hashed_columns=metadata_dict['hashed_columns'],\n                  derived_columns=metadata_dict['derived_columns'],                  \n                  rsrc=metadata_dict['rsrc'],\n                  ldts=metadata_dict['ldts'],\n                  prejoined_columns=metadata_dict['prejoined_columns'],\n                  multi_active_config=metadata_dict['multi_active_config']) }}\nwhere is_check_ok or rsrc ='SYSTEM'", "language": "sql", "refs": [{"name": "load_webshop_lieferdienst", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.ddvug_willibald_samen.get_dict_hash_value", "macro.datavault4dbt.stage"], "nodes": ["model.ddvug_willibald_samen.load_webshop_lieferdienst"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.control_snap_v0": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_03_stage", "name": "control_snap_v0", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_03_stage/snap_tables/control_snap_v0.sql", "original_file_path": "models/dwh_03_stage/snap_tables/control_snap_v0.sql", "unique_id": "model.ddvug_willibald_samen.control_snap_v0", "fqn": ["ddvug_willibald_samen", "dwh_03_stage", "snap_tables", "control_snap_v0"], "alias": "control_snap_v0", "checksum": {"name": "sha256", "checksum": "1e2b008a3fb9286833f2462658edf136dac6ddd8c3f772476aa8eff07ee2c8c1"}, "config": {"enabled": true, "alias": null, "schema": "dwh_03_stage", "database": null, "tags": ["stage"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["stage"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_03_stage", "tags": ["stage"], "materialized": "incremental"}, "created_at": 1743626379.737887, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.control_snap_v0", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nstart_date: '2022-01-01'\ndaily_snapshot_time: '23:59:59'\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set start_date = metadata_dict['start_date'] -%}\n{%- set daily_snapshot_time = metadata_dict['daily_snapshot_time'] -%}\n\n\nwith s0data as\n(\n{{ datavault4dbt.control_snap_v0(start_date=start_date,\n                                daily_snapshot_time=daily_snapshot_time\n                                ) }} \n)\nselect    date_trunc(day, sdts) as replacement_sdts\n        , * exclude replacement_sdts\n       \nfrom s0data                               \nwhere sdts  < dateadd(day, 1, date_trunc(day, sysdate()))", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.control_snap_v0"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.control_snap_v1": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_03_stage", "name": "control_snap_v1", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_03_stage/snap_tables/control_snap_v1.sql", "original_file_path": "models/dwh_03_stage/snap_tables/control_snap_v1.sql", "unique_id": "model.ddvug_willibald_samen.control_snap_v1", "fqn": ["ddvug_willibald_samen", "dwh_03_stage", "snap_tables", "control_snap_v1"], "alias": "control_snap_v1", "checksum": {"name": "sha256", "checksum": "2eab6807d12292237328634c662e40317d7a775f9d251a7b6cbc9814ead9c5be"}, "config": {"enabled": true, "alias": null, "schema": "dwh_03_stage", "database": null, "tags": ["stage"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["stage"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_03_stage", "tags": ["stage"], "materialized": "view"}, "created_at": 1743626379.742678, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.control_snap_v1", "raw_code": "{{ config(materialized='view') }}\n\n{%- set yaml_metadata -%}\ncontrol_snap_v0: 'control_snap_v0'\nlog_logic: \n    daily:\n        duration: 7\n        unit: 'DAY'\n    weekly:\n        duration: 0\n        unit: 'YEAR'\n    monthly:\n        duration: 1\n        unit: 'YEAR'\n    yearly:\n        forever: true\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set control_snap_v0 = metadata_dict['control_snap_v0'] -%}\n{%- set log_logic = metadata_dict['log_logic'] -%}\nwith control_snap_v1 as\n(\n{{ datavault4dbt.control_snap_v1(control_snap_v0=control_snap_v0,\n                                log_logic=log_logic) }}\n),\nload_sdts as\n(\n    select sdts, \n            max(sdts) over () = sdts as is_latest\n    from {{ ref('load_sdts') }}\n),\ncte_esdts as\n(\n    select * \n        , COALESCE(LEAD(replacement_sdts - INTERVAL '1 MICROSECOND') OVER ( ORDER BY  replacement_sdts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS replacement_esdts\n    from control_snap_v1\n)\nselect    cte_esdts.* exclude (is_latest, is_active)  \n        , l.is_latest\n        , true as is_active\nfrom load_sdts l\nleft join cte_esdts\n    on l.sdts between cte_esdts.replacement_sdts and cte_esdts.replacement_esdts", "language": "sql", "refs": [{"name": "control_snap_v0", "package": null, "version": null}, {"name": "load_sdts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.control_snap_v1"], "nodes": ["model.ddvug_willibald_samen.control_snap_v0", "model.ddvug_willibald_samen.load_sdts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.stg_roadshow_bestellung": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_03_stage", "name": "stg_roadshow_bestellung", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_03_stage/bestellung/stg_roadshow_bestellung.sql", "original_file_path": "models/dwh_03_stage/bestellung/stg_roadshow_bestellung.sql", "unique_id": "model.ddvug_willibald_samen.stg_roadshow_bestellung", "fqn": ["ddvug_willibald_samen", "dwh_03_stage", "bestellung", "stg_roadshow_bestellung"], "alias": "stg_roadshow_bestellung", "checksum": {"name": "sha256", "checksum": "eadd9420ec5afe7bfb2254b8842b002b548297f493b5563ac33fcd76f9aa2ae2"}, "config": {"enabled": true, "alias": null, "schema": "dwh_03_stage", "database": null, "tags": ["stage"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["stage"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_03_stage", "tags": ["stage"], "materialized": "view"}, "created_at": 1743626379.751797, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_roadshow_bestellung", "raw_code": "{# template stage Version:0.1.1 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='view') }}\n{%- set unknown_key = get_dict_hash_value(\"unknown_key\") -%}\n{%- set error_key = get_dict_hash_value(\"error_key\") -%}\n\n{%- set yaml_metadata -%}\nsource_model: \n  'load_roadshow_bestellung'\nhashed_columns:\n  HK_ASSOCIATIONPARTNER_H:\n    - VEREINSPARTNERID\n  HK_CUSTOMER_H:\n    - KUNDEID\n  HK_ORDER_H:\n    - BESTELLUNGID\n  HK_POSITION_H:\n    - BESTELLUNGID\n    - PRODUKTID\n  HK_PRODUCT_H:\n    - PRODUKTID\n  HK_ORDER_ASSOCIATIONPARTNER_L:\n    - ORDER_BK\n    - ASSOCIATIONPARTNER_BK\n  HK_ORDER_CUSTOMER_L:\n    - ORDER_BK\n    - CUSTOMER_BK\n  HK_ORDER_POSITION_L:\n    - POSITION_BK\n    - ORDER_BK\n  HK_POSITION_PRODUCT_L:\n    - PRODUCT_BK\n    - POSITION_BK\n  HD_POSITION_RS_S:\n    is_hashdiff: true\n    columns:\n      - BESTELLUNGID\n      - GUELTIGBIS\n      - KAUFDATUM\n      - KKFIRMA\n      - KREDITKARTE\n      - MENGE\n      - PREIS\n      - PRODUKTID\n      - RABATT\n\n\n\n\nderived_columns:\n    ASSOCIATIONPARTNER_BK:\n      value: VEREINSPARTNERID\n      datatype: 'VARCHAR'\n    CUSTOMER_BK:\n      value: KUNDEID\n      datatype: 'VARCHAR'\n    ORDER_BK:\n      value: BESTELLUNGID\n      datatype: 'VARCHAR'\n    POSITION_BK:\n      value: CAST(BESTELLUNGID ||'_'|| PRODUKTID ||'_'|| CAST(ROW_NUMBER() OVER (PARTITION BY LDTS, BESTELLUNGID, PRODUKTID  ORDER BY MENGE, PREIS) AS VARCHAR) AS VARCHAR)\n      datatype: 'VARCHAR'\n    PRODUCT_BK:\n      value: PRODUKTID\n      datatype: 'VARCHAR'\n\n    CDTS:\n      value: {{var(\"local_timestamp\")}}\n      datatype: 'TIMESTAMP'\n    EDTS:      \n      value: EDTS_IN\n      datatype: 'DATE'\n\nrsrc: 'RSRC_SOURCE' \nldts: 'LDTS_SOURCE'\ninclude_source_columns: true\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.stage(include_source_columns=metadata_dict['include_source_columns'],\n                  source_model=metadata_dict['source_model'],\n                  hashed_columns=metadata_dict['hashed_columns'],\n                  derived_columns=metadata_dict['derived_columns'],                  \n                  rsrc=metadata_dict['rsrc'],\n                  ldts=metadata_dict['ldts'],\n                  prejoined_columns=metadata_dict['prejoined_columns'],\n                  multi_active_config=metadata_dict['multi_active_config']) }}\nwhere is_check_ok or rsrc ='SYSTEM'", "language": "sql", "refs": [{"name": "load_roadshow_bestellung", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.ddvug_willibald_samen.get_dict_hash_value", "macro.datavault4dbt.stage"], "nodes": ["model.ddvug_willibald_samen.load_roadshow_bestellung"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.stg_webshop_bestellung": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_03_stage", "name": "stg_webshop_bestellung", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_03_stage/bestellung/stg_webshop_bestellung.sql", "original_file_path": "models/dwh_03_stage/bestellung/stg_webshop_bestellung.sql", "unique_id": "model.ddvug_willibald_samen.stg_webshop_bestellung", "fqn": ["ddvug_willibald_samen", "dwh_03_stage", "bestellung", "stg_webshop_bestellung"], "alias": "stg_webshop_bestellung", "checksum": {"name": "sha256", "checksum": "d213e0c3f004c81cc89989628724a5222a8b88a036aedc6bb16931f11e52c034"}, "config": {"enabled": true, "alias": null, "schema": "dwh_03_stage", "database": null, "tags": ["stage"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["stage"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_03_stage", "tags": ["stage"], "materialized": "view"}, "created_at": 1743626379.774762, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_bestellung", "raw_code": "{# template stage Version:0.1.1 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='view') }}\n{%- set unknown_key = get_dict_hash_value(\"unknown_key\") -%}\n{%- set error_key = get_dict_hash_value(\"error_key\") -%}\n\n{%- set yaml_metadata -%}\nsource_model: \n  'load_webshop_bestellung'\nhashed_columns:\n  HK_CUSTOMER_H:\n    - KUNDEID\n  HK_ORDER_H:\n    - BESTELLUNGID\n  HK_ORDER_CUSTOMER_L:\n    - ORDER_BK\n    - CUSTOMER_BK\n  HD_ORDER_WS_S:\n    is_hashdiff: true\n    columns:\n      - ALLGLIEFERADRID\n      - BESTELLDATUM\n      - RABATT\n      - WUNSCHDATUM\n\n\n\n\nderived_columns:\n    CUSTOMER_BK:\n      value: KUNDEID\n      datatype: 'VARCHAR'\n    ORDER_BK:\n      value: BESTELLUNGID\n      datatype: 'VARCHAR'\n\n    CDTS:\n      value: {{var(\"local_timestamp\")}}\n      datatype: 'TIMESTAMP'\n    EDTS:      \n      value: EDTS_IN\n      datatype: 'DATE'\n\nrsrc: 'RSRC_SOURCE' \nldts: 'LDTS_SOURCE'\ninclude_source_columns: true\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.stage(include_source_columns=metadata_dict['include_source_columns'],\n                  source_model=metadata_dict['source_model'],\n                  hashed_columns=metadata_dict['hashed_columns'],\n                  derived_columns=metadata_dict['derived_columns'],                  \n                  rsrc=metadata_dict['rsrc'],\n                  ldts=metadata_dict['ldts'],\n                  prejoined_columns=metadata_dict['prejoined_columns'],\n                  multi_active_config=metadata_dict['multi_active_config']) }}\nwhere is_check_ok or rsrc ='SYSTEM'", "language": "sql", "refs": [{"name": "load_webshop_bestellung", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.ddvug_willibald_samen.get_dict_hash_value", "macro.datavault4dbt.stage"], "nodes": ["model.ddvug_willibald_samen.load_webshop_bestellung"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.stg_webshop_vereinspartner": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_03_stage", "name": "stg_webshop_vereinspartner", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_03_stage/vereinspartner/stg_webshop_vereinspartner.sql", "original_file_path": "models/dwh_03_stage/vereinspartner/stg_webshop_vereinspartner.sql", "unique_id": "model.ddvug_willibald_samen.stg_webshop_vereinspartner", "fqn": ["ddvug_willibald_samen", "dwh_03_stage", "vereinspartner", "stg_webshop_vereinspartner"], "alias": "stg_webshop_vereinspartner", "checksum": {"name": "sha256", "checksum": "0c1d8b38544d55418f2ec371cc930a643e62b03da8ddc669fa7cbcc27fcb8688"}, "config": {"enabled": true, "alias": null, "schema": "dwh_03_stage", "database": null, "tags": ["stage"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["stage"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_03_stage", "tags": ["stage"], "materialized": "view"}, "created_at": 1743626379.788963, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_vereinspartner", "raw_code": "{# template stage Version:0.1.1 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='view') }}\n{%- set unknown_key = get_dict_hash_value(\"unknown_key\") -%}\n{%- set error_key = get_dict_hash_value(\"error_key\") -%}\n\n{%- set yaml_metadata -%}\nsource_model: \n  'load_webshop_vereinspartner'\nhashed_columns:\n  HK_ASSOCIATIONPARTNER_H:\n    - VEREINSPARTNERID\n  HK_CUSTOMER_H:\n    - KUNDEIDVEREIN\n  HK_ASSOCIATIONPARTNER_CUSTOMER_L:\n    - CUSTOMER_BK\n    - ASSOCIATIONPARTNER_BK\n  HD_ASSOCIATIONPARTNER_WS_S:\n    is_hashdiff: true\n    columns:\n      - KUNDEIDVEREIN\n      - RABATT1\n      - RABATT2\n      - RABATT3\n\n\n\n\nderived_columns:\n    ASSOCIATIONPARTNER_BK:\n      value: VEREINSPARTNERID\n      datatype: 'VARCHAR'\n    CUSTOMER_BK:\n      value: KUNDEIDVEREIN\n      datatype: 'VARCHAR'\n\n    CDTS:\n      value: {{var(\"local_timestamp\")}}\n      datatype: 'TIMESTAMP'\n    EDTS:      \n      value: EDTS_IN\n      datatype: 'DATE'\n\nrsrc: 'RSRC_SOURCE' \nldts: 'LDTS_SOURCE'\ninclude_source_columns: true\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.stage(include_source_columns=metadata_dict['include_source_columns'],\n                  source_model=metadata_dict['source_model'],\n                  hashed_columns=metadata_dict['hashed_columns'],\n                  derived_columns=metadata_dict['derived_columns'],                  \n                  rsrc=metadata_dict['rsrc'],\n                  ldts=metadata_dict['ldts'],\n                  prejoined_columns=metadata_dict['prejoined_columns'],\n                  multi_active_config=metadata_dict['multi_active_config']) }}\nwhere is_check_ok or rsrc ='SYSTEM'", "language": "sql", "refs": [{"name": "load_webshop_vereinspartner", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.ddvug_willibald_samen.get_dict_hash_value", "macro.datavault4dbt.stage"], "nodes": ["model.ddvug_willibald_samen.load_webshop_vereinspartner"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.load_misc_kategorie_termintreue": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_02_load", "name": "load_misc_kategorie_termintreue", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_02_load/load_misc_kategorie_termintreue.sql", "original_file_path": "models/dwh_02_load/load_misc_kategorie_termintreue.sql", "unique_id": "model.ddvug_willibald_samen.load_misc_kategorie_termintreue", "fqn": ["ddvug_willibald_samen", "dwh_02_load", "load_misc_kategorie_termintreue"], "alias": "load_misc_kategorie_termintreue", "checksum": {"name": "sha256", "checksum": "56312eedba37a298a808e62c2ac1b4d81b0d8128861aab5d1f92e63848cc3acb"}, "config": {"enabled": true, "alias": null, "schema": "dwh_02_load", "database": null, "tags": ["load"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "{{ datavault_extension.insert_hwm(this,'ldts_source') }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_MISC_KATEGORIE_TERMINTREUE','snowflake_external_table') }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["load"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_02_load", "tags": ["load"], "materialized": "table", "pre-hook": ["{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_MISC_KATEGORIE_TERMINTREUE','snowflake_external_table') }}"], "post-hook": ["{{ datavault_extension.insert_hwm(this,'ldts_source') }}"]}, "created_at": 1743626379.803217, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_misc_kategorie_termintreue", "raw_code": "{{ config(materialized=\"table\", pre_hook=[\"{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_MISC_KATEGORIE_TERMINTREUE','snowflake_external_table') }}\"], post_hook=[\"{{ datavault_extension.insert_hwm(this,'ldts_source') }}\"]) }}\n\n{%- set yaml_metadata -%}\nsource_model: \n  source_table: EXT_MISC_KATEGORIE_TERMINTREUE\n  source_database: WILLIBALD_DATA_VAULT_WITH_DBT\n  source_name: LOAD_EXT\nhwm: True\nsource_type: snowflake_external_table\ndub_check:\n- ldts_source\n- bewertung\n\nkey_check:\n- bewertung\n\ncolumns:\n    anzahl_tage_von:\n      data_type: VARCHAR\n      source_column_number: 1\n    anzahl_tage_bis:\n      data_type: VARCHAR\n      source_column_number: 2\n    bezeichnung:\n      data_type: VARCHAR\n      source_column_number: 3\n    bewertung:\n      data_type: VARCHAR\n      source_column_number: 4\n\ndefault_columns:\n    ldts_source:\n      data_type: TIMESTAMP\n      format: YYYYMMDD_HH24MISS\n      type_check: True\n      value: replace(right(filenamedate,19),'.csv','')\n    rsrc_source:\n      data_type: VARCHAR\n      value: filenamedate\n\nadditional_columns:\n    edts_in:\n      data_type: DATE\n      format: YYYYMMDD\n      type_check: True\n      value: trim(reverse(substring(reverse(replace(filenamedate,'.csv','')), 17,8))::varchar)\n    raw_data:\n      data_type: VARCHAR\n      value: value\n    row_number:\n      data_type: NUMBER\n      type_check: True\n      value: metadata$file_row_number\n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set source_model = metadata_dict['source_model'] -%}\n{%- set default_columns = metadata_dict['default_columns'] -%}\n{%- set additional_columns = metadata_dict['additional_columns'] -%}\n{%- set key_check = metadata_dict['key_check'] -%}\n{%- set dub_check = metadata_dict['dub_check'] -%}\n\n{%- set hwm = metadata_dict['hwm'] -%}\n{%- set sourcetype = metadata_dict['sourcetype'] -%}\n{%- set columns = metadata_dict['columns'] -%}\n\n{{ datavault_extension.load(source_model=source_model\n                    , default_columns=default_columns\n                    , additional_columns=additional_columns\n                    , key_check=key_check\n                    , dub_check=dub_check\n                    , hwm=hwm\n                    , sourcetype=sourcetype\n                    , columns=columns\n                    ) }}", "language": "sql", "refs": [], "sources": [["LOAD_EXT_META", "META_HWM"], ["LOAD_EXT", "EXT_MISC_KATEGORIE_TERMINTREUE"], ["LOAD_EXT_META", "META_HWM"]], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.load", "macro.datavault_extension.refresh_external_table", "macro.datavault_extension.insert_hwm"], "nodes": ["source.ddvug_willibald_samen.LOAD_EXT_META.META_HWM", "source.ddvug_willibald_samen.LOAD_EXT.EXT_MISC_KATEGORIE_TERMINTREUE"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.load_webshop_position": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_02_load", "name": "load_webshop_position", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_02_load/load_webshop_position.sql", "original_file_path": "models/dwh_02_load/load_webshop_position.sql", "unique_id": "model.ddvug_willibald_samen.load_webshop_position", "fqn": ["ddvug_willibald_samen", "dwh_02_load", "load_webshop_position"], "alias": "load_webshop_position", "checksum": {"name": "sha256", "checksum": "c90295b92497826cf09d2b85388b5d7548abb10f315c780ad0d9041dcbc59b03"}, "config": {"enabled": true, "alias": null, "schema": "dwh_02_load", "database": null, "tags": ["load"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "{{ datavault_extension.insert_hwm(this,'ldts_source') }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_POSITION','snowflake_external_table') }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["load"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_02_load", "tags": ["load"], "materialized": "table", "pre-hook": ["{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_POSITION','snowflake_external_table') }}"], "post-hook": ["{{ datavault_extension.insert_hwm(this,'ldts_source') }}"]}, "created_at": 1743626379.84028, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_position", "raw_code": "{{ config(materialized=\"table\", pre_hook=[\"{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_POSITION','snowflake_external_table') }}\"], post_hook=[\"{{ datavault_extension.insert_hwm(this,'ldts_source') }}\"]) }}\n\n{%- set yaml_metadata -%}\nsource_model: \n  source_table: EXT_WEBSHOP_POSITION\n  source_database: WILLIBALD_DATA_VAULT_WITH_DBT\n  source_name: LOAD_EXT\nhwm: True\nsource_type: snowflake_external_table\ndub_check:\n- ldts_source\n- bestellungid\n- PosID\n\nkey_check:\n- bestellungid\n- PosID\n\ncolumns:\n    bestellungid:\n      data_type: VARCHAR\n      source_column_number: 1\n    posid:\n      data_type: VARCHAR\n      source_column_number: 2\n    produktid:\n      data_type: VARCHAR\n      source_column_number: 3\n    spezlieferadrid:\n      data_type: NUMBER\n      source_column_number: 4\n      type_check: True\n    menge:\n      data_type: NUMBER\n      source_column_number: 5\n      type_check: True\n    preis:\n      data_type: VARCHAR\n      source_column_number: 6\n\ndefault_columns:\n    ldts_source:\n      data_type: TIMESTAMP\n      format: YYYYMMDD_HH24MISS\n      type_check: True\n      value: replace(right(filenamedate,19),'.csv','')\n    rsrc_source:\n      data_type: VARCHAR\n      value: filenamedate\n\nadditional_columns:\n    edts_in:\n      data_type: DATE\n      format: YYYYMMDD\n      type_check: True\n      value: trim(reverse(substring(reverse(replace(filenamedate,'.csv','')), 17,8))::varchar)\n    raw_data:\n      data_type: VARCHAR\n      value: value\n    row_number:\n      data_type: NUMBER\n      type_check: True\n      value: metadata$file_row_number\n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set source_model = metadata_dict['source_model'] -%}\n{%- set default_columns = metadata_dict['default_columns'] -%}\n{%- set additional_columns = metadata_dict['additional_columns'] -%}\n{%- set key_check = metadata_dict['key_check'] -%}\n{%- set dub_check = metadata_dict['dub_check'] -%}\n\n{%- set hwm = metadata_dict['hwm'] -%}\n{%- set sourcetype = metadata_dict['sourcetype'] -%}\n{%- set columns = metadata_dict['columns'] -%}\n\n{{ datavault_extension.load(source_model=source_model\n                    , default_columns=default_columns\n                    , additional_columns=additional_columns\n                    , key_check=key_check\n                    , dub_check=dub_check\n                    , hwm=hwm\n                    , sourcetype=sourcetype\n                    , columns=columns\n                    ) }}", "language": "sql", "refs": [], "sources": [["LOAD_EXT_META", "META_HWM"], ["LOAD_EXT", "EXT_WEBSHOP_POSITION"], ["LOAD_EXT_META", "META_HWM"]], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.load", "macro.datavault_extension.refresh_external_table", "macro.datavault_extension.insert_hwm"], "nodes": ["source.ddvug_willibald_samen.LOAD_EXT_META.META_HWM", "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_POSITION"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.load_sdts": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_02_load", "name": "load_sdts", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_02_load/load_sdts.sql", "original_file_path": "models/dwh_02_load/load_sdts.sql", "unique_id": "model.ddvug_willibald_samen.load_sdts", "fqn": ["ddvug_willibald_samen", "dwh_02_load", "load_sdts"], "alias": "load_sdts", "checksum": {"name": "sha256", "checksum": "8ba5e2babd7831ea72686d3e176690678e186996bd093d23109783a5687ace0c"}, "config": {"enabled": true, "alias": null, "schema": "dwh_02_load", "database": null, "tags": ["load"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "sdts", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["load"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_02_load", "tags": ["load"], "materialized": "incremental", "incremental_strategy": "delete+insert", "unique_key": "sdts"}, "created_at": 1743626379.847229, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_sdts", "raw_code": "{{ config(materialized=\"incremental\",incremental_strategy='delete+insert',unique_key='sdts') }}\nSELECT  date_trunc(day,ldts_source) as sdts, True as is_active\nFROM {{ ref(\"load_misc_kategorie_termintreue\") }}\nwhere is_check_ok\nUNION \nSELECT date_trunc(day,ldts_source) as sdts, True as is_active\nFROM {{ ref(\"load_roadshow_bestellung\") }}\nwhere is_check_ok\nUNION \nSELECT date_trunc(day,ldts_source) as sdts,True as is_active\nFROM {{ ref(\"load_webshop_bestellung\") }}\nwhere is_check_ok\nUNION \nSELECT date_trunc(day,ldts_source) as sdts, True as is_active\nFROM {{ ref(\"load_webshop_kunde\") }}\nwhere is_check_ok\nUNION \nSELECT date_trunc(day,ldts_source) as sdts, True as is_active\nFROM {{ ref(\"load_webshop_lieferadresse\") }}\nwhere is_check_ok\nUNION \nSELECT date_trunc(day,ldts_source) as sdts, True as is_active\nFROM {{ ref(\"load_webshop_lieferdienst\") }}\nwhere is_check_ok\nUNION \nSELECT date_trunc(day,ldts_source) as sdts, True as is_active\nFROM {{ ref(\"load_webshop_lieferung\") }}\nwhere is_check_ok\nUNION \nSELECT date_trunc(day,ldts_source) as sdts, True as is_active\nFROM {{ ref(\"load_webshop_position\") }}\nwhere is_check_ok\nUNION \nSELECT date_trunc(day,ldts_source) as sdts, True as is_active\nFROM {{ ref(\"load_webshop_produkt\") }}\nwhere is_check_ok\nUNION \nSELECT date_trunc(day,ldts_source) as sdts, True as is_active\nFROM {{ ref(\"load_webshop_produktkategorie\") }}\nwhere is_check_ok\nUNION \nSELECT date_trunc(day,ldts_source) as sdts, True as is_active\nFROM {{ ref(\"load_webshop_ref_produkt_typ\") }}\nwhere is_check_ok\nUNION \nSELECT date_trunc(day,ldts_source) as sdts, True as is_active\nFROM {{ ref(\"load_webshop_vereinspartner\") }}\nwhere is_check_ok\nUNION \nSELECT date_trunc(day,ldts_source) as sdts, True as is_active\nFROM {{ ref(\"load_webshop_wohnort\") }}\nwhere is_check_ok", "language": "sql", "refs": [{"name": "load_misc_kategorie_termintreue", "package": null, "version": null}, {"name": "load_roadshow_bestellung", "package": null, "version": null}, {"name": "load_webshop_bestellung", "package": null, "version": null}, {"name": "load_webshop_kunde", "package": null, "version": null}, {"name": "load_webshop_lieferadresse", "package": null, "version": null}, {"name": "load_webshop_lieferdienst", "package": null, "version": null}, {"name": "load_webshop_lieferung", "package": null, "version": null}, {"name": "load_webshop_position", "package": null, "version": null}, {"name": "load_webshop_produkt", "package": null, "version": null}, {"name": "load_webshop_produktkategorie", "package": null, "version": null}, {"name": "load_webshop_ref_produkt_typ", "package": null, "version": null}, {"name": "load_webshop_vereinspartner", "package": null, "version": null}, {"name": "load_webshop_wohnort", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ddvug_willibald_samen.load_misc_kategorie_termintreue", "model.ddvug_willibald_samen.load_roadshow_bestellung", "model.ddvug_willibald_samen.load_webshop_bestellung", "model.ddvug_willibald_samen.load_webshop_kunde", "model.ddvug_willibald_samen.load_webshop_lieferadresse", "model.ddvug_willibald_samen.load_webshop_lieferdienst", "model.ddvug_willibald_samen.load_webshop_lieferung", "model.ddvug_willibald_samen.load_webshop_position", "model.ddvug_willibald_samen.load_webshop_produkt", "model.ddvug_willibald_samen.load_webshop_produktkategorie", "model.ddvug_willibald_samen.load_webshop_ref_produkt_typ", "model.ddvug_willibald_samen.load_webshop_vereinspartner", "model.ddvug_willibald_samen.load_webshop_wohnort"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.load_roadshow_bestellung": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_02_load", "name": "load_roadshow_bestellung", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_02_load/load_roadshow_bestellung.sql", "original_file_path": "models/dwh_02_load/load_roadshow_bestellung.sql", "unique_id": "model.ddvug_willibald_samen.load_roadshow_bestellung", "fqn": ["ddvug_willibald_samen", "dwh_02_load", "load_roadshow_bestellung"], "alias": "load_roadshow_bestellung", "checksum": {"name": "sha256", "checksum": "6380aa9e0841d2ad8cecf70a1aee80fb805f91a7349f87595c687517f516f358"}, "config": {"enabled": true, "alias": null, "schema": "dwh_02_load", "database": null, "tags": ["load"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "{{ datavault_extension.insert_hwm(this,'ldts_source') }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_ROADSHOW_BESTELLUNG','snowflake_external_table') }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["load"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_02_load", "tags": ["load"], "materialized": "table", "pre-hook": ["{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_ROADSHOW_BESTELLUNG','snowflake_external_table') }}"], "post-hook": ["{{ datavault_extension.insert_hwm(this,'ldts_source') }}"]}, "created_at": 1743626379.848892, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_roadshow_bestellung", "raw_code": "{{ config(materialized=\"table\", pre_hook=[\"{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_ROADSHOW_BESTELLUNG','snowflake_external_table') }}\"], post_hook=[\"{{ datavault_extension.insert_hwm(this,'ldts_source') }}\"]) }}\n\n{%- set yaml_metadata -%}\nsource_model: \n  source_table: EXT_ROADSHOW_BESTELLUNG\n  source_database: WILLIBALD_DATA_VAULT_WITH_DBT\n  source_name: LOAD_EXT\nhwm: True\nsource_type: snowflake_external_table\ndub_check:\n- ldts_source\n- bestellungid\n- produktid\n\nkey_check:\n- bestellungid\n- produktid\n\ncolumns:\n    bestellungid:\n      data_type: VARCHAR\n      source_column_number: 1\n    preis:\n      data_type: NUMBER\n      format: 20,8\n      source_column_number: 10\n      decimal_separator: .\n      type_check: True\n    rabatt:\n      data_type: NUMBER\n      format: 20,8\n      source_column_number: 11\n      decimal_separator: .\n      type_check: True\n    kundeid:\n      data_type: VARCHAR\n      source_column_number: 2\n    vereinspartnerid:\n      data_type: VARCHAR\n      source_column_number: 3\n    kaufdatum:\n      data_type: DATE\n      format: DD.MM.YYYY\n      source_column_number: 4\n      type_check: True\n    kreditkarte:\n      data_type: VARCHAR\n      source_column_number: 5\n    gueltigbis:\n      data_type: VARCHAR\n      source_column_number: 6\n    kkfirma:\n      data_type: VARCHAR\n      source_column_number: 7\n    produktid:\n      data_type: VARCHAR\n      source_column_number: 8\n    menge:\n      data_type: NUMBER\n      source_column_number: 9\n      type_check: True\n\ndefault_columns:\n    ldts_source:\n      data_type: TIMESTAMP\n      format: YYYYMMDD_HH24MISS\n      type_check: True\n      value: replace(right(filenamedate,19),'.csv','')\n    rsrc_source:\n      data_type: VARCHAR\n      value: filenamedate\n\nadditional_columns:\n    edts_in:\n      data_type: DATE\n      format: YYYYMMDD\n      type_check: True\n      value: trim(reverse(substring(reverse(replace(filenamedate,'.csv','')), 17,8))::varchar)\n    raw_data:\n      data_type: VARCHAR\n      value: value\n    row_number:\n      data_type: NUMBER\n      type_check: True\n      value: metadata$file_row_number\n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set source_model = metadata_dict['source_model'] -%}\n{%- set default_columns = metadata_dict['default_columns'] -%}\n{%- set additional_columns = metadata_dict['additional_columns'] -%}\n{%- set key_check = metadata_dict['key_check'] -%}\n{%- set dub_check = metadata_dict['dub_check'] -%}\n\n{%- set hwm = metadata_dict['hwm'] -%}\n{%- set sourcetype = metadata_dict['sourcetype'] -%}\n{%- set columns = metadata_dict['columns'] -%}\n\n{{ datavault_extension.load(source_model=source_model\n                    , default_columns=default_columns\n                    , additional_columns=additional_columns\n                    , key_check=key_check\n                    , dub_check=dub_check\n                    , hwm=hwm\n                    , sourcetype=sourcetype\n                    , columns=columns\n                    ) }}", "language": "sql", "refs": [], "sources": [["LOAD_EXT_META", "META_HWM"], ["LOAD_EXT", "EXT_ROADSHOW_BESTELLUNG"], ["LOAD_EXT_META", "META_HWM"]], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.load", "macro.datavault_extension.refresh_external_table", "macro.datavault_extension.insert_hwm"], "nodes": ["source.ddvug_willibald_samen.LOAD_EXT_META.META_HWM", "source.ddvug_willibald_samen.LOAD_EXT.EXT_ROADSHOW_BESTELLUNG"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.load_webshop_produktkategorie": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_02_load", "name": "load_webshop_produktkategorie", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_02_load/load_webshop_produktkategorie.sql", "original_file_path": "models/dwh_02_load/load_webshop_produktkategorie.sql", "unique_id": "model.ddvug_willibald_samen.load_webshop_produktkategorie", "fqn": ["ddvug_willibald_samen", "dwh_02_load", "load_webshop_produktkategorie"], "alias": "load_webshop_produktkategorie", "checksum": {"name": "sha256", "checksum": "f122d2740df7128d8bc9b3cd0330b2b42b368ada80e034e9123400c091aef23d"}, "config": {"enabled": true, "alias": null, "schema": "dwh_02_load", "database": null, "tags": ["load"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "{{ datavault_extension.insert_hwm(this,'ldts_source') }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_PRODUKTKATEGORIE','snowflake_external_table') }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["load"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_02_load", "tags": ["load"], "materialized": "table", "pre-hook": ["{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_PRODUKTKATEGORIE','snowflake_external_table') }}"], "post-hook": ["{{ datavault_extension.insert_hwm(this,'ldts_source') }}"]}, "created_at": 1743626379.8575842, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_produktkategorie", "raw_code": "{{ config(materialized=\"table\", pre_hook=[\"{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_PRODUKTKATEGORIE','snowflake_external_table') }}\"], post_hook=[\"{{ datavault_extension.insert_hwm(this,'ldts_source') }}\"]) }}\n\n{%- set yaml_metadata -%}\nsource_model: \n  source_table: EXT_WEBSHOP_PRODUKTKATEGORIE\n  source_database: WILLIBALD_DATA_VAULT_WITH_DBT\n  source_name: LOAD_EXT\nhwm: True\nsource_type: snowflake_external_table\ndub_check:\n- ldts_source\n- katid\n\nkey_check:\n- katid\n\ncolumns:\n    katid:\n      data_type: VARCHAR\n      source_column_number: 1\n    oberkatid:\n      data_type: VARCHAR\n      source_column_number: 2\n    name:\n      data_type: VARCHAR\n      source_column_number: 3\n\ndefault_columns:\n    ldts_source:\n      data_type: TIMESTAMP\n      format: YYYYMMDD_HH24MISS\n      type_check: True\n      value: replace(right(filenamedate,19),'.csv','')\n    rsrc_source:\n      data_type: VARCHAR\n      value: filenamedate\n\nadditional_columns:\n    edts_in:\n      data_type: DATE\n      format: YYYYMMDD\n      type_check: True\n      value: trim(reverse(substring(reverse(replace(filenamedate,'.csv','')), 17,8))::varchar)\n    raw_data:\n      data_type: VARCHAR\n      value: value\n    row_number:\n      data_type: NUMBER\n      type_check: True\n      value: metadata$file_row_number\n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set source_model = metadata_dict['source_model'] -%}\n{%- set default_columns = metadata_dict['default_columns'] -%}\n{%- set additional_columns = metadata_dict['additional_columns'] -%}\n{%- set key_check = metadata_dict['key_check'] -%}\n{%- set dub_check = metadata_dict['dub_check'] -%}\n\n{%- set hwm = metadata_dict['hwm'] -%}\n{%- set sourcetype = metadata_dict['sourcetype'] -%}\n{%- set columns = metadata_dict['columns'] -%}\n\n{{ datavault_extension.load(source_model=source_model\n                    , default_columns=default_columns\n                    , additional_columns=additional_columns\n                    , key_check=key_check\n                    , dub_check=dub_check\n                    , hwm=hwm\n                    , sourcetype=sourcetype\n                    , columns=columns\n                    ) }}", "language": "sql", "refs": [], "sources": [["LOAD_EXT_META", "META_HWM"], ["LOAD_EXT", "EXT_WEBSHOP_PRODUKTKATEGORIE"], ["LOAD_EXT_META", "META_HWM"]], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.load", "macro.datavault_extension.refresh_external_table", "macro.datavault_extension.insert_hwm"], "nodes": ["source.ddvug_willibald_samen.LOAD_EXT_META.META_HWM", "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_PRODUKTKATEGORIE"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.load_webshop_produkt": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_02_load", "name": "load_webshop_produkt", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_02_load/load_webshop_produkt.sql", "original_file_path": "models/dwh_02_load/load_webshop_produkt.sql", "unique_id": "model.ddvug_willibald_samen.load_webshop_produkt", "fqn": ["ddvug_willibald_samen", "dwh_02_load", "load_webshop_produkt"], "alias": "load_webshop_produkt", "checksum": {"name": "sha256", "checksum": "c2536ceda4d601c5be4857d30bda2828bb4c5adf4621e75fb5babaee91e5f200"}, "config": {"enabled": true, "alias": null, "schema": "dwh_02_load", "database": null, "tags": ["load"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "{{ datavault_extension.insert_hwm(this,'ldts_source') }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_PRODUKT','snowflake_external_table') }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["load"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_02_load", "tags": ["load"], "materialized": "table", "pre-hook": ["{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_PRODUKT','snowflake_external_table') }}"], "post-hook": ["{{ datavault_extension.insert_hwm(this,'ldts_source') }}"]}, "created_at": 1743626379.86507, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_produkt", "raw_code": "{{ config(materialized=\"table\", pre_hook=[\"{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_PRODUKT','snowflake_external_table') }}\"], post_hook=[\"{{ datavault_extension.insert_hwm(this,'ldts_source') }}\"]) }}\n\n{%- set yaml_metadata -%}\nsource_model: \n  source_table: EXT_WEBSHOP_PRODUKT\n  source_database: WILLIBALD_DATA_VAULT_WITH_DBT\n  source_name: LOAD_EXT\nhwm: True\nsource_type: snowflake_external_table\ndub_check:\n- ldts_source\n- produktid\n\nkey_check:\n- produktid\n\ncolumns:\n    produktid:\n      data_type: VARCHAR\n      source_column_number: 1\n    katid:\n      data_type: VARCHAR\n      source_column_number: 2\n    bezeichnung:\n      data_type: VARCHAR\n      source_column_number: 3\n    umfang:\n      data_type: VARCHAR\n      source_column_number: 4\n    typ:\n      data_type: NUMBER\n      source_column_number: 5\n      type_check: True\n    preis:\n      data_type: NUMBER\n      format: 28,10\n      source_column_number: 6\n      decimal_separator: .\n      type_check: True\n    pflanzort:\n      data_type: VARCHAR\n      source_column_number: 7\n    pflanzabstand:\n      data_type: VARCHAR\n      source_column_number: 8\n\ndefault_columns:\n    ldts_source:\n      data_type: TIMESTAMP\n      format: YYYYMMDD_HH24MISS\n      type_check: True\n      value: replace(right(filenamedate,19),'.csv','')\n    rsrc_source:\n      data_type: VARCHAR\n      value: filenamedate\n\nadditional_columns:\n    edts_in:\n      data_type: DATE\n      format: YYYYMMDD\n      type_check: True\n      value: trim(reverse(substring(reverse(replace(filenamedate,'.csv','')), 17,8))::varchar)\n    raw_data:\n      data_type: VARCHAR\n      value: value\n    row_number:\n      data_type: NUMBER\n      type_check: True\n      value: metadata$file_row_number\n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set source_model = metadata_dict['source_model'] -%}\n{%- set default_columns = metadata_dict['default_columns'] -%}\n{%- set additional_columns = metadata_dict['additional_columns'] -%}\n{%- set key_check = metadata_dict['key_check'] -%}\n{%- set dub_check = metadata_dict['dub_check'] -%}\n\n{%- set hwm = metadata_dict['hwm'] -%}\n{%- set sourcetype = metadata_dict['sourcetype'] -%}\n{%- set columns = metadata_dict['columns'] -%}\n\n{{ datavault_extension.load(source_model=source_model\n                    , default_columns=default_columns\n                    , additional_columns=additional_columns\n                    , key_check=key_check\n                    , dub_check=dub_check\n                    , hwm=hwm\n                    , sourcetype=sourcetype\n                    , columns=columns\n                    ) }}", "language": "sql", "refs": [], "sources": [["LOAD_EXT_META", "META_HWM"], ["LOAD_EXT", "EXT_WEBSHOP_PRODUKT"], ["LOAD_EXT_META", "META_HWM"]], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.load", "macro.datavault_extension.refresh_external_table", "macro.datavault_extension.insert_hwm"], "nodes": ["source.ddvug_willibald_samen.LOAD_EXT_META.META_HWM", "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_PRODUKT"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.load_webshop_lieferadresse": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_02_load", "name": "load_webshop_lieferadresse", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_02_load/load_webshop_lieferadresse.sql", "original_file_path": "models/dwh_02_load/load_webshop_lieferadresse.sql", "unique_id": "model.ddvug_willibald_samen.load_webshop_lieferadresse", "fqn": ["ddvug_willibald_samen", "dwh_02_load", "load_webshop_lieferadresse"], "alias": "load_webshop_lieferadresse", "checksum": {"name": "sha256", "checksum": "a95fef85a402d482556ca0b1564f472b3e2de258c9a1fcb5474a8854a507bb0c"}, "config": {"enabled": true, "alias": null, "schema": "dwh_02_load", "database": null, "tags": ["load"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "{{ datavault_extension.insert_hwm(this,'ldts_source') }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_LIEFERADRESSE','snowflake_external_table') }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["load"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_02_load", "tags": ["load"], "materialized": "table", "pre-hook": ["{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_LIEFERADRESSE','snowflake_external_table') }}"], "post-hook": ["{{ datavault_extension.insert_hwm(this,'ldts_source') }}"]}, "created_at": 1743626379.872882, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_lieferadresse", "raw_code": "{{ config(materialized=\"table\", pre_hook=[\"{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_LIEFERADRESSE','snowflake_external_table') }}\"], post_hook=[\"{{ datavault_extension.insert_hwm(this,'ldts_source') }}\"]) }}\n\n{%- set yaml_metadata -%}\nsource_model: \n  source_table: EXT_WEBSHOP_LIEFERADRESSE\n  source_database: WILLIBALD_DATA_VAULT_WITH_DBT\n  source_name: LOAD_EXT\nhwm: True\nsource_type: snowflake_external_table\ndub_check:\n- ldts_source\n- LieferAdrID\n\nkey_check:\n- LieferAdrID\n\ncolumns:\n    lieferadrid:\n      data_type: VARCHAR\n      source_column_number: 1\n    kundeid:\n      data_type: VARCHAR\n      source_column_number: 2\n    strasse:\n      data_type: VARCHAR\n      source_column_number: 3\n    hausnummer:\n      data_type: VARCHAR\n      source_column_number: 4\n    adresszusatz:\n      data_type: VARCHAR\n      source_column_number: 5\n    plz:\n      data_type: VARCHAR\n      source_column_number: 6\n    ort:\n      data_type: VARCHAR\n      source_column_number: 7\n    land:\n      data_type: VARCHAR\n      source_column_number: 8\n\ndefault_columns:\n    ldts_source:\n      data_type: TIMESTAMP\n      format: YYYYMMDD_HH24MISS\n      type_check: True\n      value: replace(right(filenamedate,19),'.csv','')\n    rsrc_source:\n      data_type: VARCHAR\n      value: filenamedate\n\nadditional_columns:\n    edts_in:\n      data_type: DATE\n      format: YYYYMMDD\n      type_check: True\n      value: trim(reverse(substring(reverse(replace(filenamedate,'.csv','')), 17,8))::varchar)\n    raw_data:\n      data_type: VARCHAR\n      value: value\n    row_number:\n      data_type: NUMBER\n      type_check: True\n      value: metadata$file_row_number\n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set source_model = metadata_dict['source_model'] -%}\n{%- set default_columns = metadata_dict['default_columns'] -%}\n{%- set additional_columns = metadata_dict['additional_columns'] -%}\n{%- set key_check = metadata_dict['key_check'] -%}\n{%- set dub_check = metadata_dict['dub_check'] -%}\n\n{%- set hwm = metadata_dict['hwm'] -%}\n{%- set sourcetype = metadata_dict['sourcetype'] -%}\n{%- set columns = metadata_dict['columns'] -%}\n\n{{ datavault_extension.load(source_model=source_model\n                    , default_columns=default_columns\n                    , additional_columns=additional_columns\n                    , key_check=key_check\n                    , dub_check=dub_check\n                    , hwm=hwm\n                    , sourcetype=sourcetype\n                    , columns=columns\n                    ) }}", "language": "sql", "refs": [], "sources": [["LOAD_EXT_META", "META_HWM"], ["LOAD_EXT", "EXT_WEBSHOP_LIEFERADRESSE"], ["LOAD_EXT_META", "META_HWM"]], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.load", "macro.datavault_extension.refresh_external_table", "macro.datavault_extension.insert_hwm"], "nodes": ["source.ddvug_willibald_samen.LOAD_EXT_META.META_HWM", "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_LIEFERADRESSE"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.load_webshop_vereinspartner": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_02_load", "name": "load_webshop_vereinspartner", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_02_load/load_webshop_vereinspartner.sql", "original_file_path": "models/dwh_02_load/load_webshop_vereinspartner.sql", "unique_id": "model.ddvug_willibald_samen.load_webshop_vereinspartner", "fqn": ["ddvug_willibald_samen", "dwh_02_load", "load_webshop_vereinspartner"], "alias": "load_webshop_vereinspartner", "checksum": {"name": "sha256", "checksum": "877666e1302567c0fd53d80999baafda3d90a97dbb78669f317b1de074304f9e"}, "config": {"enabled": true, "alias": null, "schema": "dwh_02_load", "database": null, "tags": ["load"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "{{ datavault_extension.insert_hwm(this,'ldts_source') }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_VEREINSPARTNER','snowflake_external_table') }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["load"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_02_load", "tags": ["load"], "materialized": "table", "pre-hook": ["{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_VEREINSPARTNER','snowflake_external_table') }}"], "post-hook": ["{{ datavault_extension.insert_hwm(this,'ldts_source') }}"]}, "created_at": 1743626379.880521, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_vereinspartner", "raw_code": "{{ config(materialized=\"table\", pre_hook=[\"{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_VEREINSPARTNER','snowflake_external_table') }}\"], post_hook=[\"{{ datavault_extension.insert_hwm(this,'ldts_source') }}\"]) }}\n\n{%- set yaml_metadata -%}\nsource_model: \n  source_table: EXT_WEBSHOP_VEREINSPARTNER\n  source_database: WILLIBALD_DATA_VAULT_WITH_DBT\n  source_name: LOAD_EXT\nhwm: True\nsource_type: snowflake_external_table\ndub_check:\n- ldts_source\n- vereinspartnerid\n- kundeidverein\n\nkey_check:\n- vereinspartnerid\n\ncolumns:\n    vereinspartnerid:\n      data_type: VARCHAR\n      source_column_number: 1\n    kundeidverein:\n      data_type: VARCHAR\n      source_column_number: 2\n    rabatt1:\n      data_type: NUMBER\n      source_column_number: 3\n      type_check: True\n    rabatt2:\n      data_type: NUMBER\n      source_column_number: 4\n      type_check: True\n    rabatt3:\n      data_type: NUMBER\n      source_column_number: 5\n      type_check: True\n\ndefault_columns:\n    ldts_source:\n      data_type: TIMESTAMP\n      format: YYYYMMDD_HH24MISS\n      type_check: True\n      value: replace(right(filenamedate,19),'.csv','')\n    rsrc_source:\n      data_type: VARCHAR\n      value: filenamedate\n\nadditional_columns:\n    edts_in:\n      data_type: DATE\n      format: YYYYMMDD\n      type_check: True\n      value: trim(reverse(substring(reverse(replace(filenamedate,'.csv','')), 17,8))::varchar)\n    raw_data:\n      data_type: VARCHAR\n      value: value\n    row_number:\n      data_type: NUMBER\n      type_check: True\n      value: metadata$file_row_number\n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set source_model = metadata_dict['source_model'] -%}\n{%- set default_columns = metadata_dict['default_columns'] -%}\n{%- set additional_columns = metadata_dict['additional_columns'] -%}\n{%- set key_check = metadata_dict['key_check'] -%}\n{%- set dub_check = metadata_dict['dub_check'] -%}\n\n{%- set hwm = metadata_dict['hwm'] -%}\n{%- set sourcetype = metadata_dict['sourcetype'] -%}\n{%- set columns = metadata_dict['columns'] -%}\n\n{{ datavault_extension.load(source_model=source_model\n                    , default_columns=default_columns\n                    , additional_columns=additional_columns\n                    , key_check=key_check\n                    , dub_check=dub_check\n                    , hwm=hwm\n                    , sourcetype=sourcetype\n                    , columns=columns\n                    ) }}", "language": "sql", "refs": [], "sources": [["LOAD_EXT_META", "META_HWM"], ["LOAD_EXT", "EXT_WEBSHOP_VEREINSPARTNER"], ["LOAD_EXT_META", "META_HWM"]], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.load", "macro.datavault_extension.refresh_external_table", "macro.datavault_extension.insert_hwm"], "nodes": ["source.ddvug_willibald_samen.LOAD_EXT_META.META_HWM", "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_VEREINSPARTNER"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.load_webshop_bestellung": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_02_load", "name": "load_webshop_bestellung", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_02_load/load_webshop_bestellung.sql", "original_file_path": "models/dwh_02_load/load_webshop_bestellung.sql", "unique_id": "model.ddvug_willibald_samen.load_webshop_bestellung", "fqn": ["ddvug_willibald_samen", "dwh_02_load", "load_webshop_bestellung"], "alias": "load_webshop_bestellung", "checksum": {"name": "sha256", "checksum": "d7211b4a2959bb95dcdc6afd1c602bb71d6bb2f3ab2f4e2a5e40593810c5c054"}, "config": {"enabled": true, "alias": null, "schema": "dwh_02_load", "database": null, "tags": ["load"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "{{ datavault_extension.insert_hwm(this,'ldts_source') }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_BESTELLUNG','snowflake_external_table') }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["load"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_02_load", "tags": ["load"], "materialized": "table", "pre-hook": ["{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_BESTELLUNG','snowflake_external_table') }}"], "post-hook": ["{{ datavault_extension.insert_hwm(this,'ldts_source') }}"]}, "created_at": 1743626379.8871412, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_bestellung", "raw_code": "{{ config(materialized=\"table\", pre_hook=[\"{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_BESTELLUNG','snowflake_external_table') }}\"], post_hook=[\"{{ datavault_extension.insert_hwm(this,'ldts_source') }}\"]) }}\n\n{%- set yaml_metadata -%}\nsource_model: \n  source_table: EXT_WEBSHOP_BESTELLUNG\n  source_database: WILLIBALD_DATA_VAULT_WITH_DBT\n  source_name: LOAD_EXT\nhwm: True\nsource_type: snowflake_external_table\ndub_check:\n- ldts_source\n- BestellungID\n- KundeID\n\nkey_check:\n- BestellungID\n\ncolumns:\n    bestellungid:\n      data_type: VARCHAR\n      source_column_number: 1\n    kundeid:\n      data_type: VARCHAR\n      source_column_number: 2\n    allglieferadrid:\n      data_type: NUMBER\n      source_column_number: 3\n      type_check: True\n    bestelldatum:\n      data_type: DATE\n      format: DD.MM.YYYY\n      source_column_number: 4\n      type_check: True\n    wunschdatum:\n      data_type: DATE\n      format: DD.MM.YYYY\n      source_column_number: 5\n      type_check: True\n    rabatt:\n      data_type: NUMBER\n      format: 28,10\n      source_column_number: 6\n      decimal_separator: .\n      type_check: True\n\ndefault_columns:\n    ldts_source:\n      data_type: TIMESTAMP\n      format: YYYYMMDD_HH24MISS\n      type_check: True\n      value: replace(right(filenamedate,19),'.csv','')\n    rsrc_source:\n      data_type: VARCHAR\n      value: filenamedate\n\nadditional_columns:\n    edts_in:\n      data_type: DATE\n      format: YYYYMMDD\n      type_check: True\n      value: trim(reverse(substring(reverse(replace(filenamedate,'.csv','')), 17,8))::varchar)\n    raw_data:\n      data_type: VARCHAR\n      value: value\n    row_number:\n      data_type: NUMBER\n      type_check: True\n      value: metadata$file_row_number\n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set source_model = metadata_dict['source_model'] -%}\n{%- set default_columns = metadata_dict['default_columns'] -%}\n{%- set additional_columns = metadata_dict['additional_columns'] -%}\n{%- set key_check = metadata_dict['key_check'] -%}\n{%- set dub_check = metadata_dict['dub_check'] -%}\n\n{%- set hwm = metadata_dict['hwm'] -%}\n{%- set sourcetype = metadata_dict['sourcetype'] -%}\n{%- set columns = metadata_dict['columns'] -%}\n\n{{ datavault_extension.load(source_model=source_model\n                    , default_columns=default_columns\n                    , additional_columns=additional_columns\n                    , key_check=key_check\n                    , dub_check=dub_check\n                    , hwm=hwm\n                    , sourcetype=sourcetype\n                    , columns=columns\n                    ) }}", "language": "sql", "refs": [], "sources": [["LOAD_EXT_META", "META_HWM"], ["LOAD_EXT", "EXT_WEBSHOP_BESTELLUNG"], ["LOAD_EXT_META", "META_HWM"]], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.load", "macro.datavault_extension.refresh_external_table", "macro.datavault_extension.insert_hwm"], "nodes": ["source.ddvug_willibald_samen.LOAD_EXT_META.META_HWM", "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_BESTELLUNG"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.load_webshop_lieferung": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_02_load", "name": "load_webshop_lieferung", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_02_load/load_webshop_lieferung.sql", "original_file_path": "models/dwh_02_load/load_webshop_lieferung.sql", "unique_id": "model.ddvug_willibald_samen.load_webshop_lieferung", "fqn": ["ddvug_willibald_samen", "dwh_02_load", "load_webshop_lieferung"], "alias": "load_webshop_lieferung", "checksum": {"name": "sha256", "checksum": "0c10ec8f0f888b8a859c9402a3ba60a9cef1c2cdd208b66804cd856088406a6b"}, "config": {"enabled": true, "alias": null, "schema": "dwh_02_load", "database": null, "tags": ["load"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "{{ datavault_extension.insert_hwm(this,'ldts_source') }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_LIEFERUNG','snowflake_external_table') }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["load"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_02_load", "tags": ["load"], "materialized": "table", "pre-hook": ["{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_LIEFERUNG','snowflake_external_table') }}"], "post-hook": ["{{ datavault_extension.insert_hwm(this,'ldts_source') }}"]}, "created_at": 1743626379.8942149, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_lieferung", "raw_code": "{{ config(materialized=\"table\", pre_hook=[\"{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_LIEFERUNG','snowflake_external_table') }}\"], post_hook=[\"{{ datavault_extension.insert_hwm(this,'ldts_source') }}\"]) }}\n\n{%- set yaml_metadata -%}\nsource_model: \n  source_table: EXT_WEBSHOP_LIEFERUNG\n  source_database: WILLIBALD_DATA_VAULT_WITH_DBT\n  source_name: LOAD_EXT\nhwm: True\nsource_type: snowflake_external_table\ndub_check:\n- ldts_source\n- bestellungid\n- PosID\n\nkey_check:\n- bestellungid\n- PosID\n\ncolumns:\n    bestellungid:\n      data_type: VARCHAR\n      source_column_number: 1\n    posid:\n      data_type: VARCHAR\n      source_column_number: 2\n    lieferadrid:\n      data_type: VARCHAR\n      source_column_number: 3\n    lieferdienstid:\n      data_type: VARCHAR\n      source_column_number: 4\n    lieferdatum:\n      data_type: DATE\n      format: DD.MM.YYYY\n      source_column_number: 5\n      type_check: True\n\ndefault_columns:\n    ldts_source:\n      data_type: TIMESTAMP\n      format: YYYYMMDD_HH24MISS\n      type_check: True\n      value: replace(right(filenamedate,19),'.csv','')\n    rsrc_source:\n      data_type: VARCHAR\n      value: filenamedate\n\nadditional_columns:\n    edts_in:\n      data_type: DATE\n      format: YYYYMMDD\n      type_check: True\n      value: trim(reverse(substring(reverse(replace(filenamedate,'.csv','')), 17,8))::varchar)\n    raw_data:\n      data_type: VARCHAR\n      value: value\n    row_number:\n      data_type: NUMBER\n      type_check: True\n      value: metadata$file_row_number\n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set source_model = metadata_dict['source_model'] -%}\n{%- set default_columns = metadata_dict['default_columns'] -%}\n{%- set additional_columns = metadata_dict['additional_columns'] -%}\n{%- set key_check = metadata_dict['key_check'] -%}\n{%- set dub_check = metadata_dict['dub_check'] -%}\n\n{%- set hwm = metadata_dict['hwm'] -%}\n{%- set sourcetype = metadata_dict['sourcetype'] -%}\n{%- set columns = metadata_dict['columns'] -%}\n\n{{ datavault_extension.load(source_model=source_model\n                    , default_columns=default_columns\n                    , additional_columns=additional_columns\n                    , key_check=key_check\n                    , dub_check=dub_check\n                    , hwm=hwm\n                    , sourcetype=sourcetype\n                    , columns=columns\n                    ) }}", "language": "sql", "refs": [], "sources": [["LOAD_EXT_META", "META_HWM"], ["LOAD_EXT", "EXT_WEBSHOP_LIEFERUNG"], ["LOAD_EXT_META", "META_HWM"]], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.load", "macro.datavault_extension.refresh_external_table", "macro.datavault_extension.insert_hwm"], "nodes": ["source.ddvug_willibald_samen.LOAD_EXT_META.META_HWM", "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_LIEFERUNG"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.load_webshop_kunde": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_02_load", "name": "load_webshop_kunde", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_02_load/load_webshop_kunde.sql", "original_file_path": "models/dwh_02_load/load_webshop_kunde.sql", "unique_id": "model.ddvug_willibald_samen.load_webshop_kunde", "fqn": ["ddvug_willibald_samen", "dwh_02_load", "load_webshop_kunde"], "alias": "load_webshop_kunde", "checksum": {"name": "sha256", "checksum": "9687a6784e4b7566071680d392d2b6fac215a437ba8137d94320f913a7b165f6"}, "config": {"enabled": true, "alias": null, "schema": "dwh_02_load", "database": null, "tags": ["load"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "{{ datavault_extension.insert_hwm(this,'ldts_source') }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_KUNDE','snowflake_external_table') }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["load"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_02_load", "tags": ["load"], "materialized": "table", "pre-hook": ["{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_KUNDE','snowflake_external_table') }}"], "post-hook": ["{{ datavault_extension.insert_hwm(this,'ldts_source') }}"]}, "created_at": 1743626379.902148, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_kunde", "raw_code": "{{ config(materialized=\"table\", pre_hook=[\"{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_KUNDE','snowflake_external_table') }}\"], post_hook=[\"{{ datavault_extension.insert_hwm(this,'ldts_source') }}\"]) }}\n\n{%- set yaml_metadata -%}\nsource_model: \n  source_table: EXT_WEBSHOP_KUNDE\n  source_database: WILLIBALD_DATA_VAULT_WITH_DBT\n  source_name: LOAD_EXT\nhwm: True\nsource_type: snowflake_external_table\ndub_check:\n- ldts_source\n- KundeID\n\nkey_check:\n- KundeID\n\ncolumns:\n    kundeid:\n      data_type: VARCHAR\n      source_column_number: 1\n    kreditkarte:\n      data_type: VARCHAR\n      source_column_number: 10\n    gueltigbis:\n      data_type: VARCHAR\n      source_column_number: 11\n    kkfirma:\n      data_type: VARCHAR\n      source_column_number: 12\n    vereinspartnerid:\n      data_type: VARCHAR\n      source_column_number: 2\n    vorname:\n      data_type: VARCHAR\n      source_column_number: 3\n    name:\n      data_type: VARCHAR\n      source_column_number: 4\n    geschlecht:\n      data_type: VARCHAR\n      source_column_number: 5\n    geburtsdatum:\n      data_type: DATE\n      format: DD.MM.YYYY\n      source_column_number: 6\n      type_check: True\n    telefon:\n      data_type: VARCHAR\n      source_column_number: 7\n    mobil:\n      data_type: VARCHAR\n      source_column_number: 8\n    email:\n      data_type: VARCHAR\n      source_column_number: 9\n\ndefault_columns:\n    ldts_source:\n      data_type: TIMESTAMP\n      format: YYYYMMDD_HH24MISS\n      type_check: True\n      value: replace(right(filenamedate,19),'.csv','')\n    rsrc_source:\n      data_type: VARCHAR\n      value: filenamedate\n\nadditional_columns:\n    edts_in:\n      data_type: DATE\n      format: YYYYMMDD\n      type_check: True\n      value: trim(reverse(substring(reverse(replace(filenamedate,'.csv','')), 17,8))::varchar)\n    raw_data:\n      data_type: VARCHAR\n      value: value\n    row_number:\n      data_type: NUMBER\n      type_check: True\n      value: metadata$file_row_number\n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set source_model = metadata_dict['source_model'] -%}\n{%- set default_columns = metadata_dict['default_columns'] -%}\n{%- set additional_columns = metadata_dict['additional_columns'] -%}\n{%- set key_check = metadata_dict['key_check'] -%}\n{%- set dub_check = metadata_dict['dub_check'] -%}\n\n{%- set hwm = metadata_dict['hwm'] -%}\n{%- set sourcetype = metadata_dict['sourcetype'] -%}\n{%- set columns = metadata_dict['columns'] -%}\n\n{{ datavault_extension.load(source_model=source_model\n                    , default_columns=default_columns\n                    , additional_columns=additional_columns\n                    , key_check=key_check\n                    , dub_check=dub_check\n                    , hwm=hwm\n                    , sourcetype=sourcetype\n                    , columns=columns\n                    ) }}", "language": "sql", "refs": [], "sources": [["LOAD_EXT_META", "META_HWM"], ["LOAD_EXT", "EXT_WEBSHOP_KUNDE"], ["LOAD_EXT_META", "META_HWM"]], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.load", "macro.datavault_extension.refresh_external_table", "macro.datavault_extension.insert_hwm"], "nodes": ["source.ddvug_willibald_samen.LOAD_EXT_META.META_HWM", "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_KUNDE"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.load_webshop_lieferdienst": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_02_load", "name": "load_webshop_lieferdienst", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_02_load/load_webshop_lieferdienst.sql", "original_file_path": "models/dwh_02_load/load_webshop_lieferdienst.sql", "unique_id": "model.ddvug_willibald_samen.load_webshop_lieferdienst", "fqn": ["ddvug_willibald_samen", "dwh_02_load", "load_webshop_lieferdienst"], "alias": "load_webshop_lieferdienst", "checksum": {"name": "sha256", "checksum": "c58664c7d848af1389c58141241823772085edbfe3f4f37dfcab42226e9ff022"}, "config": {"enabled": true, "alias": null, "schema": "dwh_02_load", "database": null, "tags": ["load"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "{{ datavault_extension.insert_hwm(this,'ldts_source') }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_LIEFERDIENST','snowflake_external_table') }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["load"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_02_load", "tags": ["load"], "materialized": "table", "pre-hook": ["{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_LIEFERDIENST','snowflake_external_table') }}"], "post-hook": ["{{ datavault_extension.insert_hwm(this,'ldts_source') }}"]}, "created_at": 1743626379.9108238, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_lieferdienst", "raw_code": "{{ config(materialized=\"table\", pre_hook=[\"{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_LIEFERDIENST','snowflake_external_table') }}\"], post_hook=[\"{{ datavault_extension.insert_hwm(this,'ldts_source') }}\"]) }}\n\n{%- set yaml_metadata -%}\nsource_model: \n  source_table: EXT_WEBSHOP_LIEFERDIENST\n  source_database: WILLIBALD_DATA_VAULT_WITH_DBT\n  source_name: LOAD_EXT\nhwm: True\nsource_type: snowflake_external_table\ndub_check:\n- ldts_source\n- LieferDienstID\n\nkey_check:\n- LieferDienstID\n\ncolumns:\n    lieferdienstid:\n      data_type: VARCHAR\n      source_column_number: 1\n    land:\n      data_type: VARCHAR\n      source_column_number: 10\n    name:\n      data_type: VARCHAR\n      source_column_number: 2\n    telefon:\n      data_type: VARCHAR\n      source_column_number: 3\n    fax:\n      data_type: VARCHAR\n      source_column_number: 4\n    email:\n      data_type: VARCHAR\n      source_column_number: 5\n    strasse:\n      data_type: VARCHAR\n      source_column_number: 6\n    hausnummer:\n      data_type: VARCHAR\n      source_column_number: 7\n    plz:\n      data_type: VARCHAR\n      source_column_number: 8\n    ort:\n      data_type: VARCHAR\n      source_column_number: 9\n\ndefault_columns:\n    ldts_source:\n      data_type: TIMESTAMP\n      format: YYYYMMDD_HH24MISS\n      type_check: True\n      value: replace(right(filenamedate,19),'.csv','')\n    rsrc_source:\n      data_type: VARCHAR\n      value: filenamedate\n\nadditional_columns:\n    edts_in:\n      data_type: DATE\n      format: YYYYMMDD\n      type_check: True\n      value: trim(reverse(substring(reverse(replace(filenamedate,'.csv','')), 17,8))::varchar)\n    raw_data:\n      data_type: VARCHAR\n      value: value\n    row_number:\n      data_type: NUMBER\n      type_check: True\n      value: metadata$file_row_number\n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set source_model = metadata_dict['source_model'] -%}\n{%- set default_columns = metadata_dict['default_columns'] -%}\n{%- set additional_columns = metadata_dict['additional_columns'] -%}\n{%- set key_check = metadata_dict['key_check'] -%}\n{%- set dub_check = metadata_dict['dub_check'] -%}\n\n{%- set hwm = metadata_dict['hwm'] -%}\n{%- set sourcetype = metadata_dict['sourcetype'] -%}\n{%- set columns = metadata_dict['columns'] -%}\n\n{{ datavault_extension.load(source_model=source_model\n                    , default_columns=default_columns\n                    , additional_columns=additional_columns\n                    , key_check=key_check\n                    , dub_check=dub_check\n                    , hwm=hwm\n                    , sourcetype=sourcetype\n                    , columns=columns\n                    ) }}", "language": "sql", "refs": [], "sources": [["LOAD_EXT_META", "META_HWM"], ["LOAD_EXT", "EXT_WEBSHOP_LIEFERDIENST"], ["LOAD_EXT_META", "META_HWM"]], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.load", "macro.datavault_extension.refresh_external_table", "macro.datavault_extension.insert_hwm"], "nodes": ["source.ddvug_willibald_samen.LOAD_EXT_META.META_HWM", "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_LIEFERDIENST"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.load_webshop_wohnort": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_02_load", "name": "load_webshop_wohnort", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_02_load/load_webshop_wohnort.sql", "original_file_path": "models/dwh_02_load/load_webshop_wohnort.sql", "unique_id": "model.ddvug_willibald_samen.load_webshop_wohnort", "fqn": ["ddvug_willibald_samen", "dwh_02_load", "load_webshop_wohnort"], "alias": "load_webshop_wohnort", "checksum": {"name": "sha256", "checksum": "142f73f2594b189c77376946c2f2ed85834061694467d3d21b1cd20f41b24fab"}, "config": {"enabled": true, "alias": null, "schema": "dwh_02_load", "database": null, "tags": ["load"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "{{ datavault_extension.insert_hwm(this,'ldts_source') }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_WOHNORT','snowflake_external_table') }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["load"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_02_load", "tags": ["load"], "materialized": "table", "pre-hook": ["{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_WOHNORT','snowflake_external_table') }}"], "post-hook": ["{{ datavault_extension.insert_hwm(this,'ldts_source') }}"]}, "created_at": 1743626379.919434, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_wohnort", "raw_code": "{{ config(materialized=\"table\", pre_hook=[\"{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_WOHNORT','snowflake_external_table') }}\"], post_hook=[\"{{ datavault_extension.insert_hwm(this,'ldts_source') }}\"]) }}\n\n{%- set yaml_metadata -%}\nsource_model: \n  source_table: EXT_WEBSHOP_WOHNORT\n  source_database: WILLIBALD_DATA_VAULT_WITH_DBT\n  source_name: LOAD_EXT\nhwm: True\nsource_type: snowflake_external_table\ndub_check:\n- ldts_source\n- kundeid\n- von\n\nkey_check:\n- kundeid\n- von\n\ncolumns:\n    kundeid:\n      data_type: VARCHAR\n      source_column_number: 1\n    von:\n      data_type: DATE\n      format: DD.MM.YYYY\n      source_column_number: 2\n      type_check: True\n    bis:\n      data_type: DATE\n      format: DD.MM.YYYY\n      source_column_number: 3\n      type_check: True\n    strasse:\n      data_type: VARCHAR\n      source_column_number: 4\n    hausnummer:\n      data_type: VARCHAR\n      source_column_number: 5\n    adresszusatz:\n      data_type: VARCHAR\n      source_column_number: 6\n    plz:\n      data_type: VARCHAR\n      source_column_number: 7\n    ort:\n      data_type: VARCHAR\n      source_column_number: 8\n    land:\n      data_type: VARCHAR\n      source_column_number: 9\n\ndefault_columns:\n    ldts_source:\n      data_type: TIMESTAMP\n      format: YYYYMMDD_HH24MISS\n      type_check: True\n      value: replace(right(filenamedate,19),'.csv','')\n    rsrc_source:\n      data_type: VARCHAR\n      value: filenamedate\n\nadditional_columns:\n    edts_in:\n      data_type: DATE\n      format: YYYYMMDD\n      type_check: True\n      value: trim(reverse(substring(reverse(replace(filenamedate,'.csv','')), 17,8))::varchar)\n    raw_data:\n      data_type: VARCHAR\n      value: value\n    row_number:\n      data_type: NUMBER\n      type_check: True\n      value: metadata$file_row_number\n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set source_model = metadata_dict['source_model'] -%}\n{%- set default_columns = metadata_dict['default_columns'] -%}\n{%- set additional_columns = metadata_dict['additional_columns'] -%}\n{%- set key_check = metadata_dict['key_check'] -%}\n{%- set dub_check = metadata_dict['dub_check'] -%}\n\n{%- set hwm = metadata_dict['hwm'] -%}\n{%- set sourcetype = metadata_dict['sourcetype'] -%}\n{%- set columns = metadata_dict['columns'] -%}\n\n{{ datavault_extension.load(source_model=source_model\n                    , default_columns=default_columns\n                    , additional_columns=additional_columns\n                    , key_check=key_check\n                    , dub_check=dub_check\n                    , hwm=hwm\n                    , sourcetype=sourcetype\n                    , columns=columns\n                    ) }}", "language": "sql", "refs": [], "sources": [["LOAD_EXT_META", "META_HWM"], ["LOAD_EXT", "EXT_WEBSHOP_WOHNORT"], ["LOAD_EXT_META", "META_HWM"]], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.load", "macro.datavault_extension.refresh_external_table", "macro.datavault_extension.insert_hwm"], "nodes": ["source.ddvug_willibald_samen.LOAD_EXT_META.META_HWM", "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_WOHNORT"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.load_webshop_ref_produkt_typ": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_02_load", "name": "load_webshop_ref_produkt_typ", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_02_load/load_webshop_ref_produkt_typ.sql", "original_file_path": "models/dwh_02_load/load_webshop_ref_produkt_typ.sql", "unique_id": "model.ddvug_willibald_samen.load_webshop_ref_produkt_typ", "fqn": ["ddvug_willibald_samen", "dwh_02_load", "load_webshop_ref_produkt_typ"], "alias": "load_webshop_ref_produkt_typ", "checksum": {"name": "sha256", "checksum": "a1e09dfff9b3b6285eca45335c51c55efc066599ea092f52c65f0ed00e3b738f"}, "config": {"enabled": true, "alias": null, "schema": "dwh_02_load", "database": null, "tags": ["load"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "{{datavault_extension.insert_hwm(this, 'ldts_source') }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_REF_PRODUKT_TYP','snowflake_external_table') }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["load"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_02_load", "tags": ["load"], "materialized": "table", "pre-hook": ["{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_REF_PRODUKT_TYP','snowflake_external_table') }}"], "post-hook": ["{{datavault_extension.insert_hwm(this, 'ldts_source') }}"]}, "created_at": 1743626379.927466, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_ref_produkt_typ", "raw_code": "{{ config(materialized=\"table\", pre_hook=[\"{{ datavault_extension.refresh_external_table('WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_REF_PRODUKT_TYP','snowflake_external_table') }}\"], post_hook=[\"{{datavault_extension.insert_hwm(this, 'ldts_source') }}\"]) }}\nwith\n{{ datavault_extension.pre_hwm(this, omit_with=true, add_comma_at_end=true) }}\nraw_data AS \n(\n\tSELECT \n\t\t   TRIM(replace(right(filenamedate, 19),'.csv','')::VARCHAR) AS ldts_raw\n\t\t , TRIM(reverse(substring(reverse(replace(Filenamedate,'.csv','')), 17,8))::VARCHAR) AS business_date_raw\n\t\t , TRIM(filenamedate::VARCHAR) AS rsrc_raw\n\t\t , value AS json_data_raw\n\t\t , TRIM(METADATA$FILE_ROW_NUMBER::VARCHAR) AS external_table_row_number_raw\n\t\t , TRIM(value:c1::VARCHAR) AS typ_raw\n\t\t , TRIM(value:c2::VARCHAR) AS bezeichnung_raw\n FROM {{ source(\"LOAD_EXT\", \"EXT_WEBSHOP_REF_PRODUKT_TYP\") }}\n)\nSELECT \n\t\t   TRY_TO_TIMESTAMP(ldts_raw ,'YYYYMMDD_HH24MISS') as \"LDTS_SOURCE\"\n\t\t , TRY_TO_DATE(business_date_raw ,'YYYYMMDD') as edts_in\n\t\t , rsrc_raw as  \"RSRC_SOURCE\"\n\t\t , json_data_raw as raw_data\n\t\t , external_table_row_number_raw as row_number\n\t\t , typ_raw as typ\n\t\t , bezeichnung_raw as bezeichnung\n\t\t, row_number() over (partition by \"LDTS_SOURCE\", typ_raw order by typ_raw desc) = 1 as is_dub_check_ok\n\t\t, coalesce(typ_raw, '') <>'' as is_key_check_ok\n\t\t,  is_dub_check_ok and  is_key_check_ok as is_check_ok\n \t\t,  TO_VARIANT(ARRAY_EXCEPT([REPLACE(IFF(NOT is_dub_check_ok, '{\"dub_check\": \"ldts_source, typ\"}','') || IFF(NOT is_key_check_ok, '{\"key_check\": \"typ\"}',''), '}{','},{')],[''])) chk_all_msg\n\n FROM raw_data\n{{ datavault_extension.post_hwm(this) }}", "language": "sql", "refs": [], "sources": [["LOAD_EXT_META", "META_HWM"], ["LOAD_EXT", "EXT_WEBSHOP_REF_PRODUKT_TYP"], ["LOAD_EXT_META", "META_HWM"]], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.pre_hwm", "macro.datavault_extension.post_hwm", "macro.datavault_extension.refresh_external_table", "macro.datavault_extension.insert_hwm"], "nodes": ["source.ddvug_willibald_samen.LOAD_EXT_META.META_HWM", "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_REF_PRODUKT_TYP"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.order_position_ws_sts": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "order_position_ws_sts", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/order/order_position_ws_sts.sql", "original_file_path": "models/dwh_04_rv/order/order_position_ws_sts.sql", "unique_id": "model.ddvug_willibald_samen.order_position_ws_sts", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "order", "order_position_ws_sts"], "alias": "order_position_ws_sts", "checksum": {"name": "sha256", "checksum": "9ba19ef7f3e0189ae79c79b82be34a9bb52ca47704a99d9e14b704151d722ff4"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626379.9319701, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_position_ws_sts", "raw_code": "{# template st_sat_v0 Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\ntracked_hashkey: \"hk_order_position_l\"\nstage_source_model: \"stg_webshop_position\"\nload_type: full\n\n  \n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set tracked_hashkey = metadata_dict['tracked_hashkey'] -%}\n{%- set stage_source_model = metadata_dict['stage_source_model'] -%}\n{%- set src_edts = metadata_dict['src_edts'] -%}\n{%- set load_type = metadata_dict['load_type'] -%}\n{%- set edts_hashkey = metadata_dict['edts_hashkey'] -%}\n\n{{ datavault_extension.sts_v0(\n                            tracked_hashkey=tracked_hashkey\n                            , stage_source_model=stage_source_model\n                            , load_type=load_type\n                            , src_edts=src_edts \n                            , edts_hashkey=edts_hashkey\n                            ) }}", "language": "sql", "refs": [{"name": "stg_webshop_position", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sts_v0"], "nodes": ["model.ddvug_willibald_samen.stg_webshop_position"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.order_associationpartner_rs_es": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "order_associationpartner_rs_es", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/order/order_associationpartner_rs_es.sql", "original_file_path": "models/dwh_04_rv/order/order_associationpartner_rs_es.sql", "unique_id": "model.ddvug_willibald_samen.order_associationpartner_rs_es", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "order", "order_associationpartner_rs_es"], "alias": "order_associationpartner_rs_es", "checksum": {"name": "sha256", "checksum": "cb30f42b5774f5476e84371e68c54de6f29e9a7c904ca5560b470ac7c1451090"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "view"}, "created_at": 1743626379.950298, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_associationpartner_rs_es", "raw_code": "{# template e_sat_v1 Version:0.2.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='view') }} \n\n-- depends_on: {{ ref('order_associationpartner_l') }}\n\n{%- set yaml_metadata -%}\nsts_sats: 'order_associationpartner_rs_sts'\nlink_hashkey:  'hk_order_associationpartner_l'\nlink_name: 'order_associationpartner_l'\ndriving_key: 'hk_order_h'\nsecondary_fks: 'hk_associationpartner_h'\n\n\nadd_is_current_flag: true\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n{%- set sts_sats = metadata_dict['sts_sats'] -%}\n{%- set link_hashkey = metadata_dict['link_hashkey'] -%}\n{%- set link_name = metadata_dict['link_name'] -%}\n{%- set driving_key = metadata_dict['driving_key'] -%}\n{%- set secondary_fks = metadata_dict['secondary_fks'] -%}\n{%- set ledts_alias = metadata_dict['ledts_alias'] -%}\n{%- set src_edts = metadata_dict['src_edts'] -%}\n{%- set add_is_current_flag = metadata_dict['add_is_current_flag'] -%}\n\n{{ datavault_extension.efs(sts_sats=sts_sats,\n                        link_hashkey=link_hashkey,\n                        link_name=link_name,                        \n                        driving_key=driving_key,\n                        secondary_fks=secondary_fks,                        \n                        ledts_alias=ledts_alias,\n                        src_edts=src_edts,\n                        add_is_current_flag=add_is_current_flag) }}", "language": "sql", "refs": [{"name": "order_associationpartner_l", "package": null, "version": null}, {"name": "order_associationpartner_l", "package": null, "version": null}, {"name": "order_associationpartner_rs_sts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.efs"], "nodes": ["model.ddvug_willibald_samen.order_associationpartner_l", "model.ddvug_willibald_samen.order_associationpartner_rs_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.order_customer_rs_sts": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "order_customer_rs_sts", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/order/order_customer_rs_sts.sql", "original_file_path": "models/dwh_04_rv/order/order_customer_rs_sts.sql", "unique_id": "model.ddvug_willibald_samen.order_customer_rs_sts", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "order", "order_customer_rs_sts"], "alias": "order_customer_rs_sts", "checksum": {"name": "sha256", "checksum": "cbd8dcf44c10025ab8f4d391d2bdef234e493635c5817c78dac06bb3e249745e"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626379.960314, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_customer_rs_sts", "raw_code": "{# template st_sat_v0 Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\ntracked_hashkey: \"hk_order_customer_l\"\nstage_source_model: \"stg_roadshow_bestellung\"\nload_type: partial\n\n  \n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set tracked_hashkey = metadata_dict['tracked_hashkey'] -%}\n{%- set stage_source_model = metadata_dict['stage_source_model'] -%}\n{%- set src_edts = metadata_dict['src_edts'] -%}\n{%- set load_type = metadata_dict['load_type'] -%}\n{%- set edts_hashkey = metadata_dict['edts_hashkey'] -%}\n\n{{ datavault_extension.sts_v0(\n                            tracked_hashkey=tracked_hashkey\n                            , stage_source_model=stage_source_model\n                            , load_type=load_type\n                            , src_edts=src_edts \n                            , edts_hashkey=edts_hashkey\n                            ) }}", "language": "sql", "refs": [{"name": "stg_roadshow_bestellung", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sts_v0"], "nodes": ["model.ddvug_willibald_samen.stg_roadshow_bestellung"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.order_ws_s": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "order_ws_s", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/order/order_ws_s.sql", "original_file_path": "models/dwh_04_rv/order/order_ws_s.sql", "unique_id": "model.ddvug_willibald_samen.order_ws_s", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "order", "order_ws_s"], "alias": "order_ws_s", "checksum": {"name": "sha256", "checksum": "ac7d20315e4fa99df7342016e49923103148b9f141743fc0b31414025f5cfbc0"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["hk_order_h", "ldts"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "Satellit for order_h", "columns": {"hk_order_h": {"name": "hk_order_h", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_04_rv/order/test_order_ws_s.yaml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental", "unique_key": ["hk_order_h", "ldts"]}, "created_at": 1743626380.8000488, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_ws_s", "raw_code": "{# template sat_v0 Version: 0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental',\n           unique_key=['hk_order_h', 'ldts']) }} \n\n{%- set yaml_metadata -%}\nsource_model: \"stg_webshop_bestellung\" \nparent_hashkey: 'hk_order_h'\nsrc_hashdiff: 'hd_order_ws_s'\nsrc_payload: \n  - allglieferadrid\n  - bestelldatum\n  - rabatt\n  - wunschdatum\n\n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set parent_hashkey = metadata_dict['parent_hashkey'] -%}\n{%- set src_hashdiff = metadata_dict['src_hashdiff'] -%}\n{%- set source_model = metadata_dict['source_model'] -%}\n{%- set src_payload = metadata_dict['src_payload'] -%}\n\n\n{{ datavault4dbt.sat_v0(parent_hashkey=parent_hashkey,\n                        src_hashdiff=src_hashdiff,\n                        source_model=source_model,\n                        src_payload=src_payload) }}", "language": "sql", "refs": [{"name": "stg_webshop_bestellung", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.sat_v0"], "nodes": ["model.ddvug_willibald_samen.stg_webshop_bestellung"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_order_h"], "time_spine": null}, "model.ddvug_willibald_samen.order_customer_l": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "order_customer_l", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/order/order_customer_l.sql", "original_file_path": "models/dwh_04_rv/order/order_customer_l.sql", "unique_id": "model.ddvug_willibald_samen.order_customer_l", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "order", "order_customer_l"], "alias": "order_customer_l", "checksum": {"name": "sha256", "checksum": "2f0a9d32ba93055d920f80b1008dbb6d570bd3074f556295137adb7b29a19656"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "Link", "columns": {"hk_customer_h": {"name": "hk_customer_h", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_04_rv/order/test_order_customer_l.yaml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.794989, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_customer_l", "raw_code": "{# template link Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_models: \n  stg_roadshow_bestellung:\n    fk_columns: \n      - 'hk_order_h'\n      - 'hk_customer_h'\n    rsrc_static: '*/roadshow/bestellung/*'\n  stg_webshop_bestellung:\n    fk_columns: \n      - 'hk_order_h'\n      - 'hk_customer_h'\n    rsrc_static: '*/webshop/bestellung/*'\nlink_hashkey: hk_order_customer_l \nforeign_hashkeys: \n  - 'hk_order_h'\n  - 'hk_customer_h'\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.link(source_models=metadata_dict['source_models'],\n        link_hashkey=metadata_dict['link_hashkey'],\n        foreign_hashkeys=metadata_dict['foreign_hashkeys']\n        )}}", "language": "sql", "refs": [{"name": "stg_roadshow_bestellung", "package": null, "version": null}, {"name": "stg_webshop_bestellung", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.link"], "nodes": ["model.ddvug_willibald_samen.stg_roadshow_bestellung", "model.ddvug_willibald_samen.stg_webshop_bestellung"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_customer_h"], "time_spine": null}, "model.ddvug_willibald_samen.order_ws_sts": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "order_ws_sts", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/order/order_ws_sts.sql", "original_file_path": "models/dwh_04_rv/order/order_ws_sts.sql", "unique_id": "model.ddvug_willibald_samen.order_ws_sts", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "order", "order_ws_sts"], "alias": "order_ws_sts", "checksum": {"name": "sha256", "checksum": "c4a262662cceac954dd4a2be94ef9e0a3c1d0ac1471d290d5ffdb8274c83eb37"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626379.984694, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_ws_sts", "raw_code": "{# template st_sat_v0 Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\ntracked_hashkey: \"hk_order_h\"\nstage_source_model: \"stg_webshop_bestellung\"\nload_type: full\n\n  \n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set tracked_hashkey = metadata_dict['tracked_hashkey'] -%}\n{%- set stage_source_model = metadata_dict['stage_source_model'] -%}\n{%- set src_edts = metadata_dict['src_edts'] -%}\n{%- set load_type = metadata_dict['load_type'] -%}\n{%- set edts_hashkey = metadata_dict['edts_hashkey'] -%}\n\n{{ datavault_extension.sts_v0(\n                            tracked_hashkey=tracked_hashkey\n                            , stage_source_model=stage_source_model\n                            , load_type=load_type\n                            , src_edts=src_edts \n                            , edts_hashkey=edts_hashkey\n                            ) }}", "language": "sql", "refs": [{"name": "stg_webshop_bestellung", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sts_v0"], "nodes": ["model.ddvug_willibald_samen.stg_webshop_bestellung"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.order_customer_rs_es": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "order_customer_rs_es", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/order/order_customer_rs_es.sql", "original_file_path": "models/dwh_04_rv/order/order_customer_rs_es.sql", "unique_id": "model.ddvug_willibald_samen.order_customer_rs_es", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "order", "order_customer_rs_es"], "alias": "order_customer_rs_es", "checksum": {"name": "sha256", "checksum": "ef73f383fee6978c2ea0bd941e44eecd913321c86704ce2bedb8479191942d4d"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "view"}, "created_at": 1743626379.989949, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_customer_rs_es", "raw_code": "{# template e_sat_v1 Version:0.2.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='view') }} \n\n-- depends_on: {{ ref('order_customer_l') }}\n\n{%- set yaml_metadata -%}\nsts_sats: 'order_customer_rs_sts'\nlink_hashkey:  'hk_order_customer_l'\nlink_name: 'order_customer_l'\ndriving_key: 'hk_order_h'\nsecondary_fks: 'hk_customer_h'\n\n\nadd_is_current_flag: true\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n{%- set sts_sats = metadata_dict['sts_sats'] -%}\n{%- set link_hashkey = metadata_dict['link_hashkey'] -%}\n{%- set link_name = metadata_dict['link_name'] -%}\n{%- set driving_key = metadata_dict['driving_key'] -%}\n{%- set secondary_fks = metadata_dict['secondary_fks'] -%}\n{%- set ledts_alias = metadata_dict['ledts_alias'] -%}\n{%- set src_edts = metadata_dict['src_edts'] -%}\n{%- set add_is_current_flag = metadata_dict['add_is_current_flag'] -%}\n\n{{ datavault_extension.efs(sts_sats=sts_sats,\n                        link_hashkey=link_hashkey,\n                        link_name=link_name,                        \n                        driving_key=driving_key,\n                        secondary_fks=secondary_fks,                        \n                        ledts_alias=ledts_alias,\n                        src_edts=src_edts,\n                        add_is_current_flag=add_is_current_flag) }}", "language": "sql", "refs": [{"name": "order_customer_l", "package": null, "version": null}, {"name": "order_customer_l", "package": null, "version": null}, {"name": "order_customer_rs_sts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.efs"], "nodes": ["model.ddvug_willibald_samen.order_customer_l", "model.ddvug_willibald_samen.order_customer_rs_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.order_customer_ws_es": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "order_customer_ws_es", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/order/order_customer_ws_es.sql", "original_file_path": "models/dwh_04_rv/order/order_customer_ws_es.sql", "unique_id": "model.ddvug_willibald_samen.order_customer_ws_es", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "order", "order_customer_ws_es"], "alias": "order_customer_ws_es", "checksum": {"name": "sha256", "checksum": "3e5082e5fb7fb6b5b8c9aac37f0cfa35f1cdcea6af525b06072c945cefcda1b2"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "view"}, "created_at": 1743626379.993804, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_customer_ws_es", "raw_code": "{# template e_sat_v1 Version:0.2.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='view') }} \n\n-- depends_on: {{ ref('order_customer_l') }}\n\n{%- set yaml_metadata -%}\nsts_sats: 'order_customer_ws_sts'\nlink_hashkey:  'hk_order_customer_l'\nlink_name: 'order_customer_l'\ndriving_key: 'hk_order_h'\nsecondary_fks: 'hk_customer_h'\n\n\nadd_is_current_flag: true\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n{%- set sts_sats = metadata_dict['sts_sats'] -%}\n{%- set link_hashkey = metadata_dict['link_hashkey'] -%}\n{%- set link_name = metadata_dict['link_name'] -%}\n{%- set driving_key = metadata_dict['driving_key'] -%}\n{%- set secondary_fks = metadata_dict['secondary_fks'] -%}\n{%- set ledts_alias = metadata_dict['ledts_alias'] -%}\n{%- set src_edts = metadata_dict['src_edts'] -%}\n{%- set add_is_current_flag = metadata_dict['add_is_current_flag'] -%}\n\n{{ datavault_extension.efs(sts_sats=sts_sats,\n                        link_hashkey=link_hashkey,\n                        link_name=link_name,                        \n                        driving_key=driving_key,\n                        secondary_fks=secondary_fks,                        \n                        ledts_alias=ledts_alias,\n                        src_edts=src_edts,\n                        add_is_current_flag=add_is_current_flag) }}", "language": "sql", "refs": [{"name": "order_customer_l", "package": null, "version": null}, {"name": "order_customer_l", "package": null, "version": null}, {"name": "order_customer_ws_sts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.efs"], "nodes": ["model.ddvug_willibald_samen.order_customer_l", "model.ddvug_willibald_samen.order_customer_ws_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.order_rs_sts": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "order_rs_sts", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/order/order_rs_sts.sql", "original_file_path": "models/dwh_04_rv/order/order_rs_sts.sql", "unique_id": "model.ddvug_willibald_samen.order_rs_sts", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "order", "order_rs_sts"], "alias": "order_rs_sts", "checksum": {"name": "sha256", "checksum": "98a4b020db1066a8972b8a44cbe387e068e4e53725cf3649941d0b3e55ca4d39"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626379.997561, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_rs_sts", "raw_code": "{# template st_sat_v0 Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\ntracked_hashkey: \"hk_order_h\"\nstage_source_model: \"stg_roadshow_bestellung\"\nload_type: partial\n\n  \n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set tracked_hashkey = metadata_dict['tracked_hashkey'] -%}\n{%- set stage_source_model = metadata_dict['stage_source_model'] -%}\n{%- set src_edts = metadata_dict['src_edts'] -%}\n{%- set load_type = metadata_dict['load_type'] -%}\n{%- set edts_hashkey = metadata_dict['edts_hashkey'] -%}\n\n{{ datavault_extension.sts_v0(\n                            tracked_hashkey=tracked_hashkey\n                            , stage_source_model=stage_source_model\n                            , load_type=load_type\n                            , src_edts=src_edts \n                            , edts_hashkey=edts_hashkey\n                            ) }}", "language": "sql", "refs": [{"name": "stg_roadshow_bestellung", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sts_v0"], "nodes": ["model.ddvug_willibald_samen.stg_roadshow_bestellung"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.order_h": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "order_h", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/order/order_h.sql", "original_file_path": "models/dwh_04_rv/order/order_h.sql", "unique_id": "model.ddvug_willibald_samen.order_h", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "order", "order_h"], "alias": "order_h", "checksum": {"name": "sha256", "checksum": "584c76d74bb687419898c3b3585ca9720dfa0e9fb72f73583bd549ce87830644"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "Hub of order", "columns": {"hk_order_h": {"name": "hk_order_h", "description": "Hashkey of order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_04_rv/order/test_order_h.yaml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.8114188, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_h", "raw_code": "{# template hub Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_models: \n    - name: stg_roadshow_bestellung\n      hk_column: hk_order_h\n      bk_columns: 'order_bk'\n      rsrc_static: '*/roadshow/bestellung/*'\n    - name: stg_webshop_bestellung\n      hk_column: hk_order_h\n      bk_columns: 'order_bk'\n      rsrc_static: '*/webshop/bestellung/*'\n    - name: stg_webshop_lieferung\n      hk_column: hk_order_h\n      bk_columns: 'order_bk'\n      rsrc_static: '*/webshop/lieferung/*'\n    - name: stg_webshop_position\n      hk_column: hk_order_h\n      bk_columns: 'order_bk'\n      rsrc_static: '*/webshop/position/*'\nhashkey: hk_order_h\nbusiness_keys: \n  - 'order_bk'\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.hub(source_models=metadata_dict[\"source_models\"],\n                hashkey=metadata_dict[\"hashkey\"],\n                business_keys=metadata_dict[\"business_keys\"]) }}", "language": "sql", "refs": [{"name": "stg_roadshow_bestellung", "package": null, "version": null}, {"name": "stg_webshop_bestellung", "package": null, "version": null}, {"name": "stg_webshop_lieferung", "package": null, "version": null}, {"name": "stg_webshop_position", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.hub"], "nodes": ["model.ddvug_willibald_samen.stg_roadshow_bestellung", "model.ddvug_willibald_samen.stg_webshop_bestellung", "model.ddvug_willibald_samen.stg_webshop_lieferung", "model.ddvug_willibald_samen.stg_webshop_position"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_order_h"], "time_spine": null}, "model.ddvug_willibald_samen.order_position_rs_sts": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "order_position_rs_sts", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/order/order_position_rs_sts.sql", "original_file_path": "models/dwh_04_rv/order/order_position_rs_sts.sql", "unique_id": "model.ddvug_willibald_samen.order_position_rs_sts", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "order", "order_position_rs_sts"], "alias": "order_position_rs_sts", "checksum": {"name": "sha256", "checksum": "a81f3e250940e91b1d0b598769b8b7f8f7ce3e13f976432602581df6284f713d"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.007403, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_position_rs_sts", "raw_code": "{# template st_sat_v0 Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\ntracked_hashkey: \"hk_order_position_l\"\nstage_source_model: \"stg_roadshow_bestellung\"\nload_type: partial\n\n  \n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set tracked_hashkey = metadata_dict['tracked_hashkey'] -%}\n{%- set stage_source_model = metadata_dict['stage_source_model'] -%}\n{%- set src_edts = metadata_dict['src_edts'] -%}\n{%- set load_type = metadata_dict['load_type'] -%}\n{%- set edts_hashkey = metadata_dict['edts_hashkey'] -%}\n\n{{ datavault_extension.sts_v0(\n                            tracked_hashkey=tracked_hashkey\n                            , stage_source_model=stage_source_model\n                            , load_type=load_type\n                            , src_edts=src_edts \n                            , edts_hashkey=edts_hashkey\n                            ) }}", "language": "sql", "refs": [{"name": "stg_roadshow_bestellung", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sts_v0"], "nodes": ["model.ddvug_willibald_samen.stg_roadshow_bestellung"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.order_associationpartner_rs_sts": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "order_associationpartner_rs_sts", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/order/order_associationpartner_rs_sts.sql", "original_file_path": "models/dwh_04_rv/order/order_associationpartner_rs_sts.sql", "unique_id": "model.ddvug_willibald_samen.order_associationpartner_rs_sts", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "order", "order_associationpartner_rs_sts"], "alias": "order_associationpartner_rs_sts", "checksum": {"name": "sha256", "checksum": "6ee6ace2c4ea3f50dddb0364531c688ffa95d703854a548367fecb527143ef3d"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.0122108, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_associationpartner_rs_sts", "raw_code": "{# template st_sat_v0 Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\ntracked_hashkey: \"hk_order_associationpartner_l\"\nstage_source_model: \"stg_roadshow_bestellung\"\nload_type: partial\n\n  \n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set tracked_hashkey = metadata_dict['tracked_hashkey'] -%}\n{%- set stage_source_model = metadata_dict['stage_source_model'] -%}\n{%- set src_edts = metadata_dict['src_edts'] -%}\n{%- set load_type = metadata_dict['load_type'] -%}\n{%- set edts_hashkey = metadata_dict['edts_hashkey'] -%}\n\n{{ datavault_extension.sts_v0(\n                            tracked_hashkey=tracked_hashkey\n                            , stage_source_model=stage_source_model\n                            , load_type=load_type\n                            , src_edts=src_edts \n                            , edts_hashkey=edts_hashkey\n                            ) }}", "language": "sql", "refs": [{"name": "stg_roadshow_bestellung", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sts_v0"], "nodes": ["model.ddvug_willibald_samen.stg_roadshow_bestellung"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.order_position_l": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "order_position_l", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/order/order_position_l.sql", "original_file_path": "models/dwh_04_rv/order/order_position_l.sql", "unique_id": "model.ddvug_willibald_samen.order_position_l", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "order", "order_position_l"], "alias": "order_position_l", "checksum": {"name": "sha256", "checksum": "4439e71c9a9932ba1d9afcd0645b2ac372e7d94d98201ba22e8f2134f6efd755"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "Link", "columns": {"hk_order_h": {"name": "hk_order_h", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_04_rv/order/test_order_position_l.yaml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.8077838, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_position_l", "raw_code": "{# template link Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_models: \n  stg_roadshow_bestellung:\n    fk_columns: \n      - 'hk_position_h'\n      - 'hk_order_h'\n    rsrc_static: '*/roadshow/bestellung/*'\n  stg_webshop_lieferung:\n    fk_columns: \n      - 'hk_position_h'\n      - 'hk_order_h'\n    rsrc_static: '*/webshop/lieferung/*'\n  stg_webshop_position:\n    fk_columns: \n      - 'hk_position_h'\n      - 'hk_order_h'\n    rsrc_static: '*/webshop/position/*'\nlink_hashkey: hk_order_position_l \nforeign_hashkeys: \n  - 'hk_position_h'\n  - 'hk_order_h'\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.link(source_models=metadata_dict['source_models'],\n        link_hashkey=metadata_dict['link_hashkey'],\n        foreign_hashkeys=metadata_dict['foreign_hashkeys']\n        )}}", "language": "sql", "refs": [{"name": "stg_roadshow_bestellung", "package": null, "version": null}, {"name": "stg_webshop_lieferung", "package": null, "version": null}, {"name": "stg_webshop_position", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.link"], "nodes": ["model.ddvug_willibald_samen.stg_roadshow_bestellung", "model.ddvug_willibald_samen.stg_webshop_lieferung", "model.ddvug_willibald_samen.stg_webshop_position"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_order_h"], "time_spine": null}, "model.ddvug_willibald_samen.order_customer_ws_sts": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "order_customer_ws_sts", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/order/order_customer_ws_sts.sql", "original_file_path": "models/dwh_04_rv/order/order_customer_ws_sts.sql", "unique_id": "model.ddvug_willibald_samen.order_customer_ws_sts", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "order", "order_customer_ws_sts"], "alias": "order_customer_ws_sts", "checksum": {"name": "sha256", "checksum": "d2795694b47b6ec4bab95e43a18796d2269cc3542d1cfba37944fb19509325aa"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.021496, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_customer_ws_sts", "raw_code": "{# template st_sat_v0 Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\ntracked_hashkey: \"hk_order_customer_l\"\nstage_source_model: \"stg_webshop_bestellung\"\nload_type: full\n\n  \n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set tracked_hashkey = metadata_dict['tracked_hashkey'] -%}\n{%- set stage_source_model = metadata_dict['stage_source_model'] -%}\n{%- set src_edts = metadata_dict['src_edts'] -%}\n{%- set load_type = metadata_dict['load_type'] -%}\n{%- set edts_hashkey = metadata_dict['edts_hashkey'] -%}\n\n{{ datavault_extension.sts_v0(\n                            tracked_hashkey=tracked_hashkey\n                            , stage_source_model=stage_source_model\n                            , load_type=load_type\n                            , src_edts=src_edts \n                            , edts_hashkey=edts_hashkey\n                            ) }}", "language": "sql", "refs": [{"name": "stg_webshop_bestellung", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sts_v0"], "nodes": ["model.ddvug_willibald_samen.stg_webshop_bestellung"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.order_associationpartner_l": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "order_associationpartner_l", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/order/order_associationpartner_l.sql", "original_file_path": "models/dwh_04_rv/order/order_associationpartner_l.sql", "unique_id": "model.ddvug_willibald_samen.order_associationpartner_l", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "order", "order_associationpartner_l"], "alias": "order_associationpartner_l", "checksum": {"name": "sha256", "checksum": "53b2655ad52f554d2b70033aab794b0e89b444f7842ffd23a35e0f28029a9523"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "Link", "columns": {"hk_associationpartner_h": {"name": "hk_associationpartner_h", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_04_rv/order/test_order_associationpartner_l.yaml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.8039339, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_associationpartner_l", "raw_code": "{# template link Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_models: \n  stg_roadshow_bestellung:\n    fk_columns: \n      - 'hk_order_h'\n      - 'hk_associationpartner_h'\n    rsrc_static: '*/roadshow/bestellung/*'\nlink_hashkey: hk_order_associationpartner_l \nforeign_hashkeys: \n  - 'hk_order_h'\n  - 'hk_associationpartner_h'\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.link(source_models=metadata_dict['source_models'],\n        link_hashkey=metadata_dict['link_hashkey'],\n        foreign_hashkeys=metadata_dict['foreign_hashkeys']\n        )}}", "language": "sql", "refs": [{"name": "stg_roadshow_bestellung", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.link"], "nodes": ["model.ddvug_willibald_samen.stg_roadshow_bestellung"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_associationpartner_h"], "time_spine": null}, "model.ddvug_willibald_samen.position_product_ws_es": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "position_product_ws_es", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/position/position_product_ws_es.sql", "original_file_path": "models/dwh_04_rv/position/position_product_ws_es.sql", "unique_id": "model.ddvug_willibald_samen.position_product_ws_es", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "position", "position_product_ws_es"], "alias": "position_product_ws_es", "checksum": {"name": "sha256", "checksum": "c189f85d422675557c1f98b7fa8a8f8338f715095a11dc4f02a1f1d2afb4f81f"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "view"}, "created_at": 1743626380.054507, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_product_ws_es", "raw_code": "{# template e_sat_v1 Version:0.2.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='view') }} \n\n-- depends_on: {{ ref('position_product_l') }}\n\n{%- set yaml_metadata -%}\nsts_sats: 'position_product_ws_sts'\nlink_hashkey:  'hk_position_product_l'\nlink_name: 'position_product_l'\ndriving_key: 'hk_position_h'\nsecondary_fks: 'hk_product_h'\n\n\nadd_is_current_flag: true\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n{%- set sts_sats = metadata_dict['sts_sats'] -%}\n{%- set link_hashkey = metadata_dict['link_hashkey'] -%}\n{%- set link_name = metadata_dict['link_name'] -%}\n{%- set driving_key = metadata_dict['driving_key'] -%}\n{%- set secondary_fks = metadata_dict['secondary_fks'] -%}\n{%- set ledts_alias = metadata_dict['ledts_alias'] -%}\n{%- set src_edts = metadata_dict['src_edts'] -%}\n{%- set add_is_current_flag = metadata_dict['add_is_current_flag'] -%}\n\n{{ datavault_extension.efs(sts_sats=sts_sats,\n                        link_hashkey=link_hashkey,\n                        link_name=link_name,                        \n                        driving_key=driving_key,\n                        secondary_fks=secondary_fks,                        \n                        ledts_alias=ledts_alias,\n                        src_edts=src_edts,\n                        add_is_current_flag=add_is_current_flag) }}", "language": "sql", "refs": [{"name": "position_product_l", "package": null, "version": null}, {"name": "position_product_l", "package": null, "version": null}, {"name": "position_product_ws_sts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.efs"], "nodes": ["model.ddvug_willibald_samen.position_product_l", "model.ddvug_willibald_samen.position_product_ws_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.position_h": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "position_h", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/position/position_h.sql", "original_file_path": "models/dwh_04_rv/position/position_h.sql", "unique_id": "model.ddvug_willibald_samen.position_h", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "position", "position_h"], "alias": "position_h", "checksum": {"name": "sha256", "checksum": "0fe046dd20b077223a79768017ecff1cc71a96626b3b69245f0473ccbb8e9325"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "Hub of position", "columns": {"hk_position_h": {"name": "hk_position_h", "description": "Hashkey of position", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_04_rv/position/test_position_h.yaml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.821431, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_h", "raw_code": "{# template hub Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_models: \n    - name: stg_roadshow_bestellung\n      hk_column: hk_position_h\n      bk_columns: 'position_bk'\n      rsrc_static: '*/roadshow/bestellung/*'\n    - name: stg_webshop_lieferung\n      hk_column: hk_position_h\n      bk_columns: 'position_bk'\n      rsrc_static: '*/webshop/lieferung/*'\n    - name: stg_webshop_position\n      hk_column: hk_position_h\n      bk_columns: 'position_bk'\n      rsrc_static: '*/webshop/position/*'\nhashkey: hk_position_h\nbusiness_keys: \n  - 'position_bk'\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.hub(source_models=metadata_dict[\"source_models\"],\n                hashkey=metadata_dict[\"hashkey\"],\n                business_keys=metadata_dict[\"business_keys\"]) }}", "language": "sql", "refs": [{"name": "stg_roadshow_bestellung", "package": null, "version": null}, {"name": "stg_webshop_lieferung", "package": null, "version": null}, {"name": "stg_webshop_position", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.hub"], "nodes": ["model.ddvug_willibald_samen.stg_roadshow_bestellung", "model.ddvug_willibald_samen.stg_webshop_lieferung", "model.ddvug_willibald_samen.stg_webshop_position"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_position_h"], "time_spine": null}, "model.ddvug_willibald_samen.position_ws_s": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "position_ws_s", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/position/position_ws_s.sql", "original_file_path": "models/dwh_04_rv/position/position_ws_s.sql", "unique_id": "model.ddvug_willibald_samen.position_ws_s", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "position", "position_ws_s"], "alias": "position_ws_s", "checksum": {"name": "sha256", "checksum": "2a642c4d5bb4077b010da5764aa3b9b00383559752a76d36faff3edd78c20460"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["hk_position_h", "ldts"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "Satellit for position_h", "columns": {"hk_position_h": {"name": "hk_position_h", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_04_rv/position/test_position_ws_s.yaml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental", "unique_key": ["hk_position_h", "ldts"]}, "created_at": 1743626380.817479, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_ws_s", "raw_code": "{# template sat_v0 Version: 0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental',\n           unique_key=['hk_position_h', 'ldts']) }} \n\n{%- set yaml_metadata -%}\nsource_model: \"stg_webshop_position\" \nparent_hashkey: 'hk_position_h'\nsrc_hashdiff: 'hd_position_ws_s'\nsrc_payload: \n  - bestellungid\n  - menge\n  - posid\n  - preis\n  - spezlieferadrid\n\n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set parent_hashkey = metadata_dict['parent_hashkey'] -%}\n{%- set src_hashdiff = metadata_dict['src_hashdiff'] -%}\n{%- set source_model = metadata_dict['source_model'] -%}\n{%- set src_payload = metadata_dict['src_payload'] -%}\n\n\n{{ datavault4dbt.sat_v0(parent_hashkey=parent_hashkey,\n                        src_hashdiff=src_hashdiff,\n                        source_model=source_model,\n                        src_payload=src_payload) }}", "language": "sql", "refs": [{"name": "stg_webshop_position", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.sat_v0"], "nodes": ["model.ddvug_willibald_samen.stg_webshop_position"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_position_h"], "time_spine": null}, "model.ddvug_willibald_samen.position_ws_sts": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "position_ws_sts", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/position/position_ws_sts.sql", "original_file_path": "models/dwh_04_rv/position/position_ws_sts.sql", "unique_id": "model.ddvug_willibald_samen.position_ws_sts", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "position", "position_ws_sts"], "alias": "position_ws_sts", "checksum": {"name": "sha256", "checksum": "e90598cbe61db06a9c298f6d1af9063706b4a9a2f7aec77ddebff137b1f4a1e6"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.0667672, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_ws_sts", "raw_code": "{# template st_sat_v0 Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\ntracked_hashkey: \"hk_position_h\"\nstage_source_model: \"stg_webshop_position\"\nload_type: full\n\n  \n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set tracked_hashkey = metadata_dict['tracked_hashkey'] -%}\n{%- set stage_source_model = metadata_dict['stage_source_model'] -%}\n{%- set src_edts = metadata_dict['src_edts'] -%}\n{%- set load_type = metadata_dict['load_type'] -%}\n{%- set edts_hashkey = metadata_dict['edts_hashkey'] -%}\n\n{{ datavault_extension.sts_v0(\n                            tracked_hashkey=tracked_hashkey\n                            , stage_source_model=stage_source_model\n                            , load_type=load_type\n                            , src_edts=src_edts \n                            , edts_hashkey=edts_hashkey\n                            ) }}", "language": "sql", "refs": [{"name": "stg_webshop_position", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sts_v0"], "nodes": ["model.ddvug_willibald_samen.stg_webshop_position"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.position_product_ws_sts": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "position_product_ws_sts", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/position/position_product_ws_sts.sql", "original_file_path": "models/dwh_04_rv/position/position_product_ws_sts.sql", "unique_id": "model.ddvug_willibald_samen.position_product_ws_sts", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "position", "position_product_ws_sts"], "alias": "position_product_ws_sts", "checksum": {"name": "sha256", "checksum": "baeda4642cbe40b308c3057d6d261ba6de65ba04c757e4c0c0a74dfd785d9dc4"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.071627, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_product_ws_sts", "raw_code": "{# template st_sat_v0 Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\ntracked_hashkey: \"hk_position_product_l\"\nstage_source_model: \"stg_webshop_position\"\nload_type: full\n\n  \n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set tracked_hashkey = metadata_dict['tracked_hashkey'] -%}\n{%- set stage_source_model = metadata_dict['stage_source_model'] -%}\n{%- set src_edts = metadata_dict['src_edts'] -%}\n{%- set load_type = metadata_dict['load_type'] -%}\n{%- set edts_hashkey = metadata_dict['edts_hashkey'] -%}\n\n{{ datavault_extension.sts_v0(\n                            tracked_hashkey=tracked_hashkey\n                            , stage_source_model=stage_source_model\n                            , load_type=load_type\n                            , src_edts=src_edts \n                            , edts_hashkey=edts_hashkey\n                            ) }}", "language": "sql", "refs": [{"name": "stg_webshop_position", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sts_v0"], "nodes": ["model.ddvug_willibald_samen.stg_webshop_position"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.position_rs_sts": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "position_rs_sts", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/position/position_rs_sts.sql", "original_file_path": "models/dwh_04_rv/position/position_rs_sts.sql", "unique_id": "model.ddvug_willibald_samen.position_rs_sts", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "position", "position_rs_sts"], "alias": "position_rs_sts", "checksum": {"name": "sha256", "checksum": "c2f7caff534fda271119ce7d54c82f8880fa59db7e7af6fceb06e4c0b489d1b6"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.0770712, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_rs_sts", "raw_code": "{# template st_sat_v0 Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\ntracked_hashkey: \"hk_position_h\"\nstage_source_model: \"stg_roadshow_bestellung\"\nload_type: partial\n\n  \n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set tracked_hashkey = metadata_dict['tracked_hashkey'] -%}\n{%- set stage_source_model = metadata_dict['stage_source_model'] -%}\n{%- set src_edts = metadata_dict['src_edts'] -%}\n{%- set load_type = metadata_dict['load_type'] -%}\n{%- set edts_hashkey = metadata_dict['edts_hashkey'] -%}\n\n{{ datavault_extension.sts_v0(\n                            tracked_hashkey=tracked_hashkey\n                            , stage_source_model=stage_source_model\n                            , load_type=load_type\n                            , src_edts=src_edts \n                            , edts_hashkey=edts_hashkey\n                            ) }}", "language": "sql", "refs": [{"name": "stg_roadshow_bestellung", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sts_v0"], "nodes": ["model.ddvug_willibald_samen.stg_roadshow_bestellung"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.position_product_rs_sts": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "position_product_rs_sts", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/position/position_product_rs_sts.sql", "original_file_path": "models/dwh_04_rv/position/position_product_rs_sts.sql", "unique_id": "model.ddvug_willibald_samen.position_product_rs_sts", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "position", "position_product_rs_sts"], "alias": "position_product_rs_sts", "checksum": {"name": "sha256", "checksum": "4616acee95de0ad6205b218dad04ea891ca24ca1de2e41c56197e665ec32ef5d"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.082058, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_product_rs_sts", "raw_code": "{# template st_sat_v0 Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\ntracked_hashkey: \"hk_position_product_l\"\nstage_source_model: \"stg_roadshow_bestellung\"\nload_type: partial\n\n  \n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set tracked_hashkey = metadata_dict['tracked_hashkey'] -%}\n{%- set stage_source_model = metadata_dict['stage_source_model'] -%}\n{%- set src_edts = metadata_dict['src_edts'] -%}\n{%- set load_type = metadata_dict['load_type'] -%}\n{%- set edts_hashkey = metadata_dict['edts_hashkey'] -%}\n\n{{ datavault_extension.sts_v0(\n                            tracked_hashkey=tracked_hashkey\n                            , stage_source_model=stage_source_model\n                            , load_type=load_type\n                            , src_edts=src_edts \n                            , edts_hashkey=edts_hashkey\n                            ) }}", "language": "sql", "refs": [{"name": "stg_roadshow_bestellung", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sts_v0"], "nodes": ["model.ddvug_willibald_samen.stg_roadshow_bestellung"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.position_product_l": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "position_product_l", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/position/position_product_l.sql", "original_file_path": "models/dwh_04_rv/position/position_product_l.sql", "unique_id": "model.ddvug_willibald_samen.position_product_l", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "position", "position_product_l"], "alias": "position_product_l", "checksum": {"name": "sha256", "checksum": "9c46ff2f0fc55376041a532a1c2a109688f11430ce95870410f2edf94a3f0267"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "Link", "columns": {"hk_position_h": {"name": "hk_position_h", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_04_rv/position/test_position_product_l.yaml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.851277, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_product_l", "raw_code": "{# template link Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_models: \n  stg_roadshow_bestellung:\n    fk_columns: \n      - 'hk_product_h'\n      - 'hk_position_h'\n    rsrc_static: '*/roadshow/bestellung/*'\n  stg_webshop_position:\n    fk_columns: \n      - 'hk_product_h'\n      - 'hk_position_h'\n    rsrc_static: '*/webshop/position/*'\nlink_hashkey: hk_position_product_l \nforeign_hashkeys: \n  - 'hk_product_h'\n  - 'hk_position_h'\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.link(source_models=metadata_dict['source_models'],\n        link_hashkey=metadata_dict['link_hashkey'],\n        foreign_hashkeys=metadata_dict['foreign_hashkeys']\n        )}}", "language": "sql", "refs": [{"name": "stg_roadshow_bestellung", "package": null, "version": null}, {"name": "stg_webshop_position", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.link"], "nodes": ["model.ddvug_willibald_samen.stg_roadshow_bestellung", "model.ddvug_willibald_samen.stg_webshop_position"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_position_h"], "time_spine": null}, "model.ddvug_willibald_samen.position_product_rs_es": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "position_product_rs_es", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/position/position_product_rs_es.sql", "original_file_path": "models/dwh_04_rv/position/position_product_rs_es.sql", "unique_id": "model.ddvug_willibald_samen.position_product_rs_es", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "position", "position_product_rs_es"], "alias": "position_product_rs_es", "checksum": {"name": "sha256", "checksum": "9200dba9c82c4c8df7e73f7f2026bc4251d249d55ece18154cdfb3d25aae6334"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "view"}, "created_at": 1743626380.091198, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_product_rs_es", "raw_code": "{# template e_sat_v1 Version:0.2.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='view') }} \n\n-- depends_on: {{ ref('position_product_l') }}\n\n{%- set yaml_metadata -%}\nsts_sats: 'position_product_rs_sts'\nlink_hashkey:  'hk_position_product_l'\nlink_name: 'position_product_l'\ndriving_key: 'hk_position_h'\nsecondary_fks: 'hk_product_h'\n\n\nadd_is_current_flag: true\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n{%- set sts_sats = metadata_dict['sts_sats'] -%}\n{%- set link_hashkey = metadata_dict['link_hashkey'] -%}\n{%- set link_name = metadata_dict['link_name'] -%}\n{%- set driving_key = metadata_dict['driving_key'] -%}\n{%- set secondary_fks = metadata_dict['secondary_fks'] -%}\n{%- set ledts_alias = metadata_dict['ledts_alias'] -%}\n{%- set src_edts = metadata_dict['src_edts'] -%}\n{%- set add_is_current_flag = metadata_dict['add_is_current_flag'] -%}\n\n{{ datavault_extension.efs(sts_sats=sts_sats,\n                        link_hashkey=link_hashkey,\n                        link_name=link_name,                        \n                        driving_key=driving_key,\n                        secondary_fks=secondary_fks,                        \n                        ledts_alias=ledts_alias,\n                        src_edts=src_edts,\n                        add_is_current_flag=add_is_current_flag) }}", "language": "sql", "refs": [{"name": "position_product_l", "package": null, "version": null}, {"name": "position_product_l", "package": null, "version": null}, {"name": "position_product_rs_sts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.efs"], "nodes": ["model.ddvug_willibald_samen.position_product_l", "model.ddvug_willibald_samen.position_product_rs_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.position_rs_s": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "position_rs_s", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/position/position_rs_s.sql", "original_file_path": "models/dwh_04_rv/position/position_rs_s.sql", "unique_id": "model.ddvug_willibald_samen.position_rs_s", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "position", "position_rs_s"], "alias": "position_rs_s", "checksum": {"name": "sha256", "checksum": "445edaf88a4720fb72c992e426bd9c4d528e000c52118e83b45515ee238e4e7d"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["hk_position_h", "ldts"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "Satellit for position_h", "columns": {"hk_position_h": {"name": "hk_position_h", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_04_rv/position/test_position_rs_s.yaml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental", "unique_key": ["hk_position_h", "ldts"]}, "created_at": 1743626380.8136818, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_rs_s", "raw_code": "{# template sat_v0 Version: 0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental',\n           unique_key=['hk_position_h', 'ldts']) }} \n\n{%- set yaml_metadata -%}\nsource_model: \"stg_roadshow_bestellung\" \nparent_hashkey: 'hk_position_h'\nsrc_hashdiff: 'hd_position_rs_s'\nsrc_payload: \n  - bestellungid\n  - gueltigbis\n  - kaufdatum\n  - kkfirma\n  - kreditkarte\n  - menge\n  - preis\n  - produktid\n  - rabatt\n\n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set parent_hashkey = metadata_dict['parent_hashkey'] -%}\n{%- set src_hashdiff = metadata_dict['src_hashdiff'] -%}\n{%- set source_model = metadata_dict['source_model'] -%}\n{%- set src_payload = metadata_dict['src_payload'] -%}\n\n\n{{ datavault4dbt.sat_v0(parent_hashkey=parent_hashkey,\n                        src_hashdiff=src_hashdiff,\n                        source_model=source_model,\n                        src_payload=src_payload) }}", "language": "sql", "refs": [{"name": "stg_roadshow_bestellung", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.sat_v0"], "nodes": ["model.ddvug_willibald_samen.stg_roadshow_bestellung"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_position_h"], "time_spine": null}, "model.ddvug_willibald_samen.deliveryservice_h": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "deliveryservice_h", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/deliveryservice/deliveryservice_h.sql", "original_file_path": "models/dwh_04_rv/deliveryservice/deliveryservice_h.sql", "unique_id": "model.ddvug_willibald_samen.deliveryservice_h", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "deliveryservice", "deliveryservice_h"], "alias": "deliveryservice_h", "checksum": {"name": "sha256", "checksum": "b14d73791bca70082bdcd4b65b80a129e4ba8afa383cfa4bf2420da60ee0e6cf"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "Hub of deliveryservice", "columns": {"hk_deliveryservice_h": {"name": "hk_deliveryservice_h", "description": "Hashkey of deliveryservice", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_04_rv/deliveryservice/test_deliveryservice_h.yaml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.859626, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryservice_h", "raw_code": "{# template hub Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_models: \n    - name: stg_webshop_lieferdienst\n      hk_column: hk_deliveryservice_h\n      bk_columns: 'deliveryservice_bk'\n      rsrc_static: '*/webshop/lieferdienst/*'\n    - name: stg_webshop_lieferung\n      hk_column: hk_deliveryservice_h\n      bk_columns: 'deliveryservice_bk'\n      rsrc_static: '*/webshop/lieferung/*'\nhashkey: hk_deliveryservice_h\nbusiness_keys: \n  - 'deliveryservice_bk'\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.hub(source_models=metadata_dict[\"source_models\"],\n                hashkey=metadata_dict[\"hashkey\"],\n                business_keys=metadata_dict[\"business_keys\"]) }}", "language": "sql", "refs": [{"name": "stg_webshop_lieferdienst", "package": null, "version": null}, {"name": "stg_webshop_lieferung", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.hub"], "nodes": ["model.ddvug_willibald_samen.stg_webshop_lieferdienst", "model.ddvug_willibald_samen.stg_webshop_lieferung"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_deliveryservice_h"], "time_spine": null}, "model.ddvug_willibald_samen.deliveryservice_ws_s": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "deliveryservice_ws_s", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/deliveryservice/deliveryservice_ws_s.sql", "original_file_path": "models/dwh_04_rv/deliveryservice/deliveryservice_ws_s.sql", "unique_id": "model.ddvug_willibald_samen.deliveryservice_ws_s", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "deliveryservice", "deliveryservice_ws_s"], "alias": "deliveryservice_ws_s", "checksum": {"name": "sha256", "checksum": "921b46df0cede13d2cba793c85fe44a7bf81febda04d08335742225ec8675b05"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["hk_deliveryservice_h", "ldts"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "Satellit for deliveryservice_h", "columns": {"hk_deliveryservice_h": {"name": "hk_deliveryservice_h", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_04_rv/deliveryservice/test_deliveryservice_ws_s.yaml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental", "unique_key": ["hk_deliveryservice_h", "ldts"]}, "created_at": 1743626380.8557189, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryservice_ws_s", "raw_code": "{# template sat_v0 Version: 0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental',\n           unique_key=['hk_deliveryservice_h', 'ldts']) }} \n\n{%- set yaml_metadata -%}\nsource_model: \"stg_webshop_lieferdienst\" \nparent_hashkey: 'hk_deliveryservice_h'\nsrc_hashdiff: 'hd_deliveryservice_ws_s'\nsrc_payload: \n  - email\n  - fax\n  - hausnummer\n  - land\n  - name\n  - ort\n  - plz\n  - strasse\n  - telefon\n\n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set parent_hashkey = metadata_dict['parent_hashkey'] -%}\n{%- set src_hashdiff = metadata_dict['src_hashdiff'] -%}\n{%- set source_model = metadata_dict['source_model'] -%}\n{%- set src_payload = metadata_dict['src_payload'] -%}\n\n\n{{ datavault4dbt.sat_v0(parent_hashkey=parent_hashkey,\n                        src_hashdiff=src_hashdiff,\n                        source_model=source_model,\n                        src_payload=src_payload) }}", "language": "sql", "refs": [{"name": "stg_webshop_lieferdienst", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.sat_v0"], "nodes": ["model.ddvug_willibald_samen.stg_webshop_lieferdienst"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_deliveryservice_h"], "time_spine": null}, "model.ddvug_willibald_samen.deliveryservice_ws_sts": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "deliveryservice_ws_sts", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/deliveryservice/deliveryservice_ws_sts.sql", "original_file_path": "models/dwh_04_rv/deliveryservice/deliveryservice_ws_sts.sql", "unique_id": "model.ddvug_willibald_samen.deliveryservice_ws_sts", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "deliveryservice", "deliveryservice_ws_sts"], "alias": "deliveryservice_ws_sts", "checksum": {"name": "sha256", "checksum": "97e6006c9cd6cafc656d3f09e4f919cdd753a4ad743a0d8219a2841105302b42"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.107211, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryservice_ws_sts", "raw_code": "{# template st_sat_v0 Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\ntracked_hashkey: \"hk_deliveryservice_h\"\nstage_source_model: \"stg_webshop_lieferdienst\"\nload_type: full\n\n  \n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set tracked_hashkey = metadata_dict['tracked_hashkey'] -%}\n{%- set stage_source_model = metadata_dict['stage_source_model'] -%}\n{%- set src_edts = metadata_dict['src_edts'] -%}\n{%- set load_type = metadata_dict['load_type'] -%}\n{%- set edts_hashkey = metadata_dict['edts_hashkey'] -%}\n\n{{ datavault_extension.sts_v0(\n                            tracked_hashkey=tracked_hashkey\n                            , stage_source_model=stage_source_model\n                            , load_type=load_type\n                            , src_edts=src_edts \n                            , edts_hashkey=edts_hashkey\n                            ) }}", "language": "sql", "refs": [{"name": "stg_webshop_lieferdienst", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sts_v0"], "nodes": ["model.ddvug_willibald_samen.stg_webshop_lieferdienst"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.productcategory_hierarchy_l": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "productcategory_hierarchy_l", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/productcategory/productcategory_hierarchy_l.sql", "original_file_path": "models/dwh_04_rv/productcategory/productcategory_hierarchy_l.sql", "unique_id": "model.ddvug_willibald_samen.productcategory_hierarchy_l", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "productcategory", "productcategory_hierarchy_l"], "alias": "productcategory_hierarchy_l", "checksum": {"name": "sha256", "checksum": "7847f8db368f9f7550b888104556bb5f9deda909c361df9294d96bf9ac628c67"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "Link", "columns": {"hk_productcategory_h": {"name": "hk_productcategory_h", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_04_rv/productcategory/test_productcategory_hierarchy_l.yaml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.8680582, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.productcategory_hierarchy_l", "raw_code": "{# template link Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_models: \n  stg_webshop_produktkategorie:\n    fk_columns: \n      - 'hk_productcategory_parent_h'\n      - 'hk_productcategory_h'\n    rsrc_static: '*/webshop/produktkategorie/*'\nlink_hashkey: hk_productcategory_hierarchy_l \nforeign_hashkeys: \n  - 'hk_productcategory_parent_h'\n  - 'hk_productcategory_h'\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.link(source_models=metadata_dict['source_models'],\n        link_hashkey=metadata_dict['link_hashkey'],\n        foreign_hashkeys=metadata_dict['foreign_hashkeys']\n        )}}", "language": "sql", "refs": [{"name": "stg_webshop_produktkategorie", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.link"], "nodes": ["model.ddvug_willibald_samen.stg_webshop_produktkategorie"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_productcategory_h"], "time_spine": null}, "model.ddvug_willibald_samen.productcategory_h": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "productcategory_h", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/productcategory/productcategory_h.sql", "original_file_path": "models/dwh_04_rv/productcategory/productcategory_h.sql", "unique_id": "model.ddvug_willibald_samen.productcategory_h", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "productcategory", "productcategory_h"], "alias": "productcategory_h", "checksum": {"name": "sha256", "checksum": "4c5123d9b42b3993869b4f0f7497a6984cfad3aff26b9986305bbb6a85b055bd"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "Hub of productcategory", "columns": {"hk_productcategory_h": {"name": "hk_productcategory_h", "description": "Hashkey of productcategory", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_04_rv/productcategory/test_productcategory_h.yaml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.861869, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.productcategory_h", "raw_code": "{# template hub Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_models: \n    - name: stg_webshop_produkt\n      hk_column: hk_productcategory_h\n      bk_columns: 'productcategory_bk'\n      rsrc_static: '*/webshop/produkt/*'\n    - name: stg_webshop_produktkategorie\n      hk_column: hk_productcategory_h\n      bk_columns: 'productcategory_bk'\n      rsrc_static: '*/webshop/produktkategorie/*'\n    - name: stg_webshop_produktkategorie\n      hk_column: hk_productcategory_parent_h\n      bk_columns: 'productcategory_parent_bk'\n      rsrc_static: '*/webshop/produktkategorie/*'\nhashkey: hk_productcategory_h\nbusiness_keys: \n  - 'productcategory_bk'\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.hub(source_models=metadata_dict[\"source_models\"],\n                hashkey=metadata_dict[\"hashkey\"],\n                business_keys=metadata_dict[\"business_keys\"]) }}", "language": "sql", "refs": [{"name": "stg_webshop_produkt", "package": null, "version": null}, {"name": "stg_webshop_produktkategorie", "package": null, "version": null}, {"name": "stg_webshop_produktkategorie", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.hub"], "nodes": ["model.ddvug_willibald_samen.stg_webshop_produkt", "model.ddvug_willibald_samen.stg_webshop_produktkategorie"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_productcategory_h"], "time_spine": null}, "model.ddvug_willibald_samen.productcategory_hierarchy_ws_sts": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "productcategory_hierarchy_ws_sts", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/productcategory/productcategory_hierarchy_ws_sts.sql", "original_file_path": "models/dwh_04_rv/productcategory/productcategory_hierarchy_ws_sts.sql", "unique_id": "model.ddvug_willibald_samen.productcategory_hierarchy_ws_sts", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "productcategory", "productcategory_hierarchy_ws_sts"], "alias": "productcategory_hierarchy_ws_sts", "checksum": {"name": "sha256", "checksum": "53c8da38e7bc91114c692baa3b537d7ad05b19be4840b5140d782d76518002fb"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.1205351, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.productcategory_hierarchy_ws_sts", "raw_code": "{# template st_sat_v0 Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\ntracked_hashkey: \"hk_productcategory_hierarchy_l\"\nstage_source_model: \"stg_webshop_produktkategorie\"\nload_type: full\n\n  \n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set tracked_hashkey = metadata_dict['tracked_hashkey'] -%}\n{%- set stage_source_model = metadata_dict['stage_source_model'] -%}\n{%- set src_edts = metadata_dict['src_edts'] -%}\n{%- set load_type = metadata_dict['load_type'] -%}\n{%- set edts_hashkey = metadata_dict['edts_hashkey'] -%}\n\n{{ datavault_extension.sts_v0(\n                            tracked_hashkey=tracked_hashkey\n                            , stage_source_model=stage_source_model\n                            , load_type=load_type\n                            , src_edts=src_edts \n                            , edts_hashkey=edts_hashkey\n                            ) }}", "language": "sql", "refs": [{"name": "stg_webshop_produktkategorie", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sts_v0"], "nodes": ["model.ddvug_willibald_samen.stg_webshop_produktkategorie"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.productcategory_ws_s": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "productcategory_ws_s", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/productcategory/productcategory_ws_s.sql", "original_file_path": "models/dwh_04_rv/productcategory/productcategory_ws_s.sql", "unique_id": "model.ddvug_willibald_samen.productcategory_ws_s", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "productcategory", "productcategory_ws_s"], "alias": "productcategory_ws_s", "checksum": {"name": "sha256", "checksum": "5a461148fbac4a06a61abc0d1176f8288681c18e8b386ef36b7bb34fb56feea9"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["hk_productcategory_h", "ldts"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "Satellit for productcategory_h", "columns": {"hk_productcategory_h": {"name": "hk_productcategory_h", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_04_rv/productcategory/test_productcategory_ws_s.yaml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental", "unique_key": ["hk_productcategory_h", "ldts"]}, "created_at": 1743626380.864096, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.productcategory_ws_s", "raw_code": "{# template sat_v0 Version: 0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental',\n           unique_key=['hk_productcategory_h', 'ldts']) }} \n\n{%- set yaml_metadata -%}\nsource_model: \"stg_webshop_produktkategorie\" \nparent_hashkey: 'hk_productcategory_h'\nsrc_hashdiff: 'hd_productcategory_ws_s'\nsrc_payload: \n  - name\n\n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set parent_hashkey = metadata_dict['parent_hashkey'] -%}\n{%- set src_hashdiff = metadata_dict['src_hashdiff'] -%}\n{%- set source_model = metadata_dict['source_model'] -%}\n{%- set src_payload = metadata_dict['src_payload'] -%}\n\n\n{{ datavault4dbt.sat_v0(parent_hashkey=parent_hashkey,\n                        src_hashdiff=src_hashdiff,\n                        source_model=source_model,\n                        src_payload=src_payload) }}", "language": "sql", "refs": [{"name": "stg_webshop_produktkategorie", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.sat_v0"], "nodes": ["model.ddvug_willibald_samen.stg_webshop_produktkategorie"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_productcategory_h"], "time_spine": null}, "model.ddvug_willibald_samen.product_ws_s": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "product_ws_s", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/product/product_ws_s.sql", "original_file_path": "models/dwh_04_rv/product/product_ws_s.sql", "unique_id": "model.ddvug_willibald_samen.product_ws_s", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "product", "product_ws_s"], "alias": "product_ws_s", "checksum": {"name": "sha256", "checksum": "f0f45cf794f4779a22b09780464930d200d81bab03bc96da428cf5babdd3bf66"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["hk_product_h", "ldts"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "Satellit for product_h", "columns": {"hk_product_h": {"name": "hk_product_h", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_04_rv/product/test_product_ws_s.yaml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental", "unique_key": ["hk_product_h", "ldts"]}, "created_at": 1743626380.87608, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_ws_s", "raw_code": "{# template sat_v0 Version: 0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental',\n           unique_key=['hk_product_h', 'ldts']) }} \n\n{%- set yaml_metadata -%}\nsource_model: \"stg_webshop_produkt\" \nparent_hashkey: 'hk_product_h'\nsrc_hashdiff: 'hd_product_ws_s'\nsrc_payload: \n  - bezeichnung\n  - pflanzabstand\n  - pflanzort\n  - preis\n  - typ\n  - umfang\n\n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set parent_hashkey = metadata_dict['parent_hashkey'] -%}\n{%- set src_hashdiff = metadata_dict['src_hashdiff'] -%}\n{%- set source_model = metadata_dict['source_model'] -%}\n{%- set src_payload = metadata_dict['src_payload'] -%}\n\n\n{{ datavault4dbt.sat_v0(parent_hashkey=parent_hashkey,\n                        src_hashdiff=src_hashdiff,\n                        source_model=source_model,\n                        src_payload=src_payload) }}", "language": "sql", "refs": [{"name": "stg_webshop_produkt", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.sat_v0"], "nodes": ["model.ddvug_willibald_samen.stg_webshop_produkt"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_product_h"], "time_spine": null}, "model.ddvug_willibald_samen.product_h": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "product_h", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/product/product_h.sql", "original_file_path": "models/dwh_04_rv/product/product_h.sql", "unique_id": "model.ddvug_willibald_samen.product_h", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "product", "product_h"], "alias": "product_h", "checksum": {"name": "sha256", "checksum": "57a29eea9dbec5dbbea6c555c7d7d2b77cafee22dd968531081a09c00e913bd3"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "Hub of product", "columns": {"hk_product_h": {"name": "hk_product_h", "description": "Hashkey of product", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_04_rv/product/test_product_h.yaml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.879755, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_h", "raw_code": "{# template hub Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_models: \n    - name: stg_roadshow_bestellung\n      hk_column: hk_product_h\n      bk_columns: 'product_bk'\n      rsrc_static: '*/roadshow/bestellung/*'\n    - name: stg_webshop_position\n      hk_column: hk_product_h\n      bk_columns: 'product_bk'\n      rsrc_static: '*/webshop/position/*'\n    - name: stg_webshop_produkt\n      hk_column: hk_product_h\n      bk_columns: 'product_bk'\n      rsrc_static: '*/webshop/produkt/*'\nhashkey: hk_product_h\nbusiness_keys: \n  - 'product_bk'\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.hub(source_models=metadata_dict[\"source_models\"],\n                hashkey=metadata_dict[\"hashkey\"],\n                business_keys=metadata_dict[\"business_keys\"]) }}", "language": "sql", "refs": [{"name": "stg_roadshow_bestellung", "package": null, "version": null}, {"name": "stg_webshop_position", "package": null, "version": null}, {"name": "stg_webshop_produkt", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.hub"], "nodes": ["model.ddvug_willibald_samen.stg_roadshow_bestellung", "model.ddvug_willibald_samen.stg_webshop_position", "model.ddvug_willibald_samen.stg_webshop_produkt"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_product_h"], "time_spine": null}, "model.ddvug_willibald_samen.product_productcategory_l": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "product_productcategory_l", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/product/product_productcategory_l.sql", "original_file_path": "models/dwh_04_rv/product/product_productcategory_l.sql", "unique_id": "model.ddvug_willibald_samen.product_productcategory_l", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "product", "product_productcategory_l"], "alias": "product_productcategory_l", "checksum": {"name": "sha256", "checksum": "4c420b1b9ef871fef75b072a566703b7c9a00de924debf5208cf34564669486a"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "Link", "columns": {"hk_product_h": {"name": "hk_product_h", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_04_rv/product/test_product_productcategory_l.yaml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.8718662, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_productcategory_l", "raw_code": "{# template link Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_models: \n  stg_webshop_produkt:\n    fk_columns: \n      - 'hk_productcategory_h'\n      - 'hk_product_h'\n    rsrc_static: '*/webshop/produkt/*'\nlink_hashkey: hk_product_productcategory_l \nforeign_hashkeys: \n  - 'hk_productcategory_h'\n  - 'hk_product_h'\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.link(source_models=metadata_dict['source_models'],\n        link_hashkey=metadata_dict['link_hashkey'],\n        foreign_hashkeys=metadata_dict['foreign_hashkeys']\n        )}}", "language": "sql", "refs": [{"name": "stg_webshop_produkt", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.link"], "nodes": ["model.ddvug_willibald_samen.stg_webshop_produkt"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_product_h"], "time_spine": null}, "model.ddvug_willibald_samen.product_productcategory_ws_es": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "product_productcategory_ws_es", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/product/product_productcategory_ws_es.sql", "original_file_path": "models/dwh_04_rv/product/product_productcategory_ws_es.sql", "unique_id": "model.ddvug_willibald_samen.product_productcategory_ws_es", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "product", "product_productcategory_ws_es"], "alias": "product_productcategory_ws_es", "checksum": {"name": "sha256", "checksum": "189cb5a301ebf4869a5b90debac58d9ccc8bc21cc462ac6d3036165389c4d9e0"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "view"}, "created_at": 1743626380.140952, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_productcategory_ws_es", "raw_code": "{# template e_sat_v1 Version:0.2.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='view') }} \n\n-- depends_on: {{ ref('product_productcategory_l') }}\n\n{%- set yaml_metadata -%}\nsts_sats: 'product_productcategory_ws_sts'\nlink_hashkey:  'hk_product_productcategory_l'\nlink_name: 'product_productcategory_l'\ndriving_key: 'hk_product_h'\nsecondary_fks: 'hk_productcategory_h'\n\n\nadd_is_current_flag: true\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n{%- set sts_sats = metadata_dict['sts_sats'] -%}\n{%- set link_hashkey = metadata_dict['link_hashkey'] -%}\n{%- set link_name = metadata_dict['link_name'] -%}\n{%- set driving_key = metadata_dict['driving_key'] -%}\n{%- set secondary_fks = metadata_dict['secondary_fks'] -%}\n{%- set ledts_alias = metadata_dict['ledts_alias'] -%}\n{%- set src_edts = metadata_dict['src_edts'] -%}\n{%- set add_is_current_flag = metadata_dict['add_is_current_flag'] -%}\n\n{{ datavault_extension.efs(sts_sats=sts_sats,\n                        link_hashkey=link_hashkey,\n                        link_name=link_name,                        \n                        driving_key=driving_key,\n                        secondary_fks=secondary_fks,                        \n                        ledts_alias=ledts_alias,\n                        src_edts=src_edts,\n                        add_is_current_flag=add_is_current_flag) }}", "language": "sql", "refs": [{"name": "product_productcategory_l", "package": null, "version": null}, {"name": "product_productcategory_l", "package": null, "version": null}, {"name": "product_productcategory_ws_sts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.efs"], "nodes": ["model.ddvug_willibald_samen.product_productcategory_l", "model.ddvug_willibald_samen.product_productcategory_ws_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.product_productcategory_ws_sts": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "product_productcategory_ws_sts", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/product/product_productcategory_ws_sts.sql", "original_file_path": "models/dwh_04_rv/product/product_productcategory_ws_sts.sql", "unique_id": "model.ddvug_willibald_samen.product_productcategory_ws_sts", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "product", "product_productcategory_ws_sts"], "alias": "product_productcategory_ws_sts", "checksum": {"name": "sha256", "checksum": "1cb34c21bc77d8bec39da93e6e48a3774ebd04d987150eb5e55e45441f8d82b5"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.1453068, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_productcategory_ws_sts", "raw_code": "{# template st_sat_v0 Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\ntracked_hashkey: \"hk_product_productcategory_l\"\nstage_source_model: \"stg_webshop_produkt\"\nload_type: full\n\n  \n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set tracked_hashkey = metadata_dict['tracked_hashkey'] -%}\n{%- set stage_source_model = metadata_dict['stage_source_model'] -%}\n{%- set src_edts = metadata_dict['src_edts'] -%}\n{%- set load_type = metadata_dict['load_type'] -%}\n{%- set edts_hashkey = metadata_dict['edts_hashkey'] -%}\n\n{{ datavault_extension.sts_v0(\n                            tracked_hashkey=tracked_hashkey\n                            , stage_source_model=stage_source_model\n                            , load_type=load_type\n                            , src_edts=src_edts \n                            , edts_hashkey=edts_hashkey\n                            ) }}", "language": "sql", "refs": [{"name": "stg_webshop_produkt", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sts_v0"], "nodes": ["model.ddvug_willibald_samen.stg_webshop_produkt"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.product_ws_sts": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "product_ws_sts", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/product/product_ws_sts.sql", "original_file_path": "models/dwh_04_rv/product/product_ws_sts.sql", "unique_id": "model.ddvug_willibald_samen.product_ws_sts", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "product", "product_ws_sts"], "alias": "product_ws_sts", "checksum": {"name": "sha256", "checksum": "47821935efc3a48f6e0cd5287e574f79304f24de6e3592f594d099071aca5529"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.1502779, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_ws_sts", "raw_code": "{# template st_sat_v0 Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\ntracked_hashkey: \"hk_product_h\"\nstage_source_model: \"stg_webshop_produkt\"\nload_type: full\n\n  \n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set tracked_hashkey = metadata_dict['tracked_hashkey'] -%}\n{%- set stage_source_model = metadata_dict['stage_source_model'] -%}\n{%- set src_edts = metadata_dict['src_edts'] -%}\n{%- set load_type = metadata_dict['load_type'] -%}\n{%- set edts_hashkey = metadata_dict['edts_hashkey'] -%}\n\n{{ datavault_extension.sts_v0(\n                            tracked_hashkey=tracked_hashkey\n                            , stage_source_model=stage_source_model\n                            , load_type=load_type\n                            , src_edts=src_edts \n                            , edts_hashkey=edts_hashkey\n                            ) }}", "language": "sql", "refs": [{"name": "stg_webshop_produkt", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sts_v0"], "nodes": ["model.ddvug_willibald_samen.stg_webshop_produkt"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.order_customer_rs_rts": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "order_customer_rs_rts", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/_not_dataspot_sourced/order/order_customer_rs_rts.sql", "original_file_path": "models/dwh_04_rv/_not_dataspot_sourced/order/order_customer_rs_rts.sql", "unique_id": "model.ddvug_willibald_samen.order_customer_rs_rts", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "_not_dataspot_sourced", "order", "order_customer_rs_rts"], "alias": "order_customer_rs_rts", "checksum": {"name": "sha256", "checksum": "a0169bda2cf83c5429108561a01ac5c7e08f6a2204bb7e13300daa2cb097ffbb"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.155596, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_customer_rs_rts", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\ntracked_hashkey: hk_order_customer_l\nsource_models: stg_roadshow_bestellung\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{{ datavault4dbt.rec_track_sat(tracked_hashkey=metadata_dict['tracked_hashkey'],\n                                source_models=metadata_dict['source_models']) }}\n                                {{ config(materialized='incremental') }}", "language": "sql", "refs": [{"name": "stg_roadshow_bestellung", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.rec_track_sat"], "nodes": ["model.ddvug_willibald_samen.stg_roadshow_bestellung"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.order_rs_rts": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "order_rs_rts", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/_not_dataspot_sourced/order/order_rs_rts.sql", "original_file_path": "models/dwh_04_rv/_not_dataspot_sourced/order/order_rs_rts.sql", "unique_id": "model.ddvug_willibald_samen.order_rs_rts", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "_not_dataspot_sourced", "order", "order_rs_rts"], "alias": "order_rs_rts", "checksum": {"name": "sha256", "checksum": "b82522b357e8568f2847f67f22e0ea01de9d0647d9f9c8e4dfd0fca830240754"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.170857, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_rs_rts", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\ntracked_hashkey: hk_order_h\nsource_models: stg_roadshow_bestellung\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{{ datavault4dbt.rec_track_sat(tracked_hashkey=metadata_dict['tracked_hashkey'],\n                                source_models=metadata_dict['source_models']) }}\n                                {{ config(materialized='incremental') }}", "language": "sql", "refs": [{"name": "stg_roadshow_bestellung", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.rec_track_sat"], "nodes": ["model.ddvug_willibald_samen.stg_roadshow_bestellung"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.category_deliveryadherence_misc_sts": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "category_deliveryadherence_misc_sts", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/_not_dataspot_sourced/category_deliveryadherence/category_deliveryadherence_misc_sts.sql", "original_file_path": "models/dwh_04_rv/_not_dataspot_sourced/category_deliveryadherence/category_deliveryadherence_misc_sts.sql", "unique_id": "model.ddvug_willibald_samen.category_deliveryadherence_misc_sts", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "_not_dataspot_sourced", "category_deliveryadherence", "category_deliveryadherence_misc_sts"], "alias": "category_deliveryadherence_misc_sts", "checksum": {"name": "sha256", "checksum": "848147a00a5f5585b5cb4705bfda69650a1ea6419296c56a2138bb2b8ff3902c"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.17456, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.category_deliveryadherence_misc_sts", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\ntracked_hashkey: 'category_deliveryadherence_nk'\nstage_source_model: stg_misc_kategorie_termintreue\n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set tracked_hashkey = metadata_dict['tracked_hashkey'] -%}\n{%- set stage_source_model = metadata_dict['stage_source_model'] -%}\n{%- set src_edts = metadata_dict['src_edts'] -%}\n\n{{ datavault_extension.sts_v0(\n                            tracked_hashkey=tracked_hashkey\n                            , stage_source_model=stage_source_model\n                            , src_edts=src_edts \n                            ) }}", "language": "sql", "refs": [{"name": "stg_misc_kategorie_termintreue", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sts_v0"], "nodes": ["model.ddvug_willibald_samen.stg_misc_kategorie_termintreue"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.product_type_ws_rs": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "product_type_ws_rs", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/_not_dataspot_sourced/product_type/product_type_ws_rs.sql", "original_file_path": "models/dwh_04_rv/_not_dataspot_sourced/product_type/product_type_ws_rs.sql", "unique_id": "model.ddvug_willibald_samen.product_type_ws_rs", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "_not_dataspot_sourced", "product_type", "product_type_ws_rs"], "alias": "product_type_ws_rs", "checksum": {"name": "sha256", "checksum": "8b034c925878039d63e964e460ac2e94540607bdf9f7cf3ba7cb2efc9dd7e4cb"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "enabled": true, "materialized": "table"}, "created_at": 1743626380.179661, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_type_ws_rs", "raw_code": "{{ config(enabled=true,materialized='table') }}\n\n{%- set yaml_metadata -%}\nparent_reference_key: 'product_type_nk'\nsrc_hashdiff: 'hd_product_type_ws_rs'\nsrc_payload:\n    - 'bezeichnung'\nsource_model: 'stg_webshop_ref_produkt_typ'\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{{ datavault4dbt.ref_sat_v0(parent_ref_keys=metadata_dict['parent_reference_key'],\n                        src_hashdiff=metadata_dict['src_hashdiff'],\n                        source_model=metadata_dict['source_model'],\n                        src_payload=metadata_dict['src_payload']) }}", "language": "sql", "refs": [{"name": "stg_webshop_ref_produkt_typ", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.ref_sat_v0"], "nodes": ["model.ddvug_willibald_samen.stg_webshop_ref_produkt_typ"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.delivery_nhl": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "delivery_nhl", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/delivery/delivery_nhl.sql", "original_file_path": "models/dwh_04_rv/delivery/delivery_nhl.sql", "unique_id": "model.ddvug_willibald_samen.delivery_nhl", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "delivery", "delivery_nhl"], "alias": "delivery_nhl", "checksum": {"name": "sha256", "checksum": "85fb5993804feb91b6c24b716fba17557ca9065a21c949e8e169bf796174e6a2"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.189404, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.delivery_nhl", "raw_code": "{# template nh_link Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_models: stg_webshop_lieferung\nlink_hashkey: hk_delivery_l \nforeign_hashkeys: \n  - 'hk_deliveryadress_h'\n  - 'hk_deliveryservice_h'\n  - 'hk_order_h'\n  - 'hk_position_h'\n\npayload:\n  - bestellungid\n  - lieferdatum\n  - posid\n\n\n\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set link_hashkey = metadata_dict['link_hashkey'] -%}\n{%- set foreign_hashkeys = metadata_dict['foreign_hashkeys'] -%}\n{%- set payload = metadata_dict['payload'] -%}\n{%- set source_models = metadata_dict['source_models'] -%}\n\n\n{{ datavault4dbt.nh_link(link_hashkey=link_hashkey,\n                        foreign_hashkeys=foreign_hashkeys,\n                        payload=payload,\n                        source_models=source_models) }}", "language": "sql", "refs": [{"name": "stg_webshop_lieferung", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.nh_link"], "nodes": ["model.ddvug_willibald_samen.stg_webshop_lieferung"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.deliveryadress_customer_l": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "deliveryadress_customer_l", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/deliveryadress/deliveryadress_customer_l.sql", "original_file_path": "models/dwh_04_rv/deliveryadress/deliveryadress_customer_l.sql", "unique_id": "model.ddvug_willibald_samen.deliveryadress_customer_l", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "deliveryadress", "deliveryadress_customer_l"], "alias": "deliveryadress_customer_l", "checksum": {"name": "sha256", "checksum": "567b9a157505a45be0dbb1c26a6a9448c2c81b113d0d290569aa1be8b89b8cec"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "Link", "columns": {"hk_customer_h": {"name": "hk_customer_h", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_04_rv/deliveryadress/test_deliveryadress_customer_l.yaml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.884345, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryadress_customer_l", "raw_code": "{# template link Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_models: \n  stg_webshop_lieferadresse:\n    fk_columns: \n      - 'hk_deliveryadress_h'\n      - 'hk_customer_h'\n    rsrc_static: '*/webshop/lieferadresse/*'\nlink_hashkey: hk_deliveryadress_customer_l \nforeign_hashkeys: \n  - 'hk_deliveryadress_h'\n  - 'hk_customer_h'\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.link(source_models=metadata_dict['source_models'],\n        link_hashkey=metadata_dict['link_hashkey'],\n        foreign_hashkeys=metadata_dict['foreign_hashkeys']\n        )}}", "language": "sql", "refs": [{"name": "stg_webshop_lieferadresse", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.link"], "nodes": ["model.ddvug_willibald_samen.stg_webshop_lieferadresse"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_customer_h"], "time_spine": null}, "model.ddvug_willibald_samen.deliveryadress_h": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "deliveryadress_h", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/deliveryadress/deliveryadress_h.sql", "original_file_path": "models/dwh_04_rv/deliveryadress/deliveryadress_h.sql", "unique_id": "model.ddvug_willibald_samen.deliveryadress_h", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "deliveryadress", "deliveryadress_h"], "alias": "deliveryadress_h", "checksum": {"name": "sha256", "checksum": "3c8ac97fc2912a23c9354d6060429c5b4c71218b2b2c11b8670e82ec2c358853"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "Hub of deliveryadress", "columns": {"hk_deliveryadress_h": {"name": "hk_deliveryadress_h", "description": "Hashkey of deliveryadress", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_04_rv/deliveryadress/test_deliveryadress_h.yaml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.882112, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryadress_h", "raw_code": "{# template hub Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_models: \n    - name: stg_webshop_lieferadresse\n      hk_column: hk_deliveryadress_h\n      bk_columns: 'deliveryadress_bk'\n      rsrc_static: '*/webshop/lieferadresse/*'\n    - name: stg_webshop_lieferung\n      hk_column: hk_deliveryadress_h\n      bk_columns: 'deliveryadress_bk'\n      rsrc_static: '*/webshop/lieferung/*'\nhashkey: hk_deliveryadress_h\nbusiness_keys: \n  - 'deliveryadress_bk'\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.hub(source_models=metadata_dict[\"source_models\"],\n                hashkey=metadata_dict[\"hashkey\"],\n                business_keys=metadata_dict[\"business_keys\"]) }}", "language": "sql", "refs": [{"name": "stg_webshop_lieferadresse", "package": null, "version": null}, {"name": "stg_webshop_lieferung", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.hub"], "nodes": ["model.ddvug_willibald_samen.stg_webshop_lieferadresse", "model.ddvug_willibald_samen.stg_webshop_lieferung"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_deliveryadress_h"], "time_spine": null}, "model.ddvug_willibald_samen.deliveryadress_customer_ws_es": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "deliveryadress_customer_ws_es", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/deliveryadress/deliveryadress_customer_ws_es.sql", "original_file_path": "models/dwh_04_rv/deliveryadress/deliveryadress_customer_ws_es.sql", "unique_id": "model.ddvug_willibald_samen.deliveryadress_customer_ws_es", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "deliveryadress", "deliveryadress_customer_ws_es"], "alias": "deliveryadress_customer_ws_es", "checksum": {"name": "sha256", "checksum": "55a78194d0fcfba311de9fecacec4f919c616e0ec622c64e31d19de9bb34c1de"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "view"}, "created_at": 1743626380.214126, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryadress_customer_ws_es", "raw_code": "{# template e_sat_v1 Version:0.2.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='view') }} \n\n-- depends_on: {{ ref('deliveryadress_customer_l') }}\n\n{%- set yaml_metadata -%}\nsts_sats: 'deliveryadress_customer_ws_sts'\nlink_hashkey:  'hk_deliveryadress_customer_l'\nlink_name: 'deliveryadress_customer_l'\ndriving_key: 'hk_customer_h'\nsecondary_fks: 'hk_deliveryadress_h'\n\n\nadd_is_current_flag: true\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n{%- set sts_sats = metadata_dict['sts_sats'] -%}\n{%- set link_hashkey = metadata_dict['link_hashkey'] -%}\n{%- set link_name = metadata_dict['link_name'] -%}\n{%- set driving_key = metadata_dict['driving_key'] -%}\n{%- set secondary_fks = metadata_dict['secondary_fks'] -%}\n{%- set ledts_alias = metadata_dict['ledts_alias'] -%}\n{%- set src_edts = metadata_dict['src_edts'] -%}\n{%- set add_is_current_flag = metadata_dict['add_is_current_flag'] -%}\n\n{{ datavault_extension.efs(sts_sats=sts_sats,\n                        link_hashkey=link_hashkey,\n                        link_name=link_name,                        \n                        driving_key=driving_key,\n                        secondary_fks=secondary_fks,                        \n                        ledts_alias=ledts_alias,\n                        src_edts=src_edts,\n                        add_is_current_flag=add_is_current_flag) }}", "language": "sql", "refs": [{"name": "deliveryadress_customer_l", "package": null, "version": null}, {"name": "deliveryadress_customer_l", "package": null, "version": null}, {"name": "deliveryadress_customer_ws_sts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.efs"], "nodes": ["model.ddvug_willibald_samen.deliveryadress_customer_l", "model.ddvug_willibald_samen.deliveryadress_customer_ws_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.deliveryadress_ws_s": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "deliveryadress_ws_s", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/deliveryadress/deliveryadress_ws_s.sql", "original_file_path": "models/dwh_04_rv/deliveryadress/deliveryadress_ws_s.sql", "unique_id": "model.ddvug_willibald_samen.deliveryadress_ws_s", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "deliveryadress", "deliveryadress_ws_s"], "alias": "deliveryadress_ws_s", "checksum": {"name": "sha256", "checksum": "880cfac3e6b1eacdf3bcb8b7fae98129b12783893384ba4fa9140ab6a6f730a5"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["hk_deliveryadress_h", "ldts"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "Satellit for deliveryadress_h", "columns": {"hk_deliveryadress_h": {"name": "hk_deliveryadress_h", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_04_rv/deliveryadress/test_deliveryadress_ws_s.yaml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental", "unique_key": ["hk_deliveryadress_h", "ldts"]}, "created_at": 1743626380.8881469, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryadress_ws_s", "raw_code": "{# template sat_v0 Version: 0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental',\n           unique_key=['hk_deliveryadress_h', 'ldts']) }} \n\n{%- set yaml_metadata -%}\nsource_model: \"stg_webshop_lieferadresse\" \nparent_hashkey: 'hk_deliveryadress_h'\nsrc_hashdiff: 'hd_deliveryadress_ws_s'\nsrc_payload: \n  - adresszusatz\n  - hausnummer\n  - land\n  - ort\n  - plz\n  - strasse\n\n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set parent_hashkey = metadata_dict['parent_hashkey'] -%}\n{%- set src_hashdiff = metadata_dict['src_hashdiff'] -%}\n{%- set source_model = metadata_dict['source_model'] -%}\n{%- set src_payload = metadata_dict['src_payload'] -%}\n\n\n{{ datavault4dbt.sat_v0(parent_hashkey=parent_hashkey,\n                        src_hashdiff=src_hashdiff,\n                        source_model=source_model,\n                        src_payload=src_payload) }}", "language": "sql", "refs": [{"name": "stg_webshop_lieferadresse", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.sat_v0"], "nodes": ["model.ddvug_willibald_samen.stg_webshop_lieferadresse"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_deliveryadress_h"], "time_spine": null}, "model.ddvug_willibald_samen.deliveryadress_customer_ws_sts": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "deliveryadress_customer_ws_sts", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/deliveryadress/deliveryadress_customer_ws_sts.sql", "original_file_path": "models/dwh_04_rv/deliveryadress/deliveryadress_customer_ws_sts.sql", "unique_id": "model.ddvug_willibald_samen.deliveryadress_customer_ws_sts", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "deliveryadress", "deliveryadress_customer_ws_sts"], "alias": "deliveryadress_customer_ws_sts", "checksum": {"name": "sha256", "checksum": "95018c4b45a36b945d0cf6d3ab47810890bdd4f617cdf0939337d316f43b8fe5"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.2219331, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryadress_customer_ws_sts", "raw_code": "{# template st_sat_v0 Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\ntracked_hashkey: \"hk_deliveryadress_customer_l\"\nstage_source_model: \"stg_webshop_lieferadresse\"\nload_type: full\n\n  \n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set tracked_hashkey = metadata_dict['tracked_hashkey'] -%}\n{%- set stage_source_model = metadata_dict['stage_source_model'] -%}\n{%- set src_edts = metadata_dict['src_edts'] -%}\n{%- set load_type = metadata_dict['load_type'] -%}\n{%- set edts_hashkey = metadata_dict['edts_hashkey'] -%}\n\n{{ datavault_extension.sts_v0(\n                            tracked_hashkey=tracked_hashkey\n                            , stage_source_model=stage_source_model\n                            , load_type=load_type\n                            , src_edts=src_edts \n                            , edts_hashkey=edts_hashkey\n                            ) }}", "language": "sql", "refs": [{"name": "stg_webshop_lieferadresse", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sts_v0"], "nodes": ["model.ddvug_willibald_samen.stg_webshop_lieferadresse"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.category_deliveryadherence_misc_rs": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "category_deliveryadherence_misc_rs", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/reference/category_deliveryadherence/category_deliveryadherence_misc_rs.sql", "original_file_path": "models/dwh_04_rv/reference/category_deliveryadherence/category_deliveryadherence_misc_rs.sql", "unique_id": "model.ddvug_willibald_samen.category_deliveryadherence_misc_rs", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "reference", "category_deliveryadherence", "category_deliveryadherence_misc_rs"], "alias": "category_deliveryadherence_misc_rs", "checksum": {"name": "sha256", "checksum": "ef12ff4cec6909b75cdac9cfdaac6bc213ddfd01e69e116ae574af398de84a01"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "Satellit for category_deliveryadherence_r", "columns": {"category_deliveryadherence_nk": {"name": "category_deliveryadherence_nk", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_04_rv/reference/category_deliveryadherence/test_category_deliveryadherence_misc_rs.yaml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.892108, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.category_deliveryadherence_misc_rs", "raw_code": "{# template ref_sat_v0 Version: 0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }} \n\n{%- set yaml_metadata -%}\nsource_model: stg_misc_kategorie_termintreue\nparent_ref_keys: category_deliveryadherence_nk\nsrc_hashdiff: 'hd_category_deliveryadherence_misc_rs'\nsrc_payload: \n  - count_days_from\n  - count_days_to\n  - name\n\n{%- endset -%}      \n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.ref_sat_v0(source_model=metadata_dict['source_model'],\n                     parent_ref_keys=metadata_dict['parent_ref_keys'],\n                     src_hashdiff=metadata_dict['src_hashdiff'],\n                     src_payload=metadata_dict['src_payload']) }}", "language": "sql", "refs": [{"name": "stg_misc_kategorie_termintreue", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.ref_sat_v0"], "nodes": ["model.ddvug_willibald_samen.stg_misc_kategorie_termintreue"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["category_deliveryadherence_nk"], "time_spine": null}, "model.ddvug_willibald_samen.category_deliveryadherence_r": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "category_deliveryadherence_r", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/reference/category_deliveryadherence/category_deliveryadherence_r.sql", "original_file_path": "models/dwh_04_rv/reference/category_deliveryadherence/category_deliveryadherence_r.sql", "unique_id": "model.ddvug_willibald_samen.category_deliveryadherence_r", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "reference", "category_deliveryadherence", "category_deliveryadherence_r"], "alias": "category_deliveryadherence_r", "checksum": {"name": "sha256", "checksum": "07880cd81a2485f727f03fbdf17d7d3106989f2e1a1bc8a870bc0d750e435243"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "Hub of category_deliveryadherence", "columns": {"category_deliveryadherence_nk": {"name": "category_deliveryadherence_nk", "description": "Hashkey of category_deliveryadherence", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_04_rv/reference/category_deliveryadherence/test_category_deliveryadherence_r.yaml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.89577, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.category_deliveryadherence_r", "raw_code": "{# template hub Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_models: \n    - name: stg_misc_kategorie_termintreue\n      bk_columns: 'category_deliveryadherence_nk'\n      rsrc_static: '*/misc/kategorie_termintreue/*'\nref_keys: \n  - 'category_deliveryadherence_nk'\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.ref_hub(source_models=metadata_dict['source_models'],\n                     ref_keys=metadata_dict['ref_keys']) }}", "language": "sql", "refs": [{"name": "stg_misc_kategorie_termintreue", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.ref_hub"], "nodes": ["model.ddvug_willibald_samen.stg_misc_kategorie_termintreue"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["category_deliveryadherence_nk"], "time_spine": null}, "model.ddvug_willibald_samen.customer_ws_la_ms": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "customer_ws_la_ms", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/customer/customer_ws_la_ms.sql", "original_file_path": "models/dwh_04_rv/customer/customer_ws_la_ms.sql", "unique_id": "model.ddvug_willibald_samen.customer_ws_la_ms", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "customer", "customer_ws_la_ms"], "alias": "customer_ws_la_ms", "checksum": {"name": "sha256", "checksum": "a283f66f3df27bc9401e1513e14ad6c2deb65d172c69352db78451328fe1d420"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["hk_customer_h", "von", "ldts"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental", "unique_key": ["hk_customer_h", "von", "ldts"]}, "created_at": 1743626380.244221, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_ws_la_ms", "raw_code": "{# template sat_ma_v0 Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental',\n           unique_key=['hk_customer_h', 'von', 'ldts']) }}\n\n{%- set yaml_metadata -%}\nsource_model: \"stg_webshop_wohnort\" \nparent_hashkey: \"hk_customer_h\"\nsrc_hashdiff: 'hd_customer_ws_la_ms'\nsrc_ma_key: \n  - von\n\nsrc_payload: \n  - adresszusatz\n  - bis\n  - hausnummer\n  - land\n  - ort\n  - plz\n  - strasse\n\n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n{%- set src_edts = metadata_dict['src_edts'] -%}\n\n{{ datavault4dbt.ma_sat_v0(source_model=metadata_dict['source_model'],\n                        parent_hashkey=metadata_dict['parent_hashkey'],\n                        src_hashdiff=metadata_dict['src_hashdiff'],\n                        src_ma_key=metadata_dict['src_ma_key'],\n                        src_payload=metadata_dict['src_payload']\n                        ) }}", "language": "sql", "refs": [{"name": "stg_webshop_wohnort", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.ma_sat_v0"], "nodes": ["model.ddvug_willibald_samen.stg_webshop_wohnort"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.customer_associationpartner_ws_es": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "customer_associationpartner_ws_es", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/customer/customer_associationpartner_ws_es.sql", "original_file_path": "models/dwh_04_rv/customer/customer_associationpartner_ws_es.sql", "unique_id": "model.ddvug_willibald_samen.customer_associationpartner_ws_es", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "customer", "customer_associationpartner_ws_es"], "alias": "customer_associationpartner_ws_es", "checksum": {"name": "sha256", "checksum": "76fdc3d1a3eb532ccb705a5ea5a766d75408f3637326caccded9f59e2d0036fe"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "view"}, "created_at": 1743626380.262809, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_associationpartner_ws_es", "raw_code": "{# template e_sat_v1 Version:0.2.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='view') }} \n\n-- depends_on: {{ ref('customer_associationpartner_l') }}\n\n{%- set yaml_metadata -%}\nsts_sats: 'customer_associationpartner_ws_sts'\nlink_hashkey:  'hk_customer_associationpartner_l'\nlink_name: 'customer_associationpartner_l'\ndriving_key: 'hk_customer_h'\nsecondary_fks: 'hk_associationpartner_h'\n\n\nadd_is_current_flag: true\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n{%- set sts_sats = metadata_dict['sts_sats'] -%}\n{%- set link_hashkey = metadata_dict['link_hashkey'] -%}\n{%- set link_name = metadata_dict['link_name'] -%}\n{%- set driving_key = metadata_dict['driving_key'] -%}\n{%- set secondary_fks = metadata_dict['secondary_fks'] -%}\n{%- set ledts_alias = metadata_dict['ledts_alias'] -%}\n{%- set src_edts = metadata_dict['src_edts'] -%}\n{%- set add_is_current_flag = metadata_dict['add_is_current_flag'] -%}\n\n{{ datavault_extension.efs(sts_sats=sts_sats,\n                        link_hashkey=link_hashkey,\n                        link_name=link_name,                        \n                        driving_key=driving_key,\n                        secondary_fks=secondary_fks,                        \n                        ledts_alias=ledts_alias,\n                        src_edts=src_edts,\n                        add_is_current_flag=add_is_current_flag) }}", "language": "sql", "refs": [{"name": "customer_associationpartner_l", "package": null, "version": null}, {"name": "customer_associationpartner_l", "package": null, "version": null}, {"name": "customer_associationpartner_ws_sts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.efs"], "nodes": ["model.ddvug_willibald_samen.customer_associationpartner_l", "model.ddvug_willibald_samen.customer_associationpartner_ws_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.customer_associationpartner_l": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "customer_associationpartner_l", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/customer/customer_associationpartner_l.sql", "original_file_path": "models/dwh_04_rv/customer/customer_associationpartner_l.sql", "unique_id": "model.ddvug_willibald_samen.customer_associationpartner_l", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "customer", "customer_associationpartner_l"], "alias": "customer_associationpartner_l", "checksum": {"name": "sha256", "checksum": "c9a84f60e305bbb27f4bc80bf67a90cc5b0b8ee8d4bc14bc86b7bf7f34462714"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "Link", "columns": {"hk_associationpartner_h": {"name": "hk_associationpartner_h", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_04_rv/customer/test_customer_associationpartner_l.yaml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.900246, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_associationpartner_l", "raw_code": "{# template link Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_models: \n  stg_webshop_kunde:\n    fk_columns: \n      - 'hk_customer_h'\n      - 'hk_associationpartner_h'\n    rsrc_static: '*/webshop/kunde/*'\nlink_hashkey: hk_customer_associationpartner_l \nforeign_hashkeys: \n  - 'hk_customer_h'\n  - 'hk_associationpartner_h'\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.link(source_models=metadata_dict['source_models'],\n        link_hashkey=metadata_dict['link_hashkey'],\n        foreign_hashkeys=metadata_dict['foreign_hashkeys']\n        )}}", "language": "sql", "refs": [{"name": "stg_webshop_kunde", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.link"], "nodes": ["model.ddvug_willibald_samen.stg_webshop_kunde"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_associationpartner_h"], "time_spine": null}, "model.ddvug_willibald_samen.customer_ws_sts": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "customer_ws_sts", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/customer/customer_ws_sts.sql", "original_file_path": "models/dwh_04_rv/customer/customer_ws_sts.sql", "unique_id": "model.ddvug_willibald_samen.customer_ws_sts", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "customer", "customer_ws_sts"], "alias": "customer_ws_sts", "checksum": {"name": "sha256", "checksum": "6080fed03017c95e2a4806551e949e6270bc641fb66a4f4c4a49b1ed143c1003"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.270763, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_ws_sts", "raw_code": "{# template st_sat_v0 Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\ntracked_hashkey: \"hk_customer_h\"\nstage_source_model: \"stg_webshop_kunde\"\nload_type: full\n\n  \n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set tracked_hashkey = metadata_dict['tracked_hashkey'] -%}\n{%- set stage_source_model = metadata_dict['stage_source_model'] -%}\n{%- set src_edts = metadata_dict['src_edts'] -%}\n{%- set load_type = metadata_dict['load_type'] -%}\n{%- set edts_hashkey = metadata_dict['edts_hashkey'] -%}\n\n{{ datavault_extension.sts_v0(\n                            tracked_hashkey=tracked_hashkey\n                            , stage_source_model=stage_source_model\n                            , load_type=load_type\n                            , src_edts=src_edts \n                            , edts_hashkey=edts_hashkey\n                            ) }}", "language": "sql", "refs": [{"name": "stg_webshop_kunde", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sts_v0"], "nodes": ["model.ddvug_willibald_samen.stg_webshop_kunde"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.customer_h": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "customer_h", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/customer/customer_h.sql", "original_file_path": "models/dwh_04_rv/customer/customer_h.sql", "unique_id": "model.ddvug_willibald_samen.customer_h", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "customer", "customer_h"], "alias": "customer_h", "checksum": {"name": "sha256", "checksum": "8d680d4bfdd7f805db74c29eae9889570a408cea81aa87b0e75721a6eacd89f2"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "Hub of customer", "columns": {"hk_customer_h": {"name": "hk_customer_h", "description": "Hashkey of customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_04_rv/customer/test_customer_h.yaml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.898005, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_h", "raw_code": "{# template hub Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_models: \n    - name: stg_roadshow_bestellung\n      hk_column: hk_customer_h\n      bk_columns: 'customer_bk'\n      rsrc_static: '*/roadshow/bestellung/*'\n    - name: stg_webshop_bestellung\n      hk_column: hk_customer_h\n      bk_columns: 'customer_bk'\n      rsrc_static: '*/webshop/bestellung/*'\n    - name: stg_webshop_kunde\n      hk_column: hk_customer_h\n      bk_columns: 'customer_bk'\n      rsrc_static: '*/webshop/kunde/*'\n    - name: stg_webshop_lieferadresse\n      hk_column: hk_customer_h\n      bk_columns: 'customer_bk'\n      rsrc_static: '*/webshop/lieferadresse/*'\n    - name: stg_webshop_vereinspartner\n      hk_column: hk_customer_h\n      bk_columns: 'customer_bk'\n      rsrc_static: '*/webshop/vereinspartner/*'\n    - name: stg_webshop_wohnort\n      hk_column: hk_customer_h\n      bk_columns: 'customer_bk'\n      rsrc_static: '*/webshop/wohnort/*'\nhashkey: hk_customer_h\nbusiness_keys: \n  - 'customer_bk'\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.hub(source_models=metadata_dict[\"source_models\"],\n                hashkey=metadata_dict[\"hashkey\"],\n                business_keys=metadata_dict[\"business_keys\"]) }}", "language": "sql", "refs": [{"name": "stg_roadshow_bestellung", "package": null, "version": null}, {"name": "stg_webshop_bestellung", "package": null, "version": null}, {"name": "stg_webshop_kunde", "package": null, "version": null}, {"name": "stg_webshop_lieferadresse", "package": null, "version": null}, {"name": "stg_webshop_vereinspartner", "package": null, "version": null}, {"name": "stg_webshop_wohnort", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.hub"], "nodes": ["model.ddvug_willibald_samen.stg_roadshow_bestellung", "model.ddvug_willibald_samen.stg_webshop_bestellung", "model.ddvug_willibald_samen.stg_webshop_kunde", "model.ddvug_willibald_samen.stg_webshop_lieferadresse", "model.ddvug_willibald_samen.stg_webshop_vereinspartner", "model.ddvug_willibald_samen.stg_webshop_wohnort"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_customer_h"], "time_spine": null}, "model.ddvug_willibald_samen.customer_associationpartner_ws_sts": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "customer_associationpartner_ws_sts", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/customer/customer_associationpartner_ws_sts.sql", "original_file_path": "models/dwh_04_rv/customer/customer_associationpartner_ws_sts.sql", "unique_id": "model.ddvug_willibald_samen.customer_associationpartner_ws_sts", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "customer", "customer_associationpartner_ws_sts"], "alias": "customer_associationpartner_ws_sts", "checksum": {"name": "sha256", "checksum": "f99451dfefa6f9d32c4c3729141879ac6ea7d9952c282f80e73876564863cdb4"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.281007, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_associationpartner_ws_sts", "raw_code": "{# template st_sat_v0 Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\ntracked_hashkey: \"hk_customer_associationpartner_l\"\nstage_source_model: \"stg_webshop_kunde\"\nload_type: full\n\n  \n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set tracked_hashkey = metadata_dict['tracked_hashkey'] -%}\n{%- set stage_source_model = metadata_dict['stage_source_model'] -%}\n{%- set src_edts = metadata_dict['src_edts'] -%}\n{%- set load_type = metadata_dict['load_type'] -%}\n{%- set edts_hashkey = metadata_dict['edts_hashkey'] -%}\n\n{{ datavault_extension.sts_v0(\n                            tracked_hashkey=tracked_hashkey\n                            , stage_source_model=stage_source_model\n                            , load_type=load_type\n                            , src_edts=src_edts \n                            , edts_hashkey=edts_hashkey\n                            ) }}", "language": "sql", "refs": [{"name": "stg_webshop_kunde", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sts_v0"], "nodes": ["model.ddvug_willibald_samen.stg_webshop_kunde"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.customer_ws_s": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "customer_ws_s", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/customer/customer_ws_s.sql", "original_file_path": "models/dwh_04_rv/customer/customer_ws_s.sql", "unique_id": "model.ddvug_willibald_samen.customer_ws_s", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "customer", "customer_ws_s"], "alias": "customer_ws_s", "checksum": {"name": "sha256", "checksum": "dfe6d9495e22cb21789f772f779dee8249964b634a366fca1dd784c6671ee365"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["hk_customer_h", "ldts"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "Satellit for customer_h", "columns": {"hk_customer_h": {"name": "hk_customer_h", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_04_rv/customer/test_customer_ws_s.yaml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental", "unique_key": ["hk_customer_h", "ldts"]}, "created_at": 1743626380.904244, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_ws_s", "raw_code": "{# template sat_v0 Version: 0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental',\n           unique_key=['hk_customer_h', 'ldts']) }} \n\n{%- set yaml_metadata -%}\nsource_model: \"stg_webshop_kunde\" \nparent_hashkey: 'hk_customer_h'\nsrc_hashdiff: 'hd_customer_ws_s'\nsrc_payload: \n  - email\n  - geburtsdatum\n  - geschlecht\n  - gueltigbis\n  - kkfirma\n  - kreditkarte\n  - mobil\n  - name\n  - telefon\n  - vorname\n\n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set parent_hashkey = metadata_dict['parent_hashkey'] -%}\n{%- set src_hashdiff = metadata_dict['src_hashdiff'] -%}\n{%- set source_model = metadata_dict['source_model'] -%}\n{%- set src_payload = metadata_dict['src_payload'] -%}\n\n\n{{ datavault4dbt.sat_v0(parent_hashkey=parent_hashkey,\n                        src_hashdiff=src_hashdiff,\n                        source_model=source_model,\n                        src_payload=src_payload) }}", "language": "sql", "refs": [{"name": "stg_webshop_kunde", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.sat_v0"], "nodes": ["model.ddvug_willibald_samen.stg_webshop_kunde"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_customer_h"], "time_spine": null}, "model.ddvug_willibald_samen.associationpartner_h": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "associationpartner_h", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/associationpartner/associationpartner_h.sql", "original_file_path": "models/dwh_04_rv/associationpartner/associationpartner_h.sql", "unique_id": "model.ddvug_willibald_samen.associationpartner_h", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "associationpartner", "associationpartner_h"], "alias": "associationpartner_h", "checksum": {"name": "sha256", "checksum": "0d2829441ef9b714d3ab0123c804f4b8d3f9439662c942f2be442faf411fb11a"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "Hub of associationpartner", "columns": {"hk_associationpartner_h": {"name": "hk_associationpartner_h", "description": "Hashkey of associationpartner", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_04_rv/associationpartner/test_associationpartner_h.yaml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.908055, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.associationpartner_h", "raw_code": "{# template hub Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_models: \n    - name: stg_roadshow_bestellung\n      hk_column: hk_associationpartner_h\n      bk_columns: 'associationpartner_bk'\n      rsrc_static: '*/roadshow/bestellung/*'\n    - name: stg_webshop_kunde\n      hk_column: hk_associationpartner_h\n      bk_columns: 'associationpartner_bk'\n      rsrc_static: '*/webshop/kunde/*'\n    - name: stg_webshop_vereinspartner\n      hk_column: hk_associationpartner_h\n      bk_columns: 'associationpartner_bk'\n      rsrc_static: '*/webshop/vereinspartner/*'\nhashkey: hk_associationpartner_h\nbusiness_keys: \n  - 'associationpartner_bk'\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.hub(source_models=metadata_dict[\"source_models\"],\n                hashkey=metadata_dict[\"hashkey\"],\n                business_keys=metadata_dict[\"business_keys\"]) }}", "language": "sql", "refs": [{"name": "stg_roadshow_bestellung", "package": null, "version": null}, {"name": "stg_webshop_kunde", "package": null, "version": null}, {"name": "stg_webshop_vereinspartner", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.hub"], "nodes": ["model.ddvug_willibald_samen.stg_roadshow_bestellung", "model.ddvug_willibald_samen.stg_webshop_kunde", "model.ddvug_willibald_samen.stg_webshop_vereinspartner"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_associationpartner_h"], "time_spine": null}, "model.ddvug_willibald_samen.associationpartner_ws_s": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "associationpartner_ws_s", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/associationpartner/associationpartner_ws_s.sql", "original_file_path": "models/dwh_04_rv/associationpartner/associationpartner_ws_s.sql", "unique_id": "model.ddvug_willibald_samen.associationpartner_ws_s", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "associationpartner", "associationpartner_ws_s"], "alias": "associationpartner_ws_s", "checksum": {"name": "sha256", "checksum": "322c13b31fba87a7e5bbc6c1b91f2694d81fdc7875982ce1cf835d9ee8ba0a03"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["hk_associationpartner_h", "ldts"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "Satellit for associationpartner_h", "columns": {"hk_associationpartner_h": {"name": "hk_associationpartner_h", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_04_rv/associationpartner/test_associationpartner_ws_s.yaml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental", "unique_key": ["hk_associationpartner_h", "ldts"]}, "created_at": 1743626380.914079, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.associationpartner_ws_s", "raw_code": "{# template sat_v0 Version: 0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental',\n           unique_key=['hk_associationpartner_h', 'ldts']) }} \n\n{%- set yaml_metadata -%}\nsource_model: \"stg_webshop_vereinspartner\" \nparent_hashkey: 'hk_associationpartner_h'\nsrc_hashdiff: 'hd_associationpartner_ws_s'\nsrc_payload: \n  - kundeidverein\n  - rabatt1\n  - rabatt2\n  - rabatt3\n\n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set parent_hashkey = metadata_dict['parent_hashkey'] -%}\n{%- set src_hashdiff = metadata_dict['src_hashdiff'] -%}\n{%- set source_model = metadata_dict['source_model'] -%}\n{%- set src_payload = metadata_dict['src_payload'] -%}\n\n\n{{ datavault4dbt.sat_v0(parent_hashkey=parent_hashkey,\n                        src_hashdiff=src_hashdiff,\n                        source_model=source_model,\n                        src_payload=src_payload) }}", "language": "sql", "refs": [{"name": "stg_webshop_vereinspartner", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.sat_v0"], "nodes": ["model.ddvug_willibald_samen.stg_webshop_vereinspartner"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_associationpartner_h"], "time_spine": null}, "model.ddvug_willibald_samen.associationpartner_customer_ws_sts": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "associationpartner_customer_ws_sts", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/associationpartner/associationpartner_customer_ws_sts.sql", "original_file_path": "models/dwh_04_rv/associationpartner/associationpartner_customer_ws_sts.sql", "unique_id": "model.ddvug_willibald_samen.associationpartner_customer_ws_sts", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "associationpartner", "associationpartner_customer_ws_sts"], "alias": "associationpartner_customer_ws_sts", "checksum": {"name": "sha256", "checksum": "401e7356ece16d8c01cf7aeba07fd692096da2f75d2d624a84c27c6bca8fdc04"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.2982311, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.associationpartner_customer_ws_sts", "raw_code": "{# template st_sat_v0 Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\ntracked_hashkey: \"hk_associationpartner_customer_l\"\nstage_source_model: \"stg_webshop_vereinspartner\"\nload_type: full\n\n  \n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set tracked_hashkey = metadata_dict['tracked_hashkey'] -%}\n{%- set stage_source_model = metadata_dict['stage_source_model'] -%}\n{%- set src_edts = metadata_dict['src_edts'] -%}\n{%- set load_type = metadata_dict['load_type'] -%}\n{%- set edts_hashkey = metadata_dict['edts_hashkey'] -%}\n\n{{ datavault_extension.sts_v0(\n                            tracked_hashkey=tracked_hashkey\n                            , stage_source_model=stage_source_model\n                            , load_type=load_type\n                            , src_edts=src_edts \n                            , edts_hashkey=edts_hashkey\n                            ) }}", "language": "sql", "refs": [{"name": "stg_webshop_vereinspartner", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sts_v0"], "nodes": ["model.ddvug_willibald_samen.stg_webshop_vereinspartner"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.associationpartner_customer_l": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "associationpartner_customer_l", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/associationpartner/associationpartner_customer_l.sql", "original_file_path": "models/dwh_04_rv/associationpartner/associationpartner_customer_l.sql", "unique_id": "model.ddvug_willibald_samen.associationpartner_customer_l", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "associationpartner", "associationpartner_customer_l"], "alias": "associationpartner_customer_l", "checksum": {"name": "sha256", "checksum": "6b85ecefe3affac58dc01ffcf1ae291c40a859e5d702082fabb7724b49a10043"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "Link", "columns": {"hk_associationpartner_h": {"name": "hk_associationpartner_h", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_04_rv/associationpartner/test_associationpartner_customer_l.yaml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.9102762, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.associationpartner_customer_l", "raw_code": "{# template link Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_models: \n  stg_webshop_vereinspartner:\n    fk_columns: \n      - 'hk_customer_h'\n      - 'hk_associationpartner_h'\n    rsrc_static: '*/webshop/vereinspartner/*'\nlink_hashkey: hk_associationpartner_customer_l \nforeign_hashkeys: \n  - 'hk_customer_h'\n  - 'hk_associationpartner_h'\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.link(source_models=metadata_dict['source_models'],\n        link_hashkey=metadata_dict['link_hashkey'],\n        foreign_hashkeys=metadata_dict['foreign_hashkeys']\n        )}}", "language": "sql", "refs": [{"name": "stg_webshop_vereinspartner", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.link"], "nodes": ["model.ddvug_willibald_samen.stg_webshop_vereinspartner"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_associationpartner_h"], "time_spine": null}, "model.ddvug_willibald_samen.associationpartner_customer_ws_es": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "associationpartner_customer_ws_es", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/associationpartner/associationpartner_customer_ws_es.sql", "original_file_path": "models/dwh_04_rv/associationpartner/associationpartner_customer_ws_es.sql", "unique_id": "model.ddvug_willibald_samen.associationpartner_customer_ws_es", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "associationpartner", "associationpartner_customer_ws_es"], "alias": "associationpartner_customer_ws_es", "checksum": {"name": "sha256", "checksum": "33f11245312821f2e495120960affd2245745716d2001bb568a9965be01588eb"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "view"}, "created_at": 1743626380.3072379, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.associationpartner_customer_ws_es", "raw_code": "{# template e_sat_v1 Version:0.2.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='view') }} \n\n-- depends_on: {{ ref('associationpartner_customer_l') }}\n\n{%- set yaml_metadata -%}\nsts_sats: 'associationpartner_customer_ws_sts'\nlink_hashkey:  'hk_associationpartner_customer_l'\nlink_name: 'associationpartner_customer_l'\ndriving_key: 'hk_associationpartner_h'\nsecondary_fks: 'hk_customer_h'\n\n\nadd_is_current_flag: true\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n{%- set sts_sats = metadata_dict['sts_sats'] -%}\n{%- set link_hashkey = metadata_dict['link_hashkey'] -%}\n{%- set link_name = metadata_dict['link_name'] -%}\n{%- set driving_key = metadata_dict['driving_key'] -%}\n{%- set secondary_fks = metadata_dict['secondary_fks'] -%}\n{%- set ledts_alias = metadata_dict['ledts_alias'] -%}\n{%- set src_edts = metadata_dict['src_edts'] -%}\n{%- set add_is_current_flag = metadata_dict['add_is_current_flag'] -%}\n\n{{ datavault_extension.efs(sts_sats=sts_sats,\n                        link_hashkey=link_hashkey,\n                        link_name=link_name,                        \n                        driving_key=driving_key,\n                        secondary_fks=secondary_fks,                        \n                        ledts_alias=ledts_alias,\n                        src_edts=src_edts,\n                        add_is_current_flag=add_is_current_flag) }}", "language": "sql", "refs": [{"name": "associationpartner_customer_l", "package": null, "version": null}, {"name": "associationpartner_customer_l", "package": null, "version": null}, {"name": "associationpartner_customer_ws_sts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.efs"], "nodes": ["model.ddvug_willibald_samen.associationpartner_customer_l", "model.ddvug_willibald_samen.associationpartner_customer_ws_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.associationpartner_ws_sts": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_04_rv", "name": "associationpartner_ws_sts", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_04_rv/associationpartner/associationpartner_ws_sts.sql", "original_file_path": "models/dwh_04_rv/associationpartner/associationpartner_ws_sts.sql", "unique_id": "model.ddvug_willibald_samen.associationpartner_ws_sts", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "associationpartner", "associationpartner_ws_sts"], "alias": "associationpartner_ws_sts", "checksum": {"name": "sha256", "checksum": "e477b06d1ba001aa6f94db6669816c5e3edbfa9f79232b10037ef2edd4fab11b"}, "config": {"enabled": true, "alias": null, "schema": "dwh_04_rv", "database": null, "tags": ["rv"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["rv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_04_rv", "tags": ["rv"], "materialized": "incremental"}, "created_at": 1743626380.311098, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.associationpartner_ws_sts", "raw_code": "{# template st_sat_v0 Version:0.1.0 #}\n{# automatically generated based on dataspot#}\n\n{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\ntracked_hashkey: \"hk_associationpartner_h\"\nstage_source_model: \"stg_webshop_vereinspartner\"\nload_type: full\n\n  \n\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set tracked_hashkey = metadata_dict['tracked_hashkey'] -%}\n{%- set stage_source_model = metadata_dict['stage_source_model'] -%}\n{%- set src_edts = metadata_dict['src_edts'] -%}\n{%- set load_type = metadata_dict['load_type'] -%}\n{%- set edts_hashkey = metadata_dict['edts_hashkey'] -%}\n\n{{ datavault_extension.sts_v0(\n                            tracked_hashkey=tracked_hashkey\n                            , stage_source_model=stage_source_model\n                            , load_type=load_type\n                            , src_edts=src_edts \n                            , edts_hashkey=edts_hashkey\n                            ) }}", "language": "sql", "refs": [{"name": "stg_webshop_vereinspartner", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.sts_v0"], "nodes": ["model.ddvug_willibald_samen.stg_webshop_vereinspartner"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.customer_bs": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_06_bv", "name": "customer_bs", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_06_bv/customer_bs.sql", "original_file_path": "models/dwh_06_bv/customer_bs.sql", "unique_id": "model.ddvug_willibald_samen.customer_bs", "fqn": ["ddvug_willibald_samen", "dwh_06_bv", "customer_bs"], "alias": "customer_bs", "checksum": {"name": "sha256", "checksum": "72d863c9c6d5f4e3be024c945c0ee64394271ff46508ebbae1947d2fb6fb4881"}, "config": {"enabled": true, "alias": null, "schema": "dwh_06_bv", "database": null, "tags": ["bv"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["bv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_06_bv", "tags": ["bv"]}, "created_at": 1743626380.316544, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_06_bv.customer_bs", "raw_code": "with cte_relevant_date as\n(\n\tselect sdts\n\tfrom {{ ref(\"relevant_date\") }} \n)\nselect \n  hk_customer_d\n, customer_bk\n, vorname\n, name \n, geschlecht\n, geburtsdatum\n, telefon\n, mobil\n, email\n, kreditkarte \n, gueltigbis \n, kkfirma \nfrom {{ ref(\"customer_sns\") }} s\ncross join cte_relevant_date \n\twhere s.sdts = cte_relevant_date.sdts", "language": "sql", "refs": [{"name": "relevant_date", "package": null, "version": null}, {"name": "customer_sns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ddvug_willibald_samen.relevant_date", "model.ddvug_willibald_samen.customer_sns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.date_bs": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_06_bv", "name": "date_bs", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_06_bv/date_bs.sql", "original_file_path": "models/dwh_06_bv/date_bs.sql", "unique_id": "model.ddvug_willibald_samen.date_bs", "fqn": ["ddvug_willibald_samen", "dwh_06_bv", "date_bs"], "alias": "date_bs", "checksum": {"name": "sha256", "checksum": "16365ad1473347fd1d39fabe120f314c4bc96667c84b916c1e6b6543ab4b8dd5"}, "config": {"enabled": true, "alias": null, "schema": "dwh_06_bv", "database": null, "tags": ["bv"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["bv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_06_bv", "tags": ["bv"], "materialized": "table"}, "created_at": 1743626380.3175108, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_06_bv.date_bs", "raw_code": "{{ config(materialized='table') }}\nWITH date_spine AS (\n\n  {{ dbt_utils.date_spine(\n      start_date=\"to_date('01/01/2022', 'mm/dd/yyyy')\",\n      datepart=\"day\",\n      end_date=\"dateadd(year, 1, current_date)\"\n     )\n  }}\n\n), calculated as (\n\n    SELECT\n      date_day,\n      date_day                                                                                AS date_actual,\n\n      DAYNAME(date_day)                                                                       AS day_name,\n\n      DATE_PART('month', date_day)                                                            AS month_actual,\n      DATE_PART('year', date_day)                                                             AS year_actual,\n      DATE_PART(quarter, date_day)                                                            AS quarter_actual,\n\n      DATE_PART(dayofweek, date_day) + 1                                                      AS day_of_week,\n      CASE WHEN day_name = 'Sun' THEN date_day\n        ELSE DATEADD('day', -1, DATE_TRUNC('week', date_day)) END                             AS first_day_of_week,\n\n      CASE WHEN day_name = 'Sun' THEN WEEK(date_day) + 1\n        ELSE WEEK(date_day) END                                                               AS week_of_year_temp, --remove this column\n\n      CASE WHEN day_name = 'Sun' AND LEAD(week_of_year_temp) OVER (ORDER BY date_day) = '1'\n        THEN '1'\n        ELSE week_of_year_temp END                                                            AS week_of_year,\n\n      DATE_PART('day', date_day)                                                              AS day_of_month,\n\n      ROW_NUMBER() OVER (PARTITION BY year_actual, quarter_actual ORDER BY date_day)          AS day_of_quarter,\n      ROW_NUMBER() OVER (PARTITION BY year_actual ORDER BY date_day)                          AS day_of_year,\n\n      CASE WHEN month_actual < 2\n        THEN year_actual\n        ELSE (year_actual+1) END                                                              AS fiscal_year,\n      CASE WHEN month_actual < 2 THEN '4'\n        WHEN month_actual < 5 THEN '1'\n        WHEN month_actual < 8 THEN '2'\n        WHEN month_actual < 11 THEN '3'\n        ELSE '4' END                                                                          AS fiscal_quarter,\n\n      ROW_NUMBER() OVER (PARTITION BY fiscal_year, fiscal_quarter ORDER BY date_day)          AS day_of_fiscal_quarter,\n      ROW_NUMBER() OVER (PARTITION BY fiscal_year ORDER BY date_day)                          AS day_of_fiscal_year,\n\n      TO_CHAR(date_day, 'MMMM')                                                               AS month_name,\n\n      TRUNC(date_day, 'Month')                                                                AS first_day_of_month,\n      LAST_VALUE(date_day) OVER (PARTITION BY year_actual, month_actual ORDER BY date_day)    AS last_day_of_month,\n\n      FIRST_VALUE(date_day) OVER (PARTITION BY year_actual ORDER BY date_day)                 AS first_day_of_year,\n      LAST_VALUE(date_day) OVER (PARTITION BY year_actual ORDER BY date_day)                  AS last_day_of_year,\n\n      FIRST_VALUE(date_day) OVER (PARTITION BY year_actual, quarter_actual ORDER BY date_day) AS first_day_of_quarter,\n      LAST_VALUE(date_day) OVER (PARTITION BY year_actual, quarter_actual ORDER BY date_day)  AS last_day_of_quarter,\n\n      FIRST_VALUE(date_day) OVER (PARTITION BY fiscal_year, fiscal_quarter ORDER BY date_day) AS first_day_of_fiscal_quarter,\n      LAST_VALUE(date_day) OVER (PARTITION BY fiscal_year, fiscal_quarter ORDER BY date_day)  AS last_day_of_fiscal_quarter,\n\n      FIRST_VALUE(date_day) OVER (PARTITION BY fiscal_year ORDER BY date_day)                 AS first_day_of_fiscal_year,\n      LAST_VALUE(date_day) OVER (PARTITION BY fiscal_year ORDER BY date_day)                  AS last_day_of_fiscal_year,\n\n      DATEDIFF('week', first_day_of_fiscal_year, date_actual) +1                              AS week_of_fiscal_year,\n\n      CASE WHEN EXTRACT('month', date_day) = 1 THEN 12\n        ELSE EXTRACT('month', date_day) - 1 END                                               AS month_of_fiscal_year,\n\n      LAST_VALUE(date_day) OVER (PARTITION BY first_day_of_week ORDER BY date_day)            AS last_day_of_week,\n\n      (year_actual || '-Q' || EXTRACT(QUARTER FROM date_day))                                 AS quarter_name,\n\n      (fiscal_year || '-' || DECODE(fiscal_quarter,\n        1, 'Q1',\n        2, 'Q2',\n        3, 'Q3',\n        4, 'Q4'))                                                                             AS fiscal_quarter_name,\n      ('FY' || SUBSTR(fiscal_quarter_name, 3, 7))                                             AS fiscal_quarter_name_fy,\n      DENSE_RANK() OVER (ORDER BY fiscal_quarter_name)                                        AS fiscal_quarter_number_absolute,\n      fiscal_year || '-' || MONTHNAME(date_day)                                               AS fiscal_month_name,\n      ('FY' || SUBSTR(fiscal_month_name, 3, 8))                                               AS fiscal_month_name_fy,\n\n      (CASE WHEN MONTH(date_day) = 1 AND DAYOFMONTH(date_day) = 1 THEN 'New Year''s Day'\n        WHEN MONTH(date_day) = 12 AND DAYOFMONTH(date_day) = 25 THEN 'Christmas Day'\n        WHEN MONTH(date_day) = 12 AND DAYOFMONTH(date_day) = 26 THEN 'Boxing Day'\n        ELSE NULL END)::VARCHAR                                                               AS holiday_desc,\n      (CASE WHEN HOLIDAY_DESC IS NULL THEN 0\n        ELSE 1 END)::BOOLEAN                                                                  AS is_holiday,\n      DATE_TRUNC('month', last_day_of_fiscal_quarter)                                         AS last_month_of_fiscal_quarter,\n      IFF(DATE_TRUNC('month', last_day_of_fiscal_quarter) = date_actual, TRUE, FALSE)         AS is_first_day_of_last_month_of_fiscal_quarter,\n      DATE_TRUNC('month', last_day_of_fiscal_year)                                            AS last_month_of_fiscal_year,\n      IFF(DATE_TRUNC('month', last_day_of_fiscal_year) = date_actual, TRUE, FALSE)            AS is_first_day_of_last_month_of_fiscal_year,\n      DATEADD('day',7,DATEADD('month',1,first_day_of_month))                                  AS snapshot_date_fpa,\n      DATEADD('day',44,DATEADD('month',1,first_day_of_month))                                 AS snapshot_date_billings,\n      COUNT(date_actual) OVER (PARTITION BY first_day_of_month)                               AS days_in_month_count,\n      90 - DATEDIFF(day, date_actual, last_day_of_fiscal_quarter)                             AS day_of_fiscal_quarter_normalised,\n      12-floor((DATEDIFF(day, date_actual, last_day_of_fiscal_quarter)/7))                    AS week_of_fiscal_quarter_normalised,\n      CASE \n        WHEN  week_of_fiscal_quarter_normalised < 5\n          THEN week_of_fiscal_quarter_normalised \n        WHEN  week_of_fiscal_quarter_normalised < 9 \n          THEN week_of_fiscal_quarter_normalised - 4\n        ELSE week_of_fiscal_quarter_normalised - 8\n      END                                                                                     AS week_of_month_normalised,\n      365 - datediff(day,date_actual,last_day_of_fiscal_year)                                 AS day_of_fiscal_year_normalised,\n      CASE \n        WHEN ((DATEDIFF(day, date_actual, last_day_of_fiscal_quarter)-6) % 7 = 0 \n                OR date_actual = first_day_of_fiscal_quarter) \n          THEN 1 \n        ELSE 0 \n      END                                                                                     AS is_first_day_of_fiscal_quarter_week,\n\n      DATEDIFF('day', date_day, last_day_of_month)                                            AS days_until_last_day_of_month \n\n    FROM date_spine\n\n), current_date_information AS (\n  \n    SELECT \n      fiscal_year AS current_fiscal_year,\n      first_day_of_fiscal_year AS current_first_day_of_fiscal_year,\n      fiscal_quarter_name_fy AS current_fiscal_quarter_name_fy,\n      first_day_of_month AS current_first_day_of_month\n    FROM calculated\n    WHERE CURRENT_DATE = date_actual\n\n)\n\nSELECT\n  calculated.date_day,\n  calculated.date_actual,\n  calculated.day_name,\n  calculated.month_actual,\n  calculated.year_actual,\n  calculated.quarter_actual,\n  calculated.day_of_week,\n  calculated.first_day_of_week,\n  calculated.week_of_year,\n  calculated.day_of_month,\n  calculated.day_of_quarter,\n  calculated.day_of_year,\n  calculated.fiscal_year,\n  calculated.fiscal_quarter,\n  calculated.day_of_fiscal_quarter,\n  calculated.day_of_fiscal_year,\n  calculated.month_name,\n  calculated.first_day_of_month,\n  calculated.last_day_of_month,\n  calculated.first_day_of_year,\n  calculated.last_day_of_year,\n  calculated.first_day_of_quarter,\n  calculated.last_day_of_quarter,\n  calculated.first_day_of_fiscal_quarter,\n  calculated.last_day_of_fiscal_quarter,\n  calculated.first_day_of_fiscal_year,\n  calculated.last_day_of_fiscal_year,\n  calculated.week_of_fiscal_year,\n  calculated.month_of_fiscal_year,\n  calculated.last_day_of_week,\n  calculated.quarter_name,\n  calculated.fiscal_quarter_name,\n  calculated.fiscal_quarter_name_fy,\n  calculated.fiscal_quarter_number_absolute,\n  calculated.fiscal_month_name,\n  calculated.fiscal_month_name_fy,\n  calculated.holiday_desc,\n  calculated.is_holiday,\n  calculated.last_month_of_fiscal_quarter,\n  calculated.is_first_day_of_last_month_of_fiscal_quarter,\n  calculated.last_month_of_fiscal_year,\n  calculated.is_first_day_of_last_month_of_fiscal_year,\n  calculated.snapshot_date_fpa,\n  calculated.snapshot_date_billings,\n  calculated.days_in_month_count,\n  calculated.week_of_month_normalised,\n  calculated.day_of_fiscal_quarter_normalised,\n  calculated.week_of_fiscal_quarter_normalised,\n  calculated.day_of_fiscal_year_normalised,\n  calculated.is_first_day_of_fiscal_quarter_week,\n  calculated.days_until_last_day_of_month,\n  current_date_information.current_fiscal_year,\n  current_date_information.current_first_day_of_fiscal_year,\n  current_date_information.current_fiscal_quarter_name_fy,\n  current_date_information.current_first_day_of_month\nFROM calculated\nCROSS JOIN current_date_information", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.date_spine"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.productcategory_bs": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_06_bv", "name": "productcategory_bs", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_06_bv/productcategory_bs.sql", "original_file_path": "models/dwh_06_bv/productcategory_bs.sql", "unique_id": "model.ddvug_willibald_samen.productcategory_bs", "fqn": ["ddvug_willibald_samen", "dwh_06_bv", "productcategory_bs"], "alias": "productcategory_bs", "checksum": {"name": "sha256", "checksum": "21b1fe2f4b08670070cc5f069a1247ddc332dd2864e927b560668fe1f9a9e557"}, "config": {"enabled": true, "alias": null, "schema": "dwh_06_bv", "database": null, "tags": ["bv"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["bv"], "description": "Hierarchy of product-categories", "columns": {"hk_productcategory_d": {"name": "hk_productcategory_d", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_06_bv/bv_test.yaml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_06_bv", "tags": ["bv"], "materialized": "view"}, "created_at": 1743626380.918026, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_06_bv.productcategory_bs", "raw_code": "{{ config(materialized='view') }}\n\nWITH cte_relevant_date as\n(\n\tselect sdts\n\tfrom {{ ref(\"relevant_date\") }} \n)\n, cte_productcategory_hierarchy as\n(\n\tselect s.*\n\tfrom {{ ref('productcategory_hierarchy_sns') }} s\n\tcross join cte_relevant_date \n\twhere  s.sdts = cte_relevant_date.sdts\n)\n, cte_productcategory as\n(\n\tselect s.*\n\tfrom {{ ref('productcategory_sns') }} s\n\tcross join cte_relevant_date \n\twhere  s.sdts = cte_relevant_date.sdts\n)\n,level AS\n(\n    SELECT    s.sdts\n            , s.hk_productcategory_h\n            , s.hk_productcategory_hierarchy_d\n            , hk_productcategory_parent_h\n            , p.name as name\n            , pp.name as parent_name\n            , p.hk_productcategory_d\n            , p.productcategory_bk as productcategory_bk\n            , pp.productcategory_bk as parent_productcategory_bk\n    FROM  cte_productcategory_hierarchy s\n    INNER JOIN cte_productcategory p\n         ON s.hk_productcategory_h = p.hk_productcategory_h\n         AND s.sdts = p.sdts\n    LEFT JOIN cte_productcategory pp\n         ON s.hk_productcategory_parent_h = pp.hk_productcategory_h\n         AND s.sdts = pp.sdts\n)\nSELECT    l1.sdts\n        , l1.hk_productcategory_d\n        , l1.productcategory_bk as productcategory_id_l3\n        , l1.name as productcategory_l3\n        , l1.parent_name as productcategory_l2\n        , l1.parent_productcategory_bk as productcategory_id_l2\n        , l2.parent_name as productcategory_l1\n        , l2.parent_productcategory_bk as productcategory_id_l1\nFROM LEVEL l1\nINNER JOIN level l2\n    ON l1.sdts = l2.sdts\n    AND l1.hk_productcategory_parent_h = l2.hk_productcategory_h\nINNER JOIN level l3\n    ON l2.sdts = l3.sdts\n    AND l2.hk_productcategory_parent_h = l3.hk_productcategory_h", "language": "sql", "refs": [{"name": "relevant_date", "package": null, "version": null}, {"name": "productcategory_hierarchy_sns", "package": null, "version": null}, {"name": "productcategory_sns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ddvug_willibald_samen.relevant_date", "model.ddvug_willibald_samen.productcategory_hierarchy_sns", "model.ddvug_willibald_samen.productcategory_sns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_productcategory_d"], "time_spine": null}, "model.ddvug_willibald_samen.order_customer_bb": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_06_bv", "name": "order_customer_bb", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_06_bv/order_customer_bb.sql", "original_file_path": "models/dwh_06_bv/order_customer_bb.sql", "unique_id": "model.ddvug_willibald_samen.order_customer_bb", "fqn": ["ddvug_willibald_samen", "dwh_06_bv", "order_customer_bb"], "alias": "order_customer_bb", "checksum": {"name": "sha256", "checksum": "1b67ff59712411e43f97ff728ff16a8e370a4ad1a326a919d45f1d5e3f4337f7"}, "config": {"enabled": true, "alias": null, "schema": "dwh_06_bv", "database": null, "tags": ["bv"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["bv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_06_bv", "tags": ["bv"], "materialized": "view"}, "created_at": 1743626380.329875, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_06_bv.order_customer_bb", "raw_code": "{{ config(materialized='view') }}\n-- this table contains all link information between a order and a customer.\n-- in case there is no information in the source-system, which customer made the order, \n-- the creditcard-information should be used to find the link between the order and the customer.\n{% set unknown_key = get_dict_hash_value(\"unknown_key\") %}\n\nwith cte_relevant_date as\n(\n\tselect sdts\n\tfrom {{ ref(\"relevant_date\") }} \n)\n, cte_order_position as\n(\n\tselect s.*\n\tfrom {{ ref('order_position_sns') }} s\n\tcross join cte_relevant_date \n\twhere s.sdts = cte_relevant_date.sdts\n)\n, cte_order_customer as\n(\n\tselect s.*\n\tfrom {{ ref('order_customer_sns') }} s\n\tcross join cte_relevant_date \n\twhere s.sdts = cte_relevant_date.sdts\n)\n, cte_position as\n(\n\tselect s.*\n\tfrom {{ ref('position_sns') }} s\n\tcross join cte_relevant_date \n\twhere s.sdts = cte_relevant_date.sdts\n)\n, cte_customer as\n(\n\tselect s.*\n\tfrom {{ ref('customer_sns') }} s\n\tcross join cte_relevant_date \n\twhere s.sdts = cte_relevant_date.sdts\n)\n, order_customer_by_creditcard_detail as\n(\n\tselect \n\t\t  order_position_sns.sdts\n\t\t, order_position_sns.hk_order_h\n\t\t, order_position_sns.hk_position_h \n\t\t, customer_sns.hk_customer_h\n\t\t, customer_sns.hk_customer_d\n\t\t, position_sns.kreditkarte_rs kreditkarte \n\t\t, position_sns.ldts_rs ldts\n\tfrom cte_order_position order_position_sns\n\tinner join cte_position position_sns \n\t\ton order_position_sns.hk_position_h=position_sns.hk_position_h\n\t\tand order_position_sns.sdts=position_sns.sdts\n\tinner join cte_customer customer_sns\n\ton position_sns.kreditkarte_rs=customer_sns.kreditkarte\n\t\tand position_sns.gueltigbis_rs=customer_sns.gueltigbis\n\t\tand position_sns.kkfirma_rs=customer_sns.kkfirma\n\t\tand position_sns.sdts=customer_sns.sdts\n\t\tand customer_sns.kreditkarte <> '{{ var('datavault4dbt.unknown_value__STRING')}}'\n)\n, order_customer_by_creditcard as \n(\n\tselect distinct \n\t\t  sdts \n\t\t, hk_customer_h\n\t\t, hk_customer_d\n\t\t, hk_order_h \n\t\t, 'br 1' as rsrc\n\t\t, ldts\n\tfrom order_customer_by_creditcard_detail\n    qualify row_number() over (partition by sdts, hk_order_h order by kreditkarte) = 1\n)\n, cte_order_customer_customer_join as \n(-- all order_customer-information available in raw vault\n\tselect \n\t\t  os.sdts\n\t\t, os.hk_customer_h\n\t\t, c.hk_customer_d\n\t\t, os.hk_order_h\n\t\t, os.ldts_order_customer_rs_es ldts\n\t\t, os.rsrc_order_customer_rs_es rsrc\n\tfrom cte_order_customer  os\n\tinner join cte_customer c\n\t\ton os.hk_customer_h = c.hk_customer_h\n\t\tand os.sdts = c.sdts\n\twhere os.hk_customer_h<> '{{ unknown_key }}'\n)\n--select * from condensed_selection_order_customer;\nselect \n\t  sdts\n\t, hk_customer_h\n\t, hk_customer_d\n\t, hk_order_h\n\t, ldts\n\t, rsrc\nfrom cte_order_customer_customer_join\nunion all \nselect \n\t  order_customer_by_creditcard.sdts\n\t, order_customer_by_creditcard.hk_customer_h\n\t, order_customer_by_creditcard.hk_customer_d\n\t, order_customer_by_creditcard.hk_order_h\n\t, order_customer_by_creditcard.ldts\n\t, order_customer_by_creditcard.rsrc\nfrom order_customer_by_creditcard\nleft join cte_order_customer_customer_join cte_order_customer_customer_join\n\ton order_customer_by_creditcard.hk_order_h=cte_order_customer_customer_join.hk_order_h\n\tand order_customer_by_creditcard.sdts=cte_order_customer_customer_join.sdts\nwhere cte_order_customer_customer_join.hk_order_h is null", "language": "sql", "refs": [{"name": "relevant_date", "package": null, "version": null}, {"name": "order_position_sns", "package": null, "version": null}, {"name": "order_customer_sns", "package": null, "version": null}, {"name": "position_sns", "package": null, "version": null}, {"name": "customer_sns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.ddvug_willibald_samen.get_dict_hash_value"], "nodes": ["model.ddvug_willibald_samen.relevant_date", "model.ddvug_willibald_samen.order_position_sns", "model.ddvug_willibald_samen.order_customer_sns", "model.ddvug_willibald_samen.position_sns", "model.ddvug_willibald_samen.customer_sns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.sales_bb": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_06_bv", "name": "sales_bb", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_06_bv/sales_bb.sql", "original_file_path": "models/dwh_06_bv/sales_bb.sql", "unique_id": "model.ddvug_willibald_samen.sales_bb", "fqn": ["ddvug_willibald_samen", "dwh_06_bv", "sales_bb"], "alias": "sales_bb", "checksum": {"name": "sha256", "checksum": "a1e3e4e7c832daf5e809d540da5551e6b798461f73422b414cf4e16c6dbd1c8b"}, "config": {"enabled": true, "alias": null, "schema": "dwh_06_bv", "database": null, "tags": ["bv"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["bv"], "description": "fakt-table", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ddvug_willibald_samen://models/dwh_06_bv/bv_test.yaml", "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_06_bv", "tags": ["bv"]}, "created_at": 1743626380.9183118, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_06_bv.sales_bb", "raw_code": "with cte_relevant_date as\n(\n\tselect sdts\n\tfrom {{ ref(\"relevant_date\") }} \n),\ncte_const as\n(\n\tselect '{{ datavault4dbt.beginning_of_all_times() }}' as beginning_of_all_times\n\t\t , '{{ get_dict_hash_value('unknown_key') }}' as unknown_key\n)\n, cte_order as\n(\nselect \n\t  s.sdts\n\t, s.hk_order_h\n\t, s.order_bk\n\t, s.bestelldatum\n\t, s.wunschdatum\n\t, s.rabatt\n\t, s.rsrc \n\t, s.ldts \nfrom {{ ref('order_sns') }} s\ncross join cte_const\ncross join cte_relevant_date\nwhere 1=1\nand s.hk_order_h<> cte_const.unknown_key -- ghost-record\nand s.sdts = cte_relevant_date.sdts\n--and order_sns.sdts='2022-02-01 07:30:00.000'\n--and order_bk in ('320')--'rs0002003','1000', 'rs0002458', '2028')\n)\n, cte_position_product as\n(\n\tselect s.*\n\tfrom {{ ref('position_product_sns') }} s\n\tcross join cte_relevant_date \n\twhere s.sdts = cte_relevant_date.sdts\n)\n, cte_order_position as\n(\n\tselect s.*\n\tfrom {{ ref('order_position_sns') }} s\n\tcross join cte_relevant_date \n\twhere s.sdts = cte_relevant_date.sdts\n)\n, cte_position as\n(\n\tselect s.*\n\tfrom {{ ref('position_sns') }} s\n\tcross join cte_relevant_date \n\twhere s.sdts = cte_relevant_date.sdts\n)\n, cte_productcategory_hierarchy as\n(\n\tselect s.*\n\tfrom {{ ref('productcategory_hierarchy_sns') }} s\n\tcross join cte_relevant_date \n\twhere s.sdts = cte_relevant_date.sdts\n)\n, cte_productcategory as\n(\n\tselect s.*\n\tfrom {{ ref('productcategory_sns') }} s\n\tcross join cte_relevant_date \n\twhere s.sdts = cte_relevant_date.sdts\n)\n, cte_product as\n(\n\tselect s.*\n\tfrom {{ ref('product_sns') }} s\n\tcross join cte_relevant_date \n\twhere s.sdts = cte_relevant_date.sdts\n)\n, cte_product_productcategory as\n(\n\tselect s.*\n\tfrom {{ ref('product_productcategory_sns') }} s\n\tcross join cte_relevant_date \n\twhere s.sdts = cte_relevant_date.sdts\n)\n, cte_order_associationpartner as\n(\n\tselect s.*, p.hk_associationpartner_d\n\tfrom {{ ref('order_associationpartner_sns') }} s\n\tinner join {{ ref('associationpartner_snp') }} p\n\t\ton s.hk_associationpartner_h = p.hk_associationpartner_h\n\t\tand s.sdts = p.sdts\t\t\t\t\t\t\t\t\t\t\n\tcross join cte_relevant_date \n\twhere s.sdts = cte_relevant_date.sdts\n)\n, cte_customer_associationpartner as\n(\n\tselect s.*, p.hk_associationpartner_d\n\tfrom {{ ref('customer_associationpartner_sns') }} s\n\tinner join {{ ref('associationpartner_snp') }} p\n\t\ton s.hk_associationpartner_h = p.hk_associationpartner_h\n\t\tand s.sdts = p.sdts\t\t\t\t\t\t\t\t\t\t\n\tcross join cte_relevant_date \n\twhere s.sdts = cte_relevant_date.sdts\n)\n, cte_order_customer as\n(\n\tselect s.*\n\tfrom {{ ref('order_customer_sns') }} s\n\tcross join cte_relevant_date \n\twhere s.sdts = cte_relevant_date.sdts\n)\n, cte_position_join as \n(\nselect \n\t  order_position_sns.hk_order_h\n\t, position_sns.hk_position_h\n\t, position_sns.position_bk\n\t, position_sns.has_rs_data\n\t, position_sns.has_ws_data\n\t, case when position_sns.has_rs_data\n\t       then position_sns.menge_rs\n\t       else menge end as amount\n\t, cast(case when position_sns.has_rs_data\n\t       then position_sns.preis_rs\n\t       else replace(replace(position_sns.preis, '\u20ac',''), ',', '.')\n\t\t   end as numeric(28,10) ) price\n\t, position_sns.rabatt_rs\t   \n\t, position_sns.kaufdatum_rs\n\t, case when order_position_sns.rsrc_order_position_rs_sts <>''\n\t       then order_position_sns.rsrc_order_position_rs_sts\n\t\t   else order_position_sns.rsrc_order_position_ws_sts \n\t\t   end as rsrc\n\t, case when order_position_sns.ldts_order_position_rs_sts <>'0001-01-01 00:00:01.000'\n\t       then order_position_sns.ldts_order_position_rs_sts\n\t\t   else order_position_sns.ldts_order_position_ws_sts \n\t\t   end as ldts\t   \n\t, order_position_sns.sdts\nfrom cte_order_position order_position_sns\ninner join cte_position position_sns\n\ton order_position_sns.hk_position_h=position_sns.hk_position_h\n\tand order_position_sns.sdts=position_sns.sdts\n--where order_position_sns.hk_position_h='fe41d9803fcb75de1c9962934d7aa629'\n)\n, cte_product_join as \n(\nselect \n\t  position_product_sns.hk_position_h\n\t, position_product_sns.hk_product_h\n\t, product_sns.hk_product_d\n\t, product_sns.typ\n\t, position_product_sns.rsrc_position_product_rs_es\n\t, position_product_sns.rsrc_position_product_ws_es\t\n\t, product_sns.sdts\nfrom cte_position_product position_product_sns\ninner join cte_product product_sns\non position_product_sns.sdts=product_sns.sdts\nand position_product_sns.hk_product_h=product_sns.hk_product_h \n)\n, cte_productcategory_join as\n(\nselect\n\t  product_productcategory_sns.hk_productcategory_h\n\t, product_productcategory_sns.hk_product_h\n\t, productcategory_sns.hk_productcategory_d\n\t, product_productcategory_sns.rsrc_product_productcategory_ws_es rsrc\n\t, productcategory_sns.sdts\nfrom cte_product_productcategory product_productcategory_sns\ninner join cte_productcategory productcategory_sns\non product_productcategory_sns.sdts=productcategory_sns.sdts\nand product_productcategory_sns.hk_productcategory_h=productcategory_sns.hk_productcategory_h\n)\n, cte_product_type as \n(\nselect \n\t  product_type_sns.product_type_nk\n\t, product_type_sns.rsrc \nfrom {{ ref('product_type_sns') }}\n)\n, cte_delivery as\n(\nselect\n\t  delivery_sns.hk_position_h\n\t, delivery_sns.hk_deliveryadress_h\n\t, delivery_sns.lieferdatum\n\t, delivery_sns.rsrc \n\t, delivery_sns.ldts\n\t, delivery_sns.sdts\nfrom  {{ ref('delivery_sns') }}\n)\n, cte_customer as\n(\nselect\n\t  order_customer_bb.sdts\n\t, order_customer_bb.hk_order_h\n\t, order_customer_bb.hk_customer_h\n\t, order_customer_bb.hk_customer_d\n\t, order_customer_bb.rsrc \n\t, order_customer_bb.ldts\nfrom {{ ref('order_customer_bb') }}\n)\n, cte_product as\n(\nselect\n\t  position_product_sns.sdts\n\t, position_product_sns.hk_position_h\n\t, position_product_sns.hk_product_h\n\t, case when position_product_sns.rsrc_position_product_rs_es <>''\n\t       then position_product_sns.rsrc_position_product_rs_es\n\t\t   else position_product_sns.rsrc_position_product_ws_es \n\t\t   end as rsrc\n\t, case when position_product_sns.ldts_position_product_rs_es <>'0001-01-01 00:00:01.000'\n\t       then position_product_sns.ldts_position_product_rs_es\n\t\t   else position_product_sns.ldts_position_product_ws_es \n\t\t   end as ldts\t\nfrom cte_position_product position_product_sns\n)\n, cte_associationpartner as\n(\n-- roadshow\nselect\n\t  ao.sdts\n\t, ao.hk_order_h\n\t, ao.hk_associationpartner_h\n\t, ao.hk_associationpartner_d\n\t, ao.rsrc_order_associationpartner_rs_es rsrc\n\t, ao.ldts_order_associationpartner_rs_es ldts\nfrom cte_order_associationpartner\tao\t\t\t\t\t\t\t\nunion all\n-- webshop\nselect\n\t  customer_associationpartner_sns.sdts\n\t, order_customer_sns.hk_order_h\n\t, customer_associationpartner_sns.hk_associationpartner_h\n\t, customer_associationpartner_sns.hk_associationpartner_d\n\t, case when order_customer_sns.rsrc_order_customer_rs_es <>''\n\t       then order_customer_sns.rsrc_order_customer_rs_es\n\t\t   else order_customer_sns.rsrc_order_customer_ws_es \n\t\t   end as rsrc\n\t, case when order_customer_sns.ldts_order_customer_rs_es <>'0001-01-01 00:00:01.000'\n\t       then order_customer_sns.ldts_order_customer_rs_es\n\t\t   else order_customer_sns.ldts_order_customer_ws_es \n\t\t   end as ldts\t\t\nfrom cte_customer_associationpartner customer_associationpartner_sns\ninner join cte_order_customer order_customer_sns\n\ton customer_associationpartner_sns.sdts=order_customer_sns.sdts\n\tand customer_associationpartner_sns.hk_customer_h=order_customer_sns.hk_customer_h\nwhere order_customer_sns.rsrc_order_customer_ws_es <>''\nand customer_associationpartner_sns.rsrc_customer_associationpartner_ws_es <>'' \n)\n, cte_category_deliveryadherence as\n(\nselect\n\t  sdts\n\t, hk_category_deliveryadherence_d\n\t, number_of_days_from_num\n\t, number_of_days_till_num\n\t, number_of_days_from\n\t--, case when number_of_days_from = 'xxx' then 'rs' else 'ws' end as ordersource\nfrom {{ ref('category_deliveryadherence_bs') }} \n\n),\ncte_bv_level1 as\n(\n\tselect\n\t  cte_order.sdts \n\t, cte_order.hk_order_h\n\t, cte_position_join.hk_position_h\n\t, coalesce (cte_product_join.hk_product_d, cte_const.unknown_key) hk_product_d\n\t, coalesce (cte_customer.hk_customer_d, cte_const.unknown_key) hk_customer_d\n\t, coalesce (cte_productcategory_join.hk_productcategory_d, cte_const.unknown_key) hk_productcategory_d\t\n\t, coalesce (cte_customer.hk_customer_h, cte_const.unknown_key) hk_customer_h\n\t, coalesce (cte_delivery.hk_deliveryadress_h, cte_const.unknown_key) hk_deliveryadress_h\n\t, coalesce (cte_associationpartner.hk_associationpartner_d, cte_const.unknown_key) hk_associationpartner_d\t\t\t\t\t\t\t\t   \n\t, coalesce (cte_product_type.product_type_nk, cte_const.unknown_key) product_type_nk\t\t\t\t\t\t\t\t   \n\t, cte_order.order_bk\n\t, cte_position_join.position_bk\n\t, case when cte_position_join.has_rs_data\n\t\tthen 'rs'\n\t\twhen cte_position_join.has_ws_data\n\t\tthen 'ws'\n\t\telse '--'\n\t\tend as ordersource\n\t, cte_position_join.amount\n\t, cte_position_join.price\n\t, rabatt_rs as rs_discount_row_based\n\t, case when cte_position_join.has_rs_data\n\t       THEN (amount*price*(1-rabatt_rs/100))*0.02+ (amount*price*(rabatt_rs/100))\n\t       when cte_position_join.has_ws_data\n\t       --THEN  (amount*price)/(sum(amount*price) OVER (PARTITION BY order_bk))*coalesce (cte_order.rabatt, 0) -- if discount is delivered as absolute number\n\t\t   then amount*price*(cte_order.rabatt/100)\n\t       ELSE 0 END discount\n--\t, (cte_position_join.discount /*for rs-orders the discount is on position-level*/+\n--      /*breaking down the order discount for ws-orders based on the weighted revenue per position*/\n--\t  (amount*price)/(sum(amount*price) OVER (PARTITION BY order_bk))*coalesce (cte_order.rabatt, 0))*-1 discount \n\t, case when cte_position_join.has_rs_data\n\t\tthen cte_position_join.kaufdatum_rs\n\t\telse cte_order.bestelldatum\n\t\tend as sales_date\n\t, case when cte_position_join.has_rs_data\n\t\tthen cte_position_join.kaufdatum_rs\n\t\telse cte_order.wunschdatum\n\t\tend as requested_date\n\t, case when cte_position_join.has_rs_data \n\t\tthen cte_position_join.kaufdatum_rs\n\t\telse cte_delivery.lieferdatum\n\t\tend as delivery_date\n\t, case when cte_position_join.has_rs_data\n\t\tthen 0 -- order is delivered (there is no delivery for roadshow)\n\t\twhen min(coalesce(delivery_date, cte_const.beginning_of_all_times)) over (partition by cte_order.sdts, cte_order.hk_order_h) <> cte_const.beginning_of_all_times\n\t\tthen 0 -- order is delivered\n\t\telse 1 -- order is not delivered yet or only partly delivered\n\t\tend as openorder\n\t, min(coalesce(delivery_date, cte_const.beginning_of_all_times)) over (partition by cte_order.sdts, cte_order.hk_order_h) min_delivery_date\n\t, max(coalesce(delivery_date, cte_const.beginning_of_all_times)) over (partition by cte_order.sdts, cte_order.hk_order_h) max_delivery_date\n\t, max_delivery_date-requested_date deliveryadherence\n\t, cte_const.unknown_key\n\tfrom cte_order\n\tcross join cte_const\n\tinner join cte_position_join\n\t\ton cte_order.hk_order_h=cte_position_join.hk_order_h\n\t\tand cte_order.sdts=cte_position_join.sdts\n\tleft join cte_product_join\n\t\ton cte_product_join.hk_position_h=cte_position_join.hk_position_h\n\t\tand cte_product_join.sdts=cte_position_join.sdts\n\tleft join cte_product_type\n\t\ton cte_product_type.product_type_nk = cte_product_join.typ\n\tleft join cte_productcategory_join\n\t\ton cte_product_join.hk_product_h=cte_productcategory_join.hk_product_h\n\t\tand cte_product_join.sdts=cte_productcategory_join.sdts\t\t\n\tleft join cte_delivery\n\t\ton cte_position_join.hk_position_h=cte_delivery.hk_position_h\n\t\tand cte_position_join.sdts=cte_delivery.sdts\n\tleft join cte_customer\n\t\ton cte_order.hk_order_h=cte_customer.hk_order_h\n\t\tand cte_order.sdts=cte_customer.sdts\n\tleft join cte_associationpartner\n\t\ton cte_associationpartner.sdts=cte_order.sdts\n\t\tand cte_associationpartner.hk_order_h=cte_order.hk_order_h\n)\nselect \n      cte_bv_level1.sdts as reporting_date\n\t, hk_order_h\n\t, hk_position_h\n\t, hk_product_d\t\n\t, hk_productcategory_d\n\t, hk_customer_h\n\t, hk_customer_d\t\n\t, hk_deliveryadress_h\n\t, hk_associationpartner_d\t\t\t\t\t\t\t\t   \n\t, CASE WHEN openorder=1\n\t       THEN unknown_key\n\t       ELSE coalesce (cte_category_deliveryadherence.hk_category_deliveryadherence_d,unknown_key) END as hk_category_deliveryadherence_d\n\t, product_type_nk\n\t, order_bk\n\t, position_bk\n\t, cte_bv_level1.ordersource\n\t, amount\n\t, price\n\t, discount\n\t, (price * amount) gross_profit\n\t, (price * amount) - discount revenue\n\t, sales_date\n\t, requested_date\n\t, delivery_date\n\t, cte_bv_level1.openorder\nfrom cte_bv_level1\nleft join cte_category_deliveryadherence\n\ton cte_category_deliveryadherence.sdts = cte_bv_level1.sdts\n\tand ((cte_bv_level1.ordersource = 'ws' and deliveryadherence >= cte_category_deliveryadherence.number_of_days_from_num and deliveryadherence < cte_category_deliveryadherence.number_of_days_till_num)\n\t\tor (cte_bv_level1.ordersource != 'ws' and cte_category_deliveryadherence.number_of_days_from = 'zzz'))", "language": "sql", "refs": [{"name": "relevant_date", "package": null, "version": null}, {"name": "order_sns", "package": null, "version": null}, {"name": "position_product_sns", "package": null, "version": null}, {"name": "order_position_sns", "package": null, "version": null}, {"name": "position_sns", "package": null, "version": null}, {"name": "productcategory_hierarchy_sns", "package": null, "version": null}, {"name": "productcategory_sns", "package": null, "version": null}, {"name": "product_sns", "package": null, "version": null}, {"name": "product_productcategory_sns", "package": null, "version": null}, {"name": "order_associationpartner_sns", "package": null, "version": null}, {"name": "associationpartner_snp", "package": null, "version": null}, {"name": "customer_associationpartner_sns", "package": null, "version": null}, {"name": "associationpartner_snp", "package": null, "version": null}, {"name": "order_customer_sns", "package": null, "version": null}, {"name": "product_type_sns", "package": null, "version": null}, {"name": "delivery_sns", "package": null, "version": null}, {"name": "order_customer_bb", "package": null, "version": null}, {"name": "category_deliveryadherence_bs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.ddvug_willibald_samen.get_dict_hash_value"], "nodes": ["model.ddvug_willibald_samen.relevant_date", "model.ddvug_willibald_samen.order_sns", "model.ddvug_willibald_samen.position_product_sns", "model.ddvug_willibald_samen.order_position_sns", "model.ddvug_willibald_samen.position_sns", "model.ddvug_willibald_samen.productcategory_hierarchy_sns", "model.ddvug_willibald_samen.productcategory_sns", "model.ddvug_willibald_samen.product_sns", "model.ddvug_willibald_samen.product_productcategory_sns", "model.ddvug_willibald_samen.order_associationpartner_sns", "model.ddvug_willibald_samen.associationpartner_snp", "model.ddvug_willibald_samen.customer_associationpartner_sns", "model.ddvug_willibald_samen.order_customer_sns", "model.ddvug_willibald_samen.product_type_sns", "model.ddvug_willibald_samen.delivery_sns", "model.ddvug_willibald_samen.order_customer_bb", "model.ddvug_willibald_samen.category_deliveryadherence_bs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hk_order_h", "hk_position_h", "reporting_date"], "time_spine": null}, "model.ddvug_willibald_samen.category_deliveryadherence_bs": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_06_bv", "name": "category_deliveryadherence_bs", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_06_bv/reference/category_deliveryadherence_bs.sql", "original_file_path": "models/dwh_06_bv/reference/category_deliveryadherence_bs.sql", "unique_id": "model.ddvug_willibald_samen.category_deliveryadherence_bs", "fqn": ["ddvug_willibald_samen", "dwh_06_bv", "reference", "category_deliveryadherence_bs"], "alias": "category_deliveryadherence_bs", "checksum": {"name": "sha256", "checksum": "4b8b8fddcad335aae2cc8e79842e78cf858fa83d450a58618199d74046ee7dad"}, "config": {"enabled": true, "alias": null, "schema": "dwh_06_bv", "database": null, "tags": ["bv"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["bv"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_06_bv", "tags": ["bv"]}, "created_at": 1743626380.337653, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_06_bv.category_deliveryadherence_bs", "raw_code": "with d as\n(\n    select \n          try_to_number(s.cdm_count_days_from) as number_of_days_from_num\n        , try_to_number(s.cdm_count_days_to) as number_of_days_till_num\n        , s.cdm_count_days_from as number_of_days_from\n        , s.cdm_count_days_to as number_of_days_till\n        , s.cdm_name as name\n        , s.category_deliveryadherence_nk as rating\n        , CASE WHEN rating ='Abverkauf, keine Lieferung'\n               THEN 1\n               WHEN rating ='mehr als 10 Tage zu fr\u00fch'\n               THEN 2               \n               WHEN rating ='bis zu 10 Tagen zu fr\u00fch'\n               THEN 3\n               WHEN rating ='mehr als 5 Tage fr\u00fcher'\n               THEN 4               \n               WHEN rating ='bis zu 5 Tagen zu fr\u00fch'\n               THEN 5\n               WHEN rating ='bis zu 3 Tagen zu fr\u00fch'\n               THEN 6\n               WHEN rating ='p\u00fcnktlich'\n               THEN 7\n               WHEN rating ='bis zu 3 Tagen zu sp\u00e4t'\n               THEN 8 \n               WHEN rating ='4 bis 10 Tage zu sp\u00e4t'\n               THEN 9   \n               WHEN rating ='mehr als 10 Tage sp\u00e4t'\n               THEN 10                \n               WHEN rating ='bis zu 10 Tage zu sp\u00e4t'\n               THEN 11  \n               WHEN rating ='Auftrag zu lange aktiv'\n               THEN 12                  \n\t\t       ELSE -9999999 END AS sort_order       \n        , s.hk_category_deliveryadherence_d\n        , s.sdts\n    from {{ ref(\"category_deliveryadherence_sns\") }} s\n )\nselect *\nfrom d", "language": "sql", "refs": [{"name": "category_deliveryadherence_sns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ddvug_willibald_samen.category_deliveryadherence_sns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.dim_reporting_date": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_07_inmt", "name": "dim_reporting_date", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_07_inmt/dim_reporting_date.sql", "original_file_path": "models/dwh_07_inmt/dim_reporting_date.sql", "unique_id": "model.ddvug_willibald_samen.dim_reporting_date", "fqn": ["ddvug_willibald_samen", "dwh_07_inmt", "dim_reporting_date"], "alias": "dim_reporting_date", "checksum": {"name": "sha256", "checksum": "e1e48f2db462e619583473d06db887d2a8bf7e010df1b9b0368aa5eae0352e5b"}, "config": {"enabled": true, "alias": null, "schema": "dwh_07_inmt", "database": null, "tags": ["inmt"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["inmt"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_07_inmt", "tags": ["inmt"]}, "created_at": 1743626380.338549, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_07_inmt.dim_reporting_date", "raw_code": "SELECT \ndate_day AS reporting_date\n, month_name AS reporting_month \n, year_actual AS reporting_year\n, CAST(year_actual AS char(4))||'-'||CAST(week_of_year AS char(2)) AS reporting_week\nFROM {{ ref('date_bs')}}\nWHERE date_day BETWEEN to_date('03/01/2022', 'mm/dd/yyyy') AND to_date('04/01/2022', 'mm/dd/yyyy')", "language": "sql", "refs": [{"name": "date_bs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ddvug_willibald_samen.date_bs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.dim_product": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_07_inmt", "name": "dim_product", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_07_inmt/dim_product.sql", "original_file_path": "models/dwh_07_inmt/dim_product.sql", "unique_id": "model.ddvug_willibald_samen.dim_product", "fqn": ["ddvug_willibald_samen", "dwh_07_inmt", "dim_product"], "alias": "dim_product", "checksum": {"name": "sha256", "checksum": "fda30e71684764414c9adc0334f33faf3ea91dc5beee59c3cf5525f8b8cceeae"}, "config": {"enabled": true, "alias": null, "schema": "dwh_07_inmt", "database": null, "tags": ["inmt"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["inmt"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_07_inmt", "tags": ["inmt"], "materialized": "table"}, "created_at": 1743626380.339888, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_07_inmt.dim_product", "raw_code": "{{ config(materialized='table') }}\nselect \nhk_product_d \n, product_bk \n, bezeichnung \n, umfang \n, typ \n, preis\n, pflanzort\nfrom {{ ref('product_sns')}}", "language": "sql", "refs": [{"name": "product_sns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ddvug_willibald_samen.product_sns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.dim_delivery_date": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_07_inmt", "name": "dim_delivery_date", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_07_inmt/dim_delivery_date.sql", "original_file_path": "models/dwh_07_inmt/dim_delivery_date.sql", "unique_id": "model.ddvug_willibald_samen.dim_delivery_date", "fqn": ["ddvug_willibald_samen", "dwh_07_inmt", "dim_delivery_date"], "alias": "dim_delivery_date", "checksum": {"name": "sha256", "checksum": "3c1dd0d3602e70cc7b74651e7e04121d7a17a1e48675fdb531f465f34d836029"}, "config": {"enabled": true, "alias": null, "schema": "dwh_07_inmt", "database": null, "tags": ["inmt"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["inmt"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_07_inmt", "tags": ["inmt"]}, "created_at": 1743626380.340908, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_07_inmt.dim_delivery_date", "raw_code": "SELECT \ndate_day AS delivery_date\n, CAST(year_actual AS char(4))||'-'||CAST(week_of_year AS char(2)) AS delivery_week\n, month_name AS delivery_month \n, year_actual AS delivery_year\nFROM {{ ref('date_bs')}}\nWHERE date_day BETWEEN to_date('03/01/2022', 'mm/dd/yyyy') AND to_date('04/01/2022', 'mm/dd/yyyy')", "language": "sql", "refs": [{"name": "date_bs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ddvug_willibald_samen.date_bs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.fact_sales": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_07_inmt", "name": "fact_sales", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_07_inmt/fact_sales.sql", "original_file_path": "models/dwh_07_inmt/fact_sales.sql", "unique_id": "model.ddvug_willibald_samen.fact_sales", "fqn": ["ddvug_willibald_samen", "dwh_07_inmt", "fact_sales"], "alias": "fact_sales", "checksum": {"name": "sha256", "checksum": "1662d39eb925b8d775c62a42ea1810fb837f792f9b556c753ed027e64ee89f11"}, "config": {"enabled": true, "alias": null, "schema": "dwh_07_inmt", "database": null, "tags": ["inmt"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["inmt"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_07_inmt", "tags": ["inmt"], "materialized": "table"}, "created_at": 1743626380.3418188, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_07_inmt.fact_sales", "raw_code": "{{ config(materialized='table') }}\nSELECT  *\nFROM {{ ref(\"sales_bb\") }} s", "language": "sql", "refs": [{"name": "sales_bb", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ddvug_willibald_samen.sales_bb"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.dim_productcategory": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_07_inmt", "name": "dim_productcategory", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_07_inmt/dim_productcategory.sql", "original_file_path": "models/dwh_07_inmt/dim_productcategory.sql", "unique_id": "model.ddvug_willibald_samen.dim_productcategory", "fqn": ["ddvug_willibald_samen", "dwh_07_inmt", "dim_productcategory"], "alias": "dim_productcategory", "checksum": {"name": "sha256", "checksum": "8a99e57e383b90bc1e509f903f7e6eff8213eb8b0f32cf28ae55906b10eb9f9b"}, "config": {"enabled": true, "alias": null, "schema": "dwh_07_inmt", "database": null, "tags": ["inmt"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["inmt"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_07_inmt", "tags": ["inmt"], "materialized": "table"}, "created_at": 1743626380.3427851, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_07_inmt.dim_productcategory", "raw_code": "{{ config(materialized='table') }}\nSELECT  *\nFROM {{ ref(\"productcategory_bs\") }} s", "language": "sql", "refs": [{"name": "productcategory_bs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ddvug_willibald_samen.productcategory_bs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.dim_customer": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_07_inmt", "name": "dim_customer", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_07_inmt/dim_customer.sql", "original_file_path": "models/dwh_07_inmt/dim_customer.sql", "unique_id": "model.ddvug_willibald_samen.dim_customer", "fqn": ["ddvug_willibald_samen", "dwh_07_inmt", "dim_customer"], "alias": "dim_customer", "checksum": {"name": "sha256", "checksum": "fe1aa6379dc31eef7fd304bd0e85d40e0cd83c0f1c6ed12a9302934dcb56e8b6"}, "config": {"enabled": true, "alias": null, "schema": "dwh_07_inmt", "database": null, "tags": ["inmt"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["inmt"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_07_inmt", "tags": ["inmt"], "materialized": "table"}, "created_at": 1743626380.343887, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_07_inmt.dim_customer", "raw_code": "{{ config(materialized='table') }}\nSELECT  *\nFROM {{ ref(\"customer_bs\") }} s", "language": "sql", "refs": [{"name": "customer_bs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ddvug_willibald_samen.customer_bs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.fact_error": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_07_inmt", "name": "fact_error", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_07_inmt/fact_error.sql", "original_file_path": "models/dwh_07_inmt/fact_error.sql", "unique_id": "model.ddvug_willibald_samen.fact_error", "fqn": ["ddvug_willibald_samen", "dwh_07_inmt", "fact_error"], "alias": "fact_error", "checksum": {"name": "sha256", "checksum": "7d7126ac3d3fbc1cb85858bb7235f8af3a701b85eb881e93d0391804eb7297c6"}, "config": {"enabled": true, "alias": null, "schema": "dwh_07_inmt", "database": null, "tags": ["inmt"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["inmt"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_07_inmt", "tags": ["inmt"]}, "created_at": 1743626380.344845, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_07_inmt.fact_error", "raw_code": "with cte_error_sats as\n(\n    select hk_error_h, hd_error_s, rsrc, ldts, raw_data, to_varchar(chk_all_msg) AS chk_all_msg, 'Misc' as source_system\n    from {{ ref(\"error_msc_s\") }} msc\n    where not rsrc in ('SYSTEM','ERROR')\n    union\n    select hk_error_h, hd_error_s, rsrc, ldts, raw_data, to_varchar(chk_all_msg) AS chk_all_msg, 'WebShop' as source_system\n    from {{ ref(\"error_ws_s\") }} ws\n    where not rsrc in ('SYSTEM','ERROR')\n    union \n    select hk_error_h, hd_error_s, rsrc, ldts, raw_data, to_varchar(chk_all_msg) AS chk_all_msg, 'RoadShow' as source_system\n    from {{ ref(\"error_rs_s\") }} rs\n    where not rsrc in ('SYSTEM','ERROR')\n)\nselect    error_file_bk as rsrc\n        , case \n            when trim(lower(chk_all_msg)) like '%key_check%' and trim(lower(chk_all_msg)) like '%dub_check%' then 'Key-Error/Duplicate'\n            when trim(lower(chk_all_msg)) like '%dub_check%' then 'Duplicate'\n            when trim(lower(chk_all_msg)) like '%key_check%' then 'Key-Error'\n            else 'Type-Error'\n          end as error_type   \n        , try_to_number(error_row_no_bk, 18,0) as error_row_number\n        , source_system\n        , replace(replace(lower(chk_all_msg), '; duplicate',''), '; key-error','') as chk_all_msg\n        , raw_data as error_raw\nfrom {{ ref(\"error_h\") }} h\nleft join cte_error_sats s\n    on h.hk_error_h = s.hk_error_h\nwhere not h.rsrc in ('SYSTEM','ERROR')", "language": "sql", "refs": [{"name": "error_msc_s", "package": null, "version": null}, {"name": "error_ws_s", "package": null, "version": null}, {"name": "error_rs_s", "package": null, "version": null}, {"name": "error_h", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ddvug_willibald_samen.error_msc_s", "model.ddvug_willibald_samen.error_ws_s", "model.ddvug_willibald_samen.error_rs_s", "model.ddvug_willibald_samen.error_h"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.dim_sales_date": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_07_inmt", "name": "dim_sales_date", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_07_inmt/dim_sales_date.sql", "original_file_path": "models/dwh_07_inmt/dim_sales_date.sql", "unique_id": "model.ddvug_willibald_samen.dim_sales_date", "fqn": ["ddvug_willibald_samen", "dwh_07_inmt", "dim_sales_date"], "alias": "dim_sales_date", "checksum": {"name": "sha256", "checksum": "1695573bcb2b85fb8885f77ddb58bbafc8040ac50457dbd681ec99652ac77fa9"}, "config": {"enabled": true, "alias": null, "schema": "dwh_07_inmt", "database": null, "tags": ["inmt"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["inmt"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_07_inmt", "tags": ["inmt"]}, "created_at": 1743626380.3459342, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_07_inmt.dim_sales_date", "raw_code": "SELECT \ndate_day AS sales_date\n, month_name AS sales_month \n, year_actual AS sales_year\n, CAST(year_actual AS char(4))||'-'||CAST(week_of_year AS char(2)) AS sales_week\nFROM {{ ref('date_bs')}}\nWHERE date_day BETWEEN to_date('03/01/2022', 'mm/dd/yyyy') AND to_date('04/01/2022', 'mm/dd/yyyy')", "language": "sql", "refs": [{"name": "date_bs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ddvug_willibald_samen.date_bs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.dim_category_deliveryadherence": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_07_inmt", "name": "dim_category_deliveryadherence", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_07_inmt/dim_category_deliveryadherence.sql", "original_file_path": "models/dwh_07_inmt/dim_category_deliveryadherence.sql", "unique_id": "model.ddvug_willibald_samen.dim_category_deliveryadherence", "fqn": ["ddvug_willibald_samen", "dwh_07_inmt", "dim_category_deliveryadherence"], "alias": "dim_category_deliveryadherence", "checksum": {"name": "sha256", "checksum": "87d0e086193034313eedffbcf8a939a670e2695c2a8509961d6a2c2ee6931035"}, "config": {"enabled": true, "alias": null, "schema": "dwh_07_inmt", "database": null, "tags": ["inmt"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["inmt"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_07_inmt", "tags": ["inmt"], "materialized": "table"}, "created_at": 1743626380.3468428, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_07_inmt.dim_category_deliveryadherence", "raw_code": "{{ config(materialized='table') }}\nSELECT  *\nFROM {{ ref(\"category_deliveryadherence_bs\") }} s", "language": "sql", "refs": [{"name": "category_deliveryadherence_bs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ddvug_willibald_samen.category_deliveryadherence_bs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.dim_requested_date": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_07_inmt", "name": "dim_requested_date", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_07_inmt/dim_requested_date.sql", "original_file_path": "models/dwh_07_inmt/dim_requested_date.sql", "unique_id": "model.ddvug_willibald_samen.dim_requested_date", "fqn": ["ddvug_willibald_samen", "dwh_07_inmt", "dim_requested_date"], "alias": "dim_requested_date", "checksum": {"name": "sha256", "checksum": "3a3f87ab7999ba17efb6ca36cf003a511ba928f77bc646fc6feaa93379137f0c"}, "config": {"enabled": true, "alias": null, "schema": "dwh_07_inmt", "database": null, "tags": ["inmt"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["inmt"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_07_inmt", "tags": ["inmt"]}, "created_at": 1743626380.347809, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_07_inmt.dim_requested_date", "raw_code": "SELECT \ndate_day AS requested_date\n, month_name AS requested_month \n, year_actual AS requested_year\n, CAST(year_actual AS char(4))||'-'||CAST(week_of_year AS char(2)) AS requested_week\nFROM {{ ref('date_bs')}}\nWHERE date_day BETWEEN to_date('03/01/2022', 'mm/dd/yyyy') AND to_date('04/01/2022', 'mm/dd/yyyy')", "language": "sql", "refs": [{"name": "date_bs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ddvug_willibald_samen.date_bs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.dim_associationpartner": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_07_inmt", "name": "dim_associationpartner", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_07_inmt/dim_associationpartner.sql", "original_file_path": "models/dwh_07_inmt/dim_associationpartner.sql", "unique_id": "model.ddvug_willibald_samen.dim_associationpartner", "fqn": ["ddvug_willibald_samen", "dwh_07_inmt", "dim_associationpartner"], "alias": "dim_associationpartner", "checksum": {"name": "sha256", "checksum": "86822450f72ede80c89649e5a0490b0f7fadce848bcf3b93656893c370498ea4"}, "config": {"enabled": true, "alias": null, "schema": "dwh_07_inmt", "database": null, "tags": ["inmt"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["inmt"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_07_inmt", "tags": ["inmt"], "materialized": "table"}, "created_at": 1743626380.3487139, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_07_inmt.dim_associationpartner", "raw_code": "{{ config(materialized='table') }}\nselect \nhk_associationpartner_d\n, associationpartner_bk\nfrom {{ ref('associationpartner_sns')}}", "language": "sql", "refs": [{"name": "associationpartner_sns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ddvug_willibald_samen.associationpartner_sns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ddvug_willibald_samen.dim_product_type": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_07_inmt", "name": "dim_product_type", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_07_inmt/dim_product_type.sql", "original_file_path": "models/dwh_07_inmt/dim_product_type.sql", "unique_id": "model.ddvug_willibald_samen.dim_product_type", "fqn": ["ddvug_willibald_samen", "dwh_07_inmt", "dim_product_type"], "alias": "dim_product_type", "checksum": {"name": "sha256", "checksum": "b574c8f82cf1957f770ad98ae97a663205a7aefba5e3eb88608809a24b2bea49"}, "config": {"enabled": true, "alias": null, "schema": "dwh_07_inmt", "database": null, "tags": ["inmt"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["inmt"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_07_inmt", "tags": ["inmt"], "materialized": "view"}, "created_at": 1743626380.3497112, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_07_inmt.dim_product_type", "raw_code": "{{ config(materialized='view') }}\nSELECT  *\nFROM {{ ref(\"product_type_sns\") }} s", "language": "sql", "refs": [{"name": "product_type_sns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ddvug_willibald_samen.product_type_sns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "test.ddvug_willibald_samen.yedi_webshop_produkt": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "yedi_webshop_produkt", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "yedi/yedi_webshop_produkt.sql", "original_file_path": "tests/yedi/yedi_webshop_produkt.sql", "unique_id": "test.ddvug_willibald_samen.yedi_webshop_produkt", "fqn": ["ddvug_willibald_samen", "yedi", "yedi_webshop_produkt"], "alias": "yedi_webshop_produkt", "checksum": {"name": "sha256", "checksum": "c7dbb998368c910270b85b9c49f2fe5b9e5a5bdc0cede3de1451166f93b589e8"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"enabled": true}, "created_at": 1743626380.4132621, "relation_name": null, "raw_code": "{{ config( enabled=True) }}\n{%- set yaml_metadata -%}\nsource_model_source: 'load_webshop_produkt'\nload_type: full\nsource_model_target:\n  product_h:\n    business_object:\n      - product: produktid\n    satellites:\n      product_ws_s:\n        columns:\n          - bezeichnung\n          - pflanzabstand\n          - pflanzort\n          - preis\n          - typ\n          - umfang\n      product_ws_sts:\n  productcategory_h:\n    business_object:\n      - productcategory: katid\n    satellites:\n  product_productcategory_l:\n    business_object:\n      - productcategory: hk_productcategory_h\n      - product: hk_product_h\n    satellites:\n      product_productcategory_ws_sts:\n\nsrc_ldts: ldts_source\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault_extension.yedi_test(source_model_source=metadata_dict['source_model_source']\n                    , source_model_target=metadata_dict['source_model_target']\n                    , load_type=metadata_dict['load_type']\n                    , src_ldts=metadata_dict['src_ldts']\n)\n}}", "language": "sql", "refs": [{"name": "meta_load", "package": null, "version": null}, {"name": "load_webshop_produkt", "package": null, "version": null}, {"name": "product_h", "package": null, "version": null}, {"name": "product_ws_s", "package": null, "version": null}, {"name": "product_ws_sts", "package": null, "version": null}, {"name": "productcategory_h", "package": null, "version": null}, {"name": "product_productcategory_l", "package": null, "version": null}, {"name": "product_productcategory_ws_sts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.yedi_test"], "nodes": ["model.ddvug_willibald_samen.meta_load", "model.ddvug_willibald_samen.load_webshop_produkt", "model.ddvug_willibald_samen.product_h", "model.ddvug_willibald_samen.product_ws_s", "model.ddvug_willibald_samen.product_ws_sts", "model.ddvug_willibald_samen.productcategory_h", "model.ddvug_willibald_samen.product_productcategory_l", "model.ddvug_willibald_samen.product_productcategory_ws_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.ddvug_willibald_samen.yedi_webshop_position": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "yedi_webshop_position", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "yedi/yedi_webshop_position.sql", "original_file_path": "tests/yedi/yedi_webshop_position.sql", "unique_id": "test.ddvug_willibald_samen.yedi_webshop_position", "fqn": ["ddvug_willibald_samen", "yedi", "yedi_webshop_position"], "alias": "yedi_webshop_position", "checksum": {"name": "sha256", "checksum": "ae70d2a7a6cf5e867cc3e71eb5b985a9523f4fbab233c2335bcf869bea80894f"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"enabled": true}, "created_at": 1743626380.453084, "relation_name": null, "raw_code": "{{ config( enabled=True) }}\n{%- set yaml_metadata -%}\nsource_model_source: 'load_webshop_position'\nload_type: full\nsource_model_target:\n  order_h:\n    business_object:\n      - order: bestellungid\n    satellites:\n  position_h:\n    business_object:\n      - position: bestellungid\n      - position: posid\n    satellites:\n      position_ws_s:\n        columns:\n          - bestellungid\n          - menge\n          - posid\n          - preis\n          - spezlieferadrid\n      position_ws_sts:\n  product_h:\n    business_object:\n      - product: produktid\n    satellites:\n  order_position_l:\n    business_object:\n      - position: hk_position_h\n      - order: hk_order_h\n    satellites:\n      order_position_ws_sts:\n  position_product_l:\n    business_object:\n      - product: hk_product_h\n      - position: hk_position_h\n    satellites:\n      position_product_ws_sts:\n\nsrc_ldts: ldts_source\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault_extension.yedi_test(source_model_source=metadata_dict['source_model_source']\n                    , source_model_target=metadata_dict['source_model_target']\n                    , load_type=metadata_dict['load_type']\n                    , src_ldts=metadata_dict['src_ldts']\n)\n}}", "language": "sql", "refs": [{"name": "meta_load", "package": null, "version": null}, {"name": "load_webshop_position", "package": null, "version": null}, {"name": "order_h", "package": null, "version": null}, {"name": "position_h", "package": null, "version": null}, {"name": "position_ws_s", "package": null, "version": null}, {"name": "position_ws_sts", "package": null, "version": null}, {"name": "product_h", "package": null, "version": null}, {"name": "order_position_l", "package": null, "version": null}, {"name": "order_position_ws_sts", "package": null, "version": null}, {"name": "position_product_l", "package": null, "version": null}, {"name": "position_product_ws_sts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.yedi_test"], "nodes": ["model.ddvug_willibald_samen.meta_load", "model.ddvug_willibald_samen.load_webshop_position", "model.ddvug_willibald_samen.order_h", "model.ddvug_willibald_samen.position_h", "model.ddvug_willibald_samen.position_ws_s", "model.ddvug_willibald_samen.position_ws_sts", "model.ddvug_willibald_samen.product_h", "model.ddvug_willibald_samen.order_position_l", "model.ddvug_willibald_samen.order_position_ws_sts", "model.ddvug_willibald_samen.position_product_l", "model.ddvug_willibald_samen.position_product_ws_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.ddvug_willibald_samen.yedi_webshop_vereinspartner": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "yedi_webshop_vereinspartner", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "yedi/yedi_webshop_vereinspartner.sql", "original_file_path": "tests/yedi/yedi_webshop_vereinspartner.sql", "unique_id": "test.ddvug_willibald_samen.yedi_webshop_vereinspartner", "fqn": ["ddvug_willibald_samen", "yedi", "yedi_webshop_vereinspartner"], "alias": "yedi_webshop_vereinspartner", "checksum": {"name": "sha256", "checksum": "4d20c09b22d6abc7c1b93f7e858502997dbab26e5466dc43538ce74420af632a"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"enabled": true}, "created_at": 1743626380.4598231, "relation_name": null, "raw_code": "{{ config( enabled=True) }}\n{%- set yaml_metadata -%}\nsource_model_source: 'load_webshop_vereinspartner'\nload_type: full\nsource_model_target:\n  associationpartner_h:\n    business_object:\n      - associationpartner: vereinspartnerid\n    satellites:\n      associationpartner_ws_s:\n        columns:\n          - kundeidverein\n          - rabatt1\n          - rabatt2\n          - rabatt3\n      associationpartner_ws_sts:\n  customer_h:\n    business_object:\n      - customer: kundeidverein\n    satellites:\n  associationpartner_customer_l:\n    business_object:\n      - customer: hk_customer_h\n      - associationpartner: hk_associationpartner_h\n    satellites:\n      associationpartner_customer_ws_sts:\n\nsrc_ldts: ldts_source\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault_extension.yedi_test(source_model_source=metadata_dict['source_model_source']\n                    , source_model_target=metadata_dict['source_model_target']\n                    , load_type=metadata_dict['load_type']\n                    , src_ldts=metadata_dict['src_ldts']\n)\n}}", "language": "sql", "refs": [{"name": "meta_load", "package": null, "version": null}, {"name": "load_webshop_vereinspartner", "package": null, "version": null}, {"name": "associationpartner_h", "package": null, "version": null}, {"name": "associationpartner_ws_s", "package": null, "version": null}, {"name": "associationpartner_ws_sts", "package": null, "version": null}, {"name": "customer_h", "package": null, "version": null}, {"name": "associationpartner_customer_l", "package": null, "version": null}, {"name": "associationpartner_customer_ws_sts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.yedi_test"], "nodes": ["model.ddvug_willibald_samen.meta_load", "model.ddvug_willibald_samen.load_webshop_vereinspartner", "model.ddvug_willibald_samen.associationpartner_h", "model.ddvug_willibald_samen.associationpartner_ws_s", "model.ddvug_willibald_samen.associationpartner_ws_sts", "model.ddvug_willibald_samen.customer_h", "model.ddvug_willibald_samen.associationpartner_customer_l", "model.ddvug_willibald_samen.associationpartner_customer_ws_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.ddvug_willibald_samen.yedi_webshop_lieferdienst": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "yedi_webshop_lieferdienst", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "yedi/yedi_webshop_lieferdienst.sql", "original_file_path": "tests/yedi/yedi_webshop_lieferdienst.sql", "unique_id": "test.ddvug_willibald_samen.yedi_webshop_lieferdienst", "fqn": ["ddvug_willibald_samen", "yedi", "yedi_webshop_lieferdienst"], "alias": "yedi_webshop_lieferdienst", "checksum": {"name": "sha256", "checksum": "4608e70540a979f565f355237ec3f2f3aad2e04f880800309692a6cbcb053d9c"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"enabled": true}, "created_at": 1743626380.46461, "relation_name": null, "raw_code": "{{ config( enabled=True) }}\n{%- set yaml_metadata -%}\nsource_model_source: 'load_webshop_lieferdienst'\nload_type: full\nsource_model_target:\n  deliveryservice_h:\n    business_object:\n      - deliveryservice: lieferdienstid\n    satellites:\n      deliveryservice_ws_s:\n        columns:\n          - email\n          - fax\n          - hausnummer\n          - land\n          - name\n          - ort\n          - plz\n          - strasse\n          - telefon\n      deliveryservice_ws_sts:\n\nsrc_ldts: ldts_source\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault_extension.yedi_test(source_model_source=metadata_dict['source_model_source']\n                    , source_model_target=metadata_dict['source_model_target']\n                    , load_type=metadata_dict['load_type']\n                    , src_ldts=metadata_dict['src_ldts']\n)\n}}", "language": "sql", "refs": [{"name": "meta_load", "package": null, "version": null}, {"name": "load_webshop_lieferdienst", "package": null, "version": null}, {"name": "deliveryservice_h", "package": null, "version": null}, {"name": "deliveryservice_ws_s", "package": null, "version": null}, {"name": "deliveryservice_ws_sts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.yedi_test"], "nodes": ["model.ddvug_willibald_samen.meta_load", "model.ddvug_willibald_samen.load_webshop_lieferdienst", "model.ddvug_willibald_samen.deliveryservice_h", "model.ddvug_willibald_samen.deliveryservice_ws_s", "model.ddvug_willibald_samen.deliveryservice_ws_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.ddvug_willibald_samen.yedi_webshop_bestellung": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "yedi_webshop_bestellung", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "yedi/yedi_webshop_bestellung.sql", "original_file_path": "tests/yedi/yedi_webshop_bestellung.sql", "unique_id": "test.ddvug_willibald_samen.yedi_webshop_bestellung", "fqn": ["ddvug_willibald_samen", "yedi", "yedi_webshop_bestellung"], "alias": "yedi_webshop_bestellung", "checksum": {"name": "sha256", "checksum": "9d61be2dadfef1f786acd6245df9a7c16989182960a5660834dd291caff09412"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"enabled": true}, "created_at": 1743626380.4692962, "relation_name": null, "raw_code": "{{ config( enabled=True) }}\n{%- set yaml_metadata -%}\nsource_model_source: 'load_webshop_bestellung'\nload_type: full\nsource_model_target:\n  customer_h:\n    business_object:\n      - customer: kundeid\n    satellites:\n  order_h:\n    business_object:\n      - order: bestellungid\n    satellites:\n      order_ws_s:\n        columns:\n          - allglieferadrid\n          - bestelldatum\n          - rabatt\n          - wunschdatum\n      order_ws_sts:\n  order_customer_l:\n    business_object:\n      - order: hk_order_h\n      - customer: hk_customer_h\n    satellites:\n      order_customer_ws_sts:\n\nsrc_ldts: ldts_source\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault_extension.yedi_test(source_model_source=metadata_dict['source_model_source']\n                    , source_model_target=metadata_dict['source_model_target']\n                    , load_type=metadata_dict['load_type']\n                    , src_ldts=metadata_dict['src_ldts']\n)\n}}", "language": "sql", "refs": [{"name": "meta_load", "package": null, "version": null}, {"name": "load_webshop_bestellung", "package": null, "version": null}, {"name": "customer_h", "package": null, "version": null}, {"name": "order_h", "package": null, "version": null}, {"name": "order_ws_s", "package": null, "version": null}, {"name": "order_ws_sts", "package": null, "version": null}, {"name": "order_customer_l", "package": null, "version": null}, {"name": "order_customer_ws_sts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.yedi_test"], "nodes": ["model.ddvug_willibald_samen.meta_load", "model.ddvug_willibald_samen.load_webshop_bestellung", "model.ddvug_willibald_samen.customer_h", "model.ddvug_willibald_samen.order_h", "model.ddvug_willibald_samen.order_ws_s", "model.ddvug_willibald_samen.order_ws_sts", "model.ddvug_willibald_samen.order_customer_l", "model.ddvug_willibald_samen.order_customer_ws_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.ddvug_willibald_samen.yedi_webshop_kunde": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "yedi_webshop_kunde", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "yedi/yedi_webshop_kunde.sql", "original_file_path": "tests/yedi/yedi_webshop_kunde.sql", "unique_id": "test.ddvug_willibald_samen.yedi_webshop_kunde", "fqn": ["ddvug_willibald_samen", "yedi", "yedi_webshop_kunde"], "alias": "yedi_webshop_kunde", "checksum": {"name": "sha256", "checksum": "02ec4250ec7277360182b6b8445caee4dae6dd5d33dcf655d33a3e331f7ee120"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"enabled": true}, "created_at": 1743626380.4859252, "relation_name": null, "raw_code": "{{ config( enabled=True) }}\n{%- set yaml_metadata -%}\nsource_model_source: 'load_webshop_kunde'\nload_type: full\nsource_model_target:\n  associationpartner_h:\n    business_object:\n      - associationpartner: vereinspartnerid\n    satellites:\n  customer_h:\n    business_object:\n      - customer: kundeid\n    satellites:\n      customer_ws_s:\n        columns:\n          - email\n          - geburtsdatum\n          - geschlecht\n          - gueltigbis\n          - kkfirma\n          - kreditkarte\n          - mobil\n          - name\n          - telefon\n          - vorname\n      customer_ws_sts:\n  customer_associationpartner_l:\n    business_object:\n      - customer: hk_customer_h\n      - associationpartner: hk_associationpartner_h\n    satellites:\n      customer_associationpartner_ws_sts:\n\nsrc_ldts: ldts_source\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault_extension.yedi_test(source_model_source=metadata_dict['source_model_source']\n                    , source_model_target=metadata_dict['source_model_target']\n                    , load_type=metadata_dict['load_type']\n                    , src_ldts=metadata_dict['src_ldts']\n)\n}}", "language": "sql", "refs": [{"name": "meta_load", "package": null, "version": null}, {"name": "load_webshop_kunde", "package": null, "version": null}, {"name": "associationpartner_h", "package": null, "version": null}, {"name": "customer_h", "package": null, "version": null}, {"name": "customer_ws_s", "package": null, "version": null}, {"name": "customer_ws_sts", "package": null, "version": null}, {"name": "customer_associationpartner_l", "package": null, "version": null}, {"name": "customer_associationpartner_ws_sts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.yedi_test"], "nodes": ["model.ddvug_willibald_samen.meta_load", "model.ddvug_willibald_samen.load_webshop_kunde", "model.ddvug_willibald_samen.associationpartner_h", "model.ddvug_willibald_samen.customer_h", "model.ddvug_willibald_samen.customer_ws_s", "model.ddvug_willibald_samen.customer_ws_sts", "model.ddvug_willibald_samen.customer_associationpartner_l", "model.ddvug_willibald_samen.customer_associationpartner_ws_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.ddvug_willibald_samen.yedi_webshop_wohnort": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "yedi_webshop_wohnort", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "yedi/yedi_webshop_wohnort.sql", "original_file_path": "tests/yedi/yedi_webshop_wohnort.sql", "unique_id": "test.ddvug_willibald_samen.yedi_webshop_wohnort", "fqn": ["ddvug_willibald_samen", "yedi", "yedi_webshop_wohnort"], "alias": "yedi_webshop_wohnort", "checksum": {"name": "sha256", "checksum": "31aa64736e01ac61dc867fc0918dd4e2b2c7214c32123e0215a7c90f65fd02fb"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"enabled": true}, "created_at": 1743626380.4908311, "relation_name": null, "raw_code": "{{ config( enabled=True) }}\n{%- set yaml_metadata -%}\nsource_model_source: 'load_webshop_wohnort'\nload_type: full\nsource_model_target:\n  customer_h:\n    business_object:\n      - customer: kundeid\n    satellites:\n      customer_ws_la_ms:\n        columns:\n          - adresszusatz\n          - bis\n          - hausnummer\n          - land\n          - ort\n          - plz\n          - strasse\n          - von\n\nsrc_ldts: ldts_source\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault_extension.yedi_test(source_model_source=metadata_dict['source_model_source']\n                    , source_model_target=metadata_dict['source_model_target']\n                    , load_type=metadata_dict['load_type']\n                    , src_ldts=metadata_dict['src_ldts']\n)\n}}", "language": "sql", "refs": [{"name": "meta_load", "package": null, "version": null}, {"name": "load_webshop_wohnort", "package": null, "version": null}, {"name": "customer_h", "package": null, "version": null}, {"name": "customer_ws_la_ms", "package": null, "version": null}, {"name": "customer_ws_la_ms", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.yedi_test"], "nodes": ["model.ddvug_willibald_samen.meta_load", "model.ddvug_willibald_samen.load_webshop_wohnort", "model.ddvug_willibald_samen.customer_h", "model.ddvug_willibald_samen.customer_ws_la_ms"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.ddvug_willibald_samen.yedi_webshop_lieferadresse": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "yedi_webshop_lieferadresse", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "yedi/yedi_webshop_lieferadresse.sql", "original_file_path": "tests/yedi/yedi_webshop_lieferadresse.sql", "unique_id": "test.ddvug_willibald_samen.yedi_webshop_lieferadresse", "fqn": ["ddvug_willibald_samen", "yedi", "yedi_webshop_lieferadresse"], "alias": "yedi_webshop_lieferadresse", "checksum": {"name": "sha256", "checksum": "bbd78a4504771ff14a2fa30060060608ff735cf5fb57338f346e4043129f49e6"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"enabled": true}, "created_at": 1743626380.499319, "relation_name": null, "raw_code": "{{ config( enabled=True) }}\n{%- set yaml_metadata -%}\nsource_model_source: 'load_webshop_lieferadresse'\nload_type: full\nsource_model_target:\n  customer_h:\n    business_object:\n      - customer: kundeid\n    satellites:\n  deliveryadress_h:\n    business_object:\n      - deliveryadress: lieferadrid\n    satellites:\n      deliveryadress_ws_s:\n        columns:\n          - adresszusatz\n          - hausnummer\n          - land\n          - ort\n          - plz\n          - strasse\n  deliveryadress_customer_l:\n    business_object:\n      - deliveryadress: hk_deliveryadress_h\n      - customer: hk_customer_h\n    satellites:\n      deliveryadress_customer_ws_sts:\n\nsrc_ldts: ldts_source\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault_extension.yedi_test(source_model_source=metadata_dict['source_model_source']\n                    , source_model_target=metadata_dict['source_model_target']\n                    , load_type=metadata_dict['load_type']\n                    , src_ldts=metadata_dict['src_ldts']\n)\n}}", "language": "sql", "refs": [{"name": "meta_load", "package": null, "version": null}, {"name": "load_webshop_lieferadresse", "package": null, "version": null}, {"name": "customer_h", "package": null, "version": null}, {"name": "deliveryadress_h", "package": null, "version": null}, {"name": "deliveryadress_ws_s", "package": null, "version": null}, {"name": "deliveryadress_customer_l", "package": null, "version": null}, {"name": "deliveryadress_customer_ws_sts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.yedi_test"], "nodes": ["model.ddvug_willibald_samen.meta_load", "model.ddvug_willibald_samen.load_webshop_lieferadresse", "model.ddvug_willibald_samen.customer_h", "model.ddvug_willibald_samen.deliveryadress_h", "model.ddvug_willibald_samen.deliveryadress_ws_s", "model.ddvug_willibald_samen.deliveryadress_customer_l", "model.ddvug_willibald_samen.deliveryadress_customer_ws_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.ddvug_willibald_samen.yedi_webshop_lieferung": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "yedi_webshop_lieferung", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "yedi/yedi_webshop_lieferung.sql", "original_file_path": "tests/yedi/yedi_webshop_lieferung.sql", "unique_id": "test.ddvug_willibald_samen.yedi_webshop_lieferung", "fqn": ["ddvug_willibald_samen", "yedi", "yedi_webshop_lieferung"], "alias": "yedi_webshop_lieferung", "checksum": {"name": "sha256", "checksum": "cfc236597a43424e1690375e481d8d2786a240d5d4209eadd0ad8ea2c5bd8f9f"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"enabled": true}, "created_at": 1743626380.5041862, "relation_name": null, "raw_code": "{{ config( enabled=True) }}\n{%- set yaml_metadata -%}\nsource_model_source: 'load_webshop_lieferung'\nload_type: full\nsource_model_target:\n  deliveryadress_h:\n    business_object:\n      - deliveryadress: lieferadrid\n    satellites:\n  deliveryservice_h:\n    business_object:\n      - deliveryservice: lieferdienstid\n    satellites:\n  order_h:\n    business_object:\n      - order: bestellungid\n    satellites:\n  position_h:\n    business_object:\n      - position: bestellungid\n      - position: posid\n    satellites:\n      position_ws_s:\n        columns:\n          - bestellungid\n          - posid\n  delivery_nhl:\n    business_object:\n      - deliveryadress: hk_deliveryadress_h\n      - deliveryservice: hk_deliveryservice_h\n      - order: hk_order_h\n      - position: hk_position_h\n      - position: hk_position_h\n    satellites:\n\nsrc_ldts: ldts_source\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault_extension.yedi_test(source_model_source=metadata_dict['source_model_source']\n                    , source_model_target=metadata_dict['source_model_target']\n                    , load_type=metadata_dict['load_type']\n                    , src_ldts=metadata_dict['src_ldts']\n)\n}}", "language": "sql", "refs": [{"name": "meta_load", "package": null, "version": null}, {"name": "load_webshop_lieferung", "package": null, "version": null}, {"name": "deliveryadress_h", "package": null, "version": null}, {"name": "deliveryservice_h", "package": null, "version": null}, {"name": "order_h", "package": null, "version": null}, {"name": "position_h", "package": null, "version": null}, {"name": "position_ws_s", "package": null, "version": null}, {"name": "delivery_nhl", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.yedi_test"], "nodes": ["model.ddvug_willibald_samen.meta_load", "model.ddvug_willibald_samen.load_webshop_lieferung", "model.ddvug_willibald_samen.deliveryadress_h", "model.ddvug_willibald_samen.deliveryservice_h", "model.ddvug_willibald_samen.order_h", "model.ddvug_willibald_samen.position_h", "model.ddvug_willibald_samen.position_ws_s", "model.ddvug_willibald_samen.delivery_nhl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.ddvug_willibald_samen.singular_test_category_deliveryadherence": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "singular_test_category_deliveryadherence", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "singular/singular_test_category_deliveryadherence.sql", "original_file_path": "tests/singular/singular_test_category_deliveryadherence.sql", "unique_id": "test.ddvug_willibald_samen.singular_test_category_deliveryadherence", "fqn": ["ddvug_willibald_samen", "singular", "singular_test_category_deliveryadherence"], "alias": "singular_test_category_deliveryadherence", "checksum": {"name": "sha256", "checksum": "45a6f5f19513a2a52e00f5ba8ffa4d0685848f45ab22ed57ad6e0259bc2358dc"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743626380.5094469, "relation_name": null, "raw_code": "with d as\n(\n    select \n          try_to_number(s.cdm_count_days_from) as tv\n        , try_to_number(s.cdm_count_days_to) as tb\n        , lead(tv) over (partition by sdts order by tv) next_tv\n        , lag(tb) over (partition by sdts order by tb) prev_tb\n        , min(tv) over (partition by sdts ) min_tv\n        , max(tb) over (partition by sdts ) max_tb\n        , cdm_count_days_from\n        , cdm_count_days_to\n        , rsrc\n    from {{ ref(\"category_deliveryadherence_sns\") }} s\n )\nselect *\nfrom d\nwhere not\n(\n    (\n        (\n            prev_tb = tv\n        or (prev_tb is null and min_tv = tv)\n        )\n        and\n        (\n            next_tv = tb\n        or (next_tv is null and max_tb = tb)\n        )\n    )\n    or\n    (\n        lower(cdm_count_days_from) in ('xxx','zzz')\n        or\n        lower(cdm_count_days_to) in ('xxx','zzz')\n    )\n    or rsrc<>'system'\n)\n--order by sdts, tv", "language": "sql", "refs": [{"name": "category_deliveryadherence_sns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ddvug_willibald_samen.category_deliveryadherence_sns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.ddvug_willibald_samen.fact_sales_compare": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "fact_sales_compare", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "singular/fact_sales_compare.sql", "original_file_path": "tests/singular/fact_sales_compare.sql", "unique_id": "test.ddvug_willibald_samen.fact_sales_compare", "fqn": ["ddvug_willibald_samen", "singular", "fact_sales_compare"], "alias": "fact_sales_compare", "checksum": {"name": "sha256", "checksum": "0a236e1826f9c9304a35d3f8c7f1ca647ab122f8f2a1712b89204b991307a52d"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743626380.5115469, "relation_name": null, "raw_code": "-- compare key-figures in fact_sales with verified numbers\nSELECT \n*\nFROM \n(\nSELECT \nordersource\n, reporting_date\n, sum(gross_profit) gross_profit\n, round(sum(revenue), 0) revenue\nFROM {{ ref(\"fact_sales\") }}\nGROUP BY ordersource, reporting_date\n) calc_values\nLEFT join\n(\nSELECT\nordersource\n, reporting_date\n, gross_profit\n, round(revenue, 0) revenue\nFROM\n(\n\tSELECT 'rs' ordersource, '2022-03-07 23:59:59.000' reporting_date, 114542.05 gross_profit, 109913.20 revenue\n\tUNION ALL\n\tSELECT 'rs' ordersource, '2022-03-14 23:59:59.000' reporting_date, 229069.70 gross_profit, 219821.54 revenue\n\tUNION ALL\n\tSELECT 'ws' ordersource, '2022-03-14 23:59:59.000' reporting_date, 32722.25 gross_profit, 32053.58 revenue\n\tUNION ALL\n\tSELECT 'ws' ordersource, '2022-03-21 23:59:59.000' reporting_date, 61783.35 gross_profit, 60514.53 revenue\n\tUNION ALL\n\tSELECT 'ws' ordersource, '2022-03-28 23:59:59.000' reporting_date, 71384.55 gross_profit, 69909.71 revenue\n\tUNION ALL\n\t-- different values due to different interpretation of the orders 'RS0001935', 'RS0001936' delivered in period 3 again... \n\t-- ...we assume it to be a different (additional) part of the order, not replacing the first to positions (different products) \n\tSELECT 'rs' ordersource, '2022-03-21 23:59:59.000' reporting_date, 340175.65+336 gross_profit, 326889.65+293.19 revenue\n\tUNION ALL\n\tSELECT 'rs' ordersource, '2022-03-28 23:59:59.000' reporting_date, 340175.65+336 gross_profit, 326889.65+293.19 revenue\n)\n) comp_values\nON calc_values.ordersource=comp_values.ordersource\nAND calc_values.reporting_date=comp_values.reporting_date\nWHERE \ncalc_values.gross_profit<>COALESCE(comp_values.gross_profit, 0) \nOR  calc_values.revenue<> COALESCE(comp_values.revenue, 0)\nORDER BY calc_values.reporting_date, calc_values.ordersource", "language": "sql", "refs": [{"name": "fact_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ddvug_willibald_samen.fact_sales"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "operation.ddvug_willibald_samen.ddvug_willibald_samen-on-run-start-0": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "PUBLIC", "name": "ddvug_willibald_samen-on-run-start-0", "resource_type": "operation", "package_name": "ddvug_willibald_samen", "path": "hooks/ddvug_willibald_samen-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.ddvug_willibald_samen.ddvug_willibald_samen-on-run-start-0", "fqn": ["ddvug_willibald_samen", "hooks", "ddvug_willibald_samen-on-run-start-0"], "alias": "ddvug_willibald_samen-on-run-start-0", "checksum": {"name": "sha256", "checksum": "33a669bc9307a0bfdd60cec9862fa1b2c0c817cce12fbe032c61e26c7c53a16c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "transient": false}, "tags": ["on-run-start"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1743626380.564536, "relation_name": null, "raw_code": "{{ autoexec() }}", "language": "sql", "refs": [], "sources": [["LOAD_EXT_META", "META_HWM"]], "metrics": [], "depends_on": {"macros": ["macro.ddvug_willibald_samen.autoexec"], "nodes": ["source.ddvug_willibald_samen.LOAD_EXT_META.META_HWM"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 0}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_position_sns_hk_order_h__hk_position_h__sdts.a973ee998f": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_order_position_sns_hk_order_h__hk_position_h__sdts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_f49e2491cdbf2c1c696e9188309a339b.sql", "original_file_path": "models/dwh_05_sn/_not_dataspot_sourced/order/test_order_position.yml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_position_sns_hk_order_h__hk_position_h__sdts.a973ee998f", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "_not_dataspot_sourced", "order", "dbt_utils_unique_combination_of_columns_order_position_sns_hk_order_h__hk_position_h__sdts"], "alias": "dbt_utils_unique_combination_o_f49e2491cdbf2c1c696e9188309a339b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f49e2491cdbf2c1c696e9188309a339b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_f49e2491cdbf2c1c696e9188309a339b"}, "created_at": 1743626380.737111, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f49e2491cdbf2c1c696e9188309a339b\") }}", "language": "sql", "refs": [{"name": "order_position_sns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.order_position_sns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.order_position_sns", "attached_node": "model.ddvug_willibald_samen.order_position_sns", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_order_h", "hk_position_h", "sdts"], "model": "{{ get_where_subquery(ref('order_position_sns')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_position_snp_hk_order_position_l__sdts.946abbd85d": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_order_position_snp_hk_order_position_l__sdts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_7fb3ffeda02650823322ac5d87e91858.sql", "original_file_path": "models/dwh_05_sn/_not_dataspot_sourced/order/test_order_position.yml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_position_snp_hk_order_position_l__sdts.946abbd85d", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "_not_dataspot_sourced", "order", "dbt_utils_unique_combination_of_columns_order_position_snp_hk_order_position_l__sdts"], "alias": "dbt_utils_unique_combination_o_7fb3ffeda02650823322ac5d87e91858", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7fb3ffeda02650823322ac5d87e91858", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_7fb3ffeda02650823322ac5d87e91858"}, "created_at": 1743626380.745854, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7fb3ffeda02650823322ac5d87e91858\") }}", "language": "sql", "refs": [{"name": "order_position_snp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.order_position_snp"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.order_position_snp", "attached_node": "model.ddvug_willibald_samen.order_position_snp", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_order_position_l", "sdts"], "model": "{{ get_where_subquery(ref('order_position_snp')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_sns_hk_order_h__sdts.346d963092": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_order_sns_hk_order_h__sdts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_9e1a39867e437764e09846697556ac58.sql", "original_file_path": "models/dwh_05_sn/_not_dataspot_sourced/order/test_order.yml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_sns_hk_order_h__sdts.346d963092", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "_not_dataspot_sourced", "order", "dbt_utils_unique_combination_of_columns_order_sns_hk_order_h__sdts"], "alias": "dbt_utils_unique_combination_o_9e1a39867e437764e09846697556ac58", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_9e1a39867e437764e09846697556ac58", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_9e1a39867e437764e09846697556ac58"}, "created_at": 1743626380.747853, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_9e1a39867e437764e09846697556ac58\") }}", "language": "sql", "refs": [{"name": "order_sns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.order_sns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.order_sns", "attached_node": "model.ddvug_willibald_samen.order_sns", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_order_h", "sdts"], "model": "{{ get_where_subquery(ref('order_sns')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_customer_sns_hk_order_h__hk_customer_h__sdts.a6ed0eb6ee": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_order_customer_sns_hk_order_h__hk_customer_h__sdts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_2fb0291504ac162746ee193d982dde9a.sql", "original_file_path": "models/dwh_05_sn/_not_dataspot_sourced/order/test_order_customer.yml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_customer_sns_hk_order_h__hk_customer_h__sdts.a6ed0eb6ee", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "_not_dataspot_sourced", "order", "dbt_utils_unique_combination_of_columns_order_customer_sns_hk_order_h__hk_customer_h__sdts"], "alias": "dbt_utils_unique_combination_o_2fb0291504ac162746ee193d982dde9a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_2fb0291504ac162746ee193d982dde9a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_2fb0291504ac162746ee193d982dde9a"}, "created_at": 1743626380.74985, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_2fb0291504ac162746ee193d982dde9a\") }}", "language": "sql", "refs": [{"name": "order_customer_sns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.order_customer_sns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.order_customer_sns", "attached_node": "model.ddvug_willibald_samen.order_customer_sns", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_order_h", "hk_customer_h", "sdts"], "model": "{{ get_where_subquery(ref('order_customer_sns')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_customer_snp_hk_order_customer_l__sdts.da0cbcd307": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_order_customer_snp_hk_order_customer_l__sdts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_8e4b155a10d1f8bef116a799b58b2606.sql", "original_file_path": "models/dwh_05_sn/_not_dataspot_sourced/order/test_order_customer.yml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_customer_snp_hk_order_customer_l__sdts.da0cbcd307", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "_not_dataspot_sourced", "order", "dbt_utils_unique_combination_of_columns_order_customer_snp_hk_order_customer_l__sdts"], "alias": "dbt_utils_unique_combination_o_8e4b155a10d1f8bef116a799b58b2606", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8e4b155a10d1f8bef116a799b58b2606", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_8e4b155a10d1f8bef116a799b58b2606"}, "created_at": 1743626380.75142, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8e4b155a10d1f8bef116a799b58b2606\") }}", "language": "sql", "refs": [{"name": "order_customer_snp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.order_customer_snp"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.order_customer_snp", "attached_node": "model.ddvug_willibald_samen.order_customer_snp", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_order_customer_l", "sdts"], "model": "{{ get_where_subquery(ref('order_customer_snp')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_associationpartner_sns_hk_order_h__hk_associationpartner_h__sdts.69c4df1754": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_order_associationpartner_sns_hk_order_h__hk_associationpartner_h__sdts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_086b94e4b4ca916568c137fdfd2b6854.sql", "original_file_path": "models/dwh_05_sn/_not_dataspot_sourced/order/test_order_associationpartner.yml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_associationpartner_sns_hk_order_h__hk_associationpartner_h__sdts.69c4df1754", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "_not_dataspot_sourced", "order", "dbt_utils_unique_combination_of_columns_order_associationpartner_sns_hk_order_h__hk_associationpartner_h__sdts"], "alias": "dbt_utils_unique_combination_o_086b94e4b4ca916568c137fdfd2b6854", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_086b94e4b4ca916568c137fdfd2b6854", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_086b94e4b4ca916568c137fdfd2b6854"}, "created_at": 1743626380.753479, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_086b94e4b4ca916568c137fdfd2b6854\") }}", "language": "sql", "refs": [{"name": "order_associationpartner_sns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.order_associationpartner_sns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.order_associationpartner_sns", "attached_node": "model.ddvug_willibald_samen.order_associationpartner_sns", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_order_h", "hk_associationpartner_h", "sdts"], "model": "{{ get_where_subquery(ref('order_associationpartner_sns')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_associationpartner_snp_hk_order_associationpartner_l__sdts.c94c22d391": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_order_associationpartner_snp_hk_order_associationpartner_l__sdts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_a8ba89a40e0fd57cab5957b6b3910c3e.sql", "original_file_path": "models/dwh_05_sn/_not_dataspot_sourced/order/test_order_associationpartner.yml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_associationpartner_snp_hk_order_associationpartner_l__sdts.c94c22d391", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "_not_dataspot_sourced", "order", "dbt_utils_unique_combination_of_columns_order_associationpartner_snp_hk_order_associationpartner_l__sdts"], "alias": "dbt_utils_unique_combination_o_a8ba89a40e0fd57cab5957b6b3910c3e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a8ba89a40e0fd57cab5957b6b3910c3e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_a8ba89a40e0fd57cab5957b6b3910c3e"}, "created_at": 1743626380.7550058, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a8ba89a40e0fd57cab5957b6b3910c3e\") }}", "language": "sql", "refs": [{"name": "order_associationpartner_snp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.order_associationpartner_snp"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.order_associationpartner_snp", "attached_node": "model.ddvug_willibald_samen.order_associationpartner_snp", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_order_associationpartner_l", "sdts"], "model": "{{ get_where_subquery(ref('order_associationpartner_snp')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_product_sns_hk_position_h__hk_product_h__sdts.680a765177": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_position_product_sns_hk_position_h__hk_product_h__sdts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_19ad4a6c1e17fd232f6179fd14f89136.sql", "original_file_path": "models/dwh_05_sn/_not_dataspot_sourced/position/test_position_product.yml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_product_sns_hk_position_h__hk_product_h__sdts.680a765177", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "_not_dataspot_sourced", "position", "dbt_utils_unique_combination_of_columns_position_product_sns_hk_position_h__hk_product_h__sdts"], "alias": "dbt_utils_unique_combination_o_19ad4a6c1e17fd232f6179fd14f89136", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_19ad4a6c1e17fd232f6179fd14f89136", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_19ad4a6c1e17fd232f6179fd14f89136"}, "created_at": 1743626380.75708, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_19ad4a6c1e17fd232f6179fd14f89136\") }}", "language": "sql", "refs": [{"name": "position_product_sns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.position_product_sns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.position_product_sns", "attached_node": "model.ddvug_willibald_samen.position_product_sns", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_position_h", "hk_product_h", "sdts"], "model": "{{ get_where_subquery(ref('position_product_sns')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_product_snp_hk_position_product_l__sdts.ed7b36135d": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_position_product_snp_hk_position_product_l__sdts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_610191d93bcec917f5bccaa192074062.sql", "original_file_path": "models/dwh_05_sn/_not_dataspot_sourced/position/test_position_product.yml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_product_snp_hk_position_product_l__sdts.ed7b36135d", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "_not_dataspot_sourced", "position", "dbt_utils_unique_combination_of_columns_position_product_snp_hk_position_product_l__sdts"], "alias": "dbt_utils_unique_combination_o_610191d93bcec917f5bccaa192074062", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_610191d93bcec917f5bccaa192074062", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_610191d93bcec917f5bccaa192074062"}, "created_at": 1743626380.7585542, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_610191d93bcec917f5bccaa192074062\") }}", "language": "sql", "refs": [{"name": "position_product_snp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.position_product_snp"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.position_product_snp", "attached_node": "model.ddvug_willibald_samen.position_product_snp", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_position_product_l", "sdts"], "model": "{{ get_where_subquery(ref('position_product_snp')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_sns_hk_position_h__sdts.66bc7528fa": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_position_sns_hk_position_h__sdts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_1a7f985295fd152f66ee3406910bec8b.sql", "original_file_path": "models/dwh_05_sn/_not_dataspot_sourced/position/test_position.yml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_sns_hk_position_h__sdts.66bc7528fa", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "_not_dataspot_sourced", "position", "dbt_utils_unique_combination_of_columns_position_sns_hk_position_h__sdts"], "alias": "dbt_utils_unique_combination_o_1a7f985295fd152f66ee3406910bec8b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_1a7f985295fd152f66ee3406910bec8b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_1a7f985295fd152f66ee3406910bec8b"}, "created_at": 1743626380.7605891, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_1a7f985295fd152f66ee3406910bec8b\") }}", "language": "sql", "refs": [{"name": "position_sns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.position_sns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.position_sns", "attached_node": "model.ddvug_willibald_samen.position_sns", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_position_h", "sdts"], "model": "{{ get_where_subquery(ref('position_sns')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_snp_hk_position_h__sdts.347dc11ccb": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_position_snp_hk_position_h__sdts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_51056ae4b888c0f32dfa74b3f5956650.sql", "original_file_path": "models/dwh_05_sn/_not_dataspot_sourced/position/test_position.yml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_snp_hk_position_h__sdts.347dc11ccb", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "_not_dataspot_sourced", "position", "dbt_utils_unique_combination_of_columns_position_snp_hk_position_h__sdts"], "alias": "dbt_utils_unique_combination_o_51056ae4b888c0f32dfa74b3f5956650", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_51056ae4b888c0f32dfa74b3f5956650", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_51056ae4b888c0f32dfa74b3f5956650"}, "created_at": 1743626380.762016, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_51056ae4b888c0f32dfa74b3f5956650\") }}", "language": "sql", "refs": [{"name": "position_snp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.position_snp"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.position_snp", "attached_node": "model.ddvug_willibald_samen.position_snp", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_position_h", "sdts"], "model": "{{ get_where_subquery(ref('position_snp')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_product_sns_hk_product_h__sdts.8e2ea33ac6": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_product_sns_hk_product_h__sdts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_112b35cd1159943e376f872bf48412ce.sql", "original_file_path": "models/dwh_05_sn/_not_dataspot_sourced/product/test_product.yml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_product_sns_hk_product_h__sdts.8e2ea33ac6", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "_not_dataspot_sourced", "product", "dbt_utils_unique_combination_of_columns_product_sns_hk_product_h__sdts"], "alias": "dbt_utils_unique_combination_o_112b35cd1159943e376f872bf48412ce", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_112b35cd1159943e376f872bf48412ce", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_112b35cd1159943e376f872bf48412ce"}, "created_at": 1743626380.763938, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_112b35cd1159943e376f872bf48412ce\") }}", "language": "sql", "refs": [{"name": "product_sns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.product_sns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.product_sns", "attached_node": "model.ddvug_willibald_samen.product_sns", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_product_h", "sdts"], "model": "{{ get_where_subquery(ref('product_sns')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_product_snp_hk_product_h__sdts.68256a73c1": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_product_snp_hk_product_h__sdts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_e723e7231c370ec977ab8770cc5a8165.sql", "original_file_path": "models/dwh_05_sn/_not_dataspot_sourced/product/test_product.yml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_product_snp_hk_product_h__sdts.68256a73c1", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "_not_dataspot_sourced", "product", "dbt_utils_unique_combination_of_columns_product_snp_hk_product_h__sdts"], "alias": "dbt_utils_unique_combination_o_e723e7231c370ec977ab8770cc5a8165", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e723e7231c370ec977ab8770cc5a8165", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e723e7231c370ec977ab8770cc5a8165"}, "created_at": 1743626380.765357, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e723e7231c370ec977ab8770cc5a8165\") }}", "language": "sql", "refs": [{"name": "product_snp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.product_snp"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.product_snp", "attached_node": "model.ddvug_willibald_samen.product_snp", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_product_h", "sdts"], "model": "{{ get_where_subquery(ref('product_snp')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_product_productcategory_sns_hk_productcategory_h__hk_product_h__sdts.baeb025ab0": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_product_productcategory_sns_hk_productcategory_h__hk_product_h__sdts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_376974ddacf1a5734238f45a36ab580e.sql", "original_file_path": "models/dwh_05_sn/_not_dataspot_sourced/product/test_product_productcategory.yml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_product_productcategory_sns_hk_productcategory_h__hk_product_h__sdts.baeb025ab0", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "_not_dataspot_sourced", "product", "dbt_utils_unique_combination_of_columns_product_productcategory_sns_hk_productcategory_h__hk_product_h__sdts"], "alias": "dbt_utils_unique_combination_o_376974ddacf1a5734238f45a36ab580e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_376974ddacf1a5734238f45a36ab580e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_376974ddacf1a5734238f45a36ab580e"}, "created_at": 1743626380.767215, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_376974ddacf1a5734238f45a36ab580e\") }}", "language": "sql", "refs": [{"name": "product_productcategory_sns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.product_productcategory_sns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.product_productcategory_sns", "attached_node": "model.ddvug_willibald_samen.product_productcategory_sns", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_productcategory_h", "hk_product_h", "sdts"], "model": "{{ get_where_subquery(ref('product_productcategory_sns')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_product_productcategory_snp_hk_product_productcategory_l__sdts.ae6003500d": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_product_productcategory_snp_hk_product_productcategory_l__sdts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_404409f41ec384c24a9c5c72320e9584.sql", "original_file_path": "models/dwh_05_sn/_not_dataspot_sourced/product/test_product_productcategory.yml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_product_productcategory_snp_hk_product_productcategory_l__sdts.ae6003500d", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "_not_dataspot_sourced", "product", "dbt_utils_unique_combination_of_columns_product_productcategory_snp_hk_product_productcategory_l__sdts"], "alias": "dbt_utils_unique_combination_o_404409f41ec384c24a9c5c72320e9584", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_404409f41ec384c24a9c5c72320e9584", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_404409f41ec384c24a9c5c72320e9584"}, "created_at": 1743626380.768987, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_404409f41ec384c24a9c5c72320e9584\") }}", "language": "sql", "refs": [{"name": "product_productcategory_snp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.product_productcategory_snp"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.product_productcategory_snp", "attached_node": "model.ddvug_willibald_samen.product_productcategory_snp", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_product_productcategory_l", "sdts"], "model": "{{ get_where_subquery(ref('product_productcategory_snp')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_category_deliveryadherence_sns_category_deliveryadherence_nk__sdts.604efb30c8": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_category_deliveryadherence_sns_category_deliveryadherence_nk__sdts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_d8526bbcf86fa74271c0eeb8c81ccaf4.sql", "original_file_path": "models/dwh_05_sn/_not_dataspot_sourced/reference/category_deliveryadherence/category_deliveryadherence_test.yml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_category_deliveryadherence_sns_category_deliveryadherence_nk__sdts.604efb30c8", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "_not_dataspot_sourced", "reference", "category_deliveryadherence", "dbt_utils_unique_combination_of_columns_category_deliveryadherence_sns_category_deliveryadherence_nk__sdts"], "alias": "dbt_utils_unique_combination_o_d8526bbcf86fa74271c0eeb8c81ccaf4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d8526bbcf86fa74271c0eeb8c81ccaf4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_d8526bbcf86fa74271c0eeb8c81ccaf4"}, "created_at": 1743626380.770953, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d8526bbcf86fa74271c0eeb8c81ccaf4\") }}", "language": "sql", "refs": [{"name": "category_deliveryadherence_sns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.category_deliveryadherence_sns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.category_deliveryadherence_sns", "attached_node": "model.ddvug_willibald_samen.category_deliveryadherence_sns", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["category_deliveryadherence_nk", "sdts"], "model": "{{ get_where_subquery(ref('category_deliveryadherence_sns')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_customer_associationpartner_sns_hk_customer_h__hk_associationpartner_h__sdts.31f1d2f41b": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_customer_associationpartner_sns_hk_customer_h__hk_associationpartner_h__sdts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_f383ee3e38c71c1db27e169daf52ca5b.sql", "original_file_path": "models/dwh_05_sn/_not_dataspot_sourced/customer/test_customer_associationpartner.yml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_customer_associationpartner_sns_hk_customer_h__hk_associationpartner_h__sdts.31f1d2f41b", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "_not_dataspot_sourced", "customer", "dbt_utils_unique_combination_of_columns_customer_associationpartner_sns_hk_customer_h__hk_associationpartner_h__sdts"], "alias": "dbt_utils_unique_combination_o_f383ee3e38c71c1db27e169daf52ca5b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f383ee3e38c71c1db27e169daf52ca5b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_f383ee3e38c71c1db27e169daf52ca5b"}, "created_at": 1743626380.7729862, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f383ee3e38c71c1db27e169daf52ca5b\") }}", "language": "sql", "refs": [{"name": "customer_associationpartner_sns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.customer_associationpartner_sns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.customer_associationpartner_sns", "attached_node": "model.ddvug_willibald_samen.customer_associationpartner_sns", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_customer_h", "hk_associationpartner_h", "sdts"], "model": "{{ get_where_subquery(ref('customer_associationpartner_sns')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_customer_associationpartner_snp_hk_customer_associationpartner_l__sdts.a460cf2600": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_customer_associationpartner_snp_hk_customer_associationpartner_l__sdts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_6bde90b6ab624be2e02a8337b4a38fb4.sql", "original_file_path": "models/dwh_05_sn/_not_dataspot_sourced/customer/test_customer_associationpartner.yml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_customer_associationpartner_snp_hk_customer_associationpartner_l__sdts.a460cf2600", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "_not_dataspot_sourced", "customer", "dbt_utils_unique_combination_of_columns_customer_associationpartner_snp_hk_customer_associationpartner_l__sdts"], "alias": "dbt_utils_unique_combination_o_6bde90b6ab624be2e02a8337b4a38fb4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_6bde90b6ab624be2e02a8337b4a38fb4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_6bde90b6ab624be2e02a8337b4a38fb4"}, "created_at": 1743626380.774395, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_6bde90b6ab624be2e02a8337b4a38fb4\") }}", "language": "sql", "refs": [{"name": "customer_associationpartner_snp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.customer_associationpartner_snp"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.customer_associationpartner_snp", "attached_node": "model.ddvug_willibald_samen.customer_associationpartner_snp", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_customer_associationpartner_l", "sdts"], "model": "{{ get_where_subquery(ref('customer_associationpartner_snp')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_customer_sns_hk_customer_h__sdts.6b605109f9": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_customer_sns_hk_customer_h__sdts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_04af3112689bb29538f1c68656d91eda.sql", "original_file_path": "models/dwh_05_sn/_not_dataspot_sourced/customer/test_customer.yml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_customer_sns_hk_customer_h__sdts.6b605109f9", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "_not_dataspot_sourced", "customer", "dbt_utils_unique_combination_of_columns_customer_sns_hk_customer_h__sdts"], "alias": "dbt_utils_unique_combination_o_04af3112689bb29538f1c68656d91eda", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_04af3112689bb29538f1c68656d91eda", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_04af3112689bb29538f1c68656d91eda"}, "created_at": 1743626380.776416, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_04af3112689bb29538f1c68656d91eda\") }}", "language": "sql", "refs": [{"name": "customer_sns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.customer_sns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.customer_sns", "attached_node": "model.ddvug_willibald_samen.customer_sns", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_customer_h", "sdts"], "model": "{{ get_where_subquery(ref('customer_sns')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_customer_snp_hk_customer_h__sdts.2605db547c": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_customer_snp_hk_customer_h__sdts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_401b3135851a4a4ee2182eb349cce5a8.sql", "original_file_path": "models/dwh_05_sn/_not_dataspot_sourced/customer/test_customer.yml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_customer_snp_hk_customer_h__sdts.2605db547c", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "_not_dataspot_sourced", "customer", "dbt_utils_unique_combination_of_columns_customer_snp_hk_customer_h__sdts"], "alias": "dbt_utils_unique_combination_o_401b3135851a4a4ee2182eb349cce5a8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_401b3135851a4a4ee2182eb349cce5a8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_401b3135851a4a4ee2182eb349cce5a8"}, "created_at": 1743626380.7778292, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_401b3135851a4a4ee2182eb349cce5a8\") }}", "language": "sql", "refs": [{"name": "customer_snp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.customer_snp"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.customer_snp", "attached_node": "model.ddvug_willibald_samen.customer_snp", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_customer_h", "sdts"], "model": "{{ get_where_subquery(ref('customer_snp')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_associationpartner_sns_hk_associationpartner_h__sdts.e6512ac6ac": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_associationpartner_sns_hk_associationpartner_h__sdts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_831df849a77ae8f3ea14bbff63db3c91.sql", "original_file_path": "models/dwh_05_sn/_not_dataspot_sourced/associationpartner/test_associationpartner.yml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_associationpartner_sns_hk_associationpartner_h__sdts.e6512ac6ac", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "_not_dataspot_sourced", "associationpartner", "dbt_utils_unique_combination_of_columns_associationpartner_sns_hk_associationpartner_h__sdts"], "alias": "dbt_utils_unique_combination_o_831df849a77ae8f3ea14bbff63db3c91", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_831df849a77ae8f3ea14bbff63db3c91", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_831df849a77ae8f3ea14bbff63db3c91"}, "created_at": 1743626380.779677, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_831df849a77ae8f3ea14bbff63db3c91\") }}", "language": "sql", "refs": [{"name": "associationpartner_sns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.associationpartner_sns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.associationpartner_sns", "attached_node": "model.ddvug_willibald_samen.associationpartner_sns", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_associationpartner_h", "sdts"], "model": "{{ get_where_subquery(ref('associationpartner_sns')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_associationpartner_snp_hk_associationpartner_h__sdts.0054471477": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_associationpartner_snp_hk_associationpartner_h__sdts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_a88f685f91a1f0ad83d0cb0ba95d40c9.sql", "original_file_path": "models/dwh_05_sn/_not_dataspot_sourced/associationpartner/test_associationpartner.yml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_associationpartner_snp_hk_associationpartner_h__sdts.0054471477", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "_not_dataspot_sourced", "associationpartner", "dbt_utils_unique_combination_of_columns_associationpartner_snp_hk_associationpartner_h__sdts"], "alias": "dbt_utils_unique_combination_o_a88f685f91a1f0ad83d0cb0ba95d40c9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a88f685f91a1f0ad83d0cb0ba95d40c9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_a88f685f91a1f0ad83d0cb0ba95d40c9"}, "created_at": 1743626380.781078, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a88f685f91a1f0ad83d0cb0ba95d40c9\") }}", "language": "sql", "refs": [{"name": "associationpartner_snp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.associationpartner_snp"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.associationpartner_snp", "attached_node": "model.ddvug_willibald_samen.associationpartner_snp", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_associationpartner_h", "sdts"], "model": "{{ get_where_subquery(ref('associationpartner_snp')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_associationpartner_customer_sns_hk_associationpartner_h__hk_customer_h__sdts.3ea12109b7": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_associationpartner_customer_sns_hk_associationpartner_h__hk_customer_h__sdts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_647b39b492a7df7f3120bf0f30cb5061.sql", "original_file_path": "models/dwh_05_sn/_not_dataspot_sourced/associationpartner/test_associationpartner_customer.yml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_associationpartner_customer_sns_hk_associationpartner_h__hk_customer_h__sdts.3ea12109b7", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "_not_dataspot_sourced", "associationpartner", "dbt_utils_unique_combination_of_columns_associationpartner_customer_sns_hk_associationpartner_h__hk_customer_h__sdts"], "alias": "dbt_utils_unique_combination_o_647b39b492a7df7f3120bf0f30cb5061", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_647b39b492a7df7f3120bf0f30cb5061", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_647b39b492a7df7f3120bf0f30cb5061"}, "created_at": 1743626380.782984, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_647b39b492a7df7f3120bf0f30cb5061\") }}", "language": "sql", "refs": [{"name": "associationpartner_customer_sns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.associationpartner_customer_sns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.associationpartner_customer_sns", "attached_node": "model.ddvug_willibald_samen.associationpartner_customer_sns", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_associationpartner_h", "hk_customer_h", "sdts"], "model": "{{ get_where_subquery(ref('associationpartner_customer_sns')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_associationpartner_customer_snp_hk_associationpartner_customer_l__sdts.ac6b986952": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_associationpartner_customer_snp_hk_associationpartner_customer_l__sdts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_97d351599a3a5700b270c7f4a15a2b48.sql", "original_file_path": "models/dwh_05_sn/_not_dataspot_sourced/associationpartner/test_associationpartner_customer.yml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_associationpartner_customer_snp_hk_associationpartner_customer_l__sdts.ac6b986952", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "_not_dataspot_sourced", "associationpartner", "dbt_utils_unique_combination_of_columns_associationpartner_customer_snp_hk_associationpartner_customer_l__sdts"], "alias": "dbt_utils_unique_combination_o_97d351599a3a5700b270c7f4a15a2b48", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_97d351599a3a5700b270c7f4a15a2b48", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_97d351599a3a5700b270c7f4a15a2b48"}, "created_at": 1743626380.784387, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_97d351599a3a5700b270c7f4a15a2b48\") }}", "language": "sql", "refs": [{"name": "associationpartner_customer_snp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.associationpartner_customer_snp"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.associationpartner_customer_snp", "attached_node": "model.ddvug_willibald_samen.associationpartner_customer_snp", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_associationpartner_customer_l", "sdts"], "model": "{{ get_where_subquery(ref('associationpartner_customer_snp')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_hierarchy_sns_hk_productcategory_h__hk_productcategory_parent_h__sdts.804dbc805f": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_productcategory_hierarchy_sns_hk_productcategory_h__hk_productcategory_parent_h__sdts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_6df3d2d81e9e7c137b8a26d1549dd2ee.sql", "original_file_path": "models/dwh_05_sn/_not_dataspot_sourced/productcategory/test_productcategory_hierarchy.yaml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_hierarchy_sns_hk_productcategory_h__hk_productcategory_parent_h__sdts.804dbc805f", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "_not_dataspot_sourced", "productcategory", "dbt_utils_unique_combination_of_columns_productcategory_hierarchy_sns_hk_productcategory_h__hk_productcategory_parent_h__sdts"], "alias": "dbt_utils_unique_combination_o_6df3d2d81e9e7c137b8a26d1549dd2ee", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_6df3d2d81e9e7c137b8a26d1549dd2ee", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_6df3d2d81e9e7c137b8a26d1549dd2ee"}, "created_at": 1743626380.786401, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_6df3d2d81e9e7c137b8a26d1549dd2ee\") }}", "language": "sql", "refs": [{"name": "productcategory_hierarchy_sns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.productcategory_hierarchy_sns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.productcategory_hierarchy_sns", "attached_node": "model.ddvug_willibald_samen.productcategory_hierarchy_sns", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_productcategory_h", "hk_productcategory_parent_h", "sdts"], "model": "{{ get_where_subquery(ref('productcategory_hierarchy_sns')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_hierarchy_snp_hk_productcategory_hierarchy_l__sdts.e55dbefe34": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_productcategory_hierarchy_snp_hk_productcategory_hierarchy_l__sdts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_499566cb84b8763d3b1a9f5733af76a0.sql", "original_file_path": "models/dwh_05_sn/_not_dataspot_sourced/productcategory/test_productcategory_hierarchy.yaml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_hierarchy_snp_hk_productcategory_hierarchy_l__sdts.e55dbefe34", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "_not_dataspot_sourced", "productcategory", "dbt_utils_unique_combination_of_columns_productcategory_hierarchy_snp_hk_productcategory_hierarchy_l__sdts"], "alias": "dbt_utils_unique_combination_o_499566cb84b8763d3b1a9f5733af76a0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_499566cb84b8763d3b1a9f5733af76a0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_499566cb84b8763d3b1a9f5733af76a0"}, "created_at": 1743626380.787918, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_499566cb84b8763d3b1a9f5733af76a0\") }}", "language": "sql", "refs": [{"name": "productcategory_hierarchy_snp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.productcategory_hierarchy_snp"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.productcategory_hierarchy_snp", "attached_node": "model.ddvug_willibald_samen.productcategory_hierarchy_snp", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_productcategory_hierarchy_l", "sdts"], "model": "{{ get_where_subquery(ref('productcategory_hierarchy_snp')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_sns_hk_productcategory_h__sdts.5dec387e5c": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_productcategory_sns_hk_productcategory_h__sdts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_1d036452b224d7fa9d118ea1587d91b7.sql", "original_file_path": "models/dwh_05_sn/_not_dataspot_sourced/productcategory/test_productcategory.yaml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_sns_hk_productcategory_h__sdts.5dec387e5c", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "_not_dataspot_sourced", "productcategory", "dbt_utils_unique_combination_of_columns_productcategory_sns_hk_productcategory_h__sdts"], "alias": "dbt_utils_unique_combination_o_1d036452b224d7fa9d118ea1587d91b7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_1d036452b224d7fa9d118ea1587d91b7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_1d036452b224d7fa9d118ea1587d91b7"}, "created_at": 1743626380.7899368, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_1d036452b224d7fa9d118ea1587d91b7\") }}", "language": "sql", "refs": [{"name": "productcategory_sns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.productcategory_sns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.productcategory_sns", "attached_node": "model.ddvug_willibald_samen.productcategory_sns", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_productcategory_h", "sdts"], "model": "{{ get_where_subquery(ref('productcategory_sns')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_snp_hk_productcategory_h__sdts.84ee3c2375": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_productcategory_snp_hk_productcategory_h__sdts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_ce2c7e48e74c07fa62ebe0836765d97c.sql", "original_file_path": "models/dwh_05_sn/_not_dataspot_sourced/productcategory/test_productcategory.yaml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_snp_hk_productcategory_h__sdts.84ee3c2375", "fqn": ["ddvug_willibald_samen", "dwh_05_sn", "_not_dataspot_sourced", "productcategory", "dbt_utils_unique_combination_of_columns_productcategory_snp_hk_productcategory_h__sdts"], "alias": "dbt_utils_unique_combination_o_ce2c7e48e74c07fa62ebe0836765d97c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ce2c7e48e74c07fa62ebe0836765d97c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_ce2c7e48e74c07fa62ebe0836765d97c"}, "created_at": 1743626380.791279, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ce2c7e48e74c07fa62ebe0836765d97c\") }}", "language": "sql", "refs": [{"name": "productcategory_snp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.productcategory_snp"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.productcategory_snp", "attached_node": "model.ddvug_willibald_samen.productcategory_snp", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_productcategory_h", "sdts"], "model": "{{ get_where_subquery(ref('productcategory_snp')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.not_null_order_customer_l_hk_customer_h.1517b5d93d": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "not_null_order_customer_l_hk_customer_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "not_null_order_customer_l_hk_customer_h.sql", "original_file_path": "models/dwh_04_rv/order/test_order_customer_l.yaml", "unique_id": "test.ddvug_willibald_samen.not_null_order_customer_l_hk_customer_h.1517b5d93d", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "order", "not_null_order_customer_l_hk_customer_h"], "alias": "not_null_order_customer_l_hk_customer_h", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743626380.795339, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "order_customer_l", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ddvug_willibald_samen.order_customer_l"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_customer_h", "file_key_name": "models.order_customer_l", "attached_node": "model.ddvug_willibald_samen.order_customer_l", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hk_customer_h", "model": "{{ get_where_subquery(ref('order_customer_l')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.relationships_order_customer_l_hk_customer_h__hk_customer_h__ref_customer_h_.3dee3b1fd8": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "relationships_order_customer_l_hk_customer_h__hk_customer_h__ref_customer_h_", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "relationships_order_customer_l_046251c9834c9747bb2698012067fbf0.sql", "original_file_path": "models/dwh_04_rv/order/test_order_customer_l.yaml", "unique_id": "test.ddvug_willibald_samen.relationships_order_customer_l_hk_customer_h__hk_customer_h__ref_customer_h_.3dee3b1fd8", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "order", "relationships_order_customer_l_hk_customer_h__hk_customer_h__ref_customer_h_"], "alias": "relationships_order_customer_l_046251c9834c9747bb2698012067fbf0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_order_customer_l_046251c9834c9747bb2698012067fbf0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_order_customer_l_046251c9834c9747bb2698012067fbf0"}, "created_at": 1743626380.7959208, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_order_customer_l_046251c9834c9747bb2698012067fbf0\") }}", "language": "sql", "refs": [{"name": "customer_h", "package": null, "version": null}, {"name": "order_customer_l", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.customer_h", "model.ddvug_willibald_samen.order_customer_l"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_customer_h", "file_key_name": "models.order_customer_l", "attached_node": "model.ddvug_willibald_samen.order_customer_l", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('customer_h')", "field": "hk_customer_h", "column_name": "hk_customer_h", "model": "{{ get_where_subquery(ref('order_customer_l')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_customer_l_hk_order_h__hk_customer_h.130b9b2172": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_order_customer_l_hk_order_h__hk_customer_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_6c33b5b42072c7562351644bff8ecd83.sql", "original_file_path": "models/dwh_04_rv/order/test_order_customer_l.yaml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_customer_l_hk_order_h__hk_customer_h.130b9b2172", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "order", "dbt_utils_unique_combination_of_columns_order_customer_l_hk_order_h__hk_customer_h"], "alias": "dbt_utils_unique_combination_o_6c33b5b42072c7562351644bff8ecd83", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_6c33b5b42072c7562351644bff8ecd83", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_6c33b5b42072c7562351644bff8ecd83"}, "created_at": 1743626380.798571, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_6c33b5b42072c7562351644bff8ecd83\") }}", "language": "sql", "refs": [{"name": "order_customer_l", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.order_customer_l"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.order_customer_l", "attached_node": "model.ddvug_willibald_samen.order_customer_l", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_order_h", "hk_customer_h"], "model": "{{ get_where_subquery(ref('order_customer_l')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.not_null_order_ws_s_hk_order_h.d51941259d": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "not_null_order_ws_s_hk_order_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "not_null_order_ws_s_hk_order_h.sql", "original_file_path": "models/dwh_04_rv/order/test_order_ws_s.yaml", "unique_id": "test.ddvug_willibald_samen.not_null_order_ws_s_hk_order_h.d51941259d", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "order", "not_null_order_ws_s_hk_order_h"], "alias": "not_null_order_ws_s_hk_order_h", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743626380.800386, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "order_ws_s", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ddvug_willibald_samen.order_ws_s"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_order_h", "file_key_name": "models.order_ws_s", "attached_node": "model.ddvug_willibald_samen.order_ws_s", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hk_order_h", "model": "{{ get_where_subquery(ref('order_ws_s')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.relationships_order_ws_s_hk_order_h__hk_order_h__ref_order_h_.db500d92dc": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "relationships_order_ws_s_hk_order_h__hk_order_h__ref_order_h_", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "relationships_order_ws_s_hk_order_h__hk_order_h__ref_order_h_.sql", "original_file_path": "models/dwh_04_rv/order/test_order_ws_s.yaml", "unique_id": "test.ddvug_willibald_samen.relationships_order_ws_s_hk_order_h__hk_order_h__ref_order_h_.db500d92dc", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "order", "relationships_order_ws_s_hk_order_h__hk_order_h__ref_order_h_"], "alias": "relationships_order_ws_s_hk_order_h__hk_order_h__ref_order_h_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743626380.800948, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "order_h", "package": null, "version": null}, {"name": "order_ws_s", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.order_h", "model.ddvug_willibald_samen.order_ws_s"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_order_h", "file_key_name": "models.order_ws_s", "attached_node": "model.ddvug_willibald_samen.order_ws_s", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('order_h')", "field": "hk_order_h", "column_name": "hk_order_h", "model": "{{ get_where_subquery(ref('order_ws_s')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_ws_s_hk_order_h__ldts.7e05da4ab2": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_order_ws_s_hk_order_h__ldts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_be95e3c7e715f6d56295ca5c863919a7.sql", "original_file_path": "models/dwh_04_rv/order/test_order_ws_s.yaml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_ws_s_hk_order_h__ldts.7e05da4ab2", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "order", "dbt_utils_unique_combination_of_columns_order_ws_s_hk_order_h__ldts"], "alias": "dbt_utils_unique_combination_o_be95e3c7e715f6d56295ca5c863919a7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_be95e3c7e715f6d56295ca5c863919a7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_be95e3c7e715f6d56295ca5c863919a7"}, "created_at": 1743626380.8024662, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_be95e3c7e715f6d56295ca5c863919a7\") }}", "language": "sql", "refs": [{"name": "order_ws_s", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.order_ws_s"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.order_ws_s", "attached_node": "model.ddvug_willibald_samen.order_ws_s", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_order_h", "ldts"], "model": "{{ get_where_subquery(ref('order_ws_s')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.not_null_order_associationpartner_l_hk_associationpartner_h.0f573fa13c": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "not_null_order_associationpartner_l_hk_associationpartner_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "not_null_order_associationpartner_l_hk_associationpartner_h.sql", "original_file_path": "models/dwh_04_rv/order/test_order_associationpartner_l.yaml", "unique_id": "test.ddvug_willibald_samen.not_null_order_associationpartner_l_hk_associationpartner_h.0f573fa13c", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "order", "not_null_order_associationpartner_l_hk_associationpartner_h"], "alias": "not_null_order_associationpartner_l_hk_associationpartner_h", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743626380.804267, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "order_associationpartner_l", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ddvug_willibald_samen.order_associationpartner_l"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_associationpartner_h", "file_key_name": "models.order_associationpartner_l", "attached_node": "model.ddvug_willibald_samen.order_associationpartner_l", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hk_associationpartner_h", "model": "{{ get_where_subquery(ref('order_associationpartner_l')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.relationships_order_associationpartner_l_hk_associationpartner_h__hk_associationpartner_h__ref_associationpartner_h_.0e69c0bcba": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "relationships_order_associationpartner_l_hk_associationpartner_h__hk_associationpartner_h__ref_associationpartner_h_", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "relationships_order_associatio_916efdb4ed24922bbfc0657884139782.sql", "original_file_path": "models/dwh_04_rv/order/test_order_associationpartner_l.yaml", "unique_id": "test.ddvug_willibald_samen.relationships_order_associationpartner_l_hk_associationpartner_h__hk_associationpartner_h__ref_associationpartner_h_.0e69c0bcba", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "order", "relationships_order_associationpartner_l_hk_associationpartner_h__hk_associationpartner_h__ref_associationpartner_h_"], "alias": "relationships_order_associatio_916efdb4ed24922bbfc0657884139782", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_order_associatio_916efdb4ed24922bbfc0657884139782", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_order_associatio_916efdb4ed24922bbfc0657884139782"}, "created_at": 1743626380.8048341, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_order_associatio_916efdb4ed24922bbfc0657884139782\") }}", "language": "sql", "refs": [{"name": "associationpartner_h", "package": null, "version": null}, {"name": "order_associationpartner_l", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.associationpartner_h", "model.ddvug_willibald_samen.order_associationpartner_l"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_associationpartner_h", "file_key_name": "models.order_associationpartner_l", "attached_node": "model.ddvug_willibald_samen.order_associationpartner_l", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('associationpartner_h')", "field": "hk_associationpartner_h", "column_name": "hk_associationpartner_h", "model": "{{ get_where_subquery(ref('order_associationpartner_l')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_associationpartner_l_hk_order_h__hk_associationpartner_h.3dd7df03f0": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_order_associationpartner_l_hk_order_h__hk_associationpartner_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_b74110d6798e158054dd2c8e36f98de6.sql", "original_file_path": "models/dwh_04_rv/order/test_order_associationpartner_l.yaml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_associationpartner_l_hk_order_h__hk_associationpartner_h.3dd7df03f0", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "order", "dbt_utils_unique_combination_of_columns_order_associationpartner_l_hk_order_h__hk_associationpartner_h"], "alias": "dbt_utils_unique_combination_o_b74110d6798e158054dd2c8e36f98de6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b74110d6798e158054dd2c8e36f98de6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b74110d6798e158054dd2c8e36f98de6"}, "created_at": 1743626380.806435, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b74110d6798e158054dd2c8e36f98de6\") }}", "language": "sql", "refs": [{"name": "order_associationpartner_l", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.order_associationpartner_l"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.order_associationpartner_l", "attached_node": "model.ddvug_willibald_samen.order_associationpartner_l", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_order_h", "hk_associationpartner_h"], "model": "{{ get_where_subquery(ref('order_associationpartner_l')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.not_null_order_position_l_hk_order_h.de5876fa32": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "not_null_order_position_l_hk_order_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "not_null_order_position_l_hk_order_h.sql", "original_file_path": "models/dwh_04_rv/order/test_order_position_l.yaml", "unique_id": "test.ddvug_willibald_samen.not_null_order_position_l_hk_order_h.de5876fa32", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "order", "not_null_order_position_l_hk_order_h"], "alias": "not_null_order_position_l_hk_order_h", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743626380.8081138, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "order_position_l", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ddvug_willibald_samen.order_position_l"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_order_h", "file_key_name": "models.order_position_l", "attached_node": "model.ddvug_willibald_samen.order_position_l", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hk_order_h", "model": "{{ get_where_subquery(ref('order_position_l')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.relationships_order_position_l_hk_order_h__hk_order_h__ref_order_h_.a424ec45ad": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "relationships_order_position_l_hk_order_h__hk_order_h__ref_order_h_", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "relationships_order_position_l_e9f83177d057a549d6cdb63d38b11665.sql", "original_file_path": "models/dwh_04_rv/order/test_order_position_l.yaml", "unique_id": "test.ddvug_willibald_samen.relationships_order_position_l_hk_order_h__hk_order_h__ref_order_h_.a424ec45ad", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "order", "relationships_order_position_l_hk_order_h__hk_order_h__ref_order_h_"], "alias": "relationships_order_position_l_e9f83177d057a549d6cdb63d38b11665", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_order_position_l_e9f83177d057a549d6cdb63d38b11665", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_order_position_l_e9f83177d057a549d6cdb63d38b11665"}, "created_at": 1743626380.808676, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_order_position_l_e9f83177d057a549d6cdb63d38b11665\") }}", "language": "sql", "refs": [{"name": "order_h", "package": null, "version": null}, {"name": "order_position_l", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.order_h", "model.ddvug_willibald_samen.order_position_l"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_order_h", "file_key_name": "models.order_position_l", "attached_node": "model.ddvug_willibald_samen.order_position_l", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('order_h')", "field": "hk_order_h", "column_name": "hk_order_h", "model": "{{ get_where_subquery(ref('order_position_l')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_position_l_hk_position_h__hk_order_h.aa871febee": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_order_position_l_hk_position_h__hk_order_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_c750624491f1228875f7c766358f5947.sql", "original_file_path": "models/dwh_04_rv/order/test_order_position_l.yaml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_position_l_hk_position_h__hk_order_h.aa871febee", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "order", "dbt_utils_unique_combination_of_columns_order_position_l_hk_position_h__hk_order_h"], "alias": "dbt_utils_unique_combination_o_c750624491f1228875f7c766358f5947", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c750624491f1228875f7c766358f5947", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_c750624491f1228875f7c766358f5947"}, "created_at": 1743626380.810251, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c750624491f1228875f7c766358f5947\") }}", "language": "sql", "refs": [{"name": "order_position_l", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.order_position_l"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.order_position_l", "attached_node": "model.ddvug_willibald_samen.order_position_l", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_position_h", "hk_order_h"], "model": "{{ get_where_subquery(ref('order_position_l')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.not_null_order_h_hk_order_h.e964883e7d": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "not_null_order_h_hk_order_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "not_null_order_h_hk_order_h.sql", "original_file_path": "models/dwh_04_rv/order/test_order_h.yaml", "unique_id": "test.ddvug_willibald_samen.not_null_order_h_hk_order_h.e964883e7d", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "order", "not_null_order_h_hk_order_h"], "alias": "not_null_order_h_hk_order_h", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743626380.811751, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "order_h", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ddvug_willibald_samen.order_h"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_order_h", "file_key_name": "models.order_h", "attached_node": "model.ddvug_willibald_samen.order_h", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hk_order_h", "model": "{{ get_where_subquery(ref('order_h')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_h_hk_order_h.9033e9e2ae": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_order_h_hk_order_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_of_columns_order_h_hk_order_h.sql", "original_file_path": "models/dwh_04_rv/order/test_order_h.yaml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_h_hk_order_h.9033e9e2ae", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "order", "dbt_utils_unique_combination_of_columns_order_h_hk_order_h"], "alias": "dbt_utils_unique_combination_of_columns_order_h_hk_order_h", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743626380.812366, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "order_h", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.order_h"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.order_h", "attached_node": "model.ddvug_willibald_samen.order_h", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_order_h"], "model": "{{ get_where_subquery(ref('order_h')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.not_null_position_rs_s_hk_position_h.2923971ee3": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "not_null_position_rs_s_hk_position_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "not_null_position_rs_s_hk_position_h.sql", "original_file_path": "models/dwh_04_rv/position/test_position_rs_s.yaml", "unique_id": "test.ddvug_willibald_samen.not_null_position_rs_s_hk_position_h.2923971ee3", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "position", "not_null_position_rs_s_hk_position_h"], "alias": "not_null_position_rs_s_hk_position_h", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743626380.8140721, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "position_rs_s", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ddvug_willibald_samen.position_rs_s"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_position_h", "file_key_name": "models.position_rs_s", "attached_node": "model.ddvug_willibald_samen.position_rs_s", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hk_position_h", "model": "{{ get_where_subquery(ref('position_rs_s')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.relationships_position_rs_s_hk_position_h__hk_position_h__ref_position_h_.f54d7665c8": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "relationships_position_rs_s_hk_position_h__hk_position_h__ref_position_h_", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "relationships_position_rs_s_b0a15773b876b4b13d8a07f6b560c714.sql", "original_file_path": "models/dwh_04_rv/position/test_position_rs_s.yaml", "unique_id": "test.ddvug_willibald_samen.relationships_position_rs_s_hk_position_h__hk_position_h__ref_position_h_.f54d7665c8", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "position", "relationships_position_rs_s_hk_position_h__hk_position_h__ref_position_h_"], "alias": "relationships_position_rs_s_b0a15773b876b4b13d8a07f6b560c714", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_position_rs_s_b0a15773b876b4b13d8a07f6b560c714", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_position_rs_s_b0a15773b876b4b13d8a07f6b560c714"}, "created_at": 1743626380.8146381, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_position_rs_s_b0a15773b876b4b13d8a07f6b560c714\") }}", "language": "sql", "refs": [{"name": "position_h", "package": null, "version": null}, {"name": "position_rs_s", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.position_h", "model.ddvug_willibald_samen.position_rs_s"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_position_h", "file_key_name": "models.position_rs_s", "attached_node": "model.ddvug_willibald_samen.position_rs_s", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('position_h')", "field": "hk_position_h", "column_name": "hk_position_h", "model": "{{ get_where_subquery(ref('position_rs_s')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_rs_s_hk_position_h__ldts.6651764ee7": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_position_rs_s_hk_position_h__ldts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_0327e3e712e1b45f46cf2c39b9b703b4.sql", "original_file_path": "models/dwh_04_rv/position/test_position_rs_s.yaml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_rs_s_hk_position_h__ldts.6651764ee7", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "position", "dbt_utils_unique_combination_of_columns_position_rs_s_hk_position_h__ldts"], "alias": "dbt_utils_unique_combination_o_0327e3e712e1b45f46cf2c39b9b703b4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_0327e3e712e1b45f46cf2c39b9b703b4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_0327e3e712e1b45f46cf2c39b9b703b4"}, "created_at": 1743626380.81616, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0327e3e712e1b45f46cf2c39b9b703b4\") }}", "language": "sql", "refs": [{"name": "position_rs_s", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.position_rs_s"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.position_rs_s", "attached_node": "model.ddvug_willibald_samen.position_rs_s", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_position_h", "ldts"], "model": "{{ get_where_subquery(ref('position_rs_s')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.not_null_position_ws_s_hk_position_h.178468e426": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "not_null_position_ws_s_hk_position_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "not_null_position_ws_s_hk_position_h.sql", "original_file_path": "models/dwh_04_rv/position/test_position_ws_s.yaml", "unique_id": "test.ddvug_willibald_samen.not_null_position_ws_s_hk_position_h.178468e426", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "position", "not_null_position_ws_s_hk_position_h"], "alias": "not_null_position_ws_s_hk_position_h", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743626380.817823, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "position_ws_s", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ddvug_willibald_samen.position_ws_s"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_position_h", "file_key_name": "models.position_ws_s", "attached_node": "model.ddvug_willibald_samen.position_ws_s", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hk_position_h", "model": "{{ get_where_subquery(ref('position_ws_s')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.relationships_position_ws_s_hk_position_h__hk_position_h__ref_position_h_.2082aaaf41": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "relationships_position_ws_s_hk_position_h__hk_position_h__ref_position_h_", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "relationships_position_ws_s_88b7398c70c3ce4a439b33ecff468d50.sql", "original_file_path": "models/dwh_04_rv/position/test_position_ws_s.yaml", "unique_id": "test.ddvug_willibald_samen.relationships_position_ws_s_hk_position_h__hk_position_h__ref_position_h_.2082aaaf41", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "position", "relationships_position_ws_s_hk_position_h__hk_position_h__ref_position_h_"], "alias": "relationships_position_ws_s_88b7398c70c3ce4a439b33ecff468d50", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_position_ws_s_88b7398c70c3ce4a439b33ecff468d50", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_position_ws_s_88b7398c70c3ce4a439b33ecff468d50"}, "created_at": 1743626380.8183959, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_position_ws_s_88b7398c70c3ce4a439b33ecff468d50\") }}", "language": "sql", "refs": [{"name": "position_h", "package": null, "version": null}, {"name": "position_ws_s", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.position_h", "model.ddvug_willibald_samen.position_ws_s"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_position_h", "file_key_name": "models.position_ws_s", "attached_node": "model.ddvug_willibald_samen.position_ws_s", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('position_h')", "field": "hk_position_h", "column_name": "hk_position_h", "model": "{{ get_where_subquery(ref('position_ws_s')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_ws_s_hk_position_h__ldts.dd123b21cb": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_position_ws_s_hk_position_h__ldts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_2e90993eb75332b307e57d0e1bed1f73.sql", "original_file_path": "models/dwh_04_rv/position/test_position_ws_s.yaml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_ws_s_hk_position_h__ldts.dd123b21cb", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "position", "dbt_utils_unique_combination_of_columns_position_ws_s_hk_position_h__ldts"], "alias": "dbt_utils_unique_combination_o_2e90993eb75332b307e57d0e1bed1f73", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_2e90993eb75332b307e57d0e1bed1f73", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_2e90993eb75332b307e57d0e1bed1f73"}, "created_at": 1743626380.819975, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_2e90993eb75332b307e57d0e1bed1f73\") }}", "language": "sql", "refs": [{"name": "position_ws_s", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.position_ws_s"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.position_ws_s", "attached_node": "model.ddvug_willibald_samen.position_ws_s", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_position_h", "ldts"], "model": "{{ get_where_subquery(ref('position_ws_s')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.not_null_position_h_hk_position_h.ec4aed46b2": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "not_null_position_h_hk_position_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "not_null_position_h_hk_position_h.sql", "original_file_path": "models/dwh_04_rv/position/test_position_h.yaml", "unique_id": "test.ddvug_willibald_samen.not_null_position_h_hk_position_h.ec4aed46b2", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "position", "not_null_position_h_hk_position_h"], "alias": "not_null_position_h_hk_position_h", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743626380.821762, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "position_h", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ddvug_willibald_samen.position_h"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_position_h", "file_key_name": "models.position_h", "attached_node": "model.ddvug_willibald_samen.position_h", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hk_position_h", "model": "{{ get_where_subquery(ref('position_h')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_h_hk_position_h.228a6fbcb6": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_position_h_hk_position_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_a9c5e5e09d691884a60197585aa0c675.sql", "original_file_path": "models/dwh_04_rv/position/test_position_h.yaml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_h_hk_position_h.228a6fbcb6", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "position", "dbt_utils_unique_combination_of_columns_position_h_hk_position_h"], "alias": "dbt_utils_unique_combination_o_a9c5e5e09d691884a60197585aa0c675", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a9c5e5e09d691884a60197585aa0c675", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_a9c5e5e09d691884a60197585aa0c675"}, "created_at": 1743626380.822319, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a9c5e5e09d691884a60197585aa0c675\") }}", "language": "sql", "refs": [{"name": "position_h", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.position_h"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.position_h", "attached_node": "model.ddvug_willibald_samen.position_h", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_position_h"], "model": "{{ get_where_subquery(ref('position_h')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.not_null_position_product_l_hk_position_h.5df8285269": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "not_null_position_product_l_hk_position_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "not_null_position_product_l_hk_position_h.sql", "original_file_path": "models/dwh_04_rv/position/test_position_product_l.yaml", "unique_id": "test.ddvug_willibald_samen.not_null_position_product_l_hk_position_h.5df8285269", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "position", "not_null_position_product_l_hk_position_h"], "alias": "not_null_position_product_l_hk_position_h", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743626380.8516731, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "position_product_l", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ddvug_willibald_samen.position_product_l"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_position_h", "file_key_name": "models.position_product_l", "attached_node": "model.ddvug_willibald_samen.position_product_l", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hk_position_h", "model": "{{ get_where_subquery(ref('position_product_l')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.relationships_position_product_l_hk_position_h__hk_position_h__ref_position_h_.d95245f4bf": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "relationships_position_product_l_hk_position_h__hk_position_h__ref_position_h_", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "relationships_position_product_dc25944f7ef62601ad509bd06ff8b7fe.sql", "original_file_path": "models/dwh_04_rv/position/test_position_product_l.yaml", "unique_id": "test.ddvug_willibald_samen.relationships_position_product_l_hk_position_h__hk_position_h__ref_position_h_.d95245f4bf", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "position", "relationships_position_product_l_hk_position_h__hk_position_h__ref_position_h_"], "alias": "relationships_position_product_dc25944f7ef62601ad509bd06ff8b7fe", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_position_product_dc25944f7ef62601ad509bd06ff8b7fe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_position_product_dc25944f7ef62601ad509bd06ff8b7fe"}, "created_at": 1743626380.852278, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_position_product_dc25944f7ef62601ad509bd06ff8b7fe\") }}", "language": "sql", "refs": [{"name": "position_h", "package": null, "version": null}, {"name": "position_product_l", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.position_h", "model.ddvug_willibald_samen.position_product_l"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_position_h", "file_key_name": "models.position_product_l", "attached_node": "model.ddvug_willibald_samen.position_product_l", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('position_h')", "field": "hk_position_h", "column_name": "hk_position_h", "model": "{{ get_where_subquery(ref('position_product_l')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_product_l_hk_product_h__hk_position_h.fa6a818ea6": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_position_product_l_hk_product_h__hk_position_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_c4f66cf121413a78a30995299447f472.sql", "original_file_path": "models/dwh_04_rv/position/test_position_product_l.yaml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_product_l_hk_product_h__hk_position_h.fa6a818ea6", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "position", "dbt_utils_unique_combination_of_columns_position_product_l_hk_product_h__hk_position_h"], "alias": "dbt_utils_unique_combination_o_c4f66cf121413a78a30995299447f472", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c4f66cf121413a78a30995299447f472", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_c4f66cf121413a78a30995299447f472"}, "created_at": 1743626380.85406, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c4f66cf121413a78a30995299447f472\") }}", "language": "sql", "refs": [{"name": "position_product_l", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.position_product_l"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.position_product_l", "attached_node": "model.ddvug_willibald_samen.position_product_l", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_product_h", "hk_position_h"], "model": "{{ get_where_subquery(ref('position_product_l')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.not_null_deliveryservice_ws_s_hk_deliveryservice_h.df945b68b6": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "not_null_deliveryservice_ws_s_hk_deliveryservice_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "not_null_deliveryservice_ws_s_hk_deliveryservice_h.sql", "original_file_path": "models/dwh_04_rv/deliveryservice/test_deliveryservice_ws_s.yaml", "unique_id": "test.ddvug_willibald_samen.not_null_deliveryservice_ws_s_hk_deliveryservice_h.df945b68b6", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "deliveryservice", "not_null_deliveryservice_ws_s_hk_deliveryservice_h"], "alias": "not_null_deliveryservice_ws_s_hk_deliveryservice_h", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743626380.856061, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "deliveryservice_ws_s", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ddvug_willibald_samen.deliveryservice_ws_s"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_deliveryservice_h", "file_key_name": "models.deliveryservice_ws_s", "attached_node": "model.ddvug_willibald_samen.deliveryservice_ws_s", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hk_deliveryservice_h", "model": "{{ get_where_subquery(ref('deliveryservice_ws_s')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.relationships_deliveryservice_ws_s_hk_deliveryservice_h__hk_deliveryservice_h__ref_deliveryservice_h_.67c5d7dcc0": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "relationships_deliveryservice_ws_s_hk_deliveryservice_h__hk_deliveryservice_h__ref_deliveryservice_h_", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "relationships_deliveryservice__b2be14bc1a173337bc2c4e727e5596be.sql", "original_file_path": "models/dwh_04_rv/deliveryservice/test_deliveryservice_ws_s.yaml", "unique_id": "test.ddvug_willibald_samen.relationships_deliveryservice_ws_s_hk_deliveryservice_h__hk_deliveryservice_h__ref_deliveryservice_h_.67c5d7dcc0", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "deliveryservice", "relationships_deliveryservice_ws_s_hk_deliveryservice_h__hk_deliveryservice_h__ref_deliveryservice_h_"], "alias": "relationships_deliveryservice__b2be14bc1a173337bc2c4e727e5596be", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_deliveryservice__b2be14bc1a173337bc2c4e727e5596be", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_deliveryservice__b2be14bc1a173337bc2c4e727e5596be"}, "created_at": 1743626380.856642, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_deliveryservice__b2be14bc1a173337bc2c4e727e5596be\") }}", "language": "sql", "refs": [{"name": "deliveryservice_h", "package": null, "version": null}, {"name": "deliveryservice_ws_s", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.deliveryservice_h", "model.ddvug_willibald_samen.deliveryservice_ws_s"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_deliveryservice_h", "file_key_name": "models.deliveryservice_ws_s", "attached_node": "model.ddvug_willibald_samen.deliveryservice_ws_s", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('deliveryservice_h')", "field": "hk_deliveryservice_h", "column_name": "hk_deliveryservice_h", "model": "{{ get_where_subquery(ref('deliveryservice_ws_s')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_deliveryservice_ws_s_hk_deliveryservice_h__ldts.098dee5d26": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_deliveryservice_ws_s_hk_deliveryservice_h__ldts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_4bc238becb37f8366738b2d7024535a6.sql", "original_file_path": "models/dwh_04_rv/deliveryservice/test_deliveryservice_ws_s.yaml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_deliveryservice_ws_s_hk_deliveryservice_h__ldts.098dee5d26", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "deliveryservice", "dbt_utils_unique_combination_of_columns_deliveryservice_ws_s_hk_deliveryservice_h__ldts"], "alias": "dbt_utils_unique_combination_o_4bc238becb37f8366738b2d7024535a6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_4bc238becb37f8366738b2d7024535a6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_4bc238becb37f8366738b2d7024535a6"}, "created_at": 1743626380.858272, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_4bc238becb37f8366738b2d7024535a6\") }}", "language": "sql", "refs": [{"name": "deliveryservice_ws_s", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.deliveryservice_ws_s"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.deliveryservice_ws_s", "attached_node": "model.ddvug_willibald_samen.deliveryservice_ws_s", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_deliveryservice_h", "ldts"], "model": "{{ get_where_subquery(ref('deliveryservice_ws_s')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.not_null_deliveryservice_h_hk_deliveryservice_h.075e1a1c28": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "not_null_deliveryservice_h_hk_deliveryservice_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "not_null_deliveryservice_h_hk_deliveryservice_h.sql", "original_file_path": "models/dwh_04_rv/deliveryservice/test_deliveryservice_h.yaml", "unique_id": "test.ddvug_willibald_samen.not_null_deliveryservice_h_hk_deliveryservice_h.075e1a1c28", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "deliveryservice", "not_null_deliveryservice_h_hk_deliveryservice_h"], "alias": "not_null_deliveryservice_h_hk_deliveryservice_h", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743626380.859961, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "deliveryservice_h", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ddvug_willibald_samen.deliveryservice_h"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_deliveryservice_h", "file_key_name": "models.deliveryservice_h", "attached_node": "model.ddvug_willibald_samen.deliveryservice_h", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hk_deliveryservice_h", "model": "{{ get_where_subquery(ref('deliveryservice_h')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_deliveryservice_h_hk_deliveryservice_h.ff12c0142c": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_deliveryservice_h_hk_deliveryservice_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_570f14e450095bb1baff9c1b5557746f.sql", "original_file_path": "models/dwh_04_rv/deliveryservice/test_deliveryservice_h.yaml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_deliveryservice_h_hk_deliveryservice_h.ff12c0142c", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "deliveryservice", "dbt_utils_unique_combination_of_columns_deliveryservice_h_hk_deliveryservice_h"], "alias": "dbt_utils_unique_combination_o_570f14e450095bb1baff9c1b5557746f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_570f14e450095bb1baff9c1b5557746f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_570f14e450095bb1baff9c1b5557746f"}, "created_at": 1743626380.860534, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_570f14e450095bb1baff9c1b5557746f\") }}", "language": "sql", "refs": [{"name": "deliveryservice_h", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.deliveryservice_h"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.deliveryservice_h", "attached_node": "model.ddvug_willibald_samen.deliveryservice_h", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_deliveryservice_h"], "model": "{{ get_where_subquery(ref('deliveryservice_h')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.not_null_productcategory_h_hk_productcategory_h.ccee8ead98": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "not_null_productcategory_h_hk_productcategory_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "not_null_productcategory_h_hk_productcategory_h.sql", "original_file_path": "models/dwh_04_rv/productcategory/test_productcategory_h.yaml", "unique_id": "test.ddvug_willibald_samen.not_null_productcategory_h_hk_productcategory_h.ccee8ead98", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "productcategory", "not_null_productcategory_h_hk_productcategory_h"], "alias": "not_null_productcategory_h_hk_productcategory_h", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743626380.862199, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "productcategory_h", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ddvug_willibald_samen.productcategory_h"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_productcategory_h", "file_key_name": "models.productcategory_h", "attached_node": "model.ddvug_willibald_samen.productcategory_h", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hk_productcategory_h", "model": "{{ get_where_subquery(ref('productcategory_h')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_h_hk_productcategory_h.67b2921ad0": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_productcategory_h_hk_productcategory_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_e6208f825e79a6d7cfb5dc508f2debab.sql", "original_file_path": "models/dwh_04_rv/productcategory/test_productcategory_h.yaml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_h_hk_productcategory_h.67b2921ad0", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "productcategory", "dbt_utils_unique_combination_of_columns_productcategory_h_hk_productcategory_h"], "alias": "dbt_utils_unique_combination_o_e6208f825e79a6d7cfb5dc508f2debab", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e6208f825e79a6d7cfb5dc508f2debab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e6208f825e79a6d7cfb5dc508f2debab"}, "created_at": 1743626380.862756, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e6208f825e79a6d7cfb5dc508f2debab\") }}", "language": "sql", "refs": [{"name": "productcategory_h", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.productcategory_h"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.productcategory_h", "attached_node": "model.ddvug_willibald_samen.productcategory_h", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_productcategory_h"], "model": "{{ get_where_subquery(ref('productcategory_h')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.not_null_productcategory_ws_s_hk_productcategory_h.68670e8df5": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "not_null_productcategory_ws_s_hk_productcategory_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "not_null_productcategory_ws_s_hk_productcategory_h.sql", "original_file_path": "models/dwh_04_rv/productcategory/test_productcategory_ws_s.yaml", "unique_id": "test.ddvug_willibald_samen.not_null_productcategory_ws_s_hk_productcategory_h.68670e8df5", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "productcategory", "not_null_productcategory_ws_s_hk_productcategory_h"], "alias": "not_null_productcategory_ws_s_hk_productcategory_h", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743626380.864429, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "productcategory_ws_s", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ddvug_willibald_samen.productcategory_ws_s"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_productcategory_h", "file_key_name": "models.productcategory_ws_s", "attached_node": "model.ddvug_willibald_samen.productcategory_ws_s", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hk_productcategory_h", "model": "{{ get_where_subquery(ref('productcategory_ws_s')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.relationships_productcategory_ws_s_hk_productcategory_h__hk_productcategory_h__ref_productcategory_h_.a68485f2fb": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "relationships_productcategory_ws_s_hk_productcategory_h__hk_productcategory_h__ref_productcategory_h_", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "relationships_productcategory__a53a270e4e305295d6255ef0397a64c6.sql", "original_file_path": "models/dwh_04_rv/productcategory/test_productcategory_ws_s.yaml", "unique_id": "test.ddvug_willibald_samen.relationships_productcategory_ws_s_hk_productcategory_h__hk_productcategory_h__ref_productcategory_h_.a68485f2fb", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "productcategory", "relationships_productcategory_ws_s_hk_productcategory_h__hk_productcategory_h__ref_productcategory_h_"], "alias": "relationships_productcategory__a53a270e4e305295d6255ef0397a64c6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_productcategory__a53a270e4e305295d6255ef0397a64c6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_productcategory__a53a270e4e305295d6255ef0397a64c6"}, "created_at": 1743626380.864992, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_productcategory__a53a270e4e305295d6255ef0397a64c6\") }}", "language": "sql", "refs": [{"name": "productcategory_h", "package": null, "version": null}, {"name": "productcategory_ws_s", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.productcategory_h", "model.ddvug_willibald_samen.productcategory_ws_s"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_productcategory_h", "file_key_name": "models.productcategory_ws_s", "attached_node": "model.ddvug_willibald_samen.productcategory_ws_s", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('productcategory_h')", "field": "hk_productcategory_h", "column_name": "hk_productcategory_h", "model": "{{ get_where_subquery(ref('productcategory_ws_s')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_ws_s_hk_productcategory_h__ldts.ce12857ce0": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_productcategory_ws_s_hk_productcategory_h__ldts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_e61e6bd2d90186813dbb000d09b6a880.sql", "original_file_path": "models/dwh_04_rv/productcategory/test_productcategory_ws_s.yaml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_ws_s_hk_productcategory_h__ldts.ce12857ce0", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "productcategory", "dbt_utils_unique_combination_of_columns_productcategory_ws_s_hk_productcategory_h__ldts"], "alias": "dbt_utils_unique_combination_o_e61e6bd2d90186813dbb000d09b6a880", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e61e6bd2d90186813dbb000d09b6a880", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e61e6bd2d90186813dbb000d09b6a880"}, "created_at": 1743626380.8665879, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e61e6bd2d90186813dbb000d09b6a880\") }}", "language": "sql", "refs": [{"name": "productcategory_ws_s", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.productcategory_ws_s"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.productcategory_ws_s", "attached_node": "model.ddvug_willibald_samen.productcategory_ws_s", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_productcategory_h", "ldts"], "model": "{{ get_where_subquery(ref('productcategory_ws_s')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.not_null_productcategory_hierarchy_l_hk_productcategory_h.26323569e0": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "not_null_productcategory_hierarchy_l_hk_productcategory_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "not_null_productcategory_hierarchy_l_hk_productcategory_h.sql", "original_file_path": "models/dwh_04_rv/productcategory/test_productcategory_hierarchy_l.yaml", "unique_id": "test.ddvug_willibald_samen.not_null_productcategory_hierarchy_l_hk_productcategory_h.26323569e0", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "productcategory", "not_null_productcategory_hierarchy_l_hk_productcategory_h"], "alias": "not_null_productcategory_hierarchy_l_hk_productcategory_h", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743626380.868385, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "productcategory_hierarchy_l", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ddvug_willibald_samen.productcategory_hierarchy_l"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_productcategory_h", "file_key_name": "models.productcategory_hierarchy_l", "attached_node": "model.ddvug_willibald_samen.productcategory_hierarchy_l", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hk_productcategory_h", "model": "{{ get_where_subquery(ref('productcategory_hierarchy_l')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.relationships_productcategory_hierarchy_l_hk_productcategory_h__hk_productcategory_h__ref_productcategory_h_.f403cd2cc0": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "relationships_productcategory_hierarchy_l_hk_productcategory_h__hk_productcategory_h__ref_productcategory_h_", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "relationships_productcategory__002415db5fbb2f3e7b3942b3bdb68b1e.sql", "original_file_path": "models/dwh_04_rv/productcategory/test_productcategory_hierarchy_l.yaml", "unique_id": "test.ddvug_willibald_samen.relationships_productcategory_hierarchy_l_hk_productcategory_h__hk_productcategory_h__ref_productcategory_h_.f403cd2cc0", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "productcategory", "relationships_productcategory_hierarchy_l_hk_productcategory_h__hk_productcategory_h__ref_productcategory_h_"], "alias": "relationships_productcategory__002415db5fbb2f3e7b3942b3bdb68b1e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_productcategory__002415db5fbb2f3e7b3942b3bdb68b1e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_productcategory__002415db5fbb2f3e7b3942b3bdb68b1e"}, "created_at": 1743626380.868947, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_productcategory__002415db5fbb2f3e7b3942b3bdb68b1e\") }}", "language": "sql", "refs": [{"name": "productcategory_h", "package": null, "version": null}, {"name": "productcategory_hierarchy_l", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.productcategory_h", "model.ddvug_willibald_samen.productcategory_hierarchy_l"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_productcategory_h", "file_key_name": "models.productcategory_hierarchy_l", "attached_node": "model.ddvug_willibald_samen.productcategory_hierarchy_l", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('productcategory_h')", "field": "hk_productcategory_h", "column_name": "hk_productcategory_h", "model": "{{ get_where_subquery(ref('productcategory_hierarchy_l')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_hierarchy_l_hk_productcategory_parent_h__hk_productcategory_h.c3c6bb03a9": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_productcategory_hierarchy_l_hk_productcategory_parent_h__hk_productcategory_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_c7544cf8cfe2be96aba4f34a5268abf9.sql", "original_file_path": "models/dwh_04_rv/productcategory/test_productcategory_hierarchy_l.yaml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_hierarchy_l_hk_productcategory_parent_h__hk_productcategory_h.c3c6bb03a9", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "productcategory", "dbt_utils_unique_combination_of_columns_productcategory_hierarchy_l_hk_productcategory_parent_h__hk_productcategory_h"], "alias": "dbt_utils_unique_combination_o_c7544cf8cfe2be96aba4f34a5268abf9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c7544cf8cfe2be96aba4f34a5268abf9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_c7544cf8cfe2be96aba4f34a5268abf9"}, "created_at": 1743626380.8705359, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c7544cf8cfe2be96aba4f34a5268abf9\") }}", "language": "sql", "refs": [{"name": "productcategory_hierarchy_l", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.productcategory_hierarchy_l"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.productcategory_hierarchy_l", "attached_node": "model.ddvug_willibald_samen.productcategory_hierarchy_l", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_productcategory_parent_h", "hk_productcategory_h"], "model": "{{ get_where_subquery(ref('productcategory_hierarchy_l')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.not_null_product_productcategory_l_hk_product_h.214089443e": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "not_null_product_productcategory_l_hk_product_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "not_null_product_productcategory_l_hk_product_h.sql", "original_file_path": "models/dwh_04_rv/product/test_product_productcategory_l.yaml", "unique_id": "test.ddvug_willibald_samen.not_null_product_productcategory_l_hk_product_h.214089443e", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "product", "not_null_product_productcategory_l_hk_product_h"], "alias": "not_null_product_productcategory_l_hk_product_h", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743626380.8721962, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "product_productcategory_l", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ddvug_willibald_samen.product_productcategory_l"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_product_h", "file_key_name": "models.product_productcategory_l", "attached_node": "model.ddvug_willibald_samen.product_productcategory_l", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hk_product_h", "model": "{{ get_where_subquery(ref('product_productcategory_l')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.relationships_product_productcategory_l_hk_product_h__hk_product_h__ref_product_h_.926290dd2a": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "relationships_product_productcategory_l_hk_product_h__hk_product_h__ref_product_h_", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "relationships_product_productc_fc15d38ecc80c83f180c9fc187c2c958.sql", "original_file_path": "models/dwh_04_rv/product/test_product_productcategory_l.yaml", "unique_id": "test.ddvug_willibald_samen.relationships_product_productcategory_l_hk_product_h__hk_product_h__ref_product_h_.926290dd2a", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "product", "relationships_product_productcategory_l_hk_product_h__hk_product_h__ref_product_h_"], "alias": "relationships_product_productc_fc15d38ecc80c83f180c9fc187c2c958", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_product_productc_fc15d38ecc80c83f180c9fc187c2c958", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_product_productc_fc15d38ecc80c83f180c9fc187c2c958"}, "created_at": 1743626380.8727639, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_product_productc_fc15d38ecc80c83f180c9fc187c2c958\") }}", "language": "sql", "refs": [{"name": "product_h", "package": null, "version": null}, {"name": "product_productcategory_l", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.product_h", "model.ddvug_willibald_samen.product_productcategory_l"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_product_h", "file_key_name": "models.product_productcategory_l", "attached_node": "model.ddvug_willibald_samen.product_productcategory_l", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('product_h')", "field": "hk_product_h", "column_name": "hk_product_h", "model": "{{ get_where_subquery(ref('product_productcategory_l')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_product_productcategory_l_hk_productcategory_h__hk_product_h.f467bff89e": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_product_productcategory_l_hk_productcategory_h__hk_product_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_8a78c13ddae35f4228fd4def3baee20c.sql", "original_file_path": "models/dwh_04_rv/product/test_product_productcategory_l.yaml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_product_productcategory_l_hk_productcategory_h__hk_product_h.f467bff89e", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "product", "dbt_utils_unique_combination_of_columns_product_productcategory_l_hk_productcategory_h__hk_product_h"], "alias": "dbt_utils_unique_combination_o_8a78c13ddae35f4228fd4def3baee20c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8a78c13ddae35f4228fd4def3baee20c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_8a78c13ddae35f4228fd4def3baee20c"}, "created_at": 1743626380.87434, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8a78c13ddae35f4228fd4def3baee20c\") }}", "language": "sql", "refs": [{"name": "product_productcategory_l", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.product_productcategory_l"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.product_productcategory_l", "attached_node": "model.ddvug_willibald_samen.product_productcategory_l", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_productcategory_h", "hk_product_h"], "model": "{{ get_where_subquery(ref('product_productcategory_l')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.not_null_product_ws_s_hk_product_h.4360d19cf9": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "not_null_product_ws_s_hk_product_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "not_null_product_ws_s_hk_product_h.sql", "original_file_path": "models/dwh_04_rv/product/test_product_ws_s.yaml", "unique_id": "test.ddvug_willibald_samen.not_null_product_ws_s_hk_product_h.4360d19cf9", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "product", "not_null_product_ws_s_hk_product_h"], "alias": "not_null_product_ws_s_hk_product_h", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743626380.876414, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "product_ws_s", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ddvug_willibald_samen.product_ws_s"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_product_h", "file_key_name": "models.product_ws_s", "attached_node": "model.ddvug_willibald_samen.product_ws_s", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hk_product_h", "model": "{{ get_where_subquery(ref('product_ws_s')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.relationships_product_ws_s_hk_product_h__hk_product_h__ref_product_h_.b4eadf9dea": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "relationships_product_ws_s_hk_product_h__hk_product_h__ref_product_h_", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "relationships_product_ws_s_6fa1a5ef71211059c017285c94ca2a97.sql", "original_file_path": "models/dwh_04_rv/product/test_product_ws_s.yaml", "unique_id": "test.ddvug_willibald_samen.relationships_product_ws_s_hk_product_h__hk_product_h__ref_product_h_.b4eadf9dea", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "product", "relationships_product_ws_s_hk_product_h__hk_product_h__ref_product_h_"], "alias": "relationships_product_ws_s_6fa1a5ef71211059c017285c94ca2a97", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_product_ws_s_6fa1a5ef71211059c017285c94ca2a97", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_product_ws_s_6fa1a5ef71211059c017285c94ca2a97"}, "created_at": 1743626380.876987, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_product_ws_s_6fa1a5ef71211059c017285c94ca2a97\") }}", "language": "sql", "refs": [{"name": "product_h", "package": null, "version": null}, {"name": "product_ws_s", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.product_h", "model.ddvug_willibald_samen.product_ws_s"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_product_h", "file_key_name": "models.product_ws_s", "attached_node": "model.ddvug_willibald_samen.product_ws_s", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('product_h')", "field": "hk_product_h", "column_name": "hk_product_h", "model": "{{ get_where_subquery(ref('product_ws_s')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_product_ws_s_hk_product_h__ldts.611020bb93": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_product_ws_s_hk_product_h__ldts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_40575ae4f28d090ba65271d0d0ca8146.sql", "original_file_path": "models/dwh_04_rv/product/test_product_ws_s.yaml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_product_ws_s_hk_product_h__ldts.611020bb93", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "product", "dbt_utils_unique_combination_of_columns_product_ws_s_hk_product_h__ldts"], "alias": "dbt_utils_unique_combination_o_40575ae4f28d090ba65271d0d0ca8146", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_40575ae4f28d090ba65271d0d0ca8146", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_40575ae4f28d090ba65271d0d0ca8146"}, "created_at": 1743626380.8785741, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_40575ae4f28d090ba65271d0d0ca8146\") }}", "language": "sql", "refs": [{"name": "product_ws_s", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.product_ws_s"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.product_ws_s", "attached_node": "model.ddvug_willibald_samen.product_ws_s", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_product_h", "ldts"], "model": "{{ get_where_subquery(ref('product_ws_s')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.not_null_product_h_hk_product_h.cff0a43270": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "not_null_product_h_hk_product_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "not_null_product_h_hk_product_h.sql", "original_file_path": "models/dwh_04_rv/product/test_product_h.yaml", "unique_id": "test.ddvug_willibald_samen.not_null_product_h_hk_product_h.cff0a43270", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "product", "not_null_product_h_hk_product_h"], "alias": "not_null_product_h_hk_product_h", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743626380.8800828, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "product_h", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ddvug_willibald_samen.product_h"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_product_h", "file_key_name": "models.product_h", "attached_node": "model.ddvug_willibald_samen.product_h", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hk_product_h", "model": "{{ get_where_subquery(ref('product_h')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_product_h_hk_product_h.9352b9fae5": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_product_h_hk_product_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_of_columns_product_h_hk_product_h.sql", "original_file_path": "models/dwh_04_rv/product/test_product_h.yaml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_product_h_hk_product_h.9352b9fae5", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "product", "dbt_utils_unique_combination_of_columns_product_h_hk_product_h"], "alias": "dbt_utils_unique_combination_of_columns_product_h_hk_product_h", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743626380.8807092, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "product_h", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.product_h"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.product_h", "attached_node": "model.ddvug_willibald_samen.product_h", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_product_h"], "model": "{{ get_where_subquery(ref('product_h')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.not_null_deliveryadress_h_hk_deliveryadress_h.d769cb37cd": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "not_null_deliveryadress_h_hk_deliveryadress_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "not_null_deliveryadress_h_hk_deliveryadress_h.sql", "original_file_path": "models/dwh_04_rv/deliveryadress/test_deliveryadress_h.yaml", "unique_id": "test.ddvug_willibald_samen.not_null_deliveryadress_h_hk_deliveryadress_h.d769cb37cd", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "deliveryadress", "not_null_deliveryadress_h_hk_deliveryadress_h"], "alias": "not_null_deliveryadress_h_hk_deliveryadress_h", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743626380.882441, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "deliveryadress_h", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ddvug_willibald_samen.deliveryadress_h"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_deliveryadress_h", "file_key_name": "models.deliveryadress_h", "attached_node": "model.ddvug_willibald_samen.deliveryadress_h", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hk_deliveryadress_h", "model": "{{ get_where_subquery(ref('deliveryadress_h')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_deliveryadress_h_hk_deliveryadress_h.e9471c557c": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_deliveryadress_h_hk_deliveryadress_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_037ee6c09eefc7d76a3ed48c835c8b03.sql", "original_file_path": "models/dwh_04_rv/deliveryadress/test_deliveryadress_h.yaml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_deliveryadress_h_hk_deliveryadress_h.e9471c557c", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "deliveryadress", "dbt_utils_unique_combination_of_columns_deliveryadress_h_hk_deliveryadress_h"], "alias": "dbt_utils_unique_combination_o_037ee6c09eefc7d76a3ed48c835c8b03", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_037ee6c09eefc7d76a3ed48c835c8b03", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_037ee6c09eefc7d76a3ed48c835c8b03"}, "created_at": 1743626380.883065, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_037ee6c09eefc7d76a3ed48c835c8b03\") }}", "language": "sql", "refs": [{"name": "deliveryadress_h", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.deliveryadress_h"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.deliveryadress_h", "attached_node": "model.ddvug_willibald_samen.deliveryadress_h", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_deliveryadress_h"], "model": "{{ get_where_subquery(ref('deliveryadress_h')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.not_null_deliveryadress_customer_l_hk_customer_h.97624d0710": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "not_null_deliveryadress_customer_l_hk_customer_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "not_null_deliveryadress_customer_l_hk_customer_h.sql", "original_file_path": "models/dwh_04_rv/deliveryadress/test_deliveryadress_customer_l.yaml", "unique_id": "test.ddvug_willibald_samen.not_null_deliveryadress_customer_l_hk_customer_h.97624d0710", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "deliveryadress", "not_null_deliveryadress_customer_l_hk_customer_h"], "alias": "not_null_deliveryadress_customer_l_hk_customer_h", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743626380.884672, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "deliveryadress_customer_l", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ddvug_willibald_samen.deliveryadress_customer_l"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_customer_h", "file_key_name": "models.deliveryadress_customer_l", "attached_node": "model.ddvug_willibald_samen.deliveryadress_customer_l", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hk_customer_h", "model": "{{ get_where_subquery(ref('deliveryadress_customer_l')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.relationships_deliveryadress_customer_l_hk_customer_h__hk_customer_h__ref_customer_h_.b757e1bf63": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "relationships_deliveryadress_customer_l_hk_customer_h__hk_customer_h__ref_customer_h_", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "relationships_deliveryadress_c_d77d3ad681e9eaa5eab38b02a8a21869.sql", "original_file_path": "models/dwh_04_rv/deliveryadress/test_deliveryadress_customer_l.yaml", "unique_id": "test.ddvug_willibald_samen.relationships_deliveryadress_customer_l_hk_customer_h__hk_customer_h__ref_customer_h_.b757e1bf63", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "deliveryadress", "relationships_deliveryadress_customer_l_hk_customer_h__hk_customer_h__ref_customer_h_"], "alias": "relationships_deliveryadress_c_d77d3ad681e9eaa5eab38b02a8a21869", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_deliveryadress_c_d77d3ad681e9eaa5eab38b02a8a21869", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_deliveryadress_c_d77d3ad681e9eaa5eab38b02a8a21869"}, "created_at": 1743626380.885293, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_deliveryadress_c_d77d3ad681e9eaa5eab38b02a8a21869\") }}", "language": "sql", "refs": [{"name": "customer_h", "package": null, "version": null}, {"name": "deliveryadress_customer_l", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.customer_h", "model.ddvug_willibald_samen.deliveryadress_customer_l"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_customer_h", "file_key_name": "models.deliveryadress_customer_l", "attached_node": "model.ddvug_willibald_samen.deliveryadress_customer_l", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('customer_h')", "field": "hk_customer_h", "column_name": "hk_customer_h", "model": "{{ get_where_subquery(ref('deliveryadress_customer_l')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_deliveryadress_customer_l_hk_deliveryadress_h__hk_customer_h.d6a3ab7e19": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_deliveryadress_customer_l_hk_deliveryadress_h__hk_customer_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_26b9ff51b83fdf5c39d03a7a0b9e9b51.sql", "original_file_path": "models/dwh_04_rv/deliveryadress/test_deliveryadress_customer_l.yaml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_deliveryadress_customer_l_hk_deliveryadress_h__hk_customer_h.d6a3ab7e19", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "deliveryadress", "dbt_utils_unique_combination_of_columns_deliveryadress_customer_l_hk_deliveryadress_h__hk_customer_h"], "alias": "dbt_utils_unique_combination_o_26b9ff51b83fdf5c39d03a7a0b9e9b51", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_26b9ff51b83fdf5c39d03a7a0b9e9b51", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_26b9ff51b83fdf5c39d03a7a0b9e9b51"}, "created_at": 1743626380.88682, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_26b9ff51b83fdf5c39d03a7a0b9e9b51\") }}", "language": "sql", "refs": [{"name": "deliveryadress_customer_l", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.deliveryadress_customer_l"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.deliveryadress_customer_l", "attached_node": "model.ddvug_willibald_samen.deliveryadress_customer_l", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_deliveryadress_h", "hk_customer_h"], "model": "{{ get_where_subquery(ref('deliveryadress_customer_l')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.not_null_deliveryadress_ws_s_hk_deliveryadress_h.2950dd7fef": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "not_null_deliveryadress_ws_s_hk_deliveryadress_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "not_null_deliveryadress_ws_s_hk_deliveryadress_h.sql", "original_file_path": "models/dwh_04_rv/deliveryadress/test_deliveryadress_ws_s.yaml", "unique_id": "test.ddvug_willibald_samen.not_null_deliveryadress_ws_s_hk_deliveryadress_h.2950dd7fef", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "deliveryadress", "not_null_deliveryadress_ws_s_hk_deliveryadress_h"], "alias": "not_null_deliveryadress_ws_s_hk_deliveryadress_h", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743626380.888479, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "deliveryadress_ws_s", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ddvug_willibald_samen.deliveryadress_ws_s"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_deliveryadress_h", "file_key_name": "models.deliveryadress_ws_s", "attached_node": "model.ddvug_willibald_samen.deliveryadress_ws_s", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hk_deliveryadress_h", "model": "{{ get_where_subquery(ref('deliveryadress_ws_s')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.relationships_deliveryadress_ws_s_hk_deliveryadress_h__hk_deliveryadress_h__ref_deliveryadress_h_.d605b4d012": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "relationships_deliveryadress_ws_s_hk_deliveryadress_h__hk_deliveryadress_h__ref_deliveryadress_h_", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "relationships_deliveryadress_w_f772516d43a21ed54034a58aa2eb5bb3.sql", "original_file_path": "models/dwh_04_rv/deliveryadress/test_deliveryadress_ws_s.yaml", "unique_id": "test.ddvug_willibald_samen.relationships_deliveryadress_ws_s_hk_deliveryadress_h__hk_deliveryadress_h__ref_deliveryadress_h_.d605b4d012", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "deliveryadress", "relationships_deliveryadress_ws_s_hk_deliveryadress_h__hk_deliveryadress_h__ref_deliveryadress_h_"], "alias": "relationships_deliveryadress_w_f772516d43a21ed54034a58aa2eb5bb3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_deliveryadress_w_f772516d43a21ed54034a58aa2eb5bb3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_deliveryadress_w_f772516d43a21ed54034a58aa2eb5bb3"}, "created_at": 1743626380.889048, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_deliveryadress_w_f772516d43a21ed54034a58aa2eb5bb3\") }}", "language": "sql", "refs": [{"name": "deliveryadress_h", "package": null, "version": null}, {"name": "deliveryadress_ws_s", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.deliveryadress_h", "model.ddvug_willibald_samen.deliveryadress_ws_s"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_deliveryadress_h", "file_key_name": "models.deliveryadress_ws_s", "attached_node": "model.ddvug_willibald_samen.deliveryadress_ws_s", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('deliveryadress_h')", "field": "hk_deliveryadress_h", "column_name": "hk_deliveryadress_h", "model": "{{ get_where_subquery(ref('deliveryadress_ws_s')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_deliveryadress_ws_s_hk_deliveryadress_h__ldts.12841db368": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_deliveryadress_ws_s_hk_deliveryadress_h__ldts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_698366ded77dfb13f424d16ed6fbf8e3.sql", "original_file_path": "models/dwh_04_rv/deliveryadress/test_deliveryadress_ws_s.yaml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_deliveryadress_ws_s_hk_deliveryadress_h__ldts.12841db368", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "deliveryadress", "dbt_utils_unique_combination_of_columns_deliveryadress_ws_s_hk_deliveryadress_h__ldts"], "alias": "dbt_utils_unique_combination_o_698366ded77dfb13f424d16ed6fbf8e3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_698366ded77dfb13f424d16ed6fbf8e3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_698366ded77dfb13f424d16ed6fbf8e3"}, "created_at": 1743626380.8906581, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_698366ded77dfb13f424d16ed6fbf8e3\") }}", "language": "sql", "refs": [{"name": "deliveryadress_ws_s", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.deliveryadress_ws_s"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.deliveryadress_ws_s", "attached_node": "model.ddvug_willibald_samen.deliveryadress_ws_s", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_deliveryadress_h", "ldts"], "model": "{{ get_where_subquery(ref('deliveryadress_ws_s')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.not_null_category_deliveryadherence_misc_rs_category_deliveryadherence_nk.c0be686a9b": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "not_null_category_deliveryadherence_misc_rs_category_deliveryadherence_nk", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "not_null_category_deliveryadhe_c108440d605d66f6186076132f70239b.sql", "original_file_path": "models/dwh_04_rv/reference/category_deliveryadherence/test_category_deliveryadherence_misc_rs.yaml", "unique_id": "test.ddvug_willibald_samen.not_null_category_deliveryadherence_misc_rs_category_deliveryadherence_nk.c0be686a9b", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "reference", "category_deliveryadherence", "not_null_category_deliveryadherence_misc_rs_category_deliveryadherence_nk"], "alias": "not_null_category_deliveryadhe_c108440d605d66f6186076132f70239b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_category_deliveryadhe_c108440d605d66f6186076132f70239b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_category_deliveryadhe_c108440d605d66f6186076132f70239b"}, "created_at": 1743626380.892446, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_category_deliveryadhe_c108440d605d66f6186076132f70239b\") }}", "language": "sql", "refs": [{"name": "category_deliveryadherence_misc_rs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ddvug_willibald_samen.category_deliveryadherence_misc_rs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "category_deliveryadherence_nk", "file_key_name": "models.category_deliveryadherence_misc_rs", "attached_node": "model.ddvug_willibald_samen.category_deliveryadherence_misc_rs", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "category_deliveryadherence_nk", "model": "{{ get_where_subquery(ref('category_deliveryadherence_misc_rs')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.relationships_category_deliveryadherence_misc_rs_category_deliveryadherence_nk__category_deliveryadherence_nk__ref_category_deliveryadherence_r_.4baedd520e": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "relationships_category_deliveryadherence_misc_rs_category_deliveryadherence_nk__category_deliveryadherence_nk__ref_category_deliveryadherence_r_", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "relationships_category_deliver_9ae3085c777b6f35c4fc1df4a45fd38d.sql", "original_file_path": "models/dwh_04_rv/reference/category_deliveryadherence/test_category_deliveryadherence_misc_rs.yaml", "unique_id": "test.ddvug_willibald_samen.relationships_category_deliveryadherence_misc_rs_category_deliveryadherence_nk__category_deliveryadherence_nk__ref_category_deliveryadherence_r_.4baedd520e", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "reference", "category_deliveryadherence", "relationships_category_deliveryadherence_misc_rs_category_deliveryadherence_nk__category_deliveryadherence_nk__ref_category_deliveryadherence_r_"], "alias": "relationships_category_deliver_9ae3085c777b6f35c4fc1df4a45fd38d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_category_deliver_9ae3085c777b6f35c4fc1df4a45fd38d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_category_deliver_9ae3085c777b6f35c4fc1df4a45fd38d"}, "created_at": 1743626380.89302, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_category_deliver_9ae3085c777b6f35c4fc1df4a45fd38d\") }}", "language": "sql", "refs": [{"name": "category_deliveryadherence_r", "package": null, "version": null}, {"name": "category_deliveryadherence_misc_rs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.category_deliveryadherence_r", "model.ddvug_willibald_samen.category_deliveryadherence_misc_rs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "category_deliveryadherence_nk", "file_key_name": "models.category_deliveryadherence_misc_rs", "attached_node": "model.ddvug_willibald_samen.category_deliveryadherence_misc_rs", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('category_deliveryadherence_r')", "field": "category_deliveryadherence_nk", "column_name": "category_deliveryadherence_nk", "model": "{{ get_where_subquery(ref('category_deliveryadherence_misc_rs')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_category_deliveryadherence_misc_rs_category_deliveryadherence_nk__ldts.9886804350": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_category_deliveryadherence_misc_rs_category_deliveryadherence_nk__ldts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_a4913a86bb66f72f191978fb8db80df2.sql", "original_file_path": "models/dwh_04_rv/reference/category_deliveryadherence/test_category_deliveryadherence_misc_rs.yaml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_category_deliveryadherence_misc_rs_category_deliveryadherence_nk__ldts.9886804350", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "reference", "category_deliveryadherence", "dbt_utils_unique_combination_of_columns_category_deliveryadherence_misc_rs_category_deliveryadherence_nk__ldts"], "alias": "dbt_utils_unique_combination_o_a4913a86bb66f72f191978fb8db80df2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a4913a86bb66f72f191978fb8db80df2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_a4913a86bb66f72f191978fb8db80df2"}, "created_at": 1743626380.894604, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a4913a86bb66f72f191978fb8db80df2\") }}", "language": "sql", "refs": [{"name": "category_deliveryadherence_misc_rs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.category_deliveryadherence_misc_rs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.category_deliveryadherence_misc_rs", "attached_node": "model.ddvug_willibald_samen.category_deliveryadherence_misc_rs", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["category_deliveryadherence_nk", "ldts"], "model": "{{ get_where_subquery(ref('category_deliveryadherence_misc_rs')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.not_null_category_deliveryadherence_r_category_deliveryadherence_nk.0d56fad547": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "not_null_category_deliveryadherence_r_category_deliveryadherence_nk", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "not_null_category_deliveryadhe_58b7055a1177e8e8701f2f438760dd94.sql", "original_file_path": "models/dwh_04_rv/reference/category_deliveryadherence/test_category_deliveryadherence_r.yaml", "unique_id": "test.ddvug_willibald_samen.not_null_category_deliveryadherence_r_category_deliveryadherence_nk.0d56fad547", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "reference", "category_deliveryadherence", "not_null_category_deliveryadherence_r_category_deliveryadherence_nk"], "alias": "not_null_category_deliveryadhe_58b7055a1177e8e8701f2f438760dd94", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_category_deliveryadhe_58b7055a1177e8e8701f2f438760dd94", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_category_deliveryadhe_58b7055a1177e8e8701f2f438760dd94"}, "created_at": 1743626380.896172, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_category_deliveryadhe_58b7055a1177e8e8701f2f438760dd94\") }}", "language": "sql", "refs": [{"name": "category_deliveryadherence_r", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ddvug_willibald_samen.category_deliveryadherence_r"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "category_deliveryadherence_nk", "file_key_name": "models.category_deliveryadherence_r", "attached_node": "model.ddvug_willibald_samen.category_deliveryadherence_r", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "category_deliveryadherence_nk", "model": "{{ get_where_subquery(ref('category_deliveryadherence_r')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_category_deliveryadherence_r_category_deliveryadherence_nk.c3423938c7": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_category_deliveryadherence_r_category_deliveryadherence_nk", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_484b91a74029ba8a28759da554a4a290.sql", "original_file_path": "models/dwh_04_rv/reference/category_deliveryadherence/test_category_deliveryadherence_r.yaml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_category_deliveryadherence_r_category_deliveryadherence_nk.c3423938c7", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "reference", "category_deliveryadherence", "dbt_utils_unique_combination_of_columns_category_deliveryadherence_r_category_deliveryadherence_nk"], "alias": "dbt_utils_unique_combination_o_484b91a74029ba8a28759da554a4a290", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_484b91a74029ba8a28759da554a4a290", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_484b91a74029ba8a28759da554a4a290"}, "created_at": 1743626380.896736, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_484b91a74029ba8a28759da554a4a290\") }}", "language": "sql", "refs": [{"name": "category_deliveryadherence_r", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.category_deliveryadherence_r"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.category_deliveryadherence_r", "attached_node": "model.ddvug_willibald_samen.category_deliveryadherence_r", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["category_deliveryadherence_nk"], "model": "{{ get_where_subquery(ref('category_deliveryadherence_r')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.not_null_customer_h_hk_customer_h.bfea236786": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "not_null_customer_h_hk_customer_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "not_null_customer_h_hk_customer_h.sql", "original_file_path": "models/dwh_04_rv/customer/test_customer_h.yaml", "unique_id": "test.ddvug_willibald_samen.not_null_customer_h_hk_customer_h.bfea236786", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "customer", "not_null_customer_h_hk_customer_h"], "alias": "not_null_customer_h_hk_customer_h", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743626380.8984, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "customer_h", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ddvug_willibald_samen.customer_h"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_customer_h", "file_key_name": "models.customer_h", "attached_node": "model.ddvug_willibald_samen.customer_h", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hk_customer_h", "model": "{{ get_where_subquery(ref('customer_h')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_customer_h_hk_customer_h.de39b48d51": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_customer_h_hk_customer_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_580eb70e366c9724a9fcf5188168650b.sql", "original_file_path": "models/dwh_04_rv/customer/test_customer_h.yaml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_customer_h_hk_customer_h.de39b48d51", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "customer", "dbt_utils_unique_combination_of_columns_customer_h_hk_customer_h"], "alias": "dbt_utils_unique_combination_o_580eb70e366c9724a9fcf5188168650b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_580eb70e366c9724a9fcf5188168650b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_580eb70e366c9724a9fcf5188168650b"}, "created_at": 1743626380.898964, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_580eb70e366c9724a9fcf5188168650b\") }}", "language": "sql", "refs": [{"name": "customer_h", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.customer_h"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.customer_h", "attached_node": "model.ddvug_willibald_samen.customer_h", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_customer_h"], "model": "{{ get_where_subquery(ref('customer_h')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.not_null_customer_associationpartner_l_hk_associationpartner_h.18fdca24da": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "not_null_customer_associationpartner_l_hk_associationpartner_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "not_null_customer_associationpartner_l_hk_associationpartner_h.sql", "original_file_path": "models/dwh_04_rv/customer/test_customer_associationpartner_l.yaml", "unique_id": "test.ddvug_willibald_samen.not_null_customer_associationpartner_l_hk_associationpartner_h.18fdca24da", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "customer", "not_null_customer_associationpartner_l_hk_associationpartner_h"], "alias": "not_null_customer_associationpartner_l_hk_associationpartner_h", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743626380.900641, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "customer_associationpartner_l", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ddvug_willibald_samen.customer_associationpartner_l"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_associationpartner_h", "file_key_name": "models.customer_associationpartner_l", "attached_node": "model.ddvug_willibald_samen.customer_associationpartner_l", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hk_associationpartner_h", "model": "{{ get_where_subquery(ref('customer_associationpartner_l')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.relationships_customer_associationpartner_l_hk_associationpartner_h__hk_associationpartner_h__ref_associationpartner_h_.7d0b4e5df6": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "relationships_customer_associationpartner_l_hk_associationpartner_h__hk_associationpartner_h__ref_associationpartner_h_", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "relationships_customer_associa_b4fec4dad855faa552b246ad5be9f84e.sql", "original_file_path": "models/dwh_04_rv/customer/test_customer_associationpartner_l.yaml", "unique_id": "test.ddvug_willibald_samen.relationships_customer_associationpartner_l_hk_associationpartner_h__hk_associationpartner_h__ref_associationpartner_h_.7d0b4e5df6", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "customer", "relationships_customer_associationpartner_l_hk_associationpartner_h__hk_associationpartner_h__ref_associationpartner_h_"], "alias": "relationships_customer_associa_b4fec4dad855faa552b246ad5be9f84e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_customer_associa_b4fec4dad855faa552b246ad5be9f84e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_customer_associa_b4fec4dad855faa552b246ad5be9f84e"}, "created_at": 1743626380.901209, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_customer_associa_b4fec4dad855faa552b246ad5be9f84e\") }}", "language": "sql", "refs": [{"name": "associationpartner_h", "package": null, "version": null}, {"name": "customer_associationpartner_l", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.associationpartner_h", "model.ddvug_willibald_samen.customer_associationpartner_l"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_associationpartner_h", "file_key_name": "models.customer_associationpartner_l", "attached_node": "model.ddvug_willibald_samen.customer_associationpartner_l", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('associationpartner_h')", "field": "hk_associationpartner_h", "column_name": "hk_associationpartner_h", "model": "{{ get_where_subquery(ref('customer_associationpartner_l')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_customer_associationpartner_l_hk_customer_h__hk_associationpartner_h.b6732ac5bd": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_customer_associationpartner_l_hk_customer_h__hk_associationpartner_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_cf341179ad0823be05bdab3e7eb05d47.sql", "original_file_path": "models/dwh_04_rv/customer/test_customer_associationpartner_l.yaml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_customer_associationpartner_l_hk_customer_h__hk_associationpartner_h.b6732ac5bd", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "customer", "dbt_utils_unique_combination_of_columns_customer_associationpartner_l_hk_customer_h__hk_associationpartner_h"], "alias": "dbt_utils_unique_combination_o_cf341179ad0823be05bdab3e7eb05d47", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_cf341179ad0823be05bdab3e7eb05d47", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_cf341179ad0823be05bdab3e7eb05d47"}, "created_at": 1743626380.9027479, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_cf341179ad0823be05bdab3e7eb05d47\") }}", "language": "sql", "refs": [{"name": "customer_associationpartner_l", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.customer_associationpartner_l"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.customer_associationpartner_l", "attached_node": "model.ddvug_willibald_samen.customer_associationpartner_l", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_customer_h", "hk_associationpartner_h"], "model": "{{ get_where_subquery(ref('customer_associationpartner_l')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.not_null_customer_ws_s_hk_customer_h.da7e77833a": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "not_null_customer_ws_s_hk_customer_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "not_null_customer_ws_s_hk_customer_h.sql", "original_file_path": "models/dwh_04_rv/customer/test_customer_ws_s.yaml", "unique_id": "test.ddvug_willibald_samen.not_null_customer_ws_s_hk_customer_h.da7e77833a", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "customer", "not_null_customer_ws_s_hk_customer_h"], "alias": "not_null_customer_ws_s_hk_customer_h", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743626380.9045792, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "customer_ws_s", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ddvug_willibald_samen.customer_ws_s"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_customer_h", "file_key_name": "models.customer_ws_s", "attached_node": "model.ddvug_willibald_samen.customer_ws_s", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hk_customer_h", "model": "{{ get_where_subquery(ref('customer_ws_s')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.relationships_customer_ws_s_hk_customer_h__hk_customer_h__ref_customer_h_.69e768d7f3": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "relationships_customer_ws_s_hk_customer_h__hk_customer_h__ref_customer_h_", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "relationships_customer_ws_s_76e23ec76e76a4e16376f050d52f81e8.sql", "original_file_path": "models/dwh_04_rv/customer/test_customer_ws_s.yaml", "unique_id": "test.ddvug_willibald_samen.relationships_customer_ws_s_hk_customer_h__hk_customer_h__ref_customer_h_.69e768d7f3", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "customer", "relationships_customer_ws_s_hk_customer_h__hk_customer_h__ref_customer_h_"], "alias": "relationships_customer_ws_s_76e23ec76e76a4e16376f050d52f81e8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_customer_ws_s_76e23ec76e76a4e16376f050d52f81e8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_customer_ws_s_76e23ec76e76a4e16376f050d52f81e8"}, "created_at": 1743626380.9051478, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_customer_ws_s_76e23ec76e76a4e16376f050d52f81e8\") }}", "language": "sql", "refs": [{"name": "customer_h", "package": null, "version": null}, {"name": "customer_ws_s", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.customer_h", "model.ddvug_willibald_samen.customer_ws_s"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_customer_h", "file_key_name": "models.customer_ws_s", "attached_node": "model.ddvug_willibald_samen.customer_ws_s", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('customer_h')", "field": "hk_customer_h", "column_name": "hk_customer_h", "model": "{{ get_where_subquery(ref('customer_ws_s')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_customer_ws_s_hk_customer_h__ldts.6b4339c301": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_customer_ws_s_hk_customer_h__ldts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_672f93460dda1f7de069adf16877edf2.sql", "original_file_path": "models/dwh_04_rv/customer/test_customer_ws_s.yaml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_customer_ws_s_hk_customer_h__ldts.6b4339c301", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "customer", "dbt_utils_unique_combination_of_columns_customer_ws_s_hk_customer_h__ldts"], "alias": "dbt_utils_unique_combination_o_672f93460dda1f7de069adf16877edf2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_672f93460dda1f7de069adf16877edf2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_672f93460dda1f7de069adf16877edf2"}, "created_at": 1743626380.906731, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_672f93460dda1f7de069adf16877edf2\") }}", "language": "sql", "refs": [{"name": "customer_ws_s", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.customer_ws_s"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.customer_ws_s", "attached_node": "model.ddvug_willibald_samen.customer_ws_s", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_customer_h", "ldts"], "model": "{{ get_where_subquery(ref('customer_ws_s')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.not_null_associationpartner_h_hk_associationpartner_h.a5b0b42c47": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "not_null_associationpartner_h_hk_associationpartner_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "not_null_associationpartner_h_hk_associationpartner_h.sql", "original_file_path": "models/dwh_04_rv/associationpartner/test_associationpartner_h.yaml", "unique_id": "test.ddvug_willibald_samen.not_null_associationpartner_h_hk_associationpartner_h.a5b0b42c47", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "associationpartner", "not_null_associationpartner_h_hk_associationpartner_h"], "alias": "not_null_associationpartner_h_hk_associationpartner_h", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743626380.908383, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "associationpartner_h", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ddvug_willibald_samen.associationpartner_h"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_associationpartner_h", "file_key_name": "models.associationpartner_h", "attached_node": "model.ddvug_willibald_samen.associationpartner_h", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hk_associationpartner_h", "model": "{{ get_where_subquery(ref('associationpartner_h')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_associationpartner_h_hk_associationpartner_h.4b515e4e9a": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_associationpartner_h_hk_associationpartner_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_8c3e542312d599ee38872f12314b4311.sql", "original_file_path": "models/dwh_04_rv/associationpartner/test_associationpartner_h.yaml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_associationpartner_h_hk_associationpartner_h.4b515e4e9a", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "associationpartner", "dbt_utils_unique_combination_of_columns_associationpartner_h_hk_associationpartner_h"], "alias": "dbt_utils_unique_combination_o_8c3e542312d599ee38872f12314b4311", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8c3e542312d599ee38872f12314b4311", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_8c3e542312d599ee38872f12314b4311"}, "created_at": 1743626380.9089391, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8c3e542312d599ee38872f12314b4311\") }}", "language": "sql", "refs": [{"name": "associationpartner_h", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.associationpartner_h"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.associationpartner_h", "attached_node": "model.ddvug_willibald_samen.associationpartner_h", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_associationpartner_h"], "model": "{{ get_where_subquery(ref('associationpartner_h')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.not_null_associationpartner_customer_l_hk_associationpartner_h.d195acb39d": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "not_null_associationpartner_customer_l_hk_associationpartner_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "not_null_associationpartner_customer_l_hk_associationpartner_h.sql", "original_file_path": "models/dwh_04_rv/associationpartner/test_associationpartner_customer_l.yaml", "unique_id": "test.ddvug_willibald_samen.not_null_associationpartner_customer_l_hk_associationpartner_h.d195acb39d", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "associationpartner", "not_null_associationpartner_customer_l_hk_associationpartner_h"], "alias": "not_null_associationpartner_customer_l_hk_associationpartner_h", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743626380.910609, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "associationpartner_customer_l", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ddvug_willibald_samen.associationpartner_customer_l"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_associationpartner_h", "file_key_name": "models.associationpartner_customer_l", "attached_node": "model.ddvug_willibald_samen.associationpartner_customer_l", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hk_associationpartner_h", "model": "{{ get_where_subquery(ref('associationpartner_customer_l')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.relationships_associationpartner_customer_l_hk_associationpartner_h__hk_associationpartner_h__ref_associationpartner_h_.2c36bb45e4": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "relationships_associationpartner_customer_l_hk_associationpartner_h__hk_associationpartner_h__ref_associationpartner_h_", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "relationships_associationpartn_a534ac742a34479277b6cca553e40103.sql", "original_file_path": "models/dwh_04_rv/associationpartner/test_associationpartner_customer_l.yaml", "unique_id": "test.ddvug_willibald_samen.relationships_associationpartner_customer_l_hk_associationpartner_h__hk_associationpartner_h__ref_associationpartner_h_.2c36bb45e4", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "associationpartner", "relationships_associationpartner_customer_l_hk_associationpartner_h__hk_associationpartner_h__ref_associationpartner_h_"], "alias": "relationships_associationpartn_a534ac742a34479277b6cca553e40103", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_associationpartn_a534ac742a34479277b6cca553e40103", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_associationpartn_a534ac742a34479277b6cca553e40103"}, "created_at": 1743626380.9111722, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_associationpartn_a534ac742a34479277b6cca553e40103\") }}", "language": "sql", "refs": [{"name": "associationpartner_h", "package": null, "version": null}, {"name": "associationpartner_customer_l", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.associationpartner_h", "model.ddvug_willibald_samen.associationpartner_customer_l"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_associationpartner_h", "file_key_name": "models.associationpartner_customer_l", "attached_node": "model.ddvug_willibald_samen.associationpartner_customer_l", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('associationpartner_h')", "field": "hk_associationpartner_h", "column_name": "hk_associationpartner_h", "model": "{{ get_where_subquery(ref('associationpartner_customer_l')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_associationpartner_customer_l_hk_customer_h__hk_associationpartner_h.567dacd496": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_associationpartner_customer_l_hk_customer_h__hk_associationpartner_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_8147e1ec48ce928aa13f40a8fe9f5546.sql", "original_file_path": "models/dwh_04_rv/associationpartner/test_associationpartner_customer_l.yaml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_associationpartner_customer_l_hk_customer_h__hk_associationpartner_h.567dacd496", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "associationpartner", "dbt_utils_unique_combination_of_columns_associationpartner_customer_l_hk_customer_h__hk_associationpartner_h"], "alias": "dbt_utils_unique_combination_o_8147e1ec48ce928aa13f40a8fe9f5546", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8147e1ec48ce928aa13f40a8fe9f5546", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_8147e1ec48ce928aa13f40a8fe9f5546"}, "created_at": 1743626380.91275, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8147e1ec48ce928aa13f40a8fe9f5546\") }}", "language": "sql", "refs": [{"name": "associationpartner_customer_l", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.associationpartner_customer_l"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.associationpartner_customer_l", "attached_node": "model.ddvug_willibald_samen.associationpartner_customer_l", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_customer_h", "hk_associationpartner_h"], "model": "{{ get_where_subquery(ref('associationpartner_customer_l')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.not_null_associationpartner_ws_s_hk_associationpartner_h.0f2d6f252c": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "not_null_associationpartner_ws_s_hk_associationpartner_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "not_null_associationpartner_ws_s_hk_associationpartner_h.sql", "original_file_path": "models/dwh_04_rv/associationpartner/test_associationpartner_ws_s.yaml", "unique_id": "test.ddvug_willibald_samen.not_null_associationpartner_ws_s_hk_associationpartner_h.0f2d6f252c", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "associationpartner", "not_null_associationpartner_ws_s_hk_associationpartner_h"], "alias": "not_null_associationpartner_ws_s_hk_associationpartner_h", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743626380.914412, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "associationpartner_ws_s", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ddvug_willibald_samen.associationpartner_ws_s"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_associationpartner_h", "file_key_name": "models.associationpartner_ws_s", "attached_node": "model.ddvug_willibald_samen.associationpartner_ws_s", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hk_associationpartner_h", "model": "{{ get_where_subquery(ref('associationpartner_ws_s')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.relationships_associationpartner_ws_s_hk_associationpartner_h__hk_associationpartner_h__ref_associationpartner_h_.4ab56b58f4": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "relationships_associationpartner_ws_s_hk_associationpartner_h__hk_associationpartner_h__ref_associationpartner_h_", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "relationships_associationpartn_e5ab4aa05f43e93f1b33ac7eeea8683f.sql", "original_file_path": "models/dwh_04_rv/associationpartner/test_associationpartner_ws_s.yaml", "unique_id": "test.ddvug_willibald_samen.relationships_associationpartner_ws_s_hk_associationpartner_h__hk_associationpartner_h__ref_associationpartner_h_.4ab56b58f4", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "associationpartner", "relationships_associationpartner_ws_s_hk_associationpartner_h__hk_associationpartner_h__ref_associationpartner_h_"], "alias": "relationships_associationpartn_e5ab4aa05f43e93f1b33ac7eeea8683f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_associationpartn_e5ab4aa05f43e93f1b33ac7eeea8683f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_associationpartn_e5ab4aa05f43e93f1b33ac7eeea8683f"}, "created_at": 1743626380.9149928, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_associationpartn_e5ab4aa05f43e93f1b33ac7eeea8683f\") }}", "language": "sql", "refs": [{"name": "associationpartner_h", "package": null, "version": null}, {"name": "associationpartner_ws_s", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.associationpartner_h", "model.ddvug_willibald_samen.associationpartner_ws_s"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_associationpartner_h", "file_key_name": "models.associationpartner_ws_s", "attached_node": "model.ddvug_willibald_samen.associationpartner_ws_s", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('associationpartner_h')", "field": "hk_associationpartner_h", "column_name": "hk_associationpartner_h", "model": "{{ get_where_subquery(ref('associationpartner_ws_s')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_associationpartner_ws_s_hk_associationpartner_h__ldts.30637490cd": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_associationpartner_ws_s_hk_associationpartner_h__ldts", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_fc2445b010500c16870cebc2d95a8115.sql", "original_file_path": "models/dwh_04_rv/associationpartner/test_associationpartner_ws_s.yaml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_associationpartner_ws_s_hk_associationpartner_h__ldts.30637490cd", "fqn": ["ddvug_willibald_samen", "dwh_04_rv", "associationpartner", "dbt_utils_unique_combination_of_columns_associationpartner_ws_s_hk_associationpartner_h__ldts"], "alias": "dbt_utils_unique_combination_o_fc2445b010500c16870cebc2d95a8115", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_fc2445b010500c16870cebc2d95a8115", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_fc2445b010500c16870cebc2d95a8115"}, "created_at": 1743626380.916589, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_fc2445b010500c16870cebc2d95a8115\") }}", "language": "sql", "refs": [{"name": "associationpartner_ws_s", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.associationpartner_ws_s"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.associationpartner_ws_s", "attached_node": "model.ddvug_willibald_samen.associationpartner_ws_s", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["hk_associationpartner_h", "ldts"], "model": "{{ get_where_subquery(ref('associationpartner_ws_s')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.not_null_productcategory_bs_hk_productcategory_d.b13ac261f8": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "not_null_productcategory_bs_hk_productcategory_d", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "not_null_productcategory_bs_hk_productcategory_d.sql", "original_file_path": "models/dwh_06_bv/bv_test.yaml", "unique_id": "test.ddvug_willibald_samen.not_null_productcategory_bs_hk_productcategory_d.b13ac261f8", "fqn": ["ddvug_willibald_samen", "dwh_06_bv", "not_null_productcategory_bs_hk_productcategory_d"], "alias": "not_null_productcategory_bs_hk_productcategory_d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743626380.9186409, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "productcategory_bs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ddvug_willibald_samen.productcategory_bs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hk_productcategory_d", "file_key_name": "models.productcategory_bs", "attached_node": "model.ddvug_willibald_samen.productcategory_bs", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hk_productcategory_d", "model": "{{ get_where_subquery(ref('productcategory_bs')) }}"}, "namespace": null}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_bs_sdts__hk_productcategory_d.bccb273b4a": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_productcategory_bs_sdts__hk_productcategory_d", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_58d00325069978e9a93e866c32cbbe70.sql", "original_file_path": "models/dwh_06_bv/bv_test.yaml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_bs_sdts__hk_productcategory_d.bccb273b4a", "fqn": ["ddvug_willibald_samen", "dwh_06_bv", "dbt_utils_unique_combination_of_columns_productcategory_bs_sdts__hk_productcategory_d"], "alias": "dbt_utils_unique_combination_o_58d00325069978e9a93e866c32cbbe70", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_58d00325069978e9a93e866c32cbbe70", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_58d00325069978e9a93e866c32cbbe70"}, "created_at": 1743626380.919198, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_58d00325069978e9a93e866c32cbbe70\") }}", "language": "sql", "refs": [{"name": "productcategory_bs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.productcategory_bs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.productcategory_bs", "attached_node": "model.ddvug_willibald_samen.productcategory_bs", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["sdts", "hk_productcategory_d"], "model": "{{ get_where_subquery(ref('productcategory_bs')) }}"}, "namespace": "dbt_utils"}}, "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_sales_bb_reporting_date__hk_order_h__hk_position_h.49f74dd7b6": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_sales_bb_reporting_date__hk_order_h__hk_position_h", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "dbt_utils_unique_combination_o_b997ba6e6743df0337bfe89f2128bfff.sql", "original_file_path": "models/dwh_06_bv/bv_test.yaml", "unique_id": "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_sales_bb_reporting_date__hk_order_h__hk_position_h.49f74dd7b6", "fqn": ["ddvug_willibald_samen", "dwh_06_bv", "dbt_utils_unique_combination_of_columns_sales_bb_reporting_date__hk_order_h__hk_position_h"], "alias": "dbt_utils_unique_combination_o_b997ba6e6743df0337bfe89f2128bfff", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b997ba6e6743df0337bfe89f2128bfff", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b997ba6e6743df0337bfe89f2128bfff"}, "created_at": 1743626380.9206111, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b997ba6e6743df0337bfe89f2128bfff\") }}", "language": "sql", "refs": [{"name": "sales_bb", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ddvug_willibald_samen.sales_bb"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.sales_bb", "attached_node": "model.ddvug_willibald_samen.sales_bb", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["reporting_date", "hk_order_h", "hk_position_h"], "model": "{{ get_where_subquery(ref('sales_bb')) }}"}, "namespace": "dbt_utils"}}, "model.ddvug_willibald_samen.meta_load": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dwh_00_meta", "name": "meta_load", "resource_type": "model", "package_name": "ddvug_willibald_samen", "path": "dwh_00_meta/meta_load.sql", "original_file_path": "models/dwh_00_meta/meta_load.sql", "unique_id": "model.ddvug_willibald_samen.meta_load", "fqn": ["ddvug_willibald_samen", "dwh_00_meta", "meta_load"], "alias": "meta_load", "checksum": {"name": "sha256", "checksum": "f7ef40dcdd08f88d7b011f2f5dcdc3eae45a8168eb4246f4de975769eacbf5be"}, "config": {"enabled": true, "alias": null, "schema": "dwh_00_meta", "database": null, "tags": ["meta"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "ldts", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "transient": false}, "tags": ["meta"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"transient": false, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "schema": "dwh_00_meta", "tags": ["meta"], "materialized": "incremental", "incremental_strategy": "delete+insert", "unique_key": "ldts"}, "created_at": 1743747121.978223, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_00_meta.meta_load", "raw_code": "{{ config(materialized=\"incremental\",incremental_strategy='delete+insert',unique_key='ldts') }}\nwith current_date as\n(\n    SELECT SYSDATE() as ldts\n)\nSELECT 'load_misc_kategorie_termintreue' as table_name, l.file_ldts, coalesce(l.rowcount, 0) as rowcount, ldts\nFROM current_date \nLEFT JOIN (select ldts_source as file_ldts, count(*) as rowcount from {{ ref(\"load_misc_kategorie_termintreue\") }} where is_check_ok group by ldts_source  ) l\n    ON 1=1\nUNION ALL\nSELECT 'load_roadshow_bestellung' as table_name, l.file_ldts, coalesce(l.rowcount, 0) as rowcount, ldts\nFROM current_date \nLEFT JOIN (select ldts_source as file_ldts, count(*) as rowcount from {{ ref(\"load_roadshow_bestellung\") }} where is_check_ok group by ldts_source  ) l\n    ON 1=1\nUNION ALL\nSELECT 'load_webshop_bestellung' as table_name, l.file_ldts, coalesce(l.rowcount, 0) as rowcount, ldts\nFROM current_date \nLEFT JOIN (select ldts_source as file_ldts, count(*) as rowcount from {{ ref(\"load_webshop_bestellung\") }} where is_check_ok group by ldts_source  ) l\n    ON 1=1\nUNION ALL\nSELECT 'load_webshop_kunde' as table_name, l.file_ldts, coalesce(l.rowcount, 0) as rowcount, ldts\nFROM current_date \nLEFT JOIN (select ldts_source as file_ldts, count(*) as rowcount from {{ ref(\"load_webshop_kunde\") }} where is_check_ok group by ldts_source  ) l\n    ON 1=1\nUNION ALL\nSELECT 'load_webshop_lieferadresse' as table_name, l.file_ldts, coalesce(l.rowcount, 0) as rowcount, ldts\nFROM current_date \nLEFT JOIN (select ldts_source as file_ldts, count(*) as rowcount from {{ ref(\"load_webshop_lieferadresse\") }} where is_check_ok group by ldts_source  ) l\n    ON 1=1\nUNION ALL\nSELECT 'load_webshop_lieferdienst' as table_name, l.file_ldts, coalesce(l.rowcount, 0) as rowcount, ldts\nFROM current_date \nLEFT JOIN (select ldts_source as file_ldts, count(*) as rowcount from {{ ref(\"load_webshop_lieferdienst\") }} where is_check_ok group by ldts_source  ) l\n    ON 1=1\nUNION ALL\nSELECT 'load_webshop_lieferung' as table_name, l.file_ldts, coalesce(l.rowcount, 0) as rowcount, ldts\nFROM current_date \nLEFT JOIN (select ldts_source as file_ldts, count(*) as rowcount from {{ ref(\"load_webshop_lieferung\") }} where is_check_ok group by ldts_source  ) l\n    ON 1=1\nUNION ALL\nSELECT 'load_webshop_position' as table_name, l.file_ldts, coalesce(l.rowcount, 0) as rowcount, ldts\nFROM current_date \nLEFT JOIN (select ldts_source as file_ldts, count(*) as rowcount from {{ ref(\"load_webshop_position\") }} where is_check_ok group by ldts_source  ) l\n    ON 1=1\nUNION ALL\nSELECT 'load_webshop_produkt' as table_name, l.file_ldts, coalesce(l.rowcount, 0) as rowcount, ldts\nFROM current_date \nLEFT JOIN (select ldts_source as file_ldts, count(*) as rowcount from {{ ref(\"load_webshop_produkt\") }} where is_check_ok group by ldts_source  ) l\n    ON 1=1\nUNION ALL\nSELECT 'load_webshop_produktkategorie' as table_name, l.file_ldts, coalesce(l.rowcount, 0) as rowcount, ldts\nFROM current_date \nLEFT JOIN (select ldts_source as file_ldts, count(*) as rowcount from {{ ref(\"load_webshop_produktkategorie\") }} where is_check_ok group by ldts_source  ) l\n    ON 1=1\nUNION ALL\nSELECT 'load_webshop_ref_produkt_typ' as table_name, l.file_ldts, coalesce(l.rowcount, 0) as rowcount, ldts\nFROM current_date \nLEFT JOIN (select ldts_source as file_ldts, count(*) as rowcount from {{ ref(\"load_webshop_ref_produkt_typ\") }} where is_check_ok group by ldts_source  ) l\n    ON 1=1\nUNION ALL\nSELECT 'load_webshop_vereinspartner' as table_name, l.file_ldts, coalesce(l.rowcount, 0) as rowcount, ldts\nFROM current_date \nLEFT JOIN (select ldts_source as file_ldts, count(*) as rowcount from {{ ref(\"load_webshop_vereinspartner\") }} where is_check_ok group by ldts_source  ) l\n    ON 1=1\nUNION ALL\nSELECT 'load_webshop_wohnort' as table_name, l.file_ldts, coalesce(l.rowcount, 0) as rowcount, ldts\nFROM current_date \nLEFT JOIN (select ldts_source as file_ldts, count(*) as rowcount from {{ ref(\"load_webshop_wohnort\") }} where is_check_ok group by ldts_source  ) l\n    ON 1=1", "language": "sql", "refs": [{"name": "load_misc_kategorie_termintreue", "package": null, "version": null}, {"name": "load_roadshow_bestellung", "package": null, "version": null}, {"name": "load_webshop_bestellung", "package": null, "version": null}, {"name": "load_webshop_kunde", "package": null, "version": null}, {"name": "load_webshop_lieferadresse", "package": null, "version": null}, {"name": "load_webshop_lieferdienst", "package": null, "version": null}, {"name": "load_webshop_lieferung", "package": null, "version": null}, {"name": "load_webshop_position", "package": null, "version": null}, {"name": "load_webshop_produkt", "package": null, "version": null}, {"name": "load_webshop_produktkategorie", "package": null, "version": null}, {"name": "load_webshop_ref_produkt_typ", "package": null, "version": null}, {"name": "load_webshop_vereinspartner", "package": null, "version": null}, {"name": "load_webshop_wohnort", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ddvug_willibald_samen.load_misc_kategorie_termintreue", "model.ddvug_willibald_samen.load_roadshow_bestellung", "model.ddvug_willibald_samen.load_webshop_bestellung", "model.ddvug_willibald_samen.load_webshop_kunde", "model.ddvug_willibald_samen.load_webshop_lieferadresse", "model.ddvug_willibald_samen.load_webshop_lieferdienst", "model.ddvug_willibald_samen.load_webshop_lieferung", "model.ddvug_willibald_samen.load_webshop_position", "model.ddvug_willibald_samen.load_webshop_produkt", "model.ddvug_willibald_samen.load_webshop_produktkategorie", "model.ddvug_willibald_samen.load_webshop_ref_produkt_typ", "model.ddvug_willibald_samen.load_webshop_vereinspartner", "model.ddvug_willibald_samen.load_webshop_wohnort"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}}, "sources": {"source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_KUNDE": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "DWH_01_EXT", "name": "EXT_WEBSHOP_KUNDE", "resource_type": "source", "package_name": "ddvug_willibald_samen", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_KUNDE", "fqn": ["ddvug_willibald_samen", "LOAD_EXT", "EXT_WEBSHOP_KUNDE"], "source_name": "LOAD_EXT", "source_description": "", "loader": "", "identifier": "EXT_WEBSHOP_KUNDE", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["load"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_WEBSHOP_KUNDE", "created_at": 1743626380.923962, "unrendered_database": "{{ env_var('DBT_SOURCE_DATABASE') }}", "unrendered_schema": "DWH_01_EXT"}, "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_LIEFERADRESSE": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "DWH_01_EXT", "name": "EXT_WEBSHOP_LIEFERADRESSE", "resource_type": "source", "package_name": "ddvug_willibald_samen", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_LIEFERADRESSE", "fqn": ["ddvug_willibald_samen", "LOAD_EXT", "EXT_WEBSHOP_LIEFERADRESSE"], "source_name": "LOAD_EXT", "source_description": "", "loader": "", "identifier": "EXT_WEBSHOP_LIEFERADRESSE", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["load"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_WEBSHOP_LIEFERADRESSE", "created_at": 1743626380.924499, "unrendered_database": "{{ env_var('DBT_SOURCE_DATABASE') }}", "unrendered_schema": "DWH_01_EXT"}, "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_LIEFERDIENST": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "DWH_01_EXT", "name": "EXT_WEBSHOP_LIEFERDIENST", "resource_type": "source", "package_name": "ddvug_willibald_samen", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_LIEFERDIENST", "fqn": ["ddvug_willibald_samen", "LOAD_EXT", "EXT_WEBSHOP_LIEFERDIENST"], "source_name": "LOAD_EXT", "source_description": "", "loader": "", "identifier": "EXT_WEBSHOP_LIEFERDIENST", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["load"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_WEBSHOP_LIEFERDIENST", "created_at": 1743626380.924566, "unrendered_database": "{{ env_var('DBT_SOURCE_DATABASE') }}", "unrendered_schema": "DWH_01_EXT"}, "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_LIEFERUNG": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "DWH_01_EXT", "name": "EXT_WEBSHOP_LIEFERUNG", "resource_type": "source", "package_name": "ddvug_willibald_samen", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_LIEFERUNG", "fqn": ["ddvug_willibald_samen", "LOAD_EXT", "EXT_WEBSHOP_LIEFERUNG"], "source_name": "LOAD_EXT", "source_description": "", "loader": "", "identifier": "EXT_WEBSHOP_LIEFERUNG", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["load"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_WEBSHOP_LIEFERUNG", "created_at": 1743626380.92463, "unrendered_database": "{{ env_var('DBT_SOURCE_DATABASE') }}", "unrendered_schema": "DWH_01_EXT"}, "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_POSITION": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "DWH_01_EXT", "name": "EXT_WEBSHOP_POSITION", "resource_type": "source", "package_name": "ddvug_willibald_samen", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_POSITION", "fqn": ["ddvug_willibald_samen", "LOAD_EXT", "EXT_WEBSHOP_POSITION"], "source_name": "LOAD_EXT", "source_description": "", "loader": "", "identifier": "EXT_WEBSHOP_POSITION", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["load"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_WEBSHOP_POSITION", "created_at": 1743626380.924693, "unrendered_database": "{{ env_var('DBT_SOURCE_DATABASE') }}", "unrendered_schema": "DWH_01_EXT"}, "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_PRODUKT": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "DWH_01_EXT", "name": "EXT_WEBSHOP_PRODUKT", "resource_type": "source", "package_name": "ddvug_willibald_samen", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_PRODUKT", "fqn": ["ddvug_willibald_samen", "LOAD_EXT", "EXT_WEBSHOP_PRODUKT"], "source_name": "LOAD_EXT", "source_description": "", "loader": "", "identifier": "EXT_WEBSHOP_PRODUKT", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["load"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_WEBSHOP_PRODUKT", "created_at": 1743626380.924754, "unrendered_database": "{{ env_var('DBT_SOURCE_DATABASE') }}", "unrendered_schema": "DWH_01_EXT"}, "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_PRODUKTKATEGORIE": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "DWH_01_EXT", "name": "EXT_WEBSHOP_PRODUKTKATEGORIE", "resource_type": "source", "package_name": "ddvug_willibald_samen", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_PRODUKTKATEGORIE", "fqn": ["ddvug_willibald_samen", "LOAD_EXT", "EXT_WEBSHOP_PRODUKTKATEGORIE"], "source_name": "LOAD_EXT", "source_description": "", "loader": "", "identifier": "EXT_WEBSHOP_PRODUKTKATEGORIE", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["load"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_WEBSHOP_PRODUKTKATEGORIE", "created_at": 1743626380.924819, "unrendered_database": "{{ env_var('DBT_SOURCE_DATABASE') }}", "unrendered_schema": "DWH_01_EXT"}, "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_VEREINSPARTNER": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "DWH_01_EXT", "name": "EXT_WEBSHOP_VEREINSPARTNER", "resource_type": "source", "package_name": "ddvug_willibald_samen", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_VEREINSPARTNER", "fqn": ["ddvug_willibald_samen", "LOAD_EXT", "EXT_WEBSHOP_VEREINSPARTNER"], "source_name": "LOAD_EXT", "source_description": "", "loader": "", "identifier": "EXT_WEBSHOP_VEREINSPARTNER", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["load"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_WEBSHOP_VEREINSPARTNER", "created_at": 1743626380.9248798, "unrendered_database": "{{ env_var('DBT_SOURCE_DATABASE') }}", "unrendered_schema": "DWH_01_EXT"}, "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_WOHNORT": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "DWH_01_EXT", "name": "EXT_WEBSHOP_WOHNORT", "resource_type": "source", "package_name": "ddvug_willibald_samen", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_WOHNORT", "fqn": ["ddvug_willibald_samen", "LOAD_EXT", "EXT_WEBSHOP_WOHNORT"], "source_name": "LOAD_EXT", "source_description": "", "loader": "", "identifier": "EXT_WEBSHOP_WOHNORT", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["load"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_WEBSHOP_WOHNORT", "created_at": 1743626380.92494, "unrendered_database": "{{ env_var('DBT_SOURCE_DATABASE') }}", "unrendered_schema": "DWH_01_EXT"}, "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_REF_PRODUKT_TYP": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "DWH_01_EXT", "name": "EXT_WEBSHOP_REF_PRODUKT_TYP", "resource_type": "source", "package_name": "ddvug_willibald_samen", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_REF_PRODUKT_TYP", "fqn": ["ddvug_willibald_samen", "LOAD_EXT", "EXT_WEBSHOP_REF_PRODUKT_TYP"], "source_name": "LOAD_EXT", "source_description": "", "loader": "", "identifier": "EXT_WEBSHOP_REF_PRODUKT_TYP", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["load"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_WEBSHOP_REF_PRODUKT_TYP", "created_at": 1743626380.925001, "unrendered_database": "{{ env_var('DBT_SOURCE_DATABASE') }}", "unrendered_schema": "DWH_01_EXT"}, "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_BESTELLUNG": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "DWH_01_EXT", "name": "EXT_WEBSHOP_BESTELLUNG", "resource_type": "source", "package_name": "ddvug_willibald_samen", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_BESTELLUNG", "fqn": ["ddvug_willibald_samen", "LOAD_EXT", "EXT_WEBSHOP_BESTELLUNG"], "source_name": "LOAD_EXT", "source_description": "", "loader": "", "identifier": "EXT_WEBSHOP_BESTELLUNG", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["load"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_WEBSHOP_BESTELLUNG", "created_at": 1743626380.925059, "unrendered_database": "{{ env_var('DBT_SOURCE_DATABASE') }}", "unrendered_schema": "DWH_01_EXT"}, "source.ddvug_willibald_samen.LOAD_EXT.EXT_ROADSHOW_BESTELLUNG": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "DWH_01_EXT", "name": "EXT_ROADSHOW_BESTELLUNG", "resource_type": "source", "package_name": "ddvug_willibald_samen", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ddvug_willibald_samen.LOAD_EXT.EXT_ROADSHOW_BESTELLUNG", "fqn": ["ddvug_willibald_samen", "LOAD_EXT", "EXT_ROADSHOW_BESTELLUNG"], "source_name": "LOAD_EXT", "source_description": "", "loader": "", "identifier": "EXT_ROADSHOW_BESTELLUNG", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["load"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_ROADSHOW_BESTELLUNG", "created_at": 1743626380.925118, "unrendered_database": "{{ env_var('DBT_SOURCE_DATABASE') }}", "unrendered_schema": "DWH_01_EXT"}, "source.ddvug_willibald_samen.LOAD_EXT.EXT_MISC_KATEGORIE_TERMINTREUE": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "DWH_01_EXT", "name": "EXT_MISC_KATEGORIE_TERMINTREUE", "resource_type": "source", "package_name": "ddvug_willibald_samen", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ddvug_willibald_samen.LOAD_EXT.EXT_MISC_KATEGORIE_TERMINTREUE", "fqn": ["ddvug_willibald_samen", "LOAD_EXT", "EXT_MISC_KATEGORIE_TERMINTREUE"], "source_name": "LOAD_EXT", "source_description": "", "loader": "", "identifier": "EXT_MISC_KATEGORIE_TERMINTREUE", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["load"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_MISC_KATEGORIE_TERMINTREUE", "created_at": 1743626380.9251788, "unrendered_database": "{{ env_var('DBT_SOURCE_DATABASE') }}", "unrendered_schema": "DWH_01_EXT"}, "source.ddvug_willibald_samen.LOAD_EXT_META.META_HWM": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "DWH_00_META", "name": "META_HWM", "resource_type": "source", "package_name": "ddvug_willibald_samen", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ddvug_willibald_samen.LOAD_EXT_META.META_HWM", "fqn": ["ddvug_willibald_samen", "LOAD_EXT_META", "META_HWM"], "source_name": "LOAD_EXT_META", "source_description": "", "loader": "", "identifier": "META_HWM", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["meta"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.DWH_00_META.META_HWM", "created_at": 1743626380.925241, "unrendered_database": "{{ env_var('DBT_DATABASE') }}", "unrendered_schema": "DWH_00_META"}, "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_MISC_KATEGORIE_TERMINTREUE": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "DWH_01_EXT", "name": "EXT_MISC_KATEGORIE_TERMINTREUE", "resource_type": "source", "package_name": "ddvug_willibald_samen", "path": "models/dwh_01_ext/ext_misc_kategorie_termintreue.yml", "original_file_path": "models/dwh_01_ext/ext_misc_kategorie_termintreue.yml", "unique_id": "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_MISC_KATEGORIE_TERMINTREUE", "fqn": ["ddvug_willibald_samen", "dwh_01_ext", "WILLIBALD_DATA_VAULT_WITH_DBT", "EXT_MISC_KATEGORIE_TERMINTREUE"], "source_name": "WILLIBALD_DATA_VAULT_WITH_DBT", "source_description": "", "loader": "", "identifier": "EXT_MISC_KATEGORIE_TERMINTREUE", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "@WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.DWH_01_EXT_STAGE/", "file_format": "(format_name = WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.FF_SEMICOLON)", "row_format": null, "tbl_properties": null, "partitions": [{"name": "filenamedate", "data_type": "varchar", "expression": "metadata$filename"}], "auto_refresh": false, "pattern": "V1.0/misc/kategorie_termintreue/kategorie_termintreue_.*[.]csv"}, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["external"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_MISC_KATEGORIE_TERMINTREUE", "created_at": 1743626380.9253051, "unrendered_database": "WILLIBALD_DATA_VAULT_WITH_DBT", "unrendered_schema": "DWH_01_EXT"}, "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_ROADSHOW_BESTELLUNG": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "DWH_01_EXT", "name": "EXT_ROADSHOW_BESTELLUNG", "resource_type": "source", "package_name": "ddvug_willibald_samen", "path": "models/dwh_01_ext/ext_roadshow_bestellung.yml", "original_file_path": "models/dwh_01_ext/ext_roadshow_bestellung.yml", "unique_id": "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_ROADSHOW_BESTELLUNG", "fqn": ["ddvug_willibald_samen", "dwh_01_ext", "WILLIBALD_DATA_VAULT_WITH_DBT", "EXT_ROADSHOW_BESTELLUNG"], "source_name": "WILLIBALD_DATA_VAULT_WITH_DBT", "source_description": "", "loader": "", "identifier": "EXT_ROADSHOW_BESTELLUNG", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "@WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.DWH_01_EXT_STAGE/", "file_format": "(format_name = WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.FF_SEMICOLON)", "row_format": null, "tbl_properties": null, "partitions": [{"name": "filenamedate", "data_type": "varchar", "expression": "metadata$filename"}], "auto_refresh": false, "pattern": "V1.0/roadshow/bestellung/bestellung_.*[.]csv"}, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["external"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_ROADSHOW_BESTELLUNG", "created_at": 1743626380.925369, "unrendered_database": "WILLIBALD_DATA_VAULT_WITH_DBT", "unrendered_schema": "DWH_01_EXT"}, "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_REF_PRODUKT_TYP": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "DWH_01_EXT", "name": "EXT_WEBSHOP_REF_PRODUKT_TYP", "resource_type": "source", "package_name": "ddvug_willibald_samen", "path": "models/dwh_01_ext/ext_webshop_ref_produkt_typ.yml", "original_file_path": "models/dwh_01_ext/ext_webshop_ref_produkt_typ.yml", "unique_id": "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_REF_PRODUKT_TYP", "fqn": ["ddvug_willibald_samen", "dwh_01_ext", "WILLIBALD_DATA_VAULT_WITH_DBT", "EXT_WEBSHOP_REF_PRODUKT_TYP"], "source_name": "WILLIBALD_DATA_VAULT_WITH_DBT", "source_description": "", "loader": "", "identifier": "EXT_WEBSHOP_REF_PRODUKT_TYP", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "@WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.DWH_01_EXT_STAGE/", "file_format": "(format_name = WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.FF_SEMICOLON)", "row_format": null, "tbl_properties": null, "partitions": [{"name": "filenamedate", "data_type": "varchar", "expression": "metadata$filename"}], "auto_refresh": false, "pattern": "V1.0/webshop/ref_produkt_typ/ref_produkt_typ_.*[.]csv"}, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["external"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_WEBSHOP_REF_PRODUKT_TYP", "created_at": 1743626380.925431, "unrendered_database": "WILLIBALD_DATA_VAULT_WITH_DBT", "unrendered_schema": "DWH_01_EXT"}, "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_PRODUKT": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "DWH_01_EXT", "name": "EXT_WEBSHOP_PRODUKT", "resource_type": "source", "package_name": "ddvug_willibald_samen", "path": "models/dwh_01_ext/ext_webshop_produkt.yml", "original_file_path": "models/dwh_01_ext/ext_webshop_produkt.yml", "unique_id": "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_PRODUKT", "fqn": ["ddvug_willibald_samen", "dwh_01_ext", "WILLIBALD_DATA_VAULT_WITH_DBT", "EXT_WEBSHOP_PRODUKT"], "source_name": "WILLIBALD_DATA_VAULT_WITH_DBT", "source_description": "", "loader": "", "identifier": "EXT_WEBSHOP_PRODUKT", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "@WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.DWH_01_EXT_STAGE/", "file_format": "(format_name = WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.FF_SEMICOLON)", "row_format": null, "tbl_properties": null, "partitions": [{"name": "filenamedate", "data_type": "varchar", "expression": "metadata$filename"}], "auto_refresh": false, "pattern": "V1.0/webshop/produkt/produkt_.*[.]csv"}, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["external"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_WEBSHOP_PRODUKT", "created_at": 1743626380.925492, "unrendered_database": "WILLIBALD_DATA_VAULT_WITH_DBT", "unrendered_schema": "DWH_01_EXT"}, "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_PRODUKTKATEGORIE": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "DWH_01_EXT", "name": "EXT_WEBSHOP_PRODUKTKATEGORIE", "resource_type": "source", "package_name": "ddvug_willibald_samen", "path": "models/dwh_01_ext/ext_webshop_produktkategorie.yml", "original_file_path": "models/dwh_01_ext/ext_webshop_produktkategorie.yml", "unique_id": "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_PRODUKTKATEGORIE", "fqn": ["ddvug_willibald_samen", "dwh_01_ext", "WILLIBALD_DATA_VAULT_WITH_DBT", "EXT_WEBSHOP_PRODUKTKATEGORIE"], "source_name": "WILLIBALD_DATA_VAULT_WITH_DBT", "source_description": "", "loader": "", "identifier": "EXT_WEBSHOP_PRODUKTKATEGORIE", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "@WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.DWH_01_EXT_STAGE/", "file_format": "(format_name = WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.FF_SEMICOLON)", "row_format": null, "tbl_properties": null, "partitions": [{"name": "filenamedate", "data_type": "varchar", "expression": "metadata$filename"}], "auto_refresh": false, "pattern": "V1.0/webshop/produktkategorie/produktkategorie_.*[.]csv"}, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["external"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_WEBSHOP_PRODUKTKATEGORIE", "created_at": 1743626380.9255528, "unrendered_database": "WILLIBALD_DATA_VAULT_WITH_DBT", "unrendered_schema": "DWH_01_EXT"}, "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_LIEFERADRESSE": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "DWH_01_EXT", "name": "EXT_WEBSHOP_LIEFERADRESSE", "resource_type": "source", "package_name": "ddvug_willibald_samen", "path": "models/dwh_01_ext/ext_webshop_lieferadresse.yml", "original_file_path": "models/dwh_01_ext/ext_webshop_lieferadresse.yml", "unique_id": "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_LIEFERADRESSE", "fqn": ["ddvug_willibald_samen", "dwh_01_ext", "WILLIBALD_DATA_VAULT_WITH_DBT", "EXT_WEBSHOP_LIEFERADRESSE"], "source_name": "WILLIBALD_DATA_VAULT_WITH_DBT", "source_description": "", "loader": "", "identifier": "EXT_WEBSHOP_LIEFERADRESSE", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "@WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.DWH_01_EXT_STAGE/", "file_format": "(format_name = WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.FF_SEMICOLON)", "row_format": null, "tbl_properties": null, "partitions": [{"name": "filenamedate", "data_type": "varchar", "expression": "metadata$filename"}], "auto_refresh": false, "pattern": "V1.0/webshop/lieferadresse/lieferadresse_.*[.]csv"}, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["external"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_WEBSHOP_LIEFERADRESSE", "created_at": 1743626380.9256132, "unrendered_database": "WILLIBALD_DATA_VAULT_WITH_DBT", "unrendered_schema": "DWH_01_EXT"}, "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_VEREINSPARTNER": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "DWH_01_EXT", "name": "EXT_WEBSHOP_VEREINSPARTNER", "resource_type": "source", "package_name": "ddvug_willibald_samen", "path": "models/dwh_01_ext/ext_webshop_vereinspartner.yml", "original_file_path": "models/dwh_01_ext/ext_webshop_vereinspartner.yml", "unique_id": "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_VEREINSPARTNER", "fqn": ["ddvug_willibald_samen", "dwh_01_ext", "WILLIBALD_DATA_VAULT_WITH_DBT", "EXT_WEBSHOP_VEREINSPARTNER"], "source_name": "WILLIBALD_DATA_VAULT_WITH_DBT", "source_description": "", "loader": "", "identifier": "EXT_WEBSHOP_VEREINSPARTNER", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "@WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.DWH_01_EXT_STAGE/", "file_format": "(format_name = WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.FF_SEMICOLON)", "row_format": null, "tbl_properties": null, "partitions": [{"name": "filenamedate", "data_type": "varchar", "expression": "metadata$filename"}], "auto_refresh": false, "pattern": "V1.0/webshop/vereinspartner/vereinspartner_.*[.]csv"}, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["external"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_WEBSHOP_VEREINSPARTNER", "created_at": 1743626380.925673, "unrendered_database": "WILLIBALD_DATA_VAULT_WITH_DBT", "unrendered_schema": "DWH_01_EXT"}, "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_LIEFERUNG": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "DWH_01_EXT", "name": "EXT_WEBSHOP_LIEFERUNG", "resource_type": "source", "package_name": "ddvug_willibald_samen", "path": "models/dwh_01_ext/ext_webshop_lieferung.yml", "original_file_path": "models/dwh_01_ext/ext_webshop_lieferung.yml", "unique_id": "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_LIEFERUNG", "fqn": ["ddvug_willibald_samen", "dwh_01_ext", "WILLIBALD_DATA_VAULT_WITH_DBT", "EXT_WEBSHOP_LIEFERUNG"], "source_name": "WILLIBALD_DATA_VAULT_WITH_DBT", "source_description": "", "loader": "", "identifier": "EXT_WEBSHOP_LIEFERUNG", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "@WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.DWH_01_EXT_STAGE/", "file_format": "(format_name = WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.FF_SEMICOLON)", "row_format": null, "tbl_properties": null, "partitions": [{"name": "filenamedate", "data_type": "varchar", "expression": "metadata$filename"}], "auto_refresh": false, "pattern": "V1.0/webshop/lieferung/lieferung_.*[.]csv"}, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["external"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_WEBSHOP_LIEFERUNG", "created_at": 1743626380.9257338, "unrendered_database": "WILLIBALD_DATA_VAULT_WITH_DBT", "unrendered_schema": "DWH_01_EXT"}, "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_KUNDE": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "DWH_01_EXT", "name": "EXT_WEBSHOP_KUNDE", "resource_type": "source", "package_name": "ddvug_willibald_samen", "path": "models/dwh_01_ext/ext_webshop_kunde.yml", "original_file_path": "models/dwh_01_ext/ext_webshop_kunde.yml", "unique_id": "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_KUNDE", "fqn": ["ddvug_willibald_samen", "dwh_01_ext", "WILLIBALD_DATA_VAULT_WITH_DBT", "EXT_WEBSHOP_KUNDE"], "source_name": "WILLIBALD_DATA_VAULT_WITH_DBT", "source_description": "", "loader": "", "identifier": "EXT_WEBSHOP_KUNDE", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "@WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.DWH_01_EXT_STAGE/", "file_format": "(format_name = WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.FF_SEMICOLON)", "row_format": null, "tbl_properties": null, "partitions": [{"name": "filenamedate", "data_type": "varchar", "expression": "metadata$filename"}], "auto_refresh": false, "pattern": "V1.0/webshop/kunde/kunde_.*[.]csv"}, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["external"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_WEBSHOP_KUNDE", "created_at": 1743626380.925796, "unrendered_database": "WILLIBALD_DATA_VAULT_WITH_DBT", "unrendered_schema": "DWH_01_EXT"}, "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_POSITION": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "DWH_01_EXT", "name": "EXT_WEBSHOP_POSITION", "resource_type": "source", "package_name": "ddvug_willibald_samen", "path": "models/dwh_01_ext/ext_webshop_position.yml", "original_file_path": "models/dwh_01_ext/ext_webshop_position.yml", "unique_id": "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_POSITION", "fqn": ["ddvug_willibald_samen", "dwh_01_ext", "WILLIBALD_DATA_VAULT_WITH_DBT", "EXT_WEBSHOP_POSITION"], "source_name": "WILLIBALD_DATA_VAULT_WITH_DBT", "source_description": "", "loader": "", "identifier": "EXT_WEBSHOP_POSITION", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "@WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.DWH_01_EXT_STAGE/", "file_format": "(format_name = WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.FF_SEMICOLON)", "row_format": null, "tbl_properties": null, "partitions": [{"name": "filenamedate", "data_type": "varchar", "expression": "metadata$filename"}], "auto_refresh": false, "pattern": "V1.0/webshop/position/position_.*[.]csv"}, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["external"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_WEBSHOP_POSITION", "created_at": 1743626380.925857, "unrendered_database": "WILLIBALD_DATA_VAULT_WITH_DBT", "unrendered_schema": "DWH_01_EXT"}, "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_LIEFERDIENST": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "DWH_01_EXT", "name": "EXT_WEBSHOP_LIEFERDIENST", "resource_type": "source", "package_name": "ddvug_willibald_samen", "path": "models/dwh_01_ext/ext_webshop_lieferdienst.yml", "original_file_path": "models/dwh_01_ext/ext_webshop_lieferdienst.yml", "unique_id": "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_LIEFERDIENST", "fqn": ["ddvug_willibald_samen", "dwh_01_ext", "WILLIBALD_DATA_VAULT_WITH_DBT", "EXT_WEBSHOP_LIEFERDIENST"], "source_name": "WILLIBALD_DATA_VAULT_WITH_DBT", "source_description": "", "loader": "", "identifier": "EXT_WEBSHOP_LIEFERDIENST", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "@WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.DWH_01_EXT_STAGE/", "file_format": "(format_name = WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.FF_SEMICOLON)", "row_format": null, "tbl_properties": null, "partitions": [{"name": "filenamedate", "data_type": "varchar", "expression": "metadata$filename"}], "auto_refresh": false, "pattern": "V1.0/webshop/lieferdienst/lieferdienst_.*[.]csv"}, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["external"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_WEBSHOP_LIEFERDIENST", "created_at": 1743626380.9259179, "unrendered_database": "WILLIBALD_DATA_VAULT_WITH_DBT", "unrendered_schema": "DWH_01_EXT"}, "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_BESTELLUNG": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "DWH_01_EXT", "name": "EXT_WEBSHOP_BESTELLUNG", "resource_type": "source", "package_name": "ddvug_willibald_samen", "path": "models/dwh_01_ext/ext_webshop_bestellung.yml", "original_file_path": "models/dwh_01_ext/ext_webshop_bestellung.yml", "unique_id": "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_BESTELLUNG", "fqn": ["ddvug_willibald_samen", "dwh_01_ext", "WILLIBALD_DATA_VAULT_WITH_DBT", "EXT_WEBSHOP_BESTELLUNG"], "source_name": "WILLIBALD_DATA_VAULT_WITH_DBT", "source_description": "", "loader": "", "identifier": "EXT_WEBSHOP_BESTELLUNG", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "@WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.DWH_01_EXT_STAGE/", "file_format": "(format_name = WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.FF_SEMICOLON)", "row_format": null, "tbl_properties": null, "partitions": [{"name": "filenamedate", "data_type": "varchar", "expression": "metadata$filename"}], "auto_refresh": false, "pattern": "V1.0/webshop/bestellung/bestellung_.*[.]csv"}, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["external"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_WEBSHOP_BESTELLUNG", "created_at": 1743626380.925979, "unrendered_database": "WILLIBALD_DATA_VAULT_WITH_DBT", "unrendered_schema": "DWH_01_EXT"}, "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_WOHNORT": {"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "DWH_01_EXT", "name": "EXT_WEBSHOP_WOHNORT", "resource_type": "source", "package_name": "ddvug_willibald_samen", "path": "models/dwh_01_ext/ext_webshop_wohnort.yml", "original_file_path": "models/dwh_01_ext/ext_webshop_wohnort.yml", "unique_id": "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_WOHNORT", "fqn": ["ddvug_willibald_samen", "dwh_01_ext", "WILLIBALD_DATA_VAULT_WITH_DBT", "EXT_WEBSHOP_WOHNORT"], "source_name": "WILLIBALD_DATA_VAULT_WITH_DBT", "source_description": "", "loader": "", "identifier": "EXT_WEBSHOP_WOHNORT", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "@WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.DWH_01_EXT_STAGE/", "file_format": "(format_name = WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.FF_SEMICOLON)", "row_format": null, "tbl_properties": null, "partitions": [{"name": "filenamedate", "data_type": "varchar", "expression": "metadata$filename"}], "auto_refresh": false, "pattern": "V1.0/webshop/wohnort/wohnort_.*[.]csv"}, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["external"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_WEBSHOP_WOHNORT", "created_at": 1743626380.9260428, "unrendered_database": "WILLIBALD_DATA_VAULT_WITH_DBT", "unrendered_schema": "DWH_01_EXT"}}, "macros": {"macro.ddvug_willibald_samen.autoexec": {"name": "autoexec", "resource_type": "macro", "package_name": "ddvug_willibald_samen", "path": "macros/autoexec.sql", "original_file_path": "macros/autoexec.sql", "unique_id": "macro.ddvug_willibald_samen.autoexec", "macro_sql": "{% macro autoexec() %}\n\n{{ print_current() }}\n\n{{ create_extra_schemas() }} \n\n{{ prepare_external_stage() }} \n\n{{ create_table_meta_hwm() }}\n\n{#{ clean_all_schemas() }#}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.ddvug_willibald_samen.print_current", "macro.ddvug_willibald_samen.create_extra_schemas", "macro.ddvug_willibald_samen.prepare_external_stage", "macro.ddvug_willibald_samen.create_table_meta_hwm"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.654309, "supported_languages": null}, "macro.ddvug_willibald_samen.is_list": {"name": "is_list", "resource_type": "macro", "package_name": "ddvug_willibald_samen", "path": "macros/is_checks.sql", "original_file_path": "macros/is_checks.sql", "unique_id": "macro.ddvug_willibald_samen.is_list", "macro_sql": "{%- macro is_list(obj, empty_is_false=false) -%}\n\n    {%- if obj is iterable and obj is not string and obj is not mapping -%}\n        {%- if obj is none and obj is undefined and not obj and empty_is_false -%}\n            {%- do return(false) -%}\n        {%- endif -%}\n\n        {%- do return(true) -%}\n    {%- else -%}\n        {%- do return(false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.65486, "supported_languages": null}, "macro.ddvug_willibald_samen.is_nothing": {"name": "is_nothing", "resource_type": "macro", "package_name": "ddvug_willibald_samen", "path": "macros/is_checks.sql", "original_file_path": "macros/is_checks.sql", "unique_id": "macro.ddvug_willibald_samen.is_nothing", "macro_sql": "{%- macro is_nothing(obj) -%}\n\n    {%- if obj is none or obj is undefined or not obj -%}\n        {%- do return(true) -%}\n    {%- else -%}\n        {%- do return(false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.655082, "supported_languages": null}, "macro.ddvug_willibald_samen.is_something": {"name": "is_something", "resource_type": "macro", "package_name": "ddvug_willibald_samen", "path": "macros/is_checks.sql", "original_file_path": "macros/is_checks.sql", "unique_id": "macro.ddvug_willibald_samen.is_something", "macro_sql": "{%- macro is_something(obj) -%}\n\n    {%- if obj is not none and obj is defined and obj -%}\n        {%- do return(true) -%}\n    {%- else -%}\n        {%- do return(false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.6552691, "supported_languages": null}, "macro.ddvug_willibald_samen.is_expression": {"name": "is_expression", "resource_type": "macro", "package_name": "ddvug_willibald_samen", "path": "macros/is_checks.sql", "original_file_path": "macros/is_checks.sql", "unique_id": "macro.ddvug_willibald_samen.is_expression", "macro_sql": "{%- macro is_expression(obj) -%}\n\n    {%- if obj is string -%}\n        {%- if (obj | first == \"'\" and obj | last == \"'\") or (\"(\" in obj and \")\" in obj) or \"::\" in obj -%}\n            {%- do return(true) -%}\n        {%- else -%}\n            {%- do return(false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do return(false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.655616, "supported_languages": null}, "macro.ddvug_willibald_samen.get_dict_hash_value": {"name": "get_dict_hash_value", "resource_type": "macro", "package_name": "ddvug_willibald_samen", "path": "macros/general/get_dict_hash_value.sql", "original_file_path": "macros/general/get_dict_hash_value.sql", "unique_id": "macro.ddvug_willibald_samen.get_dict_hash_value", "macro_sql": "{% macro get_dict_hash_value(value_key) -%}\n\n{%- set hash = var('datavault4dbt.hash', 'MD5') -%}\n{%- set hash_dtype = var('datavault4dbt.hash_datatype', 'STRING') -%}\n{%- set hash_default_values = fromjson(datavault4dbt.hash_default_values(hash_function=hash,hash_datatype=hash_dtype)) -%}\n{# {{ return(datavault4dbt.as_constant(column_str=hash_default_values[value_key])) }} #}\n{{ return(hash_default_values[value_key] | replace(\"!\", \"\")) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.datavault4dbt.hash_default_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.656, "supported_languages": null}, "macro.ddvug_willibald_samen.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "ddvug_willibald_samen", "path": "macros/general/generate_schema_name.sql", "original_file_path": "macros/general/generate_schema_name.sql", "unique_id": "macro.ddvug_willibald_samen.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.656235, "supported_languages": null}, "macro.ddvug_willibald_samen.prepare_external_stage": {"name": "prepare_external_stage", "resource_type": "macro", "package_name": "ddvug_willibald_samen", "path": "macros/autoexec/prepare_external_stage.sql", "original_file_path": "macros/autoexec/prepare_external_stage.sql", "unique_id": "macro.ddvug_willibald_samen.prepare_external_stage", "macro_sql": "{% macro prepare_external_stage() %}\n{% do log(\"Create File Format if not exists\", True) %}\nCREATE or REPLACE FILE FORMAT {{ var(\"external_tables_schema\") }}.FF_SEMICOLON \nCOMPRESSION = 'AUTO' FIELD_DELIMITER = ';' RECORD_DELIMITER = '\\n' SKIP_HEADER = 1 FIELD_OPTIONALLY_ENCLOSED_BY = 'NONE' TRIM_SPACE = FALSE ERROR_ON_COLUMN_COUNT_MISMATCH = TRUE ESCAPE = 'NONE' ESCAPE_UNENCLOSED_FIELD = '\\134' DATE_FORMAT = 'AUTO' TIMESTAMP_FORMAT = 'AUTO' NULL_IF = ('\\\\N');\n{% do log(\"Create External Stage if not exists\", True) %}\nCREATE or REPLACE STAGE {{ var(\"external_tables_schema\") }}.DWH_01_EXT_STAGE \nURL = 's3://willibald-data/'\nFILE_FORMAT = {{ var(\"external_tables_schema\") }}.FF_SEMICOLON;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.656571, "supported_languages": null}, "macro.ddvug_willibald_samen.clean_all_schemas": {"name": "clean_all_schemas", "resource_type": "macro", "package_name": "ddvug_willibald_samen", "path": "macros/autoexec/clean_all_schemas.sql", "original_file_path": "macros/autoexec/clean_all_schemas.sql", "unique_id": "macro.ddvug_willibald_samen.clean_all_schemas", "macro_sql": "{% macro clean_all_schemas() %}\n\n  {% set get_schemas_query %}\n      SELECT schema_name \n      FROM INFORMATION_SCHEMA.SCHEMATA \n      WHERE NOT schema_name in ('INFORMATION_SCHEMA', 'PUBLIC', '{{var(\"meta_schema\")}}' )\n      order by schema_name desc;\n  {% endset %}\n\n  {% set result = run_query(get_schemas_query) %}\n  {% if is_nothing(result) %}\n    {% do log(\"Keine Schemas gefunden\", True) %}\n  {% else %}\n    {% set schemas = result.columns[0].values() %}\n  \n    {% for schema in schemas %}\n      {% do log(\"Cleaning up \" + schema + \" schema\", True) %}\n      {{ drop_old_relations(schema=schema) }}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.ddvug_willibald_samen.is_nothing", "macro.ddvug_willibald_samen.drop_old_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.65713, "supported_languages": null}, "macro.ddvug_willibald_samen.create_extra_schemas": {"name": "create_extra_schemas", "resource_type": "macro", "package_name": "ddvug_willibald_samen", "path": "macros/autoexec/create_extra_schemas.sql", "original_file_path": "macros/autoexec/create_extra_schemas.sql", "unique_id": "macro.ddvug_willibald_samen.create_extra_schemas", "macro_sql": "{% macro create_extra_schemas() %}\n\n{% do log('create schema if not exists ' ~ var(\"meta_schema\"), True) %}\ncreate schema if not exists {{ var(\"meta_schema\") }};\n\n{% do log('create schema if not exists ' ~ var(\"external_tables_schema\"), True) %}\ncreate schema if not exists {{ var(\"external_tables_schema\") }};\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.657435, "supported_languages": null}, "macro.ddvug_willibald_samen.create_table_meta_hwm": {"name": "create_table_meta_hwm", "resource_type": "macro", "package_name": "ddvug_willibald_samen", "path": "macros/autoexec/create_table_meta_hwm.sql", "original_file_path": "macros/autoexec/create_table_meta_hwm.sql", "unique_id": "macro.ddvug_willibald_samen.create_table_meta_hwm", "macro_sql": "{% macro create_table_meta_hwm() %}\n{% do log(\"Create Meta_HWM if not exists\", True) %}\ncreate table if not exists {{ source('LOAD_EXT_META', 'META_HWM') }}\n(\n    OBJECT_NAME       VARCHAR,\n    HWM_LDTS TIMESTAMPNTZ,\n    LOAD_DATE     TIMESTAMPNTZ\n);\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.6576262, "supported_languages": null}, "macro.ddvug_willibald_samen.drop_old_relations": {"name": "drop_old_relations", "resource_type": "macro", "package_name": "ddvug_willibald_samen", "path": "macros/autoexec/drop_old_relations.sql", "original_file_path": "macros/autoexec/drop_old_relations.sql", "unique_id": "macro.ddvug_willibald_samen.drop_old_relations", "macro_sql": "{% macro drop_old_relations(schema=target.schema, dryrun=False) %}\n\n{# Get the models that currently exist in dbt #}\n{% if execute %}\n  {% set current_models=[] %}\n\n  {% for node in graph.nodes.values()\n     | selectattr(\"resource_type\", \"in\", [\"model\", \"seed\", \"snapshot\"])%}\n        {% do current_models.append(node.name) %}\n    \n  {% endfor %}\n{% endif %}\n\n{# Run a query to create the drop statements for all relations in BQ that are NOT in the dbt project #}\n{% set cleanup_query %}\n\n      WITH MODELS_TO_DROP AS (\n          SELECT\n            CASE \n              WHEN TABLE_TYPE = 'BASE TABLE' THEN 'TABLE'\n              WHEN TABLE_TYPE = 'VIEW' THEN 'VIEW'\n            END AS RELATION_TYPE,\n            CONCAT('{{ schema }}','.',TABLE_NAME) AS RELATION_NAME\n          FROM INFORMATION_SCHEMA.TABLES\n          WHERE TABLE_SCHEMA = '{{ schema }}'\n          AND UPPER(TABLE_NAME) NOT LIKE '%DBT_BACKUP%'\n            AND UPPER(TABLE_NAME) NOT IN\n              ({%- for model in current_models -%}\n                  '{{ model.upper() }}'\n                  {%- if not loop.last -%}\n                      ,\n                  {% endif %}\n              {%- endfor -%})) \n      SELECT \n        'DROP ' || RELATION_TYPE || ' ' || RELATION_NAME || ';' as DROP_COMMANDS\n      FROM \n        MODELS_TO_DROP\n  {% endset %}\n\n{% set drop_commands = run_query(cleanup_query).columns[0].values() %}\n\n{# Execute each of the drop commands for each relation #}\n\n{% if drop_commands %}\n  {% if dryrun | as_bool == False %}\n    {% do log('Executing DROP commands...', True) %}\n  {% else %}\n    {% do log('Printing DROP commands...', True) %}\n  {% endif %}\n  {% for drop_command in drop_commands %}\n    {% if drop_command|upper  != \"NONE\"  %}\n      {% do log(drop_command, True) %}\n      {% if dryrun | as_bool == False %}\n        {# % do run_query(drop_command) % #}\n        {{ drop_command }}\n      {% endif %}\n    {% endif %}      \n  {% endfor %}\n{% else %}\n  {% do log('No relations to clean.', True) %}\n{% endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.658884, "supported_languages": null}, "macro.ddvug_willibald_samen.print_current": {"name": "print_current", "resource_type": "macro", "package_name": "ddvug_willibald_samen", "path": "macros/autoexec/print_current.sql", "original_file_path": "macros/autoexec/print_current.sql", "unique_id": "macro.ddvug_willibald_samen.print_current", "macro_sql": "{% macro print_current() %}\n\n  {% set get_current_query %}\n      SELECT CURRENT_WAREHOUSE(), CURRENT_DATABASE(), CURRENT_SCHEMA();\n  {% endset %}\n\n  {% set result = run_query(get_current_query) %}\n  {% if is_nothing(result) %}\n    {% do log(\"Keine Infos gefunden\", True) %}\n  {% else %}\n    {% set current_warehouse = (result.columns[0].values())[0] %}\n    {% set current_database = (result.columns[1].values())[0] %}\n    {% set current_schema = (result.columns[2].values())[0] %}\n    {% do log(\"Current Warehouse_Database_Schema: \" ~ current_warehouse ~ \"__\" ~ current_database ~ \"__\" ~ current_schema , True) %}\n{% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.ddvug_willibald_samen.is_nothing"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.659488, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"name": "snowflake__get_catalog", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(information_schema) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(information_schema) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql", "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.660172, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_relations": {"name": "snowflake__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_relations", "macro_sql": "{% macro snowflake__get_catalog_relations(information_schema, relations) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(information_schema) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(information_schema) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql", "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.660424, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_tables_sql": {"name": "snowflake__get_catalog_tables_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro_sql": "{% macro snowflake__get_catalog_tables_sql(information_schema) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n        case\n            when is_dynamic = 'YES' and table_type = 'BASE TABLE' THEN 'DYNAMIC TABLE'\n            else table_type\n        end as \"table_type\",\n        comment as \"table_comment\",\n\n        -- note: this is the _role_ that owns the table\n        table_owner as \"table_owner\",\n\n        'Clustering Key' as \"stats:clustering_key:label\",\n        clustering_key as \"stats:clustering_key:value\",\n        'The key used to cluster this table' as \"stats:clustering_key:description\",\n        (clustering_key is not null) as \"stats:clustering_key:include\",\n\n        'Row Count' as \"stats:row_count:label\",\n        row_count as \"stats:row_count:value\",\n        'An approximate count of rows in this table' as \"stats:row_count:description\",\n        (row_count is not null) as \"stats:row_count:include\",\n\n        'Approximate Size' as \"stats:bytes:label\",\n        bytes as \"stats:bytes:value\",\n        'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n        (bytes is not null) as \"stats:bytes:include\",\n\n        'Last Modified' as \"stats:last_modified:label\",\n        to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n        'The timestamp for last update/change' as \"stats:last_modified:description\",\n        (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n    from {{ information_schema }}.tables\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.6605608, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_columns_sql": {"name": "snowflake__get_catalog_columns_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro_sql": "{% macro snowflake__get_catalog_columns_sql(information_schema) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n\n        column_name as \"column_name\",\n        ordinal_position as \"column_index\",\n        data_type as \"column_type\",\n        comment as \"column_comment\"\n    from {{ information_schema }}.columns\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.660647, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_results_sql": {"name": "snowflake__get_catalog_results_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro_sql": "{% macro snowflake__get_catalog_results_sql() -%}\n    select *\n    from tables\n    join columns using (\"table_database\", \"table_schema\", \"table_name\")\n    order by \"column_index\"\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.660705, "supported_languages": null}, "macro.dbt_snowflake.snowflake__catalog_equals": {"name": "snowflake__catalog_equals", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__catalog_equals", "macro_sql": "{% macro snowflake__catalog_equals(field, value) %}\n    \"{{ field }}\" ilike '{{ value }}' and upper(\"{{ field }}\") = upper('{{ value }}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.66082, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql": {"name": "snowflake__get_catalog_schemas_where_clause_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql", "macro_sql": "{% macro snowflake__get_catalog_schemas_where_clause_sql(schemas) -%}\n    where ({%- for schema in schemas -%}\n        ({{ snowflake__catalog_equals('table_schema', schema) }}){%- if not loop.last %} or {% endif -%}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__catalog_equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.6610382, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql": {"name": "snowflake__get_catalog_relations_where_clause_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql", "macro_sql": "{% macro snowflake__get_catalog_relations_where_clause_sql(relations) -%}\n    where (\n        {%- for relation in relations -%}\n            {% if relation.schema and relation.identifier %}\n                (\n                    {{ snowflake__catalog_equals('table_schema', relation.schema) }}\n                    and {{ snowflake__catalog_equals('table_name', relation.identifier) }}\n                )\n            {% elif relation.schema %}\n                (\n                    {{ snowflake__catalog_equals('table_schema', relation.schema) }}\n                )\n            {% else %}\n                {% do exceptions.raise_compiler_error(\n                    '`get_catalog_relations` requires a list of relations, each with a schema'\n                ) %}\n            {% endif %}\n\n            {%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__catalog_equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.6614242, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.663319, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.66351, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"name": "snowflake__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation.render() }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation.render() }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.6640582, "supported_languages": null}, "macro.dbt_snowflake.snowflake__show_object_metadata": {"name": "snowflake__show_object_metadata", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__show_object_metadata", "macro_sql": "{% macro snowflake__show_object_metadata(relation) %}\n  {%- set sql -%}\n    show objects in {{ relation.include(identifier=False) }} starts with '{{ relation.identifier }}' limit 1\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.664268, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"name": "snowflake__list_schemas", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.6646268, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_paginated_relations_array": {"name": "snowflake__get_paginated_relations_array", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_paginated_relations_array", "macro_sql": "{% macro snowflake__get_paginated_relations_array(max_iter, max_results_per_iter, max_total_results, schema_relation, watermark) %}\n\n  {% set paginated_relations = [] %}\n\n  {% for _ in range(0, max_iter) %}\n\n      {% if schema_relation is string %}\n        {%- set paginated_sql -%}\n          show objects in {{ schema_relation }} limit {{ max_results_per_iter }} from '{{ watermark.table_name }}'\n        {%- endset -%}\n      {% else %}\n        {%- set paginated_sql -%}\n          show objects in {{ schema_relation.include(identifier=False) }} limit {{ max_results_per_iter }} from '{{ watermark.table_name }}'\n        {%- endset -%}\n      {% endif -%}\n\n      {%- set paginated_result = run_query(paginated_sql) %}\n      {%- set paginated_n = (paginated_result | length) -%}\n\n      {#\n        terminating condition: if there are 0 records in the result we reached\n        the end exactly on the previous iteration\n      #}\n      {%- if paginated_n == 0 -%}\n        {%- break -%}\n      {%- endif -%}\n\n      {#\n        terminating condition: At some point the user needs to be reasonable with how\n        many objects are contained in their schemas. Since there was already\n        one iteration before attempting pagination, loop.index == max_iter means\n        the limit has been surpassed.\n      #}\n\n      {%- if loop.index == max_iter -%}\n        {%- set msg -%}\n            dbt is currently configured to list a maximum of {{ max_total_results }} objects per schema.\n            {{ schema_relation }} exceeds this limit. If this is expected, you may configure this limit\n            by setting list_relations_per_page and list_relations_page_limit in your project flags.\n            It is recommended to start by increasing list_relations_page_limit to something more than the default of 10.\n        {%- endset -%}\n\n        {% do exceptions.raise_compiler_error(msg) %}\n      {%- endif -%}\n\n      {%- do paginated_relations.append(paginated_result) -%}\n      {% set watermark.table_name = paginated_result.columns[1].values()[-1] %}\n\n      {#\n        terminating condition: paginated_n < max_results_per_iter means we reached the end\n      #}\n      {%- if paginated_n < max_results_per_iter -%}\n         {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n\n  {{ return(paginated_relations) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.665468, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"name": "snowflake__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation, max_iter=10, max_results_per_iter=10000) %}\n\n  {%- set max_results_per_iter = adapter.config.flags.get('list_relations_per_page', max_results_per_iter) -%}\n  {%- set max_iter = adapter.config.flags.get('list_relations_page_limit', max_iter) -%}\n  {%- set max_total_results = max_results_per_iter * max_iter -%}\n  {%- set sql -%}\n    {% if schema_relation is string %}\n      show objects in {{ schema_relation }} limit {{ max_results_per_iter }};\n    {% else %}\n      show objects in {{ schema_relation.include(identifier=False) }} limit {{ max_results_per_iter }};\n    {% endif -%}\n\n    {# -- Gated for performance reason. If you don't want Iceberg, you shouldn't pay the\n       -- latency penalty. #}\n    {% if adapter.behavior.enable_iceberg_materializations.no_warn %}\n      select all_objects.*, is_iceberg\n      from table(result_scan(last_query_id(-1))) all_objects\n      left join INFORMATION_SCHEMA.tables as all_tables\n        on all_tables.table_name = all_objects.\"name\"\n        and all_tables.table_schema = all_objects.\"schema_name\"\n        and all_tables.table_catalog = all_objects.\"database_name\"\n    {% endif -%}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n\n  {%- set n = (result | length) -%}\n  {%- set watermark = namespace(table_name=result.columns[1].values()[-1]) -%}\n  {%- set paginated = namespace(result=[]) -%}\n\n  {% if n >= max_results_per_iter %}\n\n    {% set paginated.result = snowflake__get_paginated_relations_array(\n         max_iter,\n         max_results_per_iter,\n         max_total_results,\n         schema_relation,\n         watermark\n       )\n    %}\n\n  {% endif %}\n\n  {%- set all_results_array = [result] + paginated.result -%}\n  {%- set result = result.merge(all_results_array) -%}\n  {%- do return(result) -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_snowflake.snowflake__get_paginated_relations_array"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.666545, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"name": "snowflake__check_schema_exists", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.666772, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"name": "snowflake__alter_column_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter {{ relation.get_ddl_prefix_for_alter() }} table {{ relation.render() }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.666975, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"name": "snowflake__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n    {%- if relation.is_dynamic_table -%}\n        {%- set relation_type = 'dynamic table' -%}\n    {%- else -%}\n        {%- set relation_type = relation.type -%}\n    {%- endif -%}\n    comment on {{ relation_type }} {{ relation.render() }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.667209, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"name": "snowflake__alter_column_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n    alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.667669, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"name": "get_current_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.6677928, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.667905, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"name": "snowflake__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.668235, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.6683662, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"name": "snowflake__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.668689, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"name": "snowflake__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"dynamic table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n\n    {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n    {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.6693351, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"name": "snowflake_dml_explicit_transaction", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.669487, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"name": "snowflake__truncate_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation.render() }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.669677, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"name": "snowflake__copy_grants", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.669882, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"name": "snowflake__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.669964, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_relation_last_modified": {"name": "snowflake__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/metadata.sql", "original_file_path": "macros/metadata.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_relation_last_modified", "macro_sql": "{% macro snowflake__get_relation_last_modified(information_schema, relations) -%}\n\n  {%- call statement('last_modified', fetch_result=True) -%}\n        select table_schema as schema,\n               table_name as identifier,\n               last_altered as last_modified,\n               {{ current_timestamp() }} as snapshotted_at\n        from {{ information_schema }}.tables\n        where (\n          {%- for relation in relations -%}\n            (upper(table_schema) = upper('{{ relation.schema }}') and\n             upper(table_name) = upper('{{ relation.identifier }}')){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n  {%- endcall -%}\n\n  {{ return(load_result('last_modified')) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.datavault4dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.670374, "supported_languages": null}, "macro.dbt_snowflake.materialization_test_snowflake": {"name": "materialization_test_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.6706219, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"name": "snowflake__load_csv_rows", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.689844, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"name": "materialization_seed_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.690084, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_view_snowflake": {"name": "materialization_view_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = snowflake__create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt_snowflake.snowflake__create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.690489, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_table_snowflake": {"name": "materialization_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set existing_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(\n\tidentifier=identifier,\n\tschema=schema,\n\tdatabase=database,\n\ttype='table',\n\ttable_format=config.get('table_format', 'default')\n    ) -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if target_relation.needs_to_drop(existing_relation) %}\n    {{ drop_relation_if_exists(existing_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.691701, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False, table_type=none) %}\n{#- The following logic is only for backwards-compatiblity with deprecated `temporary` parameter -#}\n{% if table_type is not none %}\n    {#- Just use the table_type as-is -#}\n{% elif temporary -%}\n    {#- Case 1 when the deprecated `temporary` parameter is used without the replacement `table_type` parameter -#}\n    {%- set table_type = \"temporary\" -%}\n{% else %}\n    {#- Case 2 when the deprecated `temporary` parameter is used without the replacement `table_type` parameter -#}\n    {#- Snowflake treats \"\" as meaning \"permanent\" -#}\n    {%- set table_type = \"\" -%}\n{%- endif %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n          session.use_database(target_relation.database)\n          session.use_schema(target_relation.schema)\n          # session.write_pandas does not have overwrite function\n          df = session.createDataFrame(df)\n    {% set target_relation_name = resolve_model_name(target_relation) %}\n    df.write.mode(\"overwrite\").save_as_table('{{ target_relation_name }}', table_type='{{table_type}}')\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.692053, "supported_languages": null}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n{%- set tmp_relation_type = config.get('tmp_relation_type') -%}\n  /* {#\n       High-level principles:\n       If we are running multiple statements (DELETE + INSERT),\n       and we want to guarantee identical inputs to both statements,\n       then we must first save the model query results as a temporary table\n       (which presumably comes with a performance cost).\n       If we are running a single statement (MERGE or INSERT alone),\n       we _may_ save the model query definition as a view instead,\n       for (presumably) faster overall incremental processing.\n\n       Low-level specifics:\n       If an invalid option is specified, then we will raise an\n       excpetion with corresponding message.\n\n       Languages other than SQL (like Python) will use a temporary table.\n       With the default strategy of merge, the user may choose between a temporary\n       table and view (defaulting to view).\n\n       The append strategy can use a view because it will run a single INSERT statement.\n\n       When unique_key is none, the delete+insert and microbatch strategies can use a view beacuse a\n       single INSERT statement is run with no DELETES as part of the statement.\n       Otherwise, play it safe by using a temporary table.\n  #} */\n\n  {% if language == \"python\" and tmp_relation_type is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models currently only support 'table' for tmp_relation_type but \"\n       ~ tmp_relation_type ~ \" was specified.\"\n    ) %}\n  {% endif %}\n\n  {% if strategy in [\"delete+insert\", \"microbatch\"] and tmp_relation_type is not none and tmp_relation_type != \"table\" and unique_key is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"In order to maintain consistent results when `unique_key` is not none,\n      the `\" ~ strategy ~ \"` strategy only supports `table` for `tmp_relation_type` but \"\n      ~ tmp_relation_type ~ \" was specified.\"\n      )\n  %}\n  {% endif %}\n\n  {% if language != \"sql\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"table\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"view\" %}\n    {{ return(\"view\") }}\n  {% elif strategy in (\"default\", \"merge\", \"append\", \"insert_overwrite\") %}\n    {{ return(\"view\") }}\n  {% elif strategy in [\"delete+insert\", \"microbatch\"] and unique_key is none %}\n    {{ return(\"view\") }}\n  {% else %}\n    {{ return(\"table\") }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.693592, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"name": "materialization_incremental_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n\n  {%- set identifier = this.name -%}\n\n  {%- set target_relation = api.Relation.create(\n\tidentifier=identifier,\n\tschema=schema,\n\tdatabase=database,\n\ttype='table',\n\ttable_format=config.get('table_format', 'default')\n    ) -%}\n\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n    {% if target_relation.needs_to_drop(existing_relation) %}\n      {{ drop_relation_if_exists(existing_relation) }}\n    {% endif %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif target_relation.table_format != existing_relation.table_format %}\n    {% do exceptions.raise_compiler_error(\n        \"Unable to alter incremental model `\" ~ target_relation.identifier  ~ \"` to '\" ~ target_relation.table_format ~ \" table format due to Snowflake limitation. Please execute with --full-refresh to drop the table and recreate in new table format.'\"\n      )\n    %}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.drop_relation_if_exists", "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro.dbt.process_schema_changes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.6961422, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"name": "snowflake__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.6962729, "supported_languages": null}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"name": "materialization_snapshot_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.6965199, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_dynamic_table_snowflake": {"name": "materialization_dynamic_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.materialization_dynamic_table_snowflake", "macro_sql": "{% materialization dynamic_table, adapter='snowflake' %}\n\n    {% set query_tag = set_query_tag() %}\n\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.DynamicTable) %}\n\n    {{ run_hooks(pre_hooks) }}\n\n    {% set build_sql = dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% if build_sql == '' %}\n        {{ dynamic_table_execute_no_op(target_relation) }}\n    {% else %}\n        {{ dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) }}\n    {% endif %}\n\n    {{ run_hooks(post_hooks) }}\n\n    {% do unset_query_tag(query_tag) %}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.load_cached_relation", "macro.dbt.run_hooks", "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.697424, "supported_languages": ["sql"]}, "macro.dbt_snowflake.dynamic_table_get_build_sql": {"name": "dynamic_table_get_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro_sql": "{% macro dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_dynamic_table %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = snowflake__get_dynamic_table_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"No configuration changes were identified on: `\" ~ target_relation ~ \"`. Continuing.\") }}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = snowflake__get_alter_dynamic_table_as_sql(existing_relation, configuration_changes, target_relation, sql) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'continue', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario: `\" ~ on_configuration_change ~ \"`\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_sql", "macro.dbt.get_replace_sql", "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.6983192, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_no_op": {"name": "dynamic_table_execute_no_op", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro_sql": "{% macro dynamic_table_execute_no_op(relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.698483, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_build_sql": {"name": "dynamic_table_execute_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro_sql": "{% macro dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) %}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.698816, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes": {"name": "snowflake__get_dynamic_table_configuration_changes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro_sql": "{% macro snowflake__get_dynamic_table_configuration_changes(existing_relation, new_config) -%}\n    {% set _existing_dynamic_table = snowflake__describe_dynamic_table(existing_relation) %}\n    {% set _configuration_changes = existing_relation.dynamic_table_config_changeset(_existing_dynamic_table, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__describe_dynamic_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.6990159, "supported_languages": null}, "macro.dbt_snowflake.snowflake__can_clone_table": {"name": "snowflake__can_clone_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__can_clone_table", "macro_sql": "{% macro snowflake__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.699175, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_or_replace_clone": {"name": "snowflake__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_clone", "macro_sql": "{% macro snowflake__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      {{ \"transient\" if config.get(\"transient\", true) }}\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n      {{ \"copy grants\" if config.get(\"copy_grants\", false) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.699376, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"name": "snowflake__get_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/merge.sql", "original_file_path": "macros/materializations/incremental/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7001889, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"name": "snowflake__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/merge.sql", "original_file_path": "macros/materializations/incremental/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.700404, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"name": "snowflake__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/merge.sql", "original_file_path": "macros/materializations/incremental/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.700584, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_incremental_append_sql": {"name": "snowflake__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/merge.sql", "original_file_path": "macros/materializations/incremental/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_append_sql", "macro_sql": "{% macro snowflake__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% set dml = default__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.700733, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql": {"name": "snowflake__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/merge.sql", "original_file_path": "macros/materializations/incremental/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql", "macro_sql": "{% macro snowflake__get_incremental_microbatch_sql(arg_dict) %}\n    {%- set target = arg_dict[\"target_relation\"] -%}\n    {%- set source = arg_dict[\"temp_relation\"] -%}\n    {%- set dest_columns = arg_dict[\"dest_columns\"] -%}\n    {%- set incremental_predicates = [] if arg_dict.get('incremental_predicates') is none else arg_dict.get('incremental_predicates') -%}\n\n    {#-- Add additional incremental_predicates to filter for batch --#}\n    {% if model.batch and model.batch.event_time_start -%}\n        {% do incremental_predicates.append(\"DBT_INTERNAL_TARGET.\" ~ model.config.event_time ~ \" >= to_timestamp_tz('\" ~ model.config.__dbt_internal_microbatch_event_time_start ~ \"')\") %}\n    {% endif %}\n    {% if model.batch and model.batch.event_time_end -%}\n        {% do incremental_predicates.append(\"DBT_INTERNAL_TARGET.\" ~ model.config.event_time ~ \" < to_timestamp_tz('\" ~ model.config.__dbt_internal_microbatch_event_time_end ~ \"')\") %}\n    {% endif %}\n    {% do arg_dict.update({'incremental_predicates': incremental_predicates}) %}\n\n    delete from {{ target }} DBT_INTERNAL_TARGET\n    where (\n    {% for predicate in incremental_predicates %}\n        {%- if not loop.first %}and {% endif -%} {{ predicate }}\n    {% endfor %}\n    );\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.701592, "supported_languages": null}, "macro.dbt_snowflake.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental/insert_overwrite.sql", "unique_id": "macro.dbt_snowflake.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) -%}\n  {{ adapter.dispatch('insert_overwrite_get_sql', 'dbt')(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"]) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__insert_overwrite_get_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.701963, "supported_languages": null}, "macro.dbt_snowflake.snowflake__insert_overwrite_get_sql": {"name": "snowflake__insert_overwrite_get_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental/insert_overwrite.sql", "unique_id": "macro.dbt_snowflake.snowflake__insert_overwrite_get_sql", "macro_sql": "{% macro snowflake__insert_overwrite_get_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dml -%}\n\n    {%- set overwrite_columns = config.get('overwrite_columns', []) -%}\n\n    {{ config.get('sql_header', '') }}\n\n    {% set target_columns_list = '(' ~ ', '.join(overwrite_columns) ~ ')' if overwrite_columns else '' %}\n    {% set source_query_columns_list = ', '.join(overwrite_columns) if overwrite_columns else '*' %}\n    insert overwrite into {{ target.render() }} {{ target_columns_list }}\n        select {{ source_query_columns_list }}\n        from {{ source.render() }}\n\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.702424, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_sql": {"name": "snowflake__get_drop_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_sql", "macro_sql": "{% macro snowflake__get_drop_sql(relation) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_drop_dynamic_table_sql(relation) }}\n\n    {% else %}\n        {{ default__get_drop_sql(relation) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.702643, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_sql": {"name": "snowflake__get_replace_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_sql", "macro_sql": "{% macro snowflake__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {% if existing_relation.is_dynamic_table and target_relation.is_dynamic_table %}\n        {{ snowflake__get_replace_dynamic_table_sql(target_relation, sql) }}\n\n    {% else %}\n        {{ default__get_replace_sql(existing_relation, target_relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql", "macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.702915, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"name": "snowflake__rename_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.703097, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_backup_sql": {"name": "snowflake__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_backup_sql", "macro_sql": "{%- macro snowflake__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    -- use `render` to ensure that the fully qualified name is used\n    {{ get_rename_sql(relation, backup_relation.render()) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.703339, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_sql": {"name": "snowflake__get_create_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_sql", "macro_sql": "{% macro snowflake__get_create_sql(relation, sql) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_create_dynamic_table_as_sql(relation, sql) }}\n\n    {% else %}\n        {{ default__get_create_sql(relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.703577, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_intermediate_sql": {"name": "snowflake__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_intermediate_sql", "macro_sql": "{%- macro snowflake__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- use `render` to ensure that the fully qualified name is used\n    {{ get_rename_sql(intermediate_relation, relation.render()) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.703773, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_table_sql": {"name": "snowflake__get_drop_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_table_sql", "macro_sql": "{% macro snowflake__get_drop_table_sql(relation) %}\n    drop table if exists {{ relation }} cascade\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7038789, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_table_sql": {"name": "snowflake__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_table_sql", "macro_sql": "{% macro snowflake__get_replace_table_sql(relation, sql) %}\n    {{ snowflake__create_table_as(False, relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7040188, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_table_sql": {"name": "snowflake__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_table_sql", "macro_sql": "{%- macro snowflake__get_rename_table_sql(relation, new_name) -%}\n    /*\n    Rename or move a table to the new name.\n\n    Args:\n        relation: SnowflakeRelation - relation to be renamed\n        new_name: Union[str, SnowflakeRelation] - new name for `relation`\n            if providing a string, the default database/schema will be used if that string is just an identifier\n            if providing a SnowflakeRelation, `render` will be used to produce a fully qualified name\n    Returns: templated string\n    */\n    alter table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.704184, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"name": "snowflake__create_table_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n\n  {%- if relation.is_iceberg_format and not adapter.behavior.enable_iceberg_materializations.no_warn %}\n    {% do exceptions.raise_compiler_error('Was unable to create model as Iceberg Table Format. Please set the `enable_iceberg_materializations` behavior flag to True in your dbt_project.yml. For more information, go to https://docs.getdbt.com/reference/resource-configs/snowflake-configs#iceberg-table-format') %}\n  {%- endif %}\n\n  {%- set materialization_prefix = relation.get_ddl_prefix_for_create(config.model.config, temporary) -%}\n  {%- set alter_prefix = relation.get_ddl_prefix_for_alter() -%}\n\n  {# Generate DDL/DML #}\n  {%- if language == 'sql' -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {{ materialization_prefix }} table {{ relation }}\n        {%- if relation.is_iceberg_format %}\n          {#\n            Valid DDL in CTAS statements. Plain create statements have a different order.\n            https://docs.snowflake.com/en/sql-reference/sql/create-iceberg-table\n          #}\n          {{ relation.get_iceberg_ddl_options(config.model.config) }}\n        {%- endif -%}\n\n        {%- set contract_config = config.get('contract') -%}\n        {%- if contract_config.enforced -%}\n          {{ get_assert_columns_equivalent(sql) }}\n          {{ get_table_columns_and_constraints() }}\n          {% set compiled_code = get_select_subquery(compiled_code) %}\n        {% endif %}\n        {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from (\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter {{ alter_prefix }} table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary %}\n        alter {{ alter_prefix }} table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {%- if relation.is_iceberg_format %}\n      {% do exceptions.raise_compiler_error('Iceberg is incompatible with Python models. Please use a SQL model for the iceberg format.') %}\n    {%- endif %}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, table_type=relation.get_ddl_prefix_for_create(config.model.config, temporary)) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.706144, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_view_sql": {"name": "snowflake__get_drop_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_view_sql", "macro_sql": "{% macro snowflake__get_drop_view_sql(relation) %}\n    drop view if exists {{ relation }} cascade\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.706264, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_view_sql": {"name": "snowflake__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_view_sql", "macro_sql": "{% macro snowflake__get_replace_view_sql(relation, sql) %}\n    {{ snowflake__create_view_as(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7064, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_view_sql": {"name": "snowflake__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_view_sql", "macro_sql": "{%- macro snowflake__get_rename_view_sql(relation, new_name) -%}\n    /*\n    Rename or move a view to the new name.\n\n    Args:\n        relation: SnowflakeRelation - relation to be renamed\n        new_name: Union[str, SnowflakeRelation] - new name for `relation`\n            if providing a string, the default database/schema will be used if that string is just an identifier\n            if providing a SnowflakeRelation, `render` will be used to produce a fully qualified name\n    Returns: templated string\n    */\n    alter view {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.706563, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag": {"name": "snowflake__create_view_as_with_temp_flag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro_sql": "{% macro snowflake__create_view_as_with_temp_flag(relation, sql, is_temporary=False) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} {% if is_temporary -%}\n    temporary\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7074711, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"name": "snowflake__create_view_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {{ snowflake__create_view_as_with_temp_flag(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.707581, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_or_replace_view": {"name": "snowflake__create_or_replace_view", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_view", "macro_sql": "{% macro snowflake__create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.708322, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql": {"name": "snowflake__get_drop_dynamic_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/drop.sql", "original_file_path": "macros/relations/dynamic_table/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro_sql": "{% macro snowflake__get_drop_dynamic_table_sql(relation) %}\n    drop dynamic table if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.708433, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql": {"name": "snowflake__get_replace_dynamic_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/replace.sql", "original_file_path": "macros/relations/dynamic_table/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql", "macro_sql": "{% macro snowflake__get_replace_dynamic_table_sql(relation, sql) -%}\n{#-\n--  Produce DDL that replaces a dynamic table with a new dynamic table\n--\n--  Args:\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Globals:\n--  - config: NodeConfig - contains the attribution required to produce a SnowflakeDynamicTableConfig\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic table.\n-#}\n\n    {%- set dynamic_table = relation.from_config(config.model) -%}\n\n    {%- if dynamic_table.catalog.table_format == 'iceberg' -%}\n        {{ _get_replace_dynamic_iceberg_table_as_sql(dynamic_table, relation, sql) }}\n    {%- else -%}\n        {{ _get_replace_dynamic_standard_table_as_sql(dynamic_table, relation, sql) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake._get_replace_dynamic_iceberg_table_as_sql", "macro.dbt_snowflake._get_replace_dynamic_standard_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7089431, "supported_languages": null}, "macro.dbt_snowflake._get_replace_dynamic_standard_table_as_sql": {"name": "_get_replace_dynamic_standard_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/replace.sql", "original_file_path": "macros/relations/dynamic_table/replace.sql", "unique_id": "macro.dbt_snowflake._get_replace_dynamic_standard_table_as_sql", "macro_sql": "{% macro _get_replace_dynamic_standard_table_as_sql(dynamic_table, relation, sql) -%}\n{#-\n--  Produce DDL that replaces a standard dynamic table with a new standard dynamic table\n--\n--  This follows the syntax outlined here:\n--  https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#syntax\n--\n--  Args:\n--  - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic standard table.\n-#}\n\n    create or replace dynamic table {{ relation }}\n        target_lag = '{{ dynamic_table.target_lag }}'\n        warehouse = {{ dynamic_table.snowflake_warehouse }}\n        {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n        {{ optional('initialize', dynamic_table.initialize) }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.709184, "supported_languages": null}, "macro.dbt_snowflake._get_replace_dynamic_iceberg_table_as_sql": {"name": "_get_replace_dynamic_iceberg_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/replace.sql", "original_file_path": "macros/relations/dynamic_table/replace.sql", "unique_id": "macro.dbt_snowflake._get_replace_dynamic_iceberg_table_as_sql", "macro_sql": "{% macro _get_replace_dynamic_iceberg_table_as_sql(dynamic_table, relation, sql) -%}\n{#-\n--  Produce DDL that replaces a dynamic iceberg table with a new dynamic iceberg table\n--\n--  This follows the syntax outlined here:\n--  https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#create-dynamic-iceberg-table\n--\n--  Args:\n--  - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic iceberg table.\n-#}\n\n    create or replace dynamic iceberg table {{ relation }}\n        target_lag = '{{ dynamic_table.target_lag }}'\n        warehouse = {{ dynamic_table.snowflake_warehouse }}\n        {{ optional('external_volume', dynamic_table.catalog.external_volume) }}\n        {{ optional('catalog', dynamic_table.catalog.name) }}\n        base_location = '{{ dynamic_table.catalog.base_location }}'\n        {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n        {{ optional('initialize', dynamic_table.initialize) }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7095292, "supported_languages": null}, "macro.dbt_snowflake.snowflake__describe_dynamic_table": {"name": "snowflake__describe_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/describe.sql", "original_file_path": "macros/relations/dynamic_table/describe.sql", "unique_id": "macro.dbt_snowflake.snowflake__describe_dynamic_table", "macro_sql": "{% macro snowflake__describe_dynamic_table(relation) %}\n{#-\n--  Get all relevant metadata about a dynamic table\n--\n--  Args:\n--  - relation: SnowflakeRelation - the relation to describe\n--  Returns:\n--      A dictionary with one or two entries depending on whether iceberg is enabled:\n--      - dynamic_table: the metadata associated with a standard dynamic table\n--      - catalog: the metadata associated with the iceberg catalog\n-#}\n    {%- set _dynamic_table_sql -%}\n        show dynamic tables\n            like '{{ relation.identifier }}'\n            in schema {{ relation.database }}.{{ relation.schema }}\n        ;\n        select\n            \"name\",\n            \"schema_name\",\n            \"database_name\",\n            \"text\",\n            \"target_lag\",\n            \"warehouse\",\n            \"refresh_mode\"\n        from table(result_scan(last_query_id()))\n    {%- endset %}\n    {% set results = {'dynamic_table': run_query(_dynamic_table_sql)} %}\n\n    {% if adapter.behavior.enable_iceberg_materializations.no_warn %}\n        {% set _ = results.update({'catalog': run_query(_get_describe_iceberg_catalog_sql(relation))}) %}\n    {% endif %}\n\n    {% do return(results) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_snowflake._get_describe_iceberg_catalog_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7100768, "supported_languages": null}, "macro.dbt_snowflake._get_describe_iceberg_catalog_sql": {"name": "_get_describe_iceberg_catalog_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/describe.sql", "original_file_path": "macros/relations/dynamic_table/describe.sql", "unique_id": "macro.dbt_snowflake._get_describe_iceberg_catalog_sql", "macro_sql": "{% macro _get_describe_iceberg_catalog_sql(relation) %}\n{#-\n--  Produce DQL that returns all relevant metadata about an iceberg catalog\n--\n--  Args:\n--  - relation: SnowflakeRelation - the relation to describe\n--  Returns:\n--      A valid DQL statement that will return metadata associated with an iceberg catalog\n-#}\n    show iceberg tables\n        like '{{ relation.identifier }}'\n        in schema {{ relation.database }}.{{ relation.schema }}\n    ;\n    select\n        \"catalog_name\",\n        \"external_volume_name\",\n        \"base_location\"\n    from table(result_scan(last_query_id()))\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.710214, "supported_languages": null}, "macro.dbt_snowflake.snowflake__refresh_dynamic_table": {"name": "snowflake__refresh_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/refresh.sql", "original_file_path": "macros/relations/dynamic_table/refresh.sql", "unique_id": "macro.dbt_snowflake.snowflake__refresh_dynamic_table", "macro_sql": "{% macro snowflake__refresh_dynamic_table(relation) -%}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n\n    alter dynamic table {{ relation }} refresh\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7103639, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql": {"name": "snowflake__get_alter_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/alter.sql", "original_file_path": "macros/relations/dynamic_table/alter.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_alter_dynamic_table_as_sql(\n    existing_relation,\n    configuration_changes,\n    target_relation,\n    sql\n) -%}\n    {{- log('Applying ALTER to: ' ~ existing_relation) -}}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{- get_replace_sql(existing_relation, target_relation, sql) -}}\n\n    {% else %}\n\n        {%- set target_lag = configuration_changes.target_lag -%}\n        {%- if target_lag -%}{{- log('Applying UPDATE TARGET_LAG to: ' ~ existing_relation) -}}{%- endif -%}\n        {%- set snowflake_warehouse = configuration_changes.snowflake_warehouse -%}\n        {%- if snowflake_warehouse -%}{{- log('Applying UPDATE WAREHOUSE to: ' ~ existing_relation) -}}{%- endif -%}\n\n        alter dynamic table {{ existing_relation }} set\n            {% if target_lag %}target_lag = '{{ target_lag.context }}'{% endif %}\n            {% if snowflake_warehouse %}warehouse = {{ snowflake_warehouse.context }}{% endif %}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7109802, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql": {"name": "snowflake__get_create_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/create.sql", "original_file_path": "macros/relations/dynamic_table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_create_dynamic_table_as_sql(relation, sql) -%}\n{#-\n--  Produce DDL that creates a dynamic table\n--\n--  Args:\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Globals:\n--  - config: NodeConfig - contains the attribution required to produce a SnowflakeDynamicTableConfig\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic table.\n-#}\n\n    {%- set dynamic_table = relation.from_config(config.model) -%}\n\n    {%- if dynamic_table.catalog.table_format == 'iceberg' -%}\n        {{ _get_create_dynamic_iceberg_table_as_sql(dynamic_table, relation, sql) }}\n    {%- else -%}\n        {{ _get_create_dynamic_standard_table_as_sql(dynamic_table, relation, sql) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake._get_create_dynamic_iceberg_table_as_sql", "macro.dbt_snowflake._get_create_dynamic_standard_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7115011, "supported_languages": null}, "macro.dbt_snowflake._get_create_dynamic_standard_table_as_sql": {"name": "_get_create_dynamic_standard_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/create.sql", "original_file_path": "macros/relations/dynamic_table/create.sql", "unique_id": "macro.dbt_snowflake._get_create_dynamic_standard_table_as_sql", "macro_sql": "{% macro _get_create_dynamic_standard_table_as_sql(dynamic_table, relation, sql) -%}\n{#-\n--  Produce DDL that creates a standard dynamic table\n--\n--  This follows the syntax outlined here:\n--  https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#syntax\n--\n--  Args:\n--  - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic standard table.\n-#}\n\n    create dynamic table {{ relation }}\n        target_lag = '{{ dynamic_table.target_lag }}'\n        warehouse = {{ dynamic_table.snowflake_warehouse }}\n        {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n        {{ optional('initialize', dynamic_table.initialize) }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.711756, "supported_languages": null}, "macro.dbt_snowflake._get_create_dynamic_iceberg_table_as_sql": {"name": "_get_create_dynamic_iceberg_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/create.sql", "original_file_path": "macros/relations/dynamic_table/create.sql", "unique_id": "macro.dbt_snowflake._get_create_dynamic_iceberg_table_as_sql", "macro_sql": "{% macro _get_create_dynamic_iceberg_table_as_sql(dynamic_table, relation, sql) -%}\n{#-\n--  Produce DDL that creates a dynamic iceberg table\n--\n--  This follows the syntax outlined here:\n--  https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#create-dynamic-iceberg-table\n--\n--  Args:\n--  - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic iceberg table.\n-#}\n\n    create dynamic iceberg table {{ relation }}\n        target_lag = '{{ dynamic_table.target_lag }}'\n        warehouse = {{ dynamic_table.snowflake_warehouse }}\n        {{ optional('external_volume', dynamic_table.catalog.external_volume) }}\n        {{ optional('catalog', dynamic_table.catalog.name) }}\n        base_location = '{{ dynamic_table.catalog.base_location }}'\n        {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n        {{ optional('initialize', dynamic_table.initialize) }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7121532, "supported_languages": null}, "macro.dbt_snowflake.optional": {"name": "optional", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/optional.sql", "original_file_path": "macros/utils/optional.sql", "unique_id": "macro.dbt_snowflake.optional", "macro_sql": "{% macro optional(name, value, quote_char = '') %}\n{#-\n--  Insert optional DDL parameters only when their value is provided; makes DDL statements more readable\n--\n--  Args:\n--  - name: the name of the DDL option\n--  - value: the value of the DDL option, may be None\n--  - quote_char: the quote character to use (e.g. string), leave blank if unnecessary (e.g. integer or bool)\n--  Returns:\n--      If the value is not None (e.g. provided by the user), return the option setting DDL\n--      If the value is None, return an empty string\n-#}\n{% if value is not none %}{{ name }} = {{ quote_char }}{{ value }}{{ quote_char }}{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.712403, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"name": "snowflake__current_timestamp", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7125618, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"name": "snowflake__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.712689, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"name": "snowflake__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.datavault4dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.712767, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"name": "snowflake__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.datavault4dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.712842, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"name": "snowflake__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.datavault4dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7129369, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"name": "snowflake__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.713079, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_snowflake.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.713234, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    {% if type|upper == \"GEOMETRY\" -%}\n        try_to_geometry({{field}})\n    {% elif type|upper == \"GEOGRAPHY\" -%}\n        try_to_geography({{field}})\n    {% elif type|upper != \"VARIANT\" -%}\n        {#-- Snowflake try_cast does not support casting to variant, and expects the field as a string --#}\n        {% set field_as_string =  dbt.string_literal(field) if field is number else field %}\n        try_cast({{field_as_string}} as {{type}})\n    {% else -%}\n        {{ adapter.dispatch('cast', 'dbt')(field, type) }}\n    {% endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.cast", "macro.dbt_snowflake.snowflake__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.713711, "supported_languages": null}, "macro.dbt_snowflake.snowflake__cast": {"name": "snowflake__cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__cast", "macro_sql": "{% macro snowflake__cast(field, type) %}\n    {% if (type|upper == \"GEOGRAPHY\") -%}\n        to_geography({{field}})\n    {% elif (type|upper == \"GEOMETRY\") -%}\n        to_geometry({{field}})\n    {% else -%}\n        cast({{field}} as {{type}})\n    {% endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.714002, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"name": "snowflake__bool_or", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_snowflake.snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.714108, "supported_languages": null}, "macro.dbt_snowflake.snowflake__array_construct": {"name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_snowflake.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.714239, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7148328, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.714968, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.715074, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.715177, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.715279, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.715492, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.71575, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.715959, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7162602, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n\t{% set source_unique_key = (\"DBT_INTERNAL_DEST.\" ~ columns.dbt_valid_to) | trim %}\n\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\tand ({{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null)\n\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.716813, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7183099, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7184289, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.718582, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.71924, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.719357, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.719479, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.720408, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.721421, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.72289, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.723095, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.723211, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.723279, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.723383, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.723466, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.723626, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7238011, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n    {% if strategy.hard_deletes == 'new_record' %}\n        {% set new_scd_id = snapshot_hash_arguments([columns.dbt_scd_id, snapshot_get_time()]) %}\n    {% endif %}\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n\t\t{% set source_unique_key = columns.dbt_valid_to | trim %}\n\t\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\n\t\t{# The exact equals semantics between NULL values depends on the current behavior flag set. Also, update records if the source field is null #}\n                ( {{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null )\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and ({{ strategy.row_changed }})\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {%- for col in source_sql_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            {{ new_scd_id }} as {{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments", "macro.dbt.snapshot_get_time", "macro.dbt.unique_key_fields", "macro.dbt.equals", "macro.dbt.get_dbt_valid_to_current", "macro.dbt.unique_key_join_on", "macro.dbt.unique_key_is_null", "macro.dbt.unique_key_is_not_null", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.726152, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7263129, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.get_dbt_valid_to_current"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7266638, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7269602, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7273548, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.727652, "supported_languages": null}, "macro.dbt.get_dbt_valid_to_current": {"name": "get_dbt_valid_to_current", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_dbt_valid_to_current", "macro_sql": "{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.727843, "supported_languages": null}, "macro.dbt.unique_key_fields": {"name": "unique_key_fields", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_fields", "macro_sql": "{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.728076, "supported_languages": null}, "macro.dbt.unique_key_join_on": {"name": "unique_key_join_on", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_join_on", "macro_sql": "{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n\t    {% set source_unique_key = (identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {% set target_unique_key = (from_identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {{ equals(source_unique_key, target_unique_key) }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.728461, "supported_languages": null}, "macro.dbt.unique_key_is_null": {"name": "unique_key_is_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_null", "macro_sql": "{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.728606, "supported_languages": null}, "macro.dbt.unique_key_is_not_null": {"name": "unique_key_is_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_not_null", "macro_sql": "{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7287512, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.731541, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.732987, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.733384, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.733591, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.733747, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.734158, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.734386, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.734646, "supported_languages": null}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7356858, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.736799, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.737063, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.737238, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.738154, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7383292, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7387679, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7401888, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.741631, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.742226, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7425869, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.743026, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.743189, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.743671, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.744478, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set source_unique_key = (\"DBT_INTERNAL_SOURCE.\" ~ unique_key) | trim %}\n\t    {% set target_unique_key = (\"DBT_INTERNAL_DEST.\" ~ unique_key) | trim %}\n\t    {% set unique_key_match = equals(source_unique_key, target_unique_key) | trim %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7456808, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.745864, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is string %}\n        {% set unique_key = [unique_key] %}\n        {% endif %}\n\n        {%- set unique_key_str = unique_key|join(', ') -%}\n\n        delete from {{ target }}\n        where ({{ unique_key_str }}) in (\n            select distinct {{ unique_key_str }}\n            from {{ source }}\n        )\n        {%- if incremental_predicates %}\n            {% for predicate in incremental_predicates %}\n                and {{ predicate }}\n            {% endfor %}\n        {%- endif -%};\n\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.74635, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7465322, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7469661, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.747382, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.74785, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.748018, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.748149, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.748349, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7484758, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.748677, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.748807, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.748986, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.749115, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7492218, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.749354, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.749463, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.749653, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.752507, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.75339, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.75421, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7550259, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.755595, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.755768, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.755852, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.756054, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7561758, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7579882, "supported_languages": ["sql"]}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.759726, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.760428, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.761044, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.761207, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7615411, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.761688, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.761792, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.761893, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7619772, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7620869, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.76217, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.76249, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.76262, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7634518, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.763745, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.764006, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.764317, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7644951, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.764705, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.764967, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7651432, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.765456, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.765718, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7658439, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.765984, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.76612, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.766529, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation.type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.767392, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.767633, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7678049, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.76799, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7681339, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.768343, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.768487, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.768808, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7691038, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.76926, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.769469, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.769687, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.769872, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.770132, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.770428, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.770647, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.770805, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7710028, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7710888, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.771276, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7714298, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7716422, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.771738, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7719219, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.772025, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.772397, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.772524, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7727349, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7728431, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.773034, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7731352, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.773674, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.77376, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7741172, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.774245, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.774347, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7752268, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.775496, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7757251, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.775903, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7759879, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7761788, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.77629, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.776476, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.776578, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.77702, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.777156, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7774599, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7779179, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7782469, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.778381, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.778507, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.77868, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.778765, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.779132, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.779234, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7800472, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.780185, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7803478, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.780532, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7806342, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.780892, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.781006, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.781138, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.781457, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.781665, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7818701, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.782036, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7823849, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7832909, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7836878, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.783894, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.784404, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.78525, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.785742, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.785898, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.786061, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.786123, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.786495, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.78689, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.787046, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.787294, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7875168, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.787724, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.787946, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.78806, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.788233, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7883189, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.788625, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.788903, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.789034, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.789398, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7895749, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.789649, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7898629, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.790028, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7901912, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.790251, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7904398, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.790538, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.790734, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.790829, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.791147, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7914429, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.791662, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.791779, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.791981, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.792085, "supported_languages": null}, "macro.dbt.equals": {"name": "equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.equals", "macro_sql": "{% macro equals(expr1, expr2) %}\n    {{ return(adapter.dispatch('equals', 'dbt') (expr1, expr2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7923079, "supported_languages": null}, "macro.dbt.default__equals": {"name": "default__equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.default__equals", "macro_sql": "{% macro default__equals(expr1, expr2) -%}\n{%- if adapter.behavior.enable_truthy_nulls_equals_macro.no_warn %}\n    case when (({{ expr1 }} = {{ expr2 }}) or ({{ expr1 }} is null and {{ expr2 }} is null))\n        then 0\n        else 1\n    end = 0\n{%- else -%}\n    ({{ expr1 }} = {{ expr2 }})\n{%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7925088, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.792703, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7928278, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7929978, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.793108, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.793303, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.79344, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.793618, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7936919, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.793885, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.793983, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.794157, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.794231, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7947352, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.794838, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.794951, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7950568, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.795176, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7952929, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.795406, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.795528, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.795638, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.795742, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.795851, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.795949, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7961018, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.796202, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.796397, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.796507, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.796706, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7967958, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.797036, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.797228, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.797342, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.797598, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7977128, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.797864, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7980568, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7981608, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.798431, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7986, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.798798, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7988899, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.799111, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.799249, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.799413, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.79954, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.7998662, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.799968, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.800069, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.800151, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.80044, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.800559, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.800617, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.800731, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.800853, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.801193, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.80129, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.801398, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.801686, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.801825, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.801922, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.80203, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.802117, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.80261, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.802785, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {#-- This ensures microbatch batches get unique temp relations to avoid clobbering --#}\n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.803041, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.803238, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.803412, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.803628, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.803754, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.803875, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.804044, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8044071, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.804563, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8046741, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8049972, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.805269, "supported_languages": null}, "macro.dbt.collect_freshness_custom_sql": {"name": "collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness_custom_sql", "macro_sql": "{% macro collect_freshness_custom_sql(source, loaded_at_query) %}\n  {{ return(adapter.dispatch('collect_freshness_custom_sql', 'dbt')(source, loaded_at_query))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness_custom_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8054101, "supported_languages": null}, "macro.dbt.default__collect_freshness_custom_sql": {"name": "default__collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness_custom_sql", "macro_sql": "{% macro default__collect_freshness_custom_sql(source, loaded_at_query) %}\n  {% call statement('collect_freshness_custom_sql', fetch_result=True, auto_begin=False) -%}\n  with source_query as (\n    {{ loaded_at_query }}\n  )\n  select\n    (select * from source_query) as max_loaded_at,\n    {{ current_timestamp() }} as snapshotted_at\n  {% endcall %}\n  {{ return(load_result('collect_freshness_custom_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8056378, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.805845, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.806009, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.806836, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8069189, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.807033, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.807276, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8075159, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.807662, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.807745, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.807898, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.808039, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.808219, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.808377, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.808558, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8090088, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.809154, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.809324, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.809483, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.810405, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8106759, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.81081, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ sql }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.810945, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.811261, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.811379, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.811522, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.81164, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8118231, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.812139, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.812757, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.812941, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8130822, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8132591, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.813386, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8135, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.813625, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.813798, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8139882, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.814204, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.814332, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.81445, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.81458, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.814692, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8148081, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.814917, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.81506, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.815181, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.81599, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8161001, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.816324, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.816479, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8166242, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8167481, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.817593, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8178382, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8179681, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.818203, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.818361, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.818801, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.818975, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.819524, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.821196, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8215868, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8223271, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.822475, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8225431, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.823046, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8231528, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')).render() -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.823701, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.823977, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.824388, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.824718, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.824781, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8251069, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8252769, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.825564, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.825782, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.826, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.826333, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.826592, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.827042, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.827269, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.827509, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.827965, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.828691, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.829207, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.829996, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.830362, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.830604, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.830977, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.831585, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.831868, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8321788, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.832522, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.832841, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.833133, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8333912, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.833733, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      {% if group_by_columns|length() == 0 %}\n        where {{ column_name }} is not null\n        limit 1\n      {% endif %}\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8343081, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.83461, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.835029, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8353012, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8355331, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.835789, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8360279, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.836343, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as {{ dbt.type_numeric() }}) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.836949, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.837329, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.837926, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns, exclude_columns, precision)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.838767, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n\n{%- if compare_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both a compare and an ignore list were provided to the `equality` macro. Only one is allowed\") }}\n{%- endif -%}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{# Ensure there are no extra columns in the compare_model vs model #}\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- do dbt_utils._is_ephemeral(compare_model, 'test_equality') -%}\n\n    {%- set model_columns = adapter.get_columns_in_relation(model) -%}\n    {%- set compare_model_columns = adapter.get_columns_in_relation(compare_model) -%}\n\n\n    {%- if exclude_columns -%}\n        {#-- Lower case ignore columns for easier comparison --#}\n        {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n        {# Filter out the excluded columns #}\n        {%- set include_columns = [] %}\n        {%- set include_model_columns = [] %}\n        {%- for column in model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n        {%- for column in compare_model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_model_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n\n        {%- set compare_columns_set = set(include_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(include_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- else -%}\n        {%- set compare_columns_set = set(model_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(compare_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- endif -%}\n\n    {% if compare_columns_set != compare_model_columns_set %}\n        {{ exceptions.raise_compiler_error(compare_model ~\" has less columns than \" ~ model ~ \", please ensure they have the same columns or use the `compare_columns` or `exclude_columns` arguments to subset them.\") }}\n    {% endif %}\n\n\n{% endif %}\n\n{%- if not precision -%}\n    {%- if not compare_columns -%}\n        {# \n            You cannot get the columns in an ephemeral model (due to not existing in the information schema),\n            so if the user does not provide an explicit list of columns we must error in the case it is ephemeral\n        #}\n        {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n        {%- set compare_columns = adapter.get_columns_in_relation(model)-%}\n\n        {%- if exclude_columns -%}\n            {#-- Lower case ignore columns for easier comparison --#}\n            {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n            {# Filter out the excluded columns #}\n            {%- set include_columns = [] %}\n            {%- for column in compare_columns -%}\n                {%- if column.name | lower not in exclude_columns -%}\n                    {% do include_columns.append(column) %}\n                {%- endif %}\n            {%- endfor %}\n\n            {%- set compare_columns = include_columns | map(attribute='quoted') %}\n        {%- else -%} {# Compare columns provided #}\n            {%- set compare_columns = compare_columns | map(attribute='quoted') %}\n        {%- endif -%}\n    {%- endif -%}\n\n    {% set compare_cols_csv = compare_columns | join(', ') %}\n\n{% else %} {# Precision required #}\n    {#-\n        If rounding is required, we need to get the types, so it cannot be ephemeral even if they provide column names\n    -#}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set columns = adapter.get_columns_in_relation(model) -%}\n\n    {% set columns_list = [] %}\n    {%- for col in columns -%}\n        {%- if (\n                (col.name|lower in compare_columns|map('lower') or not compare_columns) and\n                (col.name|lower not in exclude_columns|map('lower') or not exclude_columns)\n                ) -%}\n            {# Databricks double type is not picked up by any number type checks in dbt #}\n            {%- if col.is_float() or col.is_numeric() or col.data_type == 'double' -%}\n                {# Cast is required due to postgres not having round for a double precision number #}\n                {%- do columns_list.append('round(cast(' ~ col.quoted ~ ' as ' ~ dbt.type_numeric() ~ '),' ~ precision ~ ') as ' ~ col.quoted) -%}\n            {%- else -%} {# Non-numeric type #}\n                {%- do columns_list.append(col.quoted) -%}\n            {%- endif -%}\n        {% endif %}\n    {%- endfor -%}\n\n    {% set compare_cols_csv = columns_list | join(', ') %}\n\n{% endif %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_numeric", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.841365, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.841641, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.841844, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.842426, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.843412, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8435981, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.843709, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.844009, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.84422, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.844351, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.844527, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.844646, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{% if not string %}\n{{ return('') }}\n{% endif %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.845144, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.845624, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.845972, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8463628, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8465228, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8467672, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.846994, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.847394, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.847596, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8478231, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.848153, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.848707, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8490171, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8493, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.849427, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.849772, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8501031, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.850664, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.850925, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.851112, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.851629, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8526132, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', quote_identifiers=False) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, quote_identifiers)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.853158, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', quote_identifiers=False) -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    {%- set current_col_name = adapter.quote(col.column) if quote_identifiers else col.column -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ adapter.quote(exclude_col) if quote_identifiers else exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ adapter.quote(field_name) if quote_identifiers else field_name  }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(current_col_name) }}\n             {% else %}\n           {{ current_col_name }}\n             {% endif %}\n           as {{ cast_to }}) as {{ adapter.quote(value_name) if quote_identifiers else value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.854398, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8545978, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.854692, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.855447, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.857727, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.857943, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.858109, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8585322, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.85869, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }} as tt\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.858817, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.858947, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8590631, "supported_languages": null}, "macro.dbt_utils.databricks__deduplicate": {"name": "databricks__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.databricks__deduplicate", "macro_sql": "\n{%- macro databricks__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.859185, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.859303, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8595352, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.859691, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.859918, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.860277, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.860492, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.860714, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.861322, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8615649, "supported_languages": null}, "macro.dbt_utils.redshift__get_tables_by_pattern_sql": {"name": "redshift__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.redshift__get_tables_by_pattern_sql", "macro_sql": "{% macro redshift__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% set sql %}\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from \"{{ database }}\".\"information_schema\".\"tables\"\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n        union all\n        select distinct\n            schemaname as {{ adapter.quote('table_schema') }},\n            tablename as {{ adapter.quote('table_name') }},\n            'external' as {{ adapter.quote('table_type') }}\n        from svv_external_tables\n        where redshift_database_name = '{{ database }}'\n        and schemaname ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n    {% endset %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8620539, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8625238, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8628612, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8633878, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.864367, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.864939, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.865512, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.865797, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.866272, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8665862, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8669188, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.867052, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.86729, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.86768, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.867955, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.868371, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.868604, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.868704, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8688, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8688939, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.869193, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.869824, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.870142, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.87033, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.870713, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.87125, "supported_languages": null}, "macro.datavault_extension.autoexec": {"name": "autoexec", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/autoexec.sql", "original_file_path": "macros/autoexec.sql", "unique_id": "macro.datavault_extension.autoexec", "macro_sql": "{% macro autoexec() %}\n\n{{ print_current() }}\n\n{{ create_extra_schemas() }} \n\n{{ create_table_meta_hwm() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.datavault_extension.print_current", "macro.datavault_extension.create_extra_schemas", "macro.datavault_extension.create_table_meta_hwm"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.871404, "supported_languages": null}, "macro.datavault_extension.is_something": {"name": "is_something", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/is_checks.sql", "original_file_path": "macros/is_checks.sql", "unique_id": "macro.datavault_extension.is_something", "macro_sql": "{%- macro is_something(obj) -%}\n    {%- if obj is not none and obj is defined and obj -%}\n        {%- do return(true) -%}\n    {%- else -%}\n        {%- do return(false) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.871706, "supported_languages": null}, "macro.datavault_extension.is_list": {"name": "is_list", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/is_checks.sql", "original_file_path": "macros/is_checks.sql", "unique_id": "macro.datavault_extension.is_list", "macro_sql": "{%- macro is_list(obj, empty_is_false=false) -%}\n    {%- if obj is iterable and obj is not string and obj is not mapping -%}\n        {%- if obj is none and obj is undefined and not obj and empty_is_false -%}\n            {%- do return(false) -%}\n        {%- endif -%}\n        {%- do return(true) -%}\n    {%- else -%}\n        {%- do return(false) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.872003, "supported_languages": null}, "macro.datavault_extension.is_nothing": {"name": "is_nothing", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/is_checks.sql", "original_file_path": "macros/is_checks.sql", "unique_id": "macro.datavault_extension.is_nothing", "macro_sql": "{%- macro is_nothing(obj) -%}\n    {%- if obj is none or obj is undefined or not obj -%}\n        {%- do return(true) -%}\n    {%- else -%}\n        {%- do return(false) -%}\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8721862, "supported_languages": null}, "macro.datavault_extension.yedi_test": {"name": "yedi_test", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/tables/yedi_test.sql", "original_file_path": "macros/tables/yedi_test.sql", "unique_id": "macro.datavault_extension.yedi_test", "macro_sql": "{%- macro yedi_test(source_model_source, source_model_target, load_type, src_ldts = 'ldts', meta_load_name= 'meta_load' ) -%}\n    \n    \n    {{- adapter.dispatch('yedi_test', 'datavault_extension')(source_model_source=source_model_source,\n                                        source_model_target=source_model_target,\n                                        load_type=load_type,\n                                        src_ldts = src_ldts,\n                                        meta_load_name=meta_load_name\n) -}}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault_extension.snowflake__yedi_test"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8741581, "supported_languages": null}, "macro.datavault_extension.snowflake__yedi_test": {"name": "snowflake__yedi_test", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/tables/yedi_test.sql", "original_file_path": "macros/tables/yedi_test.sql", "unique_id": "macro.datavault_extension.snowflake__yedi_test", "macro_sql": "{%- macro snowflake__yedi_test(\n                source_model_source,\n                source_model_target,\n                load_type,\n                src_ldts,\n                meta_load_name\n                ) -%}\n\n\n{%- set load_attrib_list = datavault_extension.get_attrib_list('load', source_model_target,'attrib', false) -%} \n{#{ log(\"load_attrib_list: \" + load_attrib_list| string, True) }#}\n\n{%- set load_attrib_list_without_coalesce = datavault_extension.get_attrib_list('load', source_model_target,'attrib', false) -%} \n{#{ log(\"load_attrib_list_without_coalesce: \" + load_attrib_list_without_coalesce| string, True) }#}\n{%- set object_list = datavault_extension.get_object_list(source_model_target) -%} \n{%- set ldts = 'ldts' -%} \n{%- set src_ldts = src_ldts -%} \n{%- set unknown_key = datavault_extension.get_dict_hash_value(\"unknown_key\") -%}    \nWITH\ncte_load_date as\n(\n  SELECT file_ldts as {{ ldts }}\n  FROM {{ ref(meta_load_name) }}\n  WHERE table_name = '{{source_model_source}}'\n  qualify max({{ ldts }}) OVER (PARTITION BY TABLE_NAME) = {{ ldts }}\n),\ncte_load AS\n(\n    SELECT\n        {{ datavault_extension.format_list(load_attrib_list, 1) }}\n        , {{ src_ldts }} as {{ ldts }}\n    FROM {{ ref(source_model_source) }}\n    where is_check_ok\n)\n{%- set sat_list = [] -%} \n{%- set bo_attrib_list = [] -%} \n{%- set attrib_list = [] -%} \n{%- set total_attrib_dict = {} -%} \n{%- set hk_object = \"\" -%}\n\n{%- for object in object_list -%}\n    {%- set bo_total_attrib_dict = {} -%} \n    {%- set businessobject_name = '' -%}\n    {%- set attribut_output_string = '' -%}\n    {%- set hashkey_output_string = '' -%}\n    {%- if object.endswith('_h') -%}\n        {%- set type = 'hub' -%}\n        {%- set businessobject_name = object.replace('_h','') -%}\n        {%- set hk_object = 'hk_' + object -%}\n        {%- set bo_attrib_list = datavault_extension.get_attrib_list(object, source_model_target) -%}     \n        {%- if  bo_attrib_list | length == 1 %}{#%#### if we have a combined business-key two or more BK->HK we take them from a satellite  #####%#}\n            {%- set attribut_output_string = \"IFF(\" + businessobject_name + \"_bk != '(unknown)', \" + businessobject_name + \"_bk, NULL) as \" + datavault_extension.format_list(bo_attrib_list, 1) -%}\n        {%- endif -%}\n        {%- set hashkey_output_string = object + \".\" + hk_object  -%} \n    {%- elif object.endswith('_l') -%}\n        {%- set type = 'link' -%}\n        {%- set businessobject_name = object.replace('_l','') -%}\n        {%- set hk_object = 'hk_' + object -%}\n        {%- set bo_attrib_list = datavault_extension.get_attrib_list(object, source_model_target) -%}\n        {%- if bo_attrib_list != [] %}     \n            {%- set attribut_output_string = datavault_extension.format_list(bo_attrib_list, 1)-%}\n        {%- endif %}     \n        {%- set hashkey_output_string = object + \".\" + hk_object  -%} \n\n    {%- elif object.endswith('_nhl') -%}\n        {%- set type = 'hlink' -%}\n        {%- set businessobject_name = object.replace('_nhl','') -%}\n        {%- set bo_attrib_list = datavault_extension.get_attrib_list(object, source_model_target) -%}\n        {%- if bo_attrib_list != [] %}     \n            {%- set attribut_output_string = datavault_extension.format_list(bo_attrib_list, 1)-%}\n        {%- endif -%}     \n    {%- endif -%}\n\n    {%- if  not (bo_attrib_list | length > 1 and type == 'hub') -%}\n        {%- for bo_attrib in bo_attrib_list -%}\n            {% set bo_total_attrib = {bo_attrib:('cte_' + object + \".\" + bo_attrib)} -%}  \n            {% set total_attrib = {bo_attrib:('cte_' + businessobject_name + \".\" + bo_attrib)} -%}  \n            {% set x = bo_total_attrib_dict.update(bo_total_attrib) -%}   \n            {% set x = total_attrib_dict.update(total_attrib) -%}   \n        {%- endfor %}\n        {#{log(\"total_attrib_dict: \" + total_attrib_dict|string, True)}#}\n    {%- endif -%}\n    {%- set sat_list = datavault_extension.get_satellite_list(object, source_model_target) -%}\n    {%- set has_satellites = (sat_list != []) %}\n, cte_{{ businessobject_name }} as\n( \n    {%- if has_satellites %}\n    with cte_{{object}} as\n    (\n    {%- endif %}\n        SELECT  \n        {%- if hashkey_output_string != \"\" %}\n            {{ hashkey_output_string }}\n        {%- endif %}\n        {%- if attribut_output_string != \"\" %}\n            {%- if hashkey_output_string != \"\" %},{%- endif %} {{ attribut_output_string }}\n            {%- endif %}\n        {%- if  type == 'hlink' %}\n        , cte_load_date.{{ldts}} as ldts\n        FROM cte_load_date\n        CROSS JOIN {{ ref(object) }} {{object}}\n        WHERE  {{object}}.{{ldts}} <= cte_load_date.{{ldts}}\n        {%- else %}\n        FROM {{ ref(object) }} {{object}}\n        {%- endif %}\n    {%- if has_satellites %}\n    )\n        {%- for sat in sat_list -%}\n            {%- set attrib_list = datavault_extension.get_attrib_list(sat, source_model_target) -%}  \n            \n            {%- for attrib in attrib_list -%}\n                {%- if not attrib in bo_total_attrib_dict -%}  \n                    {% set bo_total_attrib = {attrib:(\"cte_\" + sat + \".\" + attrib)} -%}  \n                    {% set y = bo_total_attrib_dict.update(bo_total_attrib) -%}   \n                {%- endif %}      \n                {%- if not attrib in total_attrib_dict -%}  \n                    {% set total_attrib = {attrib:('cte_' + businessobject_name + \".\" + attrib)} -%}  \n                    {% set y = total_attrib_dict.update(total_attrib) -%}   \n                {%- endif -%}      \n            {%- endfor %}\n    ,cte_{{ sat }} as\n    (\n        {%- if sat.endswith('_sts') or sat.endswith('_rts') -%}\n        SELECT * FROM \n        (\n        {%- endif  -%}\n        {%- if sat.endswith('_ms') -%}\n        WITH cte_{{ sat }}_date as\n        (\n            SELECT                       \n                  {{ hk_object }}\n                , {{ldts}}\n                , COALESCE(LEAD({{ldts}} - INTERVAL '1 MICROSECOND') OVER (PARTITION BY {{ hk_object }}  ORDER BY {{ldts}}),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) as ledts\n            FROM \n            (\n                SELECT distinct \n                      {{sat}}.{{ hk_object }}\n                    , {{sat}}.{{ldts}}\n                FROM {{ ref(sat) }} {{sat}}\n            )t\n        )\n        {%- endif  %}\n        SELECT    \n              cte_{{object}}.{{ hk_object }}  \n            {%- if attrib_list != [] %}\n            , {{ datavault_extension.format_list(attrib_list, 1) }}\n            {%- endif -%}\n            , {{sat}}.{{ldts}}\n             {%- if sat.endswith('sts')   -%}\n            , {{sat}}.cdc\n            {%- endif -%}\n            {%- if sat.endswith('_ms') -%}\n            , cte_{{ sat }}_date.ledts\n            {%- else -%}\n            , COALESCE(LEAD({{sat}}.{{ldts}} - INTERVAL '1 MICROSECOND') OVER (PARTITION BY cte_{{object}}.{{ hk_object }}  ORDER BY {{sat}}.{{ldts}}),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) as ledts\n            {%- endif %}\n        FROM cte_{{object}}\n        INNER JOIN {{ ref(sat) }} {{sat}}\n            ON cte_{{object}}.{{ hk_object }} = {{sat}}.{{ hk_object }}  \n            {%- if sat.endswith('_ms') %}\n        INNER JOIN cte_{{ sat }}_date            \n            ON  {{sat}}.{{ hk_object }} = cte_{{ sat }}_date.{{ hk_object }}  \n            AND {{sat}}.{{ ldts }} = cte_{{ sat }}_date.{{ ldts }}  \n            {%- endif -%}\n            {%- if sat.endswith('sts') or sat.endswith('rts') %}\n        )\n                {%- if sat.endswith('sts')  %}\n        WHERE cdc <> 'D'\n                {%- endif  %}\n            {%- else %}\n        WHERE {{sat}}.{{ hk_object }} <> '{{unknown_key}}'\n            {%- endif %}\n    )\n        {%- endfor %} \n    SELECT  \n        cte_{{object}}.{{ hk_object }}\n        {%- if bo_total_attrib_dict != [] %}\n            {%- for attribute in bo_total_attrib_dict %}\n        , {{bo_total_attrib_dict[attribute]}}\n            {%- endfor %}\n        {%- endif %}\n        , d.{{ldts}}\n    FROM cte_load_date d\n    CROSS JOIN cte_{{object}}\n    {%- for sat in sat_list %}\n    INNER JOIN  cte_{{ sat }}\n        ON cte_{{ sat }}.{{ hk_object }} = cte_{{object}}.{{ hk_object }}   \n        {%- if load_type | lower == \"full\" %}\n        AND d.{{ldts}} between cte_{{ sat }}.{{ldts}} AND cte_{{ sat }}.ledts\n        {%- else %}\n        AND d.{{ldts}} = cte_{{ sat }}.{{ldts}}\n        {%- endif %}\n    {%- endfor %} \n    {%- endif %}\n)\n{%- endfor -%} {# hub #}\n,\n{%- set target_out = [] %}\ncte_target as\n(   \n    SELECT \n    {%- for attrib in total_attrib_dict %}\n        {%- if not total_attrib_dict[attrib].split(\".\")[1].startswith('hk_')  -%}\n            {%- set x=target_out.append(total_attrib_dict[attrib]) -%} \n        {%- endif  %}\n    {%- endfor  %}\n    {{ datavault_extension.format_list(target_out, 1) }}\n    {%- set already_joined = [] -%} \n    {%- set link_list = datavault_extension.get_link_list(source_model_target) -%} \n    {%- if link_list != []  -%} \n         , cte_load_date.{{ ldts }}\n    FROM cte_load_date\n        {%- for link in link_list -%}\n            {%- set link_businessobject_name = link.replace('_l','').replace('_nhl','') -%}\n            {%- set hub_key_list = datavault_extension.get_attrib_list(link, source_model_target) %}    \n            {%- set sat_list = datavault_extension.get_satellite_list(link, source_model_target) %}\n            {%- set link_has_satellites = (sat_list != []) %} \n    INNER JOIN cte_{{link_businessobject_name}} \n            {%- set next_join = 'ON' %}\n            {%- if link_has_satellites or link.endswith('_nhl') %}\n                {%- set next_join = 'AND' %}\n        ON cte_{{link_businessobject_name}}.{{ldts}} = cte_load_date.{{ldts}}\n            {%- endif -%}\n            {%- for hub_key in hub_key_list -%}\n                {%- if hub_key.startswith(\"hk_\") -%}\n                    {%- set hub_object_name = hub_key.replace(\"hk_\", '').replace('_h','') -%}\n                    {%- set sat_list = datavault_extension.get_satellite_list(hub_object_name, source_model_target) %}\n                    \n                    {%- set hub_has_satellites = (sat_list != []) %} \n                    {%- if hub_object_name in already_joined %}\n        {{ next_join }} cte_{{link_businessobject_name}}.{{hub_key}} = cte_{{hub_object_name}}.{{hub_key}}\n                        {%- if hub_has_satellites %}\n        AND cte_{{hub_object_name}}.{{ldts}} = cte_load_date.{{ldts}} \n                        {%- endif -%}\n                    {%- endif -%}\n                    {#%- set s = already_joined.append(hub_object_name) %#}\n                {%- endif -%}\n            {%- endfor -%}\n            {%- for hub_key in hub_key_list -%}\n                {%- if hub_key.startswith(\"hk_\") -%}\n                    {%- set hub_object_name = hub_key.replace(\"hk_\", '').replace('_h','') -%}\n                    {%- set sat_list = datavault_extension.get_satellite_list(hub_object_name + '_h', source_model_target) %}\n                    {%- set hub_has_satellites = (sat_list != []) %} \n                    {%- if not hub_object_name in already_joined %}\n                        {%- set s = already_joined.append(hub_object_name) %}\n    INNER JOIN  cte_{{hub_object_name}} \n        ON cte_{{link_businessobject_name}}.{{hub_key}} = cte_{{hub_object_name}}.{{hub_key}}\n                        {%- if hub_has_satellites %}\n        AND cte_{{hub_object_name}}.{{ldts}} =  cte_load_date.{{ldts}} \n                        {%- endif -%}\n                    {%- endif -%}\n                {%- endif -%}\n            {%- endfor -%}\n        {%- endfor %}\n    {%- else  -%} \n        {%- set hub_list = datavault_extension.get_hub_list(source_model_target) -%}\n        {%- for hub in hub_list -%}\n            {%- set hub_object_name = hub.replace('_h','') -%}\n            {%- set sat_list = datavault_extension.get_satellite_list(hub_object_name + '_h', source_model_target) %}\n            {%- set hub_has_satellites = (sat_list != []) %} \n         , cte_load_date.{{ ldts }}\n            {%- if hub_has_satellites %}\n    FROM cte_load_date\n    INNER JOIN  cte_{{hub_object_name}} \n        ON cte_load_date.{{ldts}} = cte_{{hub_object_name}}.{{ldts}}\n            {% else %}\n    FROM cte_{{hub_object_name}} \n                {%- if load_type == 'full' %}\n    CROSS JOIN cte_load_date\n                {%- endif -%}\n            {%- endif -%}\n        {%- endfor -%}\n    {%- endif %}\n)\n(\n    select\n            {{ datavault_extension.format_list(load_attrib_list_without_coalesce, 1) }}\n            , {{ ldts }}\n    from cte_load\n    MINUS\n    select\n            {{ datavault_extension.format_list(load_attrib_list_without_coalesce, 1) }}\n            , {{ ldts }}\n    from cte_target\n)    \nUNION\n(\n    select\n            {{ datavault_extension.format_list(load_attrib_list_without_coalesce, 1) }}\n            , {{ ldts }}\n    from cte_target\n    minus\n    select\n            {{ datavault_extension.format_list(load_attrib_list_without_coalesce, 1) }}\n            , {{ ldts }}\n    from cte_load\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.datavault_extension.get_attrib_list", "macro.datavault_extension.get_object_list", "macro.datavault_extension.get_dict_hash_value", "macro.datavault_extension.format_list", "macro.dbt.replace", "macro.datavault_extension.get_satellite_list", "macro.datavault_extension.get_link_list", "macro.datavault_extension.get_hub_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.880908, "supported_languages": null}, "macro.datavault_extension.sts_v0": {"name": "sts_v0", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/tables/sts_v0.sql", "original_file_path": "macros/tables/sts_v0.sql", "unique_id": "macro.datavault_extension.sts_v0", "macro_sql": "{%- macro sts_v0(tracked_hashkey, stage_source_model=none, load_type='full', src_ldts=none, src_rsrc=none, src_edts=none,edts_hashkey=none) -%}\n\n    {# Applying the default aliases as stored inside the global variables, if src_ldts and src_rsrc are not set. #}\n\n    {%- set src_ldts = datavault4dbt.replace_standard(src_ldts, 'datavault4dbt.ldts_alias', 'ldts') -%}\n    {%- set src_rsrc = datavault4dbt.replace_standard(src_rsrc, 'datavault4dbt.rsrc_alias', 'rsrc') -%}\n\n    {{ adapter.dispatch('sts_v0', 'datavault_extension')(tracked_hashkey=tracked_hashkey,\n                                                                    stage_source_model=stage_source_model,\n                                                                    load_type=load_type,\n                                                                    src_ldts=src_ldts,\n                                                                    src_rsrc=src_rsrc,\n                                                                    src_edts=src_edts,\n                                                                    edts_hashkey=edts_hashkey\n                                                                    ) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.datavault4dbt.replace_standard", "macro.datavault_extension.snowflake__sts_v0"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.882459, "supported_languages": null}, "macro.datavault_extension.snowflake__sts_v0": {"name": "snowflake__sts_v0", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/tables/sts_v0.sql", "original_file_path": "macros/tables/sts_v0.sql", "unique_id": "macro.datavault_extension.snowflake__sts_v0", "macro_sql": "{%- macro snowflake__sts_v0(tracked_hashkey, stage_source_model, load_type, src_ldts, src_rsrc, src_edts, edts_hashkey) -%}\n\n\n{{- datavault4dbt.check_required_parameters(tracked_hashkey=tracked_hashkey, stage_source_model=stage_source_model, load_type=load_type,\n                                       src_ldts=src_ldts, src_rsrc=src_rsrc) -}}\n\n{%- if  is_nothing(src_edts) -%}\n    {%- set src_edts = none -%}\n{%- endif -%}\n\n{%- if  src_edts is not none -%}\n{%- set source_cols = datavault4dbt.expand_column_list(columns=[tracked_hashkey, src_rsrc, src_ldts, src_edts, edts_hashkey]) -%}\n{% else %}\n{%- set source_cols = datavault4dbt.expand_column_list(columns=[tracked_hashkey, src_rsrc, src_ldts]) -%}\n{%- endif -%}\n\n{%- if  src_edts is not none -%}\n    {%- set source_cols = datavault4dbt.expand_column_list(columns=[tracked_hashkey, src_rsrc, src_ldts, src_edts, edts_hashkey]) -%}\n{% else %}\n    {%- set source_cols = datavault4dbt.expand_column_list(columns=[tracked_hashkey, src_rsrc, src_ldts]) -%}\n{%- endif -%}\n\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n{%- set unknown_key = get_dict_hash_value(\"unknown_key\") -%}\n{%- set source_relation = ref(stage_source_model) -%}\n \nWITH\n\n{#\n    Get all records from staging layer where driving key and secondary foreign keys are not null.\n    Deduplicate over HK+Driving Key uneuqls the previous (regarding src_ldts) combination.\n#}\n{%- if is_incremental() %}\ncte_current_sts as\n(\n    select {{ datavault4dbt.prefix(source_cols, 'sts') }}, cdc\n    from {{ this }} sts\n    qualify row_number() over (PARTITION BY {{ datavault4dbt.prefix([tracked_hashkey], 'sts') }} order by {{ datavault4dbt.prefix([src_ldts], 'sts') }} desc) = 1\n)\n{%- else %}\ncte_current_sts as\n(\n    {%- if  src_edts is not none %}\n    select    '{{ unknown_key }}' as {{ tracked_hashkey }}\n            , '' {{ src_rsrc }}\n            , {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }} {{ src_ldts }}\n            , {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }} {{ src_edts }}\n            , 'I' as cdc\n            , '{{ unknown_key }}' as {{ edts_hashkey }}\n    {%- else %}\n    select    '{{ unknown_key }}' as {{ tracked_hashkey }}\n            , '' {{ src_rsrc }}\n            , {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }} {{ src_ldts }}\n            , 'I' as cdc\n    {%- endif %}\n)\n{%- endif %}\n,\ncte_current_sts_not_deleted as\n(\n  select  {{ datavault4dbt.prefix(source_cols, 'cte_current_sts') }}\n  from cte_current_sts\n  where cdc <> 'D'\n)\n, cte_max_rv_ldts AS\n(\n    SELECT COALESCE(max(ldts), {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }} ) ldts \n    FROM cte_current_sts_not_deleted\n)\n, cte_stage AS\n(\n    select {{ datavault4dbt.prefix(source_cols, 'src') }}\n    from {{ source_relation }} src\n    CROSS JOIN cte_max_rv_ldts\n    where not {{ datavault4dbt.prefix([src_ldts], 'src') }} in ({{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }}, {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }})\n    AND {{ datavault4dbt.prefix([src_ldts], 'src') }} > cte_max_rv_ldts.ldts\n)\n, cte_rv_stage_union as\n(\n    select {{ datavault4dbt.prefix(source_cols, 'cte_current_sts_not_deleted') }}\n    from cte_current_sts_not_deleted\n    UNION\n    (\n        select {{ datavault4dbt.prefix(source_cols, 'cte_stage') }}\n        from cte_stage\n    )\n)\n, cte_dat_dom as\n(\n    select distinct {{ datavault4dbt.prefix([src_ldts], 'src') }}\n    {%- if  src_edts is not none %}\n            ,  {{ datavault4dbt.prefix([src_edts], 'src') }}\n            ,  {{ datavault4dbt.prefix([edts_hashkey], 'src') }}\n    {% endif %}\n    from {{ source_relation }} src\n    CROSS JOIN cte_max_rv_ldts\n    where not {{ datavault4dbt.prefix([src_ldts], 'src') }} in ({{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }}, {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }})\n    AND {{ datavault4dbt.prefix([src_ldts], 'src') }} > {{ datavault4dbt.prefix([src_ldts], 'cte_max_rv_ldts') }} \n)\n, cte_key_dom as\n(\n    select {{ datavault4dbt.prefix([tracked_hashkey], 'cte_rv_stage_union') }}\n    from cte_rv_stage_union\n)\n, cte_key_dat_dom as\n(\n    select distinct  {{ datavault4dbt.prefix([tracked_hashkey], 'cte_key_dom') }}\n                    , {{ datavault4dbt.prefix([src_ldts], 'cte_dat_dom') }}\n                    {% if  src_edts is not none %}\n                    ,  {{ datavault4dbt.prefix([src_edts], 'cte_dat_dom') }}\n                    ,  {{ datavault4dbt.prefix([edts_hashkey], 'cte_dat_dom') }}\n                    {% endif -%}\n    from cte_key_dom \n    cross join cte_dat_dom\n), cte_data_join as\n(\n    select\n          {{ datavault4dbt.prefix([tracked_hashkey], 'cte_key_dat_dom') }} dom_key\n        , {{ datavault4dbt.prefix([src_ldts], 'cte_key_dat_dom') }} as dom_ldts\n        , {{ datavault4dbt.prefix([src_ldts], 'cte_rv_stage_union') }} as stage_ldts\n{%- if  src_edts is not none %}\n        , {{ datavault4dbt.prefix([src_edts], 'cte_key_dat_dom') }} as stage_edts\n        , {{ datavault4dbt.prefix([edts_hashkey], 'cte_key_dat_dom') }} as stage_edts_hashkey\n{% endif -%}\n        , lag({{ datavault4dbt.prefix([src_ldts], 'cte_key_dat_dom') }}) over (partition by  {{ datavault4dbt.prefix([tracked_hashkey], 'cte_key_dat_dom') }} order by  {{ datavault4dbt.prefix([src_ldts], 'cte_key_dat_dom') }}) as prev_dom_ldts\n        , lag({{ datavault4dbt.prefix([src_ldts], 'cte_rv_stage_union') }}) over (partition by  {{ datavault4dbt.prefix([tracked_hashkey], 'cte_key_dat_dom') }} order by  {{ datavault4dbt.prefix([src_ldts], 'cte_key_dat_dom') }}) as prev_stage_ldts\n        , {{ datavault4dbt.prefix([src_rsrc], 'cte_rv_stage_union') }}\n    from cte_key_dat_dom \n    left join cte_rv_stage_union \n         on {{ datavault4dbt.prefix([src_ldts], 'cte_key_dat_dom') }} = {{ datavault4dbt.prefix([src_ldts], 'cte_rv_stage_union') }}\n         and {{ datavault4dbt.prefix([tracked_hashkey], 'cte_key_dat_dom') }} = {{ datavault4dbt.prefix([tracked_hashkey], 'cte_rv_stage_union') }}\n    where 1=1\n)\n, cte_data_interpretation as\n(\n    select\n      dom_key\n    , dom_ldts\n    , stage_ldts\n{%- if  src_edts is not none -%}\n    , stage_edts\n    , stage_edts_hashkey\n{%- endif -%}\n    , prev_dom_ldts\n    , prev_stage_ldts\n    , CASE WHEN stage_ldts IS NULL AND prev_dom_ldts IS NULL\n        THEN 'discard'\n    WHEN COALESCE (stage_ldts, {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }})=dom_ldts AND prev_dom_ldts IS NULL\n    THEN 'I'\n    WHEN COALESCE (stage_ldts, {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }})=dom_ldts AND prev_stage_ldts IS NULL \n        THEN 'I'\n    {%- if load_type == 'full' %}\n        WHEN stage_ldts IS NULL AND COALESCE(prev_stage_ldts, {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }})= COALESCE(prev_dom_ldts, {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }})\n        THEN 'D'\n    {% endif %}\n        ELSE 'discard'\n        END AS cdc\n    , {{ datavault4dbt.prefix([src_rsrc], 'cte_data_join') }}\n    from cte_data_join\n)\nSELECT\n      dom_key AS {{ tracked_hashkey }}\n    , dom_ldts AS {{ src_ldts }}\n{%- if  src_edts is not none -%}\n    , stage_edts as {{ src_edts }}\n    , stage_edts_hashkey as {{ edts_hashkey }}\n{%- endif -%}\n    , {{ datavault4dbt.prefix([src_rsrc], 'cte_data_interpretation') }}\n    , cdc\nFROM cte_data_interpretation\nWHERE cdc<>'discard'\n{%- if not is_incremental() %}\nUNION ALL\nSELECT \n{{ tracked_hashkey }}\n    ,  {{ src_ldts }}\n{%- if  src_edts is not none -%}\n    , {{ src_edts }}\n    , {{ edts_hashkey }}\n{%- endif -%}    \n    , {{ src_rsrc }}\n    , cdc\nFROM cte_current_sts\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.datavault4dbt.check_required_parameters", "macro.datavault_extension.is_nothing", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault_extension.get_dict_hash_value", "macro.dbt.is_incremental", "macro.datavault4dbt.prefix", "macro.datavault4dbt.string_to_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.886318, "supported_languages": null}, "macro.datavault_extension.sns": {"name": "sns", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/tables/sns.sql", "original_file_path": "macros/tables/sns.sql", "unique_id": "macro.datavault_extension.sns", "macro_sql": "{%- macro sns(pit, pit_hk, pit_satellites, base_entity, primary_sourcesystem='ws', src_ldts=none, src_rsrc=none) -%}\n\n    {# Applying the default aliases as stored inside the global variables, if src_ldts and src_rsrc are not set. #}\n\n    {%- set src_ldts = datavault4dbt.replace_standard(src_ldts, 'datavault4dbt.ldts_alias', 'ldts') -%}\n    {%- set src_rsrc = datavault4dbt.replace_standard(src_rsrc, 'datavault4dbt.rsrc_alias', 'rsrc') -%}\n\n    {{ adapter.dispatch('sns', 'datavault_extension')(pit=pit,\n                                                      pit_hk=pit_hk,\n                                                      pit_satellites=pit_satellites,\n                                                      base_entity=base_entity,\n                                                      primary_sourcesystem=primary_sourcesystem,\n                                                      src_ldts=src_ldts,\n                                                      src_rsrc=src_rsrc) }}\n\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.datavault4dbt.replace_standard", "macro.datavault_extension.snowflake__sns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.887699, "supported_languages": null}, "macro.datavault_extension.snowflake__sns": {"name": "snowflake__sns", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/tables/sns.sql", "original_file_path": "macros/tables/sns.sql", "unique_id": "macro.datavault_extension.snowflake__sns", "macro_sql": "{%- macro snowflake__sns(pit, pit_hk, pit_satellites, base_entity, primary_sourcesystem, src_ldts, src_rsrc) -%}\n\n{%- set hash = var('datavault4dbt.hash', 'MD5') -%}\n{%- set hash_dtype = var('datavault4dbt.hash_datatype', 'STRING') -%}\n{%- set hash_default_values = fromjson(datavault4dbt.hash_default_values(hash_function=hash,hash_datatype=hash_dtype)) -%}\n{%- set unknown_key = datavault4dbt.as_constant(column_str=hash_default_values['unknown_key']) -%}\n\n\n{{- datavault4dbt.check_required_parameters(pit=pit, pit_hk=pit_hk, pit_satellites=pit_satellites,\n                                                                    base_entity=base_entity,\n                                                                    primary_sourcesystem=primary_sourcesystem,\n                                                                    src_ldts=src_ldts,\n                                                                    src_rsrc=src_rsrc) -}}\n\n\n{%- set pit_relation = ref(pit|string) -%}\n{%- set ledts_alias = var('datavault4dbt.ledts_alias', 'ledts') -%}\n{%- set sdts_alias = var('datavault4dbt.sdts_alias', 'sdts') -%}\n\n{%- set pit_satellites_dict = {} -%}\n\n{%- if datavault4dbt.is_list(pit_satellites) -%}\n    {%- for pit_satellite in pit_satellites -%}\n       {%- set sourcesystem = pit_satellite.split('_')[-2]  -%}\n       {%- set suffix = '_' +sourcesystem if sourcesystem != primary_sourcesystem else '' -%}       \n       {%- do pit_satellites_dict.update({pit_satellite: {'sourcesystem': sourcesystem, 'suffix': suffix}}) -%}\n    {%- endfor -%}\n{%- else -%}\n    {%- set sourcesystem = pit_satellites.split('_')[-2]  -%}\n    {%- set suffix = sourcesystem if sourcesystem != 'ws' else '' -%}\n    {%- set pit_satellites_dict = {pit_satellites: {'sourcesystem': sourcesystem, 'suffix': suffix}} -%}\n\n{%- endif -%}\n\n\n{# define if the sns is based on a hub or a link #}\n{%- set sns_type = \"\" -%}\n{%- if pit_hk.endswith('_h') -%}\n  {%- set sns_type = \"hub_based\" %}\n{%- elif pit_hk.endswith('_l') -%} \n  {%- set sns_type = \"link_based\" %}\n  {%- set ref_link_relation = ref(base_entity|string) -%}  \n  {%- set link_columns = datavault4dbt.source_columns(ref_link_relation) -%}\n  {%- set link_columns_hubs = [] -%}\n  {%- for column in link_columns -%}\n      {%- if column.lower().endswith('_h') -%}\n        {%- set _ = link_columns_hubs.append(column.lower()) -%}\n      {%- endif -%}\n  {%- endfor -%}  \n{%- endif -%}  \n\n\nselect\n  {{pit}}.{{sdts_alias}}, \n  {{pit}}.{{pit_hk}}, \n  {{pit}}.{{pit_hk[:-2] + '_d' if pit_hk.endswith(('_l', '_h')) else pit_hk }}, \n  {# define a bk column only if a hub is referenced #}\n  {%- if sns_type == \"hub_based\" -%}\n  {{base_entity}}.{{pit_hk[3:-2] +'_bk' }}\n  {%- endif -%}\n  {# define the hub_hk referenced in the link if the base_entity is a link #}  \n  {%- if sns_type == \"link_based\" -%}\n  {%- for hub_hk in link_columns_hubs -%}\n     {{base_entity}}.{{hub_hk}}{%- if not loop.last -%},{% endif %}{{ '\\n' }}\n  {%- endfor -%}\n  {%- endif %}  \n{%- for satellite in pit_satellites_dict.keys()  if not (satellite.endswith('_sts') or satellite.endswith('_es')) -%}\n  {% if loop.first %},{% endif %}\n  {%- set suffix = pit_satellites_dict[satellite]['suffix'] -%}\n    {{ dbt_utils.star(from=ref(satellite|string), relation_alias=satellite|string, suffix=suffix)|replace('\"', '')|lower() }},  \n  lower({{satellite}}.rsrc)<>'system' has_{{pit_satellites_dict[satellite]['sourcesystem']}}_data{% if not loop.last %},{% endif %}{{ '\\n' }} \n{%- endfor %} \n{%- for satellite in pit_satellites_dict.keys()  if  (satellite.endswith('_sts') or satellite.endswith('_es')) -%}\n{% if loop.first %},{% endif %}\n{{satellite}}.{{src_ldts}} as {{src_ldts}}_{{satellite}},{{ '\\n' }}\n{{satellite}}.{{src_rsrc}} as {{src_rsrc}}_{{satellite}}{% if not loop.last %},{% endif %}{{ '\\n' }}\n{%- endfor %} \nfrom {{ pit_relation}}  \ninner join {{ ref(base_entity|string) }}  \non {{base_entity}}.{{pit_hk}} = {{pit}}.{{pit_hk}}\n{%- for satellite in pit_satellites_dict.keys() %}\ninner join {{ ref(satellite|string) }} \non {{pit}}.hk_{{satellite}}={{satellite}}.{{pit_hk}}\nand {{pit}}.ldts_{{satellite}}={{satellite}}.ldts \n{%- endfor %} \nwhere  \n({{ '\\n' }}\n  {%- for satellite in pit_satellites_dict.keys() -%}\n  {{pit}}.HK_{{satellite}} <>{{unknown_key}} {{ '\\n' }}\n  {%- if not loop.last %}OR {% endif -%} \n  {%- endfor %}\n)\n{% for satellite in pit_satellites_dict.keys() if satellite.endswith('_sts') or satellite.endswith('_es') -%}\n  {%- if loop.first -%}\n    AND\n    (\n  {%- endif -%}\n      {%- if not loop.first %} OR {% endif -%} \n      ({{ satellite }}.cdc <>'D' and {{ satellite }}.{{pit_hk}} <>{{unknown_key}}){{ '\\n' }}\n  {%- if loop.last -%}\n    )\n  {% endif -%}\n{%- endfor %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.hash_default_values", "macro.datavault4dbt.as_constant", "macro.datavault4dbt.check_required_parameters", "macro.datavault4dbt.is_list", "macro.datavault4dbt.source_columns", "macro.dbt_utils.star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8909109, "supported_languages": null}, "macro.datavault_extension.pit_ext": {"name": "pit_ext", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/tables/pit_ext.sql", "original_file_path": "macros/tables/pit_ext.sql", "unique_id": "macro.datavault_extension.pit_ext", "macro_sql": "{%- macro pit_ext(tracked_entity, hashkey, sat_names, snapshot_relation, dimension_key, edts=none,snapshot_trigger_column=none, ldts=none, custom_rsrc=none, ledts=none, sdts=none, pit_type=none) -%}\n\n    {# Applying the default aliases as stored inside the global variables, if ldts, sdts and ledts are not set. #}\n\n    {%- set ldts = datavault4dbt.replace_standard(ldts, 'datavault4dbt.ldts_alias', 'ldts') -%}\n    {%- set ledts = datavault4dbt.replace_standard(ledts, 'datavault4dbt.ledts_alias', 'ledts') -%}\n    {%- set sdts = datavault4dbt.replace_standard(sdts, 'datavault4dbt.sdts_alias', 'sdts') -%}\n\n    {{ return(adapter.dispatch('pit_ext','datavault_extension')(pit_type=pit_type,\n                                                        tracked_entity=tracked_entity,\n                                                        hashkey=hashkey,\n                                                        sat_names=sat_names,\n                                                        ldts=ldts,\n                                                        sdts=sdts,\n                                                        custom_rsrc=custom_rsrc,\n                                                        ledts=ledts,\n                                                        snapshot_relation=snapshot_relation,\n                                                        snapshot_trigger_column=snapshot_trigger_column,\n                                                        dimension_key=dimension_key,\n                                                        edts=edts)) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.datavault4dbt.replace_standard", "macro.datavault_extension.snowflake__pit_ext"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.89268, "supported_languages": null}, "macro.datavault_extension.snowflake__pit_ext": {"name": "snowflake__pit_ext", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/tables/pit_ext.sql", "original_file_path": "macros/tables/pit_ext.sql", "unique_id": "macro.datavault_extension.snowflake__pit_ext", "macro_sql": "{%- macro snowflake__pit_ext(tracked_entity, hashkey, sat_names, ldts, ledts, sdts, snapshot_relation, dimension_key,edts=none,snapshot_trigger_column=none, custom_rsrc=none, pit_type=none) -%}\n\n{%- set hash = var('datavault4dbt.hash', 'MD5') -%}\n{%- set hash_dtype = var('datavault4dbt.hash_datatype', 'STRING') -%}\n{%- set hash_default_values = fromjson(datavault4dbt.hash_default_values(hash_function=hash,hash_datatype=hash_dtype)) -%}\n{%- set hash_alg = hash_default_values['hash_alg'] -%}\n{%- set unknown_key = hash_default_values['unknown_key'] -%}\n{%- set error_key = hash_default_values['error_key'] -%}\n\n{%- set rsrc = var('datavault4dbt.rsrc_alias', 'rsrc') -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{% if edts is not none %}\n    {%- set sn_col = [edts] -%}\n{%- else -%}\n    {%- set sn_col = [sdts] -%}\n{%- endif -%}\n\n{%- if datavault4dbt.is_something(pit_type) -%}\n    {%- set quote = \"'\" -%}\n    {%- set pit_type_quoted = quote + pit_type + quote -%}\n    {%- set hashed_cols = [pit_type_quoted, datavault4dbt.prefix([hashkey],'te'), datavault4dbt.prefix(sn_col, 'snap')] -%}\n{%- else -%}\n    {%- set hashed_cols = [datavault4dbt.prefix([hashkey],'te'), datavault4dbt.prefix(sn_col, 'snap')] -%}\n{%- endif -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n--custom pit\nWITH\n\n{%- if is_incremental() %}\n\nexisting_dimension_keys AS (\n\n    SELECT\n        {{ dimension_key }}\n    FROM {{ this }}\n\n),\n\n{%- endif %}\n\n{% if edts is not none %}\neffective_snapshot AS (\n    SELECT b.sdts AS {{edts}}, l.*\n\tFROM {{ ref(snapshot_relation) }} b\n\tCROSS JOIN  {{ ref(snapshot_relation) }} l\n\tWHERE b.is_active_edts\n\tAND l.is_active\n\tAND l.is_latest\n),\n{% endif %}\n{% for satellite in sat_names %}\n--{{ satellite}}\n{%- set sat_columns = datavault4dbt.source_columns(ref(satellite)) %}\n--{{sat_columns}}\n{###### if ldts already in table ignore (will be handled later) #######}\ncte_{{satellite}} as\n(\n    {% if edts is not none %}\n    with edts_dom as\n    (\n                SELECT distinct \n                {{ hashkey}},\n                {{edts}}\n            FROM {{ ref(satellite) }}\n    ),\n    edts_end as \n    (\n        SELECT \n            {{ hashkey}},\n            {{edts}},\n            COALESCE(LEAD({{edts}} - INTERVAL '1 MICROSECOND') OVER (PARTITION BY {{ hashkey }} ORDER BY {{edts}}),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS eedts\n        FROM edts_dom\n    )\n    {% endif %}\n    SELECT\n        {{ datavault4dbt.prefix([hashkey], 'sat') }},\n        {{ datavault4dbt.prefix([ldts], 'sat') }},\n        {% if edts is not none %}\n        COALESCE(LEAD({{ ldts }} - INTERVAL '1 MICROSECOND') OVER (PARTITION BY {{ datavault4dbt.prefix([hashkey], 'sat') }}, {{datavault4dbt.prefix([edts], 'sat')}} ORDER BY {{ ldts }}),{{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}) AS ledts,\n        {{ datavault4dbt.prefix([edts], 'sat') }},\n        edts_end.eedts\n        {% else %}\n            {%- if not ledts|string|lower in sat_columns|map('lower') %}\n                COALESCE(LEAD({{ ldts }} - INTERVAL '1 MICROSECOND') OVER (PARTITION BY {{ datavault4dbt.prefix([hashkey], 'sat') }} ORDER BY {{ datavault4dbt.prefix([ldts], 'sat') }}),{{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}) AS ledts\n            {% else %}\n                {{ sat }}.{{ ledts }}\n            {% endif %}\n        {% endif %}\n    FROM {{ ref(satellite) }} sat\n    {% if edts is not none %}\n    inner join edts_end\n        on {{datavault4dbt.prefix([hashkey], 'sat')}} = {{datavault4dbt.prefix([hashkey], 'edts_end')}}\n        and {{datavault4dbt.prefix([edts], 'sat')}} = {{datavault4dbt.prefix([edts], 'edts_end')}}\n    {% endif %}\n),\n{% endfor %}\npit_records AS (\n\n    SELECT\n        \n        {% if datavault4dbt.is_something(pit_type) -%}\n            '{{ datavault4dbt.as_constant(pit_type) }}' as type,\n        {%- endif %}\n        {% if datavault4dbt.is_something(custom_rsrc) -%}\n        '{{ custom_rsrc }}' as {{ rsrc }},\n        {%- endif %}\n        {{ datavault4dbt.hash(columns=hashed_cols,\n                    alias=dimension_key,\n                    is_hashdiff=false)   }} ,\n        te.{{ hashkey }},\n        snap.{{ sdts }},\n        {% if edts is not none %}\n        snap.edts,\n        {%- for satellite in sat_names %}\n            COALESCE({{ satellite }}.{{ hashkey }}, CAST({{ datavault4dbt.as_constant(column_str=unknown_key) }} AS {{ hash_dtype }})) AS hk_{{ satellite }},\n            COALESCE({{ satellite }}.{{ ldts }}, {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }}) AS {{ ldts }}_{{ satellite }},\n            COALESCE({{ satellite }}.edts, {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }}) edts_{{ satellite }}\n            {{- \",\" if not loop.last }}\n        {%- endfor %}\n        {%- else %}\n        {%- for satellite in sat_names %}\n            COALESCE({{ satellite }}.{{ hashkey }}, CAST({{ datavault4dbt.as_constant(column_str=unknown_key) }} AS {{ hash_dtype }})) AS hk_{{ satellite }},\n            COALESCE({{ satellite }}.{{ ldts }}, {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }}) AS {{ ldts }}_{{ satellite }}\n            {{- \",\" if not loop.last }}\n        {%- endfor %}\n        {%- endif %}\n\n    FROM\n            {{ ref(tracked_entity) }} te\n        FULL OUTER JOIN\n        {% if edts is not none %}\n        --with business date\n            effective_snapshot snap\n        {%- else %}\n        --without business date\n            {{ ref(snapshot_relation) }} snap\n            {% if datavault4dbt.is_something(snapshot_trigger_column) -%}\n                ON snap.{{ snapshot_trigger_column }} = true\n            {% else -%}\n                ON 1=1\n            {%- endif %}\n        {%- endif %}\n        {% for satellite in sat_names %}\n        {%- set sat_columns = datavault4dbt.source_columns(ref(satellite)) %}\n        LEFT JOIN {{ \"cte_\" ~ satellite }} {{ satellite }}\n            ON\n                {{ satellite }}.{{ hashkey}} = te.{{ hashkey }}\n                AND snap.{{ sdts }} BETWEEN {{ satellite }}.{{ ldts }} AND {{ satellite }}.{{ ledts }}\n                {% if edts is not none %}\n                AND snap.{{edts}} BETWEEN {{ satellite }}.{{edts}} AND {{ satellite }}.eedts\n                {% endif %}\n        {% endfor %}\n    {% if datavault4dbt.is_something(snapshot_trigger_column) %}\n         WHERE snap.{{ snapshot_trigger_column }} \n    {%- endif %}\n\n),\n\nrecords_to_insert AS (\n\n    SELECT DISTINCT *\n    FROM pit_records\n    {%- if is_incremental() %}\n    WHERE {{ dimension_key }} NOT IN (SELECT * FROM existing_dimension_keys)\n    {% endif -%}\n\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.hash_default_values", "macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.is_something", "macro.datavault4dbt.prefix", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.datavault4dbt.source_columns", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.as_constant", "macro.datavault4dbt.hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.8965352, "supported_languages": null}, "macro.datavault_extension.efs": {"name": "efs", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/tables/efs.sql", "original_file_path": "macros/tables/efs.sql", "unique_id": "macro.datavault_extension.efs", "macro_sql": "{%- macro efs(sts_sats, link_hashkey, link_name, driving_key, secondary_fks, ledts_alias='ledts', src_edts=none, add_is_current_flag=false) -%}\n\n    {# Applying the default aliases as stored inside the global variables, if src_ldts and src_rsrc are not set. #}\n\n    {%- set src_ldts = datavault4dbt.replace_standard(src_ldts, 'datavault4dbt.ldts_alias', 'ldts') -%}\n    {%- set src_rsrc = datavault4dbt.replace_standard(src_rsrc, 'datavault4dbt.rsrc_alias', 'rsrc') -%}\n\n    {{ adapter.dispatch('efs', 'datavault_extension')(sts_sats=sts_sats,\n                                        link_hashkey=link_hashkey,\n                                        link_name=link_name,                        \n                                        driving_key=driving_key,\n                                        secondary_fks=secondary_fks,                        \n                                        ledts_alias=ledts_alias,\n                                        src_edts=src_edts,\t\t\t\t\t\t\t\t\t\t\n                                        add_is_current_flag=add_is_current_flag) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.datavault4dbt.replace_standard", "macro.datavault_extension.snowflake__efs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.897701, "supported_languages": null}, "macro.datavault_extension.snowflake__efs": {"name": "snowflake__efs", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/tables/efs.sql", "original_file_path": "macros/tables/efs.sql", "unique_id": "macro.datavault_extension.snowflake__efs", "macro_sql": "{%- macro snowflake__efs(sts_sats, link_hashkey, link_name, driving_key, secondary_fks, ledts_alias='ledts', src_edts=none, add_is_current_flag=false) -%}\n\n\n{{- datavault4dbt.check_required_parameters(sts_sats=sts_sats,\n                                                    link_hashkey=link_hashkey,\n                                                    link_name=link_name,                        \n                                                    driving_key=driving_key,\n                                                    secondary_fks=secondary_fks,                        \n                                                    ledts_alias=ledts_alias,\n                                                    add_is_current_flag=add_is_current_flag) -}}\n\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n{%- set is_current_col_alias = var('datavault4dbt.is_current_col_alias', 'IS_CURRENT') -%}\n{%- set link_relation = ref(link_name) -%}\n\n{%- if  is_nothing(src_edts) -%}\n    {%- set ledts_alias = none -%}\n    {%- set src_edts = none -%}\n{%- endif -%}\n\n{%- if sts_sats is not mapping and not datavault4dbt.is_list(sts_sats) -%}\n    {%- set sts_sats = {sts_sats: {}} -%}\n\n{%- endif -%}\n\n{{ config(materialized='view') }}\n\n\nwith union_sts as\n(\n{%- for sts_sat in sts_sats -%}\t\n\t{%- set sts_sat=ref(sts_sat) %}\t\n\tSELECT *\n\tFROM {{ sts_sat }}\n\t{%- if not loop.last %}\n\tUNION ALL\n\t{% endif -%}\n{%- endfor %}\n)\n{%- if src_edts is not none -%}\n, eedts_calculation as \n(\n\twith eedts_distinct as \n\t(\n\t\tSELECT DISTINCT\n\t\t\t  union_sts.{{link_hashkey}}\n\t\t\t, {{ link_relation }}.{{driving_key}}\n\t\t\t, {{ link_relation }}.{{secondary_fks}}\n\t\t\t, union_sts.{{src_edts}}\n\t\tfrom union_sts\n\t\tinner join  {{ link_relation }} \n\t\t\ton union_sts.{{link_hashkey}}={{link_name}}.{{link_hashkey}}\n\t)\n\tselect \n\t \t  {{link_hashkey}}\n\t\t, {{driving_key}}\n\t\t, {{secondary_fks}}\n\t\t, {{src_edts}}\n\t\t, coalesce(lead({{src_edts}} - interval '1 microsecond') \n\t\t\t\t\tover (\tpartition by {{driving_key}}\n\t\t\t\t \t \t\torder by {{src_edts}}\n\t\t\t\t\t\t),{{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n\t\t\t) as eedts\n\tfrom eedts_distinct c\n)\n{%- endif -%}\n, ledts_calculation as \n(\n\tselect \n\t\t  union_sts.{{link_hashkey}}\n\t\t, {{link_name}}.{{driving_key}}\n\t\t, {{link_name}}.{{secondary_fks}}\n\t\t, union_sts.ldts\n\t{%- if src_edts is not none %}\t\t\n\t\t, union_sts.{{src_edts}}\n\t\t, coalesce(lead(union_sts.ldts- interval '1 microsecond') over (partition by union_sts.{{src_edts}}, {{link_name}}.{{driving_key}} order by union_sts.ldts),to_timestamp('8888-12-31t23:59:59', 'yyyy-mm-ddthh24:mi:ss')) as ledts\n\t\t, row_number() over (partition by union_sts.{{src_edts}}, {{link_name}}.{{driving_key}} order by union_sts.ldts desc) =1 as is_active\n\t\t, eedts\n\t{%- else -%}\n\t\t, coalesce(lead(union_sts.ldts- interval '1 microsecond') over (partition by {{link_name}}.{{driving_key}} order by union_sts.ldts),to_timestamp('8888-12-31t23:59:59', 'yyyy-mm-ddthh24:mi:ss')) as ledts\n\t\t, row_number() over (partition by {{link_name}}.{{driving_key}} order by union_sts.ldts desc) =1 is_active\n\t{%- endif -%}\n    , union_sts.rsrc \n\t, union_sts.cdc\n\tfrom union_sts\n\tinner join  {{link_relation }} \n\t\ton union_sts.{{link_hashkey}}={{link_name}}.{{link_hashkey}}\n\t{%- if src_edts is not none %}\t\t\n\tinner join  eedts_calculation e\n\t\ton union_sts.{{link_hashkey}} = e.{{link_hashkey}}\n\t\tand union_sts.{{src_edts}} = e.{{src_edts}}\n\t{%- endif -%}\n)\nselect\n*\n{%- if add_is_current_flag %}\n{%- if src_edts is not none -%}\n, CASE WHEN {{ ledts_alias }} = {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n\tTHEN TRUE\n\tELSE FALSE\nEND AS {{ is_current_col_alias }}\n{% else %}\n, CASE WHEN ledts = {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n\tTHEN TRUE\n\tELSE FALSE\nEND AS {{ is_current_col_alias }}\n{% endif %}\n{% endif %}\nfrom ledts_calculation\nwhere cdc<>'D'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.datavault4dbt.check_required_parameters", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault_extension.is_nothing", "macro.datavault4dbt.is_list", "macro.datavault4dbt.string_to_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.899335, "supported_languages": null}, "macro.datavault_extension.load": {"name": "load", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/tables/load.sql", "original_file_path": "macros/tables/load.sql", "unique_id": "macro.datavault_extension.load", "macro_sql": "{%- macro load(\n                      source_model\n                    , default_columns\n                    , additional_columns\n                    , key_check\n\t\t\t\t\t, dub_check\n                    , hwm\n                    , sourcetype\n                    , columns\n                    ) -%}\n\n    {{ adapter.dispatch('load', 'datavault_extension')(\n                      source_model=source_model\n                    , default_columns=default_columns\n                    , additional_columns=additional_columns\n                    , key_check=key_check\n\t\t\t\t\t, dub_check=dub_check\n                    , hwm=hwm\n                    , sourcetype=sourcetype\n                    , columns=columns\n                    ) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.datavault_extension.snowflake__load"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.900297, "supported_languages": null}, "macro.datavault_extension.snowflake__load": {"name": "snowflake__load", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/tables/load.sql", "original_file_path": "macros/tables/load.sql", "unique_id": "macro.datavault_extension.snowflake__load", "macro_sql": "{%- macro snowflake__load(source_model\n                    , default_columns\n                    , additional_columns\n                    , key_check\n\t\t\t\t\t, dub_check\n                    , hwm\n                    , sourcetype\n                    , columns\n                    ) -%}\n\n\n{{- datavault4dbt.check_required_parameters(source_model=source_model\n                    , default_columns=default_columns\n                    , additional_columns=additional_columns\n                    , key_check=key_check\n                    , dub_check=dub_check\n                    , hwm=hwm\n                    , sourcetype=sourcetype\n                    , columns=columns\n                    ) -}}\n\n\n{%- set default_raw_col_definition = datavault_extension.get_attribute_definition_list(default_columns, \"default\", \"raw\") -%} \n{%- set additional_raw_col_definition = datavault_extension.get_attribute_definition_list(additional_columns, \"additional\", \"raw\") -%} \n{%- set payload_raw_col_definition = datavault_extension.get_attribute_definition_list(columns, \"payload\", \"raw\") -%} \n\n{%- set default_typed_col_definition = datavault_extension.get_attribute_definition_list(default_columns, \"default\", \"typed\") -%} \n{%- set additional_typed_col_definition = datavault_extension.get_attribute_definition_list(additional_columns, \"additional\", \"typed\") -%} \n{%- set payload_typed_col_definition = datavault_extension.get_attribute_definition_list(columns, \"payload\", \"typed\") -%} \n\n{%- set default_typecheck_col_definition = datavault_extension.get_attribute_definition_list(default_columns, \"default\", \"type_check\") -%} \n{%- set additional_typecheck_col_definition = datavault_extension.get_attribute_definition_list(additional_columns, \"additional\", \"type_check\") -%} \n{%- set payload_typecheck_col_definition = datavault_extension.get_attribute_definition_list(columns, \"payload\", \"type_check\") -%} \n\n{%- set all_checks_list = [] -%}\n{%- set all_msg_list = [] -%}\n\n{%- set all_checks_list = datavault_extension.add_attribute_from_dict_to_checks_list(default_columns, all_checks_list, \"all_chk\") -%}\n{%- set all_checks_list = datavault_extension.add_attribute_from_dict_to_checks_list(additional_columns, all_checks_list, \"all_chk\") -%}\n{%- set all_checks_list = datavault_extension.add_attribute_from_dict_to_checks_list(columns, all_checks_list, \"all_chk\") -%}\n\n{%- set all_msg_list = datavault_extension.add_attribute_from_dict_to_checks_list(default_columns, all_msg_list, \"all_msg\") -%}\n{%- set all_msg_list = datavault_extension.add_attribute_from_dict_to_checks_list(additional_columns, all_msg_list, \"all_msg\") -%}\n{%- set all_msg_list = datavault_extension.add_attribute_from_dict_to_checks_list(columns, all_msg_list, \"all_msg\") -%}\n\n\n{%- if dub_check != \"\" %} \n{%- set dub_check_name = \"is_dub_check_ok\" -%}\n{%- set dub_check_definition = datavault_extension.get_dubcheck(dub_check, dub_check_name) -%} \n{%- set dub_check_list = [\"dub_check\"] -%} \n{%- set all_checks_list = datavault_extension.add_attribute_from_list_to_checks_list(dub_check_list, all_checks_list) -%}\n{%- set out_dubcheck_list = datavault_extension.format_list(dub_check,0,\",\" ) -%}\n{%- set out_dubcheck_dict = '{\"dub_check\": \"' ~ out_dubcheck_list ~ '\"}' -%}\n{%- set out_dubcheck = \"IFF(NOT \" ~ dub_check_name ~ \", '\" ~ out_dubcheck_dict ~ \"','')\" -%}\n{%- set all_msg_list = datavault_extension.add_item_to_list(all_msg_list, out_dubcheck) -%}\n{% endif -%} \n\n{%- if key_check != \"\" %} \n{%- set key_check_definition = datavault_extension.get_keycheck(key_check, 'key_check') -%} \n{%- set all_checks_list = datavault_extension.add_attribute_from_list_to_checks_list(key_check, all_checks_list,\"_key_check\") -%}\n{% for single_key_check in key_check %}\n{%- set out_key_dict = '{\"key_check\": \"' ~ single_key_check ~ '\"}' -%}\n{%- set out_key_check = \"IFF(NOT \" ~ \"is_\" ~ single_key_check ~ \"_key_check_ok\" ~ \", '\" ~ out_key_dict ~ \"','')\" -%}\n{%- set all_msg_list = datavault_extension.add_item_to_list(all_msg_list, out_key_check) -%}\n{% endfor -%} \n{% endif -%} \n\n\n\nwith\n{%- if hwm %} \n{{ datavault_extension.pre_hwm(this, omit_with=true, add_comma_at_end=true) }}\n{% endif -%} \nraw_data AS \n(\n\tSELECT \n\t\t  {{ datavault_extension.format_list(default_raw_col_definition, 2) }}\n\t\t, {{ datavault_extension.format_list(additional_raw_col_definition, 2) }}\n\t\t, {{ datavault_extension.format_list(payload_raw_col_definition, 2) }}\n    FROM {{ source(source_model['source_name'], source_model['source_table']) }}\n)\nSELECT \n\t\t{%- if default_typed_col_definition != [] %} \n\t\t  {{ datavault_extension.format_list(default_typed_col_definition, 2) }}\n\t\t{%-  endif -%} \n\t\t{%- if additional_typed_col_definition != [] %} \n\t\t, {{ datavault_extension.format_list(additional_typed_col_definition, 2) }}\n\t\t{%-  endif -%} \n\t\t{%- if payload_typed_col_definition != [] %} \n\t\t, {{ datavault_extension.format_list(payload_typed_col_definition, 2) }}\n\t\t{%-  endif -%} \n\t\t{%- if default_typecheck_col_definition != [] %} \n\t\t, {{ datavault_extension.format_list(default_typecheck_col_definition, 2) }}\n\t\t{%-  endif -%} \n\t\t{%- if additional_typecheck_col_definition != [] %} \n\t\t, {{ datavault_extension.format_list(additional_typecheck_col_definition, 2) }}\n\t\t{%-  endif -%} \n\t\t{%- if payload_typecheck_col_definition != [] %} \n\t\t, {{ datavault_extension.format_list(payload_typecheck_col_definition, 2) }}\n\t\t{%-  endif -%} \n\t\t{%- if dub_check_definition != \"\" %} \n\t\t, {{ dub_check_definition }}\n\t\t{%-  endif -%} \n\t\t{%- if key_check_definition != [] %} \n\t\t, {{ datavault_extension.format_list(key_check_definition, spacenumber=2) }}\n\t\t{%  endif -%} \n\t\t{%- if all_checks_list != [] %} \n\t\t, {{ datavault_extension.format_list(all_checks_list, spacenumber=0, separator= \" AND \") }} is_check_ok\n\t\t{%  endif -%} \n\t\t{%- if all_msg_list != [] %} \n\t\t,  {{ \"TO_VARIANT(ARRAY_EXCEPT([REPLACE(\" ~ datavault_extension.format_list(all_msg_list, spacenumber=0, separator= \" || \") ~ \", '}{','},{')],['']))\" }} chk_all_msg\n\t\t{%  endif -%} \n\n FROM raw_data\n{%- if hwm %} \n{{ datavault_extension.post_hwm(this) }}\n{% endif -%} \n{% endmacro %}", "depends_on": {"macros": ["macro.datavault4dbt.check_required_parameters", "macro.datavault_extension.get_attribute_definition_list", "macro.datavault_extension.add_attribute_from_dict_to_checks_list", "macro.datavault_extension.get_dubcheck", "macro.datavault_extension.add_attribute_from_list_to_checks_list", "macro.datavault_extension.format_list", "macro.datavault_extension.add_item_to_list", "macro.datavault_extension.get_keycheck", "macro.datavault_extension.pre_hwm", "macro.datavault_extension.post_hwm"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.903338, "supported_languages": null}, "macro.datavault_extension.post_hwm": {"name": "post_hwm", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/hwm/post_hwm.sql", "original_file_path": "macros/hwm/post_hwm.sql", "unique_id": "macro.datavault_extension.post_hwm", "macro_sql": "{%- macro post_hwm(this) -%}\n\n    {{ adapter.dispatch('post_hwm', 'datavault_extension')(\n                      this=this\n                    ) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.datavault_extension.snowflake__post_hwm"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.903536, "supported_languages": null}, "macro.datavault_extension.snowflake__post_hwm": {"name": "snowflake__post_hwm", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/hwm/post_hwm.sql", "original_file_path": "macros/hwm/post_hwm.sql", "unique_id": "macro.datavault_extension.snowflake__post_hwm", "macro_sql": "{% macro snowflake__post_hwm(this) %}\n{% if not flags.FULL_REFRESH %}\nCROSS JOIN hwm_max \nWHERE ldts_source > hwm_max.hwm_max_ts\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.9036338, "supported_languages": null}, "macro.datavault_extension.insert_hwm": {"name": "insert_hwm", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/hwm/insert_hwm.sql", "original_file_path": "macros/hwm/insert_hwm.sql", "unique_id": "macro.datavault_extension.insert_hwm", "macro_sql": "{%- macro insert_hwm(this, src_ldts) -%}\n\n    {{ adapter.dispatch('insert_hwm', 'datavault_extension')(\n                      this=this\n                      , src_ldts=src_ldts\n                    ) }}\n\n{%- endmacro -%}\n", "depends_on": {"macros": ["macro.datavault_extension.snowflake__insert_hwm"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.903863, "supported_languages": null}, "macro.datavault_extension.snowflake__insert_hwm": {"name": "snowflake__insert_hwm", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/hwm/insert_hwm.sql", "original_file_path": "macros/hwm/insert_hwm.sql", "unique_id": "macro.datavault_extension.snowflake__insert_hwm", "macro_sql": "{% macro snowflake__insert_hwm(this, src_ldts) %}\nINSERT INTO {{ source('LOAD_EXT_META', 'META_HWM') }} (object_name, hwm_ldts, load_date)\n                       SELECT '{{ this }}',MAX({{src_ldts}} ), SYSDATE()\n                       FROM {{ this }}\n                       HAVING MAX({{src_ldts}}) IS NOT NULL\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.904021, "supported_languages": null}, "macro.datavault_extension.pre_hwm": {"name": "pre_hwm", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/hwm/pre_hwm.sql", "original_file_path": "macros/hwm/pre_hwm.sql", "unique_id": "macro.datavault_extension.pre_hwm", "macro_sql": "{%- macro pre_hwm(this,omit_with=false, add_comma_at_end=false) -%}\n\n    {{ adapter.dispatch('pre_hwm', 'datavault_extension')(\n                        this=this\n                      , omit_with=omit_with\n                      , add_comma_at_end=add_comma_at_end\n                    ) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.datavault_extension.snowflake__pre_hwm"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.904311, "supported_languages": null}, "macro.datavault_extension.snowflake__pre_hwm": {"name": "snowflake__pre_hwm", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/hwm/pre_hwm.sql", "original_file_path": "macros/hwm/pre_hwm.sql", "unique_id": "macro.datavault_extension.snowflake__pre_hwm", "macro_sql": "{%- macro snowflake__pre_hwm(this, omit_with, add_comma_at_end) -%}\n{%- if not flags.FULL_REFRESH -%}\n    {%- if not omit_with -%}WITH{%- endif -%} hwm as\n    (\n        select max(hwm_ldts) hwm_max_ts from {{ source('LOAD_EXT_META', 'META_HWM') }} where object_name = '{{ this }}'\n    ),\n    hwm_max AS\n    (\n        select COALESCE(hwm.hwm_max_ts,to_timestamp('01.01.1900','DD.MM.YYYY') ) hwm_max_ts from hwm\n    ){%- if add_comma_at_end -%},{%- endif -%}\n{%- else -%}\n{%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.904543, "supported_languages": null}, "macro.datavault_extension.get_dict_hash_value": {"name": "get_dict_hash_value", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/general/get_dict_hash_value.sql", "original_file_path": "macros/general/get_dict_hash_value.sql", "unique_id": "macro.datavault_extension.get_dict_hash_value", "macro_sql": "{% macro get_dict_hash_value(value_key) -%}\n{%- set hash = var('datavault4dbt.hash', 'MD5') -%}\n{%- set hash_dtype = var('datavault4dbt.hash_datatype', 'STRING') -%}\n{%- set hash_default_values = fromjson(datavault4dbt.hash_default_values(hash_function=hash,hash_datatype=hash_dtype)) -%}\n{# {{ return(datavault4dbt.as_constant(column_str=hash_default_values[value_key])) }} #}\n{{ return(hash_default_values[value_key] | replace(\"!\", \"\")) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.datavault4dbt.hash_default_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.904927, "supported_languages": null}, "macro.datavault_extension.create_extra_schemas": {"name": "create_extra_schemas", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/autoexec/create_extra_schemas.sql", "original_file_path": "macros/autoexec/create_extra_schemas.sql", "unique_id": "macro.datavault_extension.create_extra_schemas", "macro_sql": "{% macro create_extra_schemas() %}\n\n{% do log('create schema if not exists ' ~ var(\"meta_schema\"), True) %}\ncreate schema if not exists {{ var(\"meta_schema\") }};\n\n{% do log('create schema if not exists dwh_01_ext', True) %}\ncreate schema if not exists dws.dwh_01_ext;\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.905165, "supported_languages": null}, "macro.datavault_extension.create_table_meta_hwm": {"name": "create_table_meta_hwm", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/autoexec/create_table_meta_hwm.sql", "original_file_path": "macros/autoexec/create_table_meta_hwm.sql", "unique_id": "macro.datavault_extension.create_table_meta_hwm", "macro_sql": "{% macro create_table_meta_hwm() %}\n{% do log(\"Create Meta_HWM if not exists\", True) %}\ncreate table if not exists {{ source('LOAD_EXT_META', 'META_HWM') }}\n(\n    OBJECT_NAME       VARCHAR,\n    HWM_LDTS TIMESTAMPNTZ,\n    LOAD_DATE     TIMESTAMPNTZ\n);\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.905369, "supported_languages": null}, "macro.datavault_extension.print_current": {"name": "print_current", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/autoexec/print_current.sql", "original_file_path": "macros/autoexec/print_current.sql", "unique_id": "macro.datavault_extension.print_current", "macro_sql": "{% macro print_current() %}\n\n  {% set get_current_query %}\n      SELECT CURRENT_WAREHOUSE(), CURRENT_DATABASE(), CURRENT_SCHEMA();\n  {% endset %}\n\n  {% set result = run_query(get_current_query) %}\n  {% if is_nothing(result) %}\n    {% do log(\"Keine Infos gefunden\", True) %}\n  {% else %}\n    {% set current_warehouse = (result.columns[0].values())[0] %}\n    {% set current_database = (result.columns[1].values())[0] %}\n    {% set current_schema = (result.columns[2].values())[0] %}\n    {% do log(\"Current Warehouse_Database_Schema: \" ~ current_warehouse ~ \"__\" ~ current_database ~ \"__\" ~ current_schema , True) %}\n{% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.datavault_extension.is_nothing"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.905959, "supported_languages": null}, "macro.datavault_extension.refresh_external_table": {"name": "refresh_external_table", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/helper/handle_external_tables.sql", "original_file_path": "macros/helper/handle_external_tables.sql", "unique_id": "macro.datavault_extension.refresh_external_table", "macro_sql": "{% macro refresh_external_table(external_table_name, source_type) -%}\n    {%- set out = \"\" -%} \n    {%- if source_type == 'snowflake_external_table' -%} \n        {{ dbt_external_tables.stage_external_sources(select=external_table_name) }} \n    {%- endif -%} \n    {{ return(out) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.stage_external_sources"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.906202, "supported_languages": null}, "macro.datavault_extension.get_attribute_definition": {"name": "get_attribute_definition", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/helper/load_definition_helper.sql", "original_file_path": "macros/helper/load_definition_helper.sql", "unique_id": "macro.datavault_extension.get_attribute_definition", "macro_sql": "{%- macro get_attribute_definition(attribute_dict, attribute_type, definition_type, attribute_name) -%}\n\n    {{ adapter.dispatch('get_attribute_definition', 'datavault_extension')(\n                          attribute_dict=attribute_dict\n                        , attribute_type=attribute_type\n                        , definition_type=definition_type\n                        , attribute_name=attribute_name\n                    ) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.datavault_extension.snowflake__get_attribute_definition"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.9073951, "supported_languages": null}, "macro.datavault_extension.snowflake__get_attribute_definition": {"name": "snowflake__get_attribute_definition", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/helper/load_definition_helper.sql", "original_file_path": "macros/helper/load_definition_helper.sql", "unique_id": "macro.datavault_extension.snowflake__get_attribute_definition", "macro_sql": "{% macro snowflake__get_attribute_definition(attribute_dict, attribute_type, definition_type, attribute_name) -%}\n\n{%- set out_attribute =  \"\" -%}\n{%- set attribute_name_raw = ('\"' ~ attribute_name ~ '_raw\"')|upper -%}\n{%- set attribute_name = ('\"' ~ attribute_name ~ '\"')|upper -%}\n{%- if definition_type == 'raw' -%}\n    {%- if attribute_type in ['default','additional'] -%}\n        {%- set out_attribute =  'TRIM(' ~ attribute_dict[\"value\"] ~ '::STRING) as ' ~attribute_name_raw -%}\n    {%- elif attribute_type in ['payload'] -%}\n        {%- if attribute_dict[\"data_type\"]==\"NUMBER\" -%}\n            {%- set decimal_separator = attribute_dict[\"decimal_separator\"] -%}\n            {%- set out_attribute =  \"TRIM(value:c\" ~ attribute_dict[\"source_column_number\"] ~ \"::STRING) \" -%}\n            {%- set out_attribute =  \"REPLACE(\" ~ out_attribute ~ \", ',', '\" ~ decimal_separator ~ \"')\" -%}\n            {%- set out_attribute =  out_attribute ~ \" as \" ~ attribute_name_raw -%}\n        {%- else -%}\n            {%- set out_attribute =  \"TRIM(value:c\" ~ attribute_dict[\"source_column_number\"] ~ \"::STRING) as \" ~ attribute_name_raw -%}\n        {%- endif -%}\n     {%- endif -%}\n{%- elif definition_type == 'typed' -%}\n    {%- set data_type =  attribute_dict[\"data_type\"]|upper -%}\n    {%- if attribute_dict[\"format\"] | trim == \"\" -%}\n        {%- set data_format = \"\" -%}\n    {%- else -%}\n        {%- if data_type in [\"TIMESTAMP\",\"DATE\"] -%}\n            {%- set data_format =  \", '\" ~ attribute_dict[\"format\"] ~ \"'\" -%}\n        {%- elif data_type in [\"NUMBER\"] -%}\n            {%- set data_format =  \", \" ~ attribute_dict[\"format\"] ~ \"\" -%}\n        {%- endif -%}\n    {%- endif -%}\n\n    {%- if data_type in [\"TIMESTAMP\",\"DATE\",\"NUMBER\"] -%}\n        {%- set out_attribute =  \"TRY_TO_\" ~ data_type ~ \"(\" ~ attribute_name_raw ~ data_format ~ \") as \" ~ attribute_name -%}\n    {%- else -%}\n        {%- set out_attribute =  attribute_name_raw ~ \" as \" ~ attribute_name -%}\n    {%- endif -%}\n\n{%- elif definition_type == 'type_check' -%}\n    {%- set data_type =  attribute_dict[\"data_type\"]|upper -%}\n    {%- set data_format =  attribute_dict[\"format\"] -%}\n    {%- if not attribute_dict[\"type_check\"] == \"\" -%} \n        {%- set type_check=True -%} \n    {%- else -%} \n        {%- set type_check=attribute_dict[\"type_check\"] -%} \n    {%- endif -%} \n    {%- if attribute_dict[\"format\"] | trim == \"\" -%}\n        {%- set data_format = \"\" -%}\n    {%- else -%}\n        {%- if data_type in [\"TIMESTAMP\",\"DATE\"] -%}\n            {%- set data_format =  \", '\" ~ attribute_dict[\"format\"] ~ \"'\" -%}\n        {%- elif data_type in [\"NUMBER\"] -%}\n            {%- set data_format =  \", \" ~ attribute_dict[\"format\"] ~ \"\" -%}\n        {%- endif -%}\n    {%- endif -%}\n\n    {%- if data_type in [\"TIMESTAMP\",\"DATE\",\"NUMBER\"] and type_check -%}    \n            {%- set check_name = ('\"is_' ~ attribute_name |replace('\"','')  ~ '_type_ok\"') | upper -%} \n            {%- set out_attribute =  \"TRY_TO_\" ~ data_type ~ \"(\" ~ attribute_name_raw ~ data_format ~ \") IS NOT NULL OR \" ~ attribute_name_raw ~ \" IS NULL as \" ~ check_name -%}\n    {%- endif -%}\n \n{%- endif -%}\n{{ return(out_attribute) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.909342, "supported_languages": null}, "macro.datavault_extension.get_dubcheck": {"name": "get_dubcheck", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/helper/load_definition_helper.sql", "original_file_path": "macros/helper/load_definition_helper.sql", "unique_id": "macro.datavault_extension.get_dubcheck", "macro_sql": "{% macro get_dubcheck(dub_check_list, dub_check_name) -%}\n    \n    {%- set out_dubcheck = datavault_extension.format_list(dub_check_list,0,\",\" ) -%}\n    {%- set out_dubcheck = \"ROW_NUMBER() OVER (PARTITION BY \" ~ out_dubcheck ~  \" ORDER BY \" ~ out_dubcheck ~  ') = 1 AS \"' ~ dub_check_name |upper ~ '\"' -%}\n    {{ return(out_dubcheck) }}    \n{%- endmacro %}", "depends_on": {"macros": ["macro.datavault_extension.format_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.909575, "supported_languages": null}, "macro.datavault_extension.get_keycheck": {"name": "get_keycheck", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/helper/load_definition_helper.sql", "original_file_path": "macros/helper/load_definition_helper.sql", "unique_id": "macro.datavault_extension.get_keycheck", "macro_sql": "{% macro get_keycheck(keycheck_list, definition_type) -%}\n    {%- set out_keycheck_list = [] -%}\n\n    {%- for attribute in keycheck_list -%}\n        {%- set attribute_name_raw = ('\"' ~ attribute ~ '_raw\"')|upper -%}\n        {%- set key_check_name = ('\"is_' ~ attribute ~ '_key_check_ok\"')|upper -%}\n        {%- set keycheck = \"COALESCE(\" ~ attribute_name_raw ~ \", '') <> '' as \" ~ key_check_name -%}\n        {{ out_keycheck_list.append(keycheck) }}\n    {%- endfor -%}\n    {{ return(out_keycheck_list) }}    \n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.9099, "supported_languages": null}, "macro.datavault_extension.get_attribute_definition_list": {"name": "get_attribute_definition_list", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/helper/load_definition_helper.sql", "original_file_path": "macros/helper/load_definition_helper.sql", "unique_id": "macro.datavault_extension.get_attribute_definition_list", "macro_sql": "{% macro get_attribute_definition_list(dict, attribute_type, definition_type) -%}\n    {%- set out_attribute_list = [] -%}\n    {%- for attribute in dict -%}\n        {%- set out_attribute = datavault_extension.get_attribute_definition(dict[attribute], attribute_type, definition_type, attribute) -%}\n        {%- if out_attribute != \"\" -%}\n            {{ out_attribute_list.append(out_attribute) }}\n        {%- endif -%}\n    {%- endfor -%}\n\n    {{ return(out_attribute_list) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.datavault_extension.get_attribute_definition"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.910199, "supported_languages": null}, "macro.datavault_extension.format_list": {"name": "format_list", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/helper/load_definition_helper.sql", "original_file_path": "macros/helper/load_definition_helper.sql", "unique_id": "macro.datavault_extension.format_list", "macro_sql": "{% macro format_list(attribute_list, spacenumber=0,separator=\"\\ns, \") -%}\n    {%- set spaces = \"    \" * spacenumber -%}\n    {%- set separator = separator | replace(\"s\", spaces * spacenumber)  -%}\n    {%- set out_attribute_list = attribute_list|join(separator) -%}\n    {{ return(out_attribute_list) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.91045, "supported_languages": null}, "macro.datavault_extension.format_string": {"name": "format_string", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/helper/load_definition_helper.sql", "original_file_path": "macros/helper/load_definition_helper.sql", "unique_id": "macro.datavault_extension.format_string", "macro_sql": "{% macro format_string(attribute, spacenumber=0,separator=\"\\ns \") -%}\n    {%- set spaces = \"    \" * spacenumber -%}\n    {%- set separator = separator | replace(\"s\", spaces * spacenumber)  -%}\n    {%- set out_attribute = separator ~ attribute -%}\n    {{ return(out_attribute) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.910694, "supported_languages": null}, "macro.datavault_extension.add_attribute_from_dict_to_checks_list": {"name": "add_attribute_from_dict_to_checks_list", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/helper/load_definition_helper.sql", "original_file_path": "macros/helper/load_definition_helper.sql", "unique_id": "macro.datavault_extension.add_attribute_from_dict_to_checks_list", "macro_sql": "{% macro add_attribute_from_dict_to_checks_list(dict, attribute_list, out_type) -%}\n    {%- for attribute in dict -%}\n        {%- if not attribute[\"type_check\"] == \"\" -%} \n            {%- set type_check=True -%} \n        {%- else -%} \n            {%- set type_check=attribute[\"type_check\"] -%} \n        {%- endif -%} \n        {%- if dict[attribute][\"data_type\"] in [\"TIMESTAMP\",\"DATE\",\"NUMBER\"] and type_check -%}\n            {%- if out_type == \"all_chk\" -%}\n            {%- set type_check_name = ('\"is_' ~ attribute ~ '_type_ok\"') |upper -%}\n            {{ attribute_list.append(type_check_name) }}\n            {%- elif out_type == \"all_msg\" -%}\n            {%- set attribute_name_raw = ('\"' ~ attribute ~ '_raw\"')|upper -%}\n            {%- set attribute_check_dict = '#{\"' ~ attribute ~ '\":\"# || COALESCE(TO_VARCHAR(' ~ attribute_name_raw ~ ') ,##) || #\"}#' -%}\n            {%- set attribute_check_dict = attribute_check_dict | replace(\"#\", \"'\") -%}\n            {%- set type_check_name = ('\"is_' ~ attribute ~ '_type_ok\"') |upper -%}\n            {{ attribute_list.append('IFF(NOT ' ~ type_check_name ~ \",\" ~ attribute_check_dict ~ \",'')\") }}\n\n            {%- endif -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(attribute_list) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.911438, "supported_languages": null}, "macro.datavault_extension.add_attribute_from_list_to_checks_list": {"name": "add_attribute_from_list_to_checks_list", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/helper/load_definition_helper.sql", "original_file_path": "macros/helper/load_definition_helper.sql", "unique_id": "macro.datavault_extension.add_attribute_from_list_to_checks_list", "macro_sql": "{% macro add_attribute_from_list_to_checks_list(check_type_attribute_list, attribute_list, check_type) -%}\n    {%- for attribute in check_type_attribute_list -%}\n        {%- set type_check_name = ('\"is_' ~ attribute ~ check_type ~ '_ok\"') |upper -%}\n        {{ attribute_list.append(type_check_name) }}\n    {%- endfor -%}\n    {{ return(attribute_list) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.911672, "supported_languages": null}, "macro.datavault_extension.add_item_to_list": {"name": "add_item_to_list", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/helper/load_definition_helper.sql", "original_file_path": "macros/helper/load_definition_helper.sql", "unique_id": "macro.datavault_extension.add_item_to_list", "macro_sql": "{% macro add_item_to_list(list, item) -%}\n    {{ list.append(item) }}\n    {{ return(list) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.9118028, "supported_languages": null}, "macro.datavault_extension.get_attrib_list": {"name": "get_attrib_list", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/helper/yedi_test_helper.sql", "original_file_path": "macros/helper/yedi_test_helper.sql", "unique_id": "macro.datavault_extension.get_attrib_list", "macro_sql": "{%- macro get_attrib_list(model_name, source_model_target, object_type='attrib', set_key_to_unknown=true) -%}\n\n    {{ return(adapter.dispatch('get_attrib_list', 'datavault_extension')(\n                          model_name=model_name\n                        , source_model_target=source_model_target\n                        , object_type=object_type\n                        , set_key_to_unknown=set_key_to_unknown\n                    )) }}\n\n{%- endmacro -%}\n", "depends_on": {"macros": ["macro.datavault_extension.snowflake__get_attrib_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.912854, "supported_languages": null}, "macro.datavault_extension.snowflake__get_attrib_list": {"name": "snowflake__get_attrib_list", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/helper/yedi_test_helper.sql", "original_file_path": "macros/helper/yedi_test_helper.sql", "unique_id": "macro.datavault_extension.snowflake__get_attrib_list", "macro_sql": "{% macro snowflake__get_attrib_list(model_name=model_name, source_model_target=source_model_target, object_type=object_type, set_key_to_unknown=set_key_to_unknown) -%}\n    {%- set out_attrib_list = [] -%}\n    {%- for model in source_model_target -%}\n    {#{ log(\"model: \" + model| string, True) }#}\n        {%- for attribute in source_model_target[model] -%}\n            {%- if attribute == 'business_object' and (model_name == 'load' or model_name == model) -%}\n                {%- for item in source_model_target[model][attribute] -%}\n                    {% set outer_loop = loop %}\n                    {%- for subitem in item -%}\n                        {% set subitem_i = source_model_target[model][attribute][outer_loop.index0][subitem] %}\n                        {%- if (model_name == 'load' and not subitem_i.startswith('hk_' )and not subitem_i.endswith('_bk')) or model_name != 'load' -%}\n                            {%- if object_type=='attrib' -%}\n                                {%- if set_key_to_unknown and model_name == 'load' -%}\n                                    {%- set out_attrib = \"COALESCE(\" + subitem_i + \",'\" + var(\"datavault4dbt.unknown_value__STRING\") +\"') as \" + subitem_i | string -%}\n                                    {%- else -%}\n                                    {%- set out_attrib = subitem_i | string -%}\n                                {%- endif -%}                                \n                            {%- else -%}\n                                {%- set out_attrib = subitem | string -%}\n                            {%- endif -%}                                \n                            {%- if not out_attrib in out_attrib_list -%} \n                                {{ out_attrib_list.append(out_attrib) }}\n                            {%- endif -%}\n                        {%- endif -%}                        \n                    {%- endfor -%}\n                {%- endfor -%}\n            {%- endif -%}\n            {%- if attribute == 'satellites' and object_type == 'attrib' -%}\n                {%- set attribute_items = source_model_target.get(model).get(attribute) -%} \n                {%- if is_something(attribute_items)  -%}                 \n                    {%- for item in attribute_items -%}\n\n                        {%- set attribute_subitems = attribute_items[item] -%} \n                        {%- if is_something(attribute_subitems) and (model_name == 'load' or model_name == item) -%}\n                            {%- for subitem in attribute_subitems[\"columns\"] -%}\n                                {%- if not subitem in out_attrib_list -%} \n                                    {{ out_attrib_list.append(subitem) }}\n                                {%- endif -%}\n                            {%- endfor -%}\n                        {%- endif -%}\n                    {%- endfor -%}\n                {%- endif -%}\n            {%- endif -%}\n\n            {%- if attribute == 'columns' and object_type == 'attrib' and model_name == model-%}\n                {%- for subitem in source_model_target.get(model)[\"columns\"] -%}\n                    {%- if not subitem in out_attrib_list -%} \n                        {{ out_attrib_list.append(subitem) }}\n                    {%- endif -%}\n                {%- endfor -%}\n            {%- endif -%}\n        {%- endfor -%}\n    {%- endfor -%}    \n    {{ return(out_attrib_list) }}    \n{%- endmacro %}", "depends_on": {"macros": ["macro.datavault_extension.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.914429, "supported_languages": null}, "macro.datavault_extension.get_object_list": {"name": "get_object_list", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/helper/yedi_test_helper.sql", "original_file_path": "macros/helper/yedi_test_helper.sql", "unique_id": "macro.datavault_extension.get_object_list", "macro_sql": "{% macro get_object_list(source_model_target) -%}\n    {%- set out_list = [] -%}\n    {%- for model in source_model_target -%}\n        {%- if model.endswith('_h') or model.endswith('_l') or model.endswith('_nhl') -%}\n            {{ out_list.append(model|string) }}\n        {%- endif -%}\n    {%- endfor -%}        \n    {{ return(out_list) }}    \n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.914714, "supported_languages": null}, "macro.datavault_extension.get_hub_list": {"name": "get_hub_list", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/helper/yedi_test_helper.sql", "original_file_path": "macros/helper/yedi_test_helper.sql", "unique_id": "macro.datavault_extension.get_hub_list", "macro_sql": "{% macro get_hub_list(source_model_target) -%}\n    {%- set out_list = [] -%}\n    {%- for model in source_model_target -%}\n        {%- if model.endswith('_h') -%}\n            {{ out_list.append(model|string) }}\n        {%- endif -%}\n    {%- endfor -%}        \n    {{ return(out_list) }}    \n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.9149399, "supported_languages": null}, "macro.datavault_extension.get_link_list": {"name": "get_link_list", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/helper/yedi_test_helper.sql", "original_file_path": "macros/helper/yedi_test_helper.sql", "unique_id": "macro.datavault_extension.get_link_list", "macro_sql": "{% macro get_link_list(source_model_target) -%}\n    {%- set out_list = [] -%}\n    {%- for model in source_model_target -%}\n        {%- if model.endswith('_l') or model.endswith('_nhl')-%}\n            {{ out_list.append(model|string) }}\n        {%- endif -%}\n    {%- endfor -%}        \n    {{ return(out_list) }}    \n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.9151978, "supported_languages": null}, "macro.datavault_extension.get_satellite_list": {"name": "get_satellite_list", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/helper/yedi_test_helper.sql", "original_file_path": "macros/helper/yedi_test_helper.sql", "unique_id": "macro.datavault_extension.get_satellite_list", "macro_sql": "{% macro get_satellite_list(parent_object, source_model_target) -%}\n    {%- set out_list = [] -%}\n    {%- for model in source_model_target -%}\n        {%- if model == parent_object -%}\n            {%- set model_attribute = source_model_target.get(model) -%}\n            {%- if is_something(model_attribute) -%}\n                {%- for attribute in model_attribute -%}\n                        {%- if attribute == 'satellites' and is_something(model_attribute[attribute]) -%}\n                            {%- for item in model_attribute[attribute] -%}\n                                {{ out_list.append(item) }}\n                            {%- endfor -%}\n                        {%- endif -%}\n                {%- endfor -%}\n            {%- endif -%}\n        {%- endif -%}\n    {%- endfor -%}        \n    {{ return(out_list) }}    \n\n{%- endmacro %}", "depends_on": {"macros": ["macro.datavault_extension.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.915642, "supported_languages": null}, "macro.datavault_extension.get_ma_attrib_list": {"name": "get_ma_attrib_list", "resource_type": "macro", "package_name": "datavault_extension", "path": "macros/helper/yedi_test_helper.sql", "original_file_path": "macros/helper/yedi_test_helper.sql", "unique_id": "macro.datavault_extension.get_ma_attrib_list", "macro_sql": "{% macro get_ma_attrib_list(model_name, source_model_target) -%}\n    {%- set out_attrib_list = [] -%}\n    {%- for model in source_model_target | default('') -%}\n        {%- set ma_columns = source_model_target.get(model) -%}\n        {%- if is_something(ma_columns) -%}\n            {%- set satellites = source_model_target.get(model).get('satellites') -%}\n            {%- if is_something(satellites) -%}\n                {%- set satellite = source_model_target.get(model).get('satellites').get(model_name) -%}\n                {%- if is_something(satellite) -%}\n                    {%- set ma_columns = source_model_target.get(model).get('satellites').get(model_name).get('ma_columns') -%}\n                    {%- if is_something(ma_columns) -%}\n                        {%- for attribute in ma_columns -%}\n                            {%- if not attribute in out_attrib_list -%} \n                                {{ out_attrib_list.append(attribute) }}\n                            {%- endif -%}\n                        {%- endfor -%}\n                    {%- endif -%}\n                {%- endif -%}\n            {%- endif -%}\n        {%- endif -%}\n    {%- endfor -%}\n   {{ return(out_attrib_list) }}    \n{%- endmacro %}", "depends_on": {"macros": ["macro.datavault_extension.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.916308, "supported_languages": null}, "macro.dbt_external_tables.bigquery__update_external_table_columns": {"name": "bigquery__update_external_table_columns", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/bigquery/update_external_table_columns.sql", "original_file_path": "macros/plugins/bigquery/update_external_table_columns.sql", "unique_id": "macro.dbt_external_tables.bigquery__update_external_table_columns", "macro_sql": "{% macro bigquery__update_external_table_columns(source_node) %}\n    {%- set columns = source_node.columns -%}\n    {%- set relation = source(source_node.source_name, source_node.name) -%}\n    {%- do adapter.update_columns(relation, columns) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.916537, "supported_languages": null}, "macro.dbt_external_tables.bigquery__create_external_table": {"name": "bigquery__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/bigquery/create_external_table.sql", "original_file_path": "macros/plugins/bigquery/create_external_table.sql", "unique_id": "macro.dbt_external_tables.bigquery__create_external_table", "macro_sql": "{% macro bigquery__create_external_table(source_node) %}\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n    {%- set non_string_options = ['max_staleness'] %}\n\n    {% if options is mapping and options.get('connection_name', none) %}\n        {% set connection_name = options.pop('connection_name') %}\n    {% endif %}\n    \n    {%- set uris = [] -%}\n    {%- if options is mapping and options.get('uris', none) -%}\n        {%- set uris = external.options.get('uris') -%}\n    {%- else -%}\n        {%- set uris = [external.location] -%}\n    {%- endif -%}\n\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n        {%- if columns -%}(\n            {% for column in columns %}\n                {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n                {{column_quoted}} {{column.data_type}} {{- ',' if not loop.last -}}\n            {%- endfor -%}\n        )\n        {% endif %}\n        {% if options and options.get('hive_partition_uri_prefix', none) %}\n        with partition columns {%- if partitions %} (\n            {%- for partition in partitions %}\n                {{partition.name}} {{partition.data_type}}{{',' if not loop.last}}\n            {%- endfor -%}\n        ) {% endif -%}\n        {% endif %}\n        {% if connection_name %}\n            with connection `{{ connection_name }}`\n        {% endif %}\n        options (\n            uris = [{%- for uri in uris -%} '{{uri}}' {{- \",\" if not loop.last}} {%- endfor -%}]\n            {%- if options is mapping -%}\n            {%- for key, value in options.items() if key != 'uris' %}\n                {%- if value is string and key not in non_string_options -%}\n                , {{key}} = '{{value}}'\n                {%- else -%}\n                , {{key}} = {{value}}\n                {%- endif -%}\n            {%- endfor -%}\n            {%- endif -%}\n        )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.918155, "supported_languages": null}, "macro.dbt_external_tables.bigquery__create_external_schema": {"name": "bigquery__create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/bigquery/create_external_schema.sql", "original_file_path": "macros/plugins/bigquery/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.bigquery__create_external_schema", "macro_sql": "{%- macro bigquery__create_external_schema(source_node) -%}\n    {%- set fqn -%}\n        {%- if source_node.database -%}\n            `{{ source_node.database }}`.{{ source_node.schema }}\n        {%- else -%}\n            {{ source_node.schema }}\n        {%- endif -%}\n    {%- endset -%}\n\n    {% set schema_exists_query %}\n        select * from `{{ source_node.database }}`.INFORMATION_SCHEMA.SCHEMATA where schema_name = '{{ source_node.schema }}' limit 1\n    {% endset %}\n    {% if execute %}\n        {% set schema_exists = run_query(schema_exists_query)|length > 0 %}\n    {% else %}\n        {% set schema_exists = false %}\n    {% endif %}  \n\n    {%- if not schema_exists -%}\n        {%- set ddl -%}\n            create schema if not exists {{ fqn }}\n        {%- endset -%}\n        {{ return(ddl) }}\n    {%- else -%}\n        {{ return('') }}\n    {% endif %} \n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.918797, "supported_languages": null}, "macro.dbt_external_tables.bigquery__get_external_build_plan": {"name": "bigquery__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/bigquery/get_external_build_plan.sql", "original_file_path": "macros/plugins/bigquery/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.bigquery__get_external_build_plan", "macro_sql": "{% macro bigquery__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% if not dbt_external_tables.create_external_schema(source_node)|length %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.create_external_table(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.create_external_schema(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] %}\n        {% endif %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.create_external_schema", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.919499, "supported_languages": null}, "macro.dbt_external_tables.snowflake__create_external_table": {"name": "snowflake__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/create_external_table.sql", "original_file_path": "macros/plugins/snowflake/create_external_table.sql", "unique_id": "macro.dbt_external_tables.snowflake__create_external_table", "macro_sql": "{% macro snowflake__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set infer_schema = external.infer_schema -%}\n\n    {% if infer_schema %}\n        {% set query_infer_schema %}\n            select * from table( infer_schema( location=>'{{external.location}}', file_format=>'{{external.file_format}}') )\n        {% endset %}\n        {% if execute %}\n            {% set columns_infer = run_query(query_infer_schema) %}\n        {% endif %}\n    {% endif %}\n\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) -%}\n\n{# https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html #}\n{# This assumes you have already created an external stage #}\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n    {%- if columns or partitions or infer_schema -%}\n    (\n        {%- if partitions -%}{%- for partition in partitions %}\n            {{partition.name}} {{partition.data_type}} as {{partition.expression}}{{- ',' if not loop.last or columns|length > 0 or infer_schema -}}\n        {%- endfor -%}{%- endif -%}\n        {%- if not infer_schema -%}\n            {%- for column in columns %}\n                {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n                {%- set column_alias -%}\n                    {%- if 'alias' in column and column.quote -%}\n                        {{adapter.quote(column.alias)}}\n                    {%- elif 'alias' in column -%}\n                        {{column.alias}}\n                    {%- else -%}\n                        {{column_quoted}}\n                    {%- endif -%}\n                {%- endset %}\n                {%- set col_expression -%}\n                    {%- if column.expression -%}\n                        {{column.expression}}\n                    {%- else -%}\n                        {%- set col_id = 'value:c' ~ loop.index if is_csv else 'value:' ~ column_alias -%}\n                        (case when is_null_value({{col_id}}) or lower({{col_id}}) = 'null' then null else {{col_id}} end)\n                    {%- endif -%}\n                {%- endset %}\n                {{column_alias}} {{column.data_type}} as ({{col_expression}}::{{column.data_type}})\n                {{- ',' if not loop.last -}}\n            {% endfor %}\n        {% else %}\n        {%- for column in columns_infer %}\n                {%- set col_expression -%}\n                    {%- set col_id = 'value:' ~ column[0] -%}\n                    (case when is_null_value({{col_id}}) or lower({{col_id}}) = 'null' then null else {{col_id}} end)\n                {%- endset %}\n                {{column[0]}} {{column[1]}} as ({{col_expression}}::{{column[1]}})\n                {{- ',' if not loop.last -}}\n            {% endfor %}\n        {%- endif -%}\n    )\n    {%- endif -%}\n    {% if partitions %} partition by ({{partitions|map(attribute='name')|join(', ')}}) {% endif %}\n    location = {{external.location}} {# stage #}\n    {% if external.auto_refresh in (true, false) -%}\n      auto_refresh = {{external.auto_refresh}}\n    {%- endif %}\n    {% if external.aws_sns_topic -%}\n      aws_sns_topic = '{{external.aws_sns_topic}}'\n    {%- endif %}\n    {% if external.table_format | lower == \"delta\" %}\n      refresh_on_create = false\n    {% endif %}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if external.integration -%} integration = '{{external.integration}}' {%- endif %}\n    file_format = {{external.file_format}}\n    {% if external.table_format -%} table_format = '{{external.table_format}}' {%- endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.9220748, "supported_languages": null}, "macro.dbt_external_tables.snowflake__refresh_external_table": {"name": "snowflake__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/refresh_external_table.sql", "original_file_path": "macros/plugins/snowflake/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.snowflake__refresh_external_table", "macro_sql": "{% macro snowflake__refresh_external_table(source_node) %}\n\n    {% set external = source_node.external %}\n    {% set snowpipe = source_node.external.get('snowpipe', none) %}\n    \n    {% set auto_refresh = external.get('auto_refresh', false) %}\n    {% set partitions = external.get('partitions', none) %}\n    {% set delta_format = (external.table_format | lower == \"delta\") %}\n    \n    {% set manual_refresh = not auto_refresh %}\n    \n    {% if manual_refresh %}\n\n        {% set ddl %}\n        begin;\n        alter external table {{source(source_node.source_name, source_node.name)}} refresh;\n        commit;\n        {% endset %}\n        \n        {% do return([ddl]) %}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.92275, "supported_languages": null}, "macro.dbt_external_tables.snowflake__create_external_schema": {"name": "snowflake__create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/create_external_schema.sql", "original_file_path": "macros/plugins/snowflake/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.snowflake__create_external_schema", "macro_sql": "{% macro snowflake__create_external_schema(source_node) %}\n\n    {% set schema_exists_query %}\n        show terse schemas like '{{ source_node.schema }}' in database {{ source_node.database }} limit 1;\n    {% endset %}\n    {% if execute %}\n        {% set schema_exists = run_query(schema_exists_query)|length > 0 %}\n    {% else %}\n        {% set schema_exists = false %}\n    {% endif %}    \n\n    {% if schema_exists %}\n        {% set ddl %}\n            select 'Schema {{ source_node.schema }} exists' from dual;\n        {% endset %}\n    {% else %}\n        {% set fqn %}\n            {% if source_node.database %}\n                {{ source_node.database }}.{{ source_node.schema }}\n            {% else %}\n                {{ source_node.schema }}\n            {% endif %}\n        {% endset %}\n\n        {% set ddl %}\n            create schema if not exists {{ fqn }};\n        {% endset %}\n    {% endif %}\n\n    {% do return(ddl) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.923454, "supported_languages": null}, "macro.dbt_external_tables.snowflake__get_external_build_plan": {"name": "snowflake__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/get_external_build_plan.sql", "original_file_path": "macros/plugins/snowflake/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.snowflake__get_external_build_plan", "macro_sql": "{% macro snowflake__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if source_node.external.get('snowpipe', none) is not none %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.create_external_schema(source_node),\n                dbt_external_tables.snowflake_create_empty_table(source_node),\n                dbt_external_tables.snowflake_get_copy_sql(source_node, explicit_transaction=true),\n                dbt_external_tables.snowflake_create_snowpipe(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.snowflake_refresh_snowpipe(source_node) %}\n        {% endif %}\n            \n    {% else %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.create_external_schema(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n        {% endif %}\n        \n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.create_external_schema", "macro.dbt_external_tables.snowflake_create_empty_table", "macro.dbt_external_tables.snowflake_get_copy_sql", "macro.dbt_external_tables.snowflake_create_snowpipe", "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.924396, "supported_languages": null}, "macro.dbt_external_tables.snowflake_create_snowpipe": {"name": "snowflake_create_snowpipe", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "unique_id": "macro.dbt_external_tables.snowflake_create_snowpipe", "macro_sql": "{% macro snowflake_create_snowpipe(source_node) %}\n\n    {%- set external = source_node.external -%}\n    {%- set snowpipe = external.snowpipe -%}\n\n{# https://docs.snowflake.com/en/sql-reference/sql/create-pipe.html #}\n    create or replace pipe {{source(source_node.source_name, source_node.name)}}\n        {% if snowpipe.auto_ingest -%} auto_ingest = {{snowpipe.auto_ingest}} {%- endif %}\n        {% if snowpipe.aws_sns_topic -%} aws_sns_topic = '{{snowpipe.aws_sns_topic}}' {%- endif %}\n        {% if snowpipe.integration -%} integration = '{{snowpipe.integration}}' {%- endif %}\n        {% if snowpipe.error_integration -%} error_integration = '{{snowpipe.error_integration}}' {%- endif %}\n        as {{ dbt_external_tables.snowflake_get_copy_sql(source_node) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_get_copy_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.9249291, "supported_languages": null}, "macro.dbt_external_tables.snowflake_create_empty_table": {"name": "snowflake_create_empty_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "unique_id": "macro.dbt_external_tables.snowflake_create_empty_table", "macro_sql": "{% macro snowflake_create_empty_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() %}\n\n    create or replace table {{source(source_node.source_name, source_node.name)}} (\n        {% if columns|length == 0 %}\n            value variant,\n        {% else -%}\n        {%- for column in columns -%}\n            {{column.name}} {{column.data_type}},\n        {% endfor -%}\n        {% endif %}\n            metadata_filename varchar,\n            metadata_file_row_number bigint,\n            metadata_file_last_modified timestamp,\n            _dbt_copied_at timestamp\n    );\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.925281, "supported_languages": null}, "macro.dbt_external_tables.snowflake_refresh_snowpipe": {"name": "snowflake_refresh_snowpipe", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "unique_id": "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro_sql": "{% macro snowflake_refresh_snowpipe(source_node) %}\n\n    {% set snowpipe = source_node.external.snowpipe %}\n    {% set auto_ingest = snowpipe.get('auto_ingest', false) if snowpipe is mapping %}\n    \n    {% if auto_ingest is true %}\n    \n        {% do return([]) %}\n    \n    {% else %}\n    \n        {% set ddl %}\n        alter pipe {{source(source_node.source_name, source_node.name)}} refresh\n        {% endset %}\n        \n        {{ return([ddl]) }}\n    \n    {% endif %}\n    \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.9257169, "supported_languages": null}, "macro.dbt_external_tables.snowflake_get_copy_sql": {"name": "snowflake_get_copy_sql", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "unique_id": "macro.dbt_external_tables.snowflake_get_copy_sql", "macro_sql": "{% macro snowflake_get_copy_sql(source_node, explicit_transaction=false) %}\n{# This assumes you have already created an external stage #}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) %}\n    {%- set copy_options = external.snowpipe.get('copy_options', none) -%}\n\n    {%- if explicit_transaction -%} begin; {%- endif %}\n\n    copy into {{source(source_node.source_name, source_node.name)}}\n    from (\n        select\n        {% if columns|length == 0 %}\n            $1::variant as value,\n        {% else -%}\n        {%- for column in columns -%}\n            {%- set col_expression -%}\n                {%- if is_csv -%}nullif(${{loop.index}},''){# special case: get columns by ordinal position #}\n                {%- else -%}nullif($1:{{column.name}},''){# standard behavior: get columns by name #}\n                {%- endif -%}\n            {%- endset -%}\n            {{col_expression}}::{{column.data_type}} as {{column.name}},\n        {% endfor -%}\n        {% endif %}\n            metadata$filename::varchar as metadata_filename,\n            metadata$file_row_number::bigint as metadata_file_row_number,\n            metadata$file_last_modified::timestamp as metadata_file_last_modified,\n            metadata$start_scan_time::timestamp as _dbt_copied_at\n        from {{external.location}} {# stage #}\n    )\n    file_format = {{external.file_format}}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if copy_options %} {{copy_options}} {% endif %};\n\n    {% if explicit_transaction -%} commit; {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.926662, "supported_languages": null}, "macro.dbt_external_tables.is_csv": {"name": "is_csv", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/helpers/is_csv.sql", "original_file_path": "macros/plugins/snowflake/helpers/is_csv.sql", "unique_id": "macro.dbt_external_tables.is_csv", "macro_sql": "{% macro is_csv(file_format) %}\n\n{# From https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html:\n\nImportant: The external table does not inherit the file format, if any, in the \nstage definition. You must explicitly specify any file format options for the \nexternal table using the FILE_FORMAT parameter.\n\nNote: FORMAT_NAME and TYPE are mutually exclusive; to avoid unintended behavior, \nyou should only specify one or the other when creating an external table.\n\n#}\n\n    {% set ff_ltrimmed = file_format|lower|replace(' ','') %}\n\n    {% if 'type=' in ff_ltrimmed %}\n    \n        {% if 'type=csv' in ff_ltrimmed %}\n\n            {{return(true)}}\n\n        {% else %}\n\n            {{return(false)}}\n            \n        {% endif %}\n        \n    {% else %}\n    \n        {% set ff_standardized = ff_ltrimmed\n            | replace('(','') | replace(')','')\n            | replace('format_name=','') %}\n        {% set fqn = ff_standardized.split('.') %}\n        \n        {% if fqn | length == 3 %}\n            {% set ff_database, ff_schema, ff_identifier = fqn[0], fqn[1], fqn[2] %}\n        {% elif fqn | length == 2 %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, fqn[0], fqn[1] %}\n        {% else %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, target.schema, fqn[0] %}\n        {% endif %}\n    \n        {% call statement('get_file_format', fetch_result = True) %}\n            show file formats in {{ff_database}}.{{ff_schema}}\n        {% endcall %}\n        \n        {% set ffs = load_result('get_file_format').table %}\n        \n        {% for ff in ffs %}\n            \n            {% if ff['name']|lower == ff_identifier and ff['type']|lower == 'csv' %}\n            \n                {{return(true)}}\n            \n            {% endif %}\n        \n        {% endfor %}\n        \n        {{return(false)}}        \n    \n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.928024, "supported_languages": null}, "macro.dbt_external_tables.redshift__create_external_table": {"name": "redshift__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/create_external_table.sql", "original_file_path": "macros/plugins/redshift/create_external_table.sql", "unique_id": "macro.dbt_external_tables.redshift__create_external_table", "macro_sql": "{% macro redshift__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n{# https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_TABLE.html #}\n{# This assumes you have already created an external schema #}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {{adapter.quote(column.name)}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{adapter.quote(partition.name)}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} table properties {{external.table_properties}} {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.928891, "supported_languages": null}, "macro.dbt_external_tables.redshift__refresh_external_table": {"name": "redshift__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/refresh_external_table.sql", "original_file_path": "macros/plugins/redshift/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.redshift__refresh_external_table", "macro_sql": "{% macro redshift__refresh_external_table(source_node) %}\n\n    {%- set partitions = source_node.external.get('partitions',[]) -%}\n\n    {%- if partitions -%}\n    \n        {%- set part_len = partitions|length -%}\n    \n        {%- set get_partitions_sql -%}\n        \n        select * from\n        \n        {%- for partition in partitions %} (\n        \n            {%- set part_num = loop.index -%}\n            \n            {%- if partition.vals.macro -%}\n                {%- set vals = dbt_external_tables.render_from_context(partition.vals.macro, **partition.vals.args) -%}\n            {%- elif partition.vals is string -%}\n                {%- set vals = [partition.vals] -%}\n            {%- else -%}\n                {%- set vals = partition.vals -%}\n            {%- endif -%}\n        \n            {%- for val in vals %}\n            \n                select\n                    '\"{{ partition.name }}\"' as name_{{ part_num }},\n                    '\"{{ val }}\"' as val_{{ part_num }},\n                    '\"{{ dbt_external_tables.render_from_context(partition.path_macro, partition.name, val) }}\"' as path_{{ part_num }}\n                \n                {{ 'union all' if not loop.last else ') ' }}\n            \n            {%- endfor -%}\n            \n            {{ 'cross join' if not loop.last }}\n            \n        {%- endfor -%}\n        \n        {%- endset -%}\n        \n        {%- set finals = [] -%}\n        \n        {%- if execute -%}\n            {%- set results = run_query(get_partitions_sql) -%}\n            {%- for row in results -%}\n                \n                {%- set partition_parts = [] -%}\n                {%- set path_parts = [] -%}\n                \n                {%- for i in range(0, part_len) -%}\n                    {%- do partition_parts.append({\n                        'name': row[i * 3][1:-1],\n                        'value': row[i * 3 + 1][1:-1]\n                    }) -%}\n                    {%- do path_parts.append(row[i * 3 + 2][1:-1]) -%}\n                {%- endfor -%}\n                \n                {%- set construct = {\n                    'partition_by': partition_parts,\n                    'path': path_parts | join('/')\n                }  -%}\n                \n                {% do finals.append(construct) %}\n            {%- endfor -%}\n        {%- endif -%}\n    \n        {%- set ddl = dbt_external_tables.redshift_alter_table_add_partitions(source_node, finals) -%}\n        {{ return(ddl) }}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.render_from_context", "macro.dbt.run_query", "macro.dbt_external_tables.redshift_alter_table_add_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.930677, "supported_languages": null}, "macro.dbt_external_tables.redshift__get_external_build_plan": {"name": "redshift__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/get_external_build_plan.sql", "original_file_path": "macros/plugins/redshift/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.redshift__get_external_build_plan", "macro_sql": "{% macro redshift__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set create_or_replace = (var('ext_full_refresh', false) or not dbt_external_tables.redshift_is_ext_tbl(source_node)) %}\n    \n    {% if create_or_replace %}\n\n        {% set build_plan = [\n                dbt_external_tables.dropif(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] + dbt_external_tables.refresh_external_table(source_node) \n        %}\n        \n    {% else %}\n    \n        {% set build_plan = dbt_external_tables.refresh_external_table(source_node) %}\n        \n    {% endif %}\n    \n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.redshift_is_ext_tbl", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.9311712, "supported_languages": null}, "macro.dbt_external_tables.render_from_context": {"name": "render_from_context", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/render_macro.sql", "original_file_path": "macros/plugins/redshift/helpers/render_macro.sql", "unique_id": "macro.dbt_external_tables.render_from_context", "macro_sql": "{% macro render_from_context(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called by macro '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  \n    {{ return(package_context[name](*varargs, **kwargs)) }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.931809, "supported_languages": null}, "macro.dbt_external_tables.redshift__dropif": {"name": "redshift__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/dropif.sql", "original_file_path": "macros/plugins/redshift/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.redshift__dropif", "macro_sql": "{% macro redshift__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}} cascade\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.9320168, "supported_languages": null}, "macro.dbt_external_tables.redshift_alter_table_add_partitions": {"name": "redshift_alter_table_add_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/add_partitions.sql", "original_file_path": "macros/plugins/redshift/helpers/add_partitions.sql", "unique_id": "macro.dbt_external_tables.redshift_alter_table_add_partitions", "macro_sql": "{% macro redshift_alter_table_add_partitions(source_node, partitions) %}\n\n  {{ log(\"Generating ADD PARTITION statement for partition set between \" \n         ~ partitions[0]['path'] ~ \" and \" ~ (partitions|last)['path']) }}\n\n  {% set ddl = [] %}\n  \n  {% if partitions|length > 0 %}\n  \n    {% set alter_table_add %}\n        alter table {{source(source_node.source_name, source_node.name)}} add if not exists \n    {% endset %}\n  \n    {%- set alters -%}\n\n      {{ alter_table_add }}\n\n    {%- for partition in partitions -%}\n\n      {%- if loop.index0 != 0 and loop.index0 % 100 == 0 -%}\n\n        ; {{ alter_table_add }}\n\n      {%- endif -%}\n\n        partition ({%- for part in partition.partition_by -%}{{ part.name }}='{{ part.value }}'{{', ' if not loop.last}}{%- endfor -%})\n        location '{{ source_node.external.location }}/{{ partition.path }}/'\n\n    {% endfor -%}\n    \n    {%- endset -%}\n    \n    {% set ddl = ddl + alters.split(';') %}\n\n  {% else %}\n\n    {{ log(\"No partitions to be added\") }}\n\n  {% endif %}\n  \n  {% do return(ddl) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.932977, "supported_languages": null}, "macro.dbt_external_tables.redshift__exit_transaction": {"name": "redshift__exit_transaction", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/transaction.sql", "original_file_path": "macros/plugins/redshift/helpers/transaction.sql", "unique_id": "macro.dbt_external_tables.redshift__exit_transaction", "macro_sql": "{% macro redshift__exit_transaction() %}\n    {{ return('begin; commit;') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.933096, "supported_languages": null}, "macro.dbt_external_tables.year_month_day": {"name": "year_month_day", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "unique_id": "macro.dbt_external_tables.year_month_day", "macro_sql": "{% macro year_month_day(name, value) %}\n    {% set path = value.replace('-','/') %}\n    {{return(path)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.93332, "supported_languages": null}, "macro.dbt_external_tables.key_value": {"name": "key_value", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "unique_id": "macro.dbt_external_tables.key_value", "macro_sql": "{% macro key_value(name, value) %}\n    {% set path = name ~ '=' ~ value %}\n    {{return(path)}}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.933457, "supported_languages": null}, "macro.dbt_external_tables.value_only": {"name": "value_only", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "unique_id": "macro.dbt_external_tables.value_only", "macro_sql": "{% macro value_only(name, value) %}\n    {% set path = value %}\n    {{return(path)}}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.933573, "supported_languages": null}, "macro.dbt_external_tables.redshift_is_ext_tbl": {"name": "redshift_is_ext_tbl", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "original_file_path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "unique_id": "macro.dbt_external_tables.redshift_is_ext_tbl", "macro_sql": "{% macro redshift_is_ext_tbl(node) %}\n\n    {% set existing_relation = load_relation(node) %}\n    \n    {#  external tables don't appear in information_schema.tables,\n        so dbt doesn't cache them #}\n    {% if existing_relation is none %}\n\n        {% set find_ext_tbl %}\n        \n            select count(*) from svv_external_tables\n            where schemaname = '{{node.schema}}'\n            and tablename = '{{node.identifier}}'\n        \n        {% endset %}\n        \n        {% if execute %}\n            {% set result = run_query(find_ext_tbl)[0][0] %}\n        {% else %}\n            {% set result = 0 %}\n        {% endif %}\n\n        {% set is_ext_tbl = (result > 0) %}\n        {% do return(is_ext_tbl) %}\n        \n    {% else %}\n    \n        {% do return(false) %}\n        \n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.934148, "supported_languages": null}, "macro.dbt_external_tables.sqlserver__create_external_table": {"name": "sqlserver__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/sqlserver/create_external_table.sql", "original_file_path": "macros/plugins/sqlserver/create_external_table.sql", "unique_id": "macro.dbt_external_tables.sqlserver__create_external_table", "macro_sql": "{% macro sqlserver__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n\n    {% if external.ansi_nulls is true -%} SET ANSI_NULLS ON; {%- endif %}\n    {% if external.quoted_identifier is true -%} SET QUOTED_IDENTIFIER ON; {%- endif %}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {# TODO set nullity based on schema tests?? #}\n            {%- set nullity = 'NOT NULL' if 'not_null' in columns.tests else 'NULL'-%}\n            {{adapter.quote(column.name)}} {{column.data_type}} {{nullity}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    WITH (\n        {# remove keys that are None (i.e. not defined for a given source) #}\n        {%- for key, value in external.items() if value is not none and key not in ['ansi_nulls', 'quoted_identifier'] -%}\n            {{key}} = \n                {%- if key in [\"location\", \"schema_name\", \"object_name\"] -%}\n                    '{{value}}'\n                {% elif key in [\"data_source\",\"file_format\"] -%}\n                    [{{value}}]\n                {% else -%}\n                    {{value}}\n                {%- endif -%}\n            {{- ',' if not loop.last -}}\n            {%- endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.935122, "supported_languages": null}, "macro.dbt_external_tables.sqlserver__create_external_schema": {"name": "sqlserver__create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/sqlserver/create_external_schema.sql", "original_file_path": "macros/plugins/sqlserver/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.sqlserver__create_external_schema", "macro_sql": "{% macro sqlserver__create_external_schema(source_node) %}\n    {# https://learn.microsoft.com/en-us/sql/t-sql/statements/create-schema-transact-sql?view=sql-server-ver16 #}\n\n    {% set ddl %}\n        IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = '{{ source_node.schema }}')\n        BEGIN\n        EXEC('CREATE SCHEMA [{{ source_node.schema }}]')\n        END \n    {% endset %}\n\n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.9353468, "supported_languages": null}, "macro.dbt_external_tables.sqlserver__get_external_build_plan": {"name": "sqlserver__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/sqlserver/get_external_build_plan.sql", "original_file_path": "macros/plugins/sqlserver/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.sqlserver__get_external_build_plan", "macro_sql": "{% macro sqlserver__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [ \n            dbt_external_tables.create_external_schema(source_node),\n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.create_external_schema", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.935916, "supported_languages": null}, "macro.dbt_external_tables.sqlserver__dropif": {"name": "sqlserver__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/sqlserver/helpers/dropif.sql", "original_file_path": "macros/plugins/sqlserver/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.sqlserver__dropif", "macro_sql": "{% macro sqlserver__dropif(node) %}\n    \n    {% set ddl %}\n      if object_id ('{{source(node.source_name, node.name)}}') is not null\n        begin\n        drop external table {{source(node.source_name, node.name)}}\n        end\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.9361799, "supported_languages": null}, "macro.dbt_external_tables.spark__create_external_table": {"name": "spark__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/create_external_table.sql", "original_file_path": "macros/plugins/spark/create_external_table.sql", "unique_id": "macro.dbt_external_tables.spark__create_external_table", "macro_sql": "{% macro spark__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n\n    {%- set columns_and_partitions = columns | list -%}\n    {%- if partitions -%}\n        {%- for i in partitions -%}\n            {%- if i.name not in columns_and_partitions | list | map(attribute='name') -%}\n                {%- do columns_and_partitions.append(i) -%}\n            {%- endif -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n{# https://spark.apache.org/docs/latest/sql-data-sources-hive-tables.html #}\n    create table {{source(source_node.source_name, source_node.name)}} \n    {%- if columns | length > 0 %} (\n        {% for column in columns_and_partitions %}\n            {{column.name}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    ) {% endif -%}\n    {% if external.using %} using {{external.using}} {%- endif %}\n    {% if options -%} options (\n        {%- for key, value in options.items() -%}\n            '{{ key }}' = '{{value}}' {{- ', \\n' if not loop.last -}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{partition.name}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} tblproperties {{ external.table_properties }} {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.9375842, "supported_languages": null}, "macro.dbt_external_tables.spark__refresh_external_table": {"name": "spark__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/refresh_external_table.sql", "original_file_path": "macros/plugins/spark/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.spark__refresh_external_table", "macro_sql": "{% macro spark__refresh_external_table(source_node) %}\n    \n    {% set refresh %}\n        refresh table {{source(source_node.source_name, source_node.name)}}\n    {% endset %}\n    \n    {% do return([refresh]) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.937811, "supported_languages": null}, "macro.dbt_external_tables.spark__get_external_build_plan": {"name": "spark__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/get_external_build_plan.sql", "original_file_path": "macros/plugins/spark/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.spark__get_external_build_plan", "macro_sql": "{% macro spark__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = none,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [\n            dbt_external_tables.create_external_schema(source_node),\n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% set recover_partitions = dbt_external_tables.recover_partitions(source_node) %}\n    {% if recover_partitions %}\n    {% set build_plan = build_plan + [\n        recover_partitions\n    ] %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.create_external_schema", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table", "macro.dbt_external_tables.recover_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.938507, "supported_languages": null}, "macro.dbt_external_tables.spark__recover_partitions": {"name": "spark__recover_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "unique_id": "macro.dbt_external_tables.spark__recover_partitions", "macro_sql": "{% macro spark__recover_partitions(source_node) %}\n    {# https://docs.databricks.com/sql/language-manual/sql-ref-syntax-ddl-alter-table.html #}\n\n    {%- if source_node.external.partitions and source_node.external.using and source_node.external.using|lower != 'delta' -%}\n        {% set ddl %}\n            ALTER TABLE {{ source(source_node.source_name, source_node.name) }} RECOVER PARTITIONS\n        {% endset %}\n    {%- else -%}\n        {% set ddl = none %}\n    {%- endif -%}\n\n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.938943, "supported_languages": null}, "macro.dbt_external_tables.recover_partitions": {"name": "recover_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "unique_id": "macro.dbt_external_tables.recover_partitions", "macro_sql": "{% macro recover_partitions(source_node) %}\n    {{ return(adapter.dispatch('recover_partitions', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.default__recover_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.93907, "supported_languages": null}, "macro.dbt_external_tables.default__recover_partitions": {"name": "default__recover_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "unique_id": "macro.dbt_external_tables.default__recover_partitions", "macro_sql": "{% macro default__recover_partitions(source_node) %}\n    /*{# \n        We're dispatching this macro so that users can override it if required on other adapters\n        but this will work for spark/databricks. \n    #}*/\n\n    {{ exceptions.raise_not_implemented('recover_partitions macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.9391942, "supported_languages": null}, "macro.dbt_external_tables.spark__dropif": {"name": "spark__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/dropif.sql", "original_file_path": "macros/plugins/spark/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.spark__dropif", "macro_sql": "{% macro spark__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}}\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.9393978, "supported_languages": null}, "macro.dbt_external_tables.update_external_table_columns": {"name": "update_external_table_columns", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/update_external_table_columns.sql", "original_file_path": "macros/common/update_external_table_columns.sql", "unique_id": "macro.dbt_external_tables.update_external_table_columns", "macro_sql": "{% macro update_external_table_columns(source_node) %}\n    {{ return(adapter.dispatch('update_external_table_columns', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.default__update_external_table_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.939569, "supported_languages": null}, "macro.dbt_external_tables.default__update_external_table_columns": {"name": "default__update_external_table_columns", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/update_external_table_columns.sql", "original_file_path": "macros/common/update_external_table_columns.sql", "unique_id": "macro.dbt_external_tables.default__update_external_table_columns", "macro_sql": "{% macro default__update_external_table_columns(source_node) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.9396322, "supported_languages": null}, "macro.dbt_external_tables.create_external_table": {"name": "create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "unique_id": "macro.dbt_external_tables.create_external_table", "macro_sql": "{% macro create_external_table(source_node) %}\n    {{ adapter.dispatch('create_external_table', 'dbt_external_tables')(source_node) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__create_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.9398022, "supported_languages": null}, "macro.dbt_external_tables.default__create_external_table": {"name": "default__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "unique_id": "macro.dbt_external_tables.default__create_external_table", "macro_sql": "{% macro default__create_external_table(source_node) %}\n    {{ exceptions.raise_compiler_error(\"External table creation is not implemented for the default adapter\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.9399, "supported_languages": null}, "macro.dbt_external_tables.refresh_external_table": {"name": "refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.refresh_external_table", "macro_sql": "{% macro refresh_external_table(source_node) %}\n    {{ return(adapter.dispatch('refresh_external_table', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.940076, "supported_languages": null}, "macro.dbt_external_tables.default__refresh_external_table": {"name": "default__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.default__refresh_external_table", "macro_sql": "{% macro default__refresh_external_table(source_node) %}\n    {% do return([]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.940178, "supported_languages": null}, "macro.dbt_external_tables.create_external_schema": {"name": "create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_schema.sql", "original_file_path": "macros/common/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.create_external_schema", "macro_sql": "{%- macro create_external_schema(source_node) -%}\n    {{ adapter.dispatch('create_external_schema', 'dbt_external_tables')(source_node) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__create_external_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.940402, "supported_languages": null}, "macro.dbt_external_tables.default__create_external_schema": {"name": "default__create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_schema.sql", "original_file_path": "macros/common/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.default__create_external_schema", "macro_sql": "{%- macro default__create_external_schema(source_node) -%}\n    {%- set fqn -%}\n        {%- if source_node.database -%}\n            {{ source_node.database }}.{{ source_node.schema }}\n        {%- else -%}\n            {{ source_node.schema }}\n        {%- endif -%}\n    {%- endset -%}\n\n    {%- set ddl -%}\n        create schema if not exists {{ fqn }}\n    {%- endset -%}\n\n    {{ return(ddl) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.940633, "supported_languages": null}, "macro.dbt_external_tables.get_external_build_plan": {"name": "get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.get_external_build_plan", "macro_sql": "{% macro get_external_build_plan(source_node) %}\n    {{ return(adapter.dispatch('get_external_build_plan', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__get_external_build_plan"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.940819, "supported_languages": null}, "macro.dbt_external_tables.default__get_external_build_plan": {"name": "default__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.default__get_external_build_plan", "macro_sql": "{% macro default__get_external_build_plan(source_node) %}\n    {{ exceptions.raise_compiler_error(\"Staging external sources is not implemented for the default adapter\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.940932, "supported_languages": null}, "macro.dbt_external_tables.stage_external_sources": {"name": "stage_external_sources", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/stage_external_sources.sql", "original_file_path": "macros/common/stage_external_sources.sql", "unique_id": "macro.dbt_external_tables.stage_external_sources", "macro_sql": "{% macro stage_external_sources(select=none) %}\n\n    {% set sources_to_stage = [] %}\n    \n    {% set source_nodes = graph.sources.values() if graph.sources else [] %}\n    \n    {% for node in source_nodes %}\n        {% if node.external %}\n            \n            {% if select %}\n            \n                {% for src in select.split(' ') %}\n                \n                    {% if '.' in src %}\n                        {% set src_s = src.split('.') %}\n                        {% if src_s[0] == node.source_name and src_s[1] == node.name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% else %}\n                        {% if src == node.source_name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% endif %}\n                    \n                {% endfor %}\n                        \n            {% else %}\n            \n                {% do sources_to_stage.append(node) %}\n                \n            {% endif %}\n        {% endif %}\n        \n    {% endfor %}\n    \n    {% if sources_to_stage|length == 0 %}\n        {% do log('No external sources selected', info = true) %}\n    {% endif %}\n            \n    {% for node in sources_to_stage %}\n\n        {% set loop_label = loop.index ~ ' of ' ~ loop.length %}\n\n        {% do log(loop_label ~ ' START external source ' ~ node.schema ~ '.' ~ node.identifier, info = true) -%}\n        \n        {% set run_queue = dbt_external_tables.get_external_build_plan(node) %}\n        \n        {% do log(loop_label ~ ' SKIP', info = true) if run_queue == [] %}\n        {% set width = flags.PRINTER_WIDTH %}\n        \n        {% for q in run_queue %}\n        \n            {% set q_msg = q|replace('\\n','')|replace('begin;','')|trim %}\n            {% set q_log = q_msg[:width] ~ '...  ' if q_msg|length > width else q_msg %}\n        \n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ q_log, info = true) %}\n            {% set exit_txn = dbt_external_tables.exit_transaction() %}\n        \n            {% call statement('runner', fetch_result = True, auto_begin = False) %}\n                {{ exit_txn }} {{ q }}\n            {% endcall %}\n            \n            {% set runner = load_result('runner') %}\n            {% set log_msg = runner['response'] if 'response' in runner.keys() else runner['status'] %}\n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ log_msg, info = true) %}\n            \n        {% endfor %}\n        \n        {% set update_columns = dbt_external_tables.update_external_table_columns(node) %}\n        {{ update_columns }}\n\n    {% endfor %}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.get_external_build_plan", "macro.dbt_external_tables.exit_transaction", "macro.dbt.statement", "macro.dbt_external_tables.update_external_table_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.943151, "supported_languages": null}, "macro.dbt_external_tables.dropif": {"name": "dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.dropif", "macro_sql": "{% macro dropif(node) %}\n    {{ adapter.dispatch('dropif', 'dbt_external_tables')(node) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.default__dropif"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.94335, "supported_languages": null}, "macro.dbt_external_tables.default__dropif": {"name": "default__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.default__dropif", "macro_sql": "{% macro default__dropif() %}\n    {{ exceptions.raise_compiler_error(\n        \"Dropping external tables is not implemented for the default adapter\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.943438, "supported_languages": null}, "macro.dbt_external_tables.exit_transaction": {"name": "exit_transaction", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "unique_id": "macro.dbt_external_tables.exit_transaction", "macro_sql": "{% macro exit_transaction() %}\n    {{ return(adapter.dispatch('exit_transaction', 'dbt_external_tables')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.default__exit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.943603, "supported_languages": null}, "macro.dbt_external_tables.default__exit_transaction": {"name": "default__exit_transaction", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "unique_id": "macro.dbt_external_tables.default__exit_transaction", "macro_sql": "{% macro default__exit_transaction() %}\n    {{ return('') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.943684, "supported_languages": null}, "macro.datavault4dbt.control_snap_v0": {"name": "control_snap_v0", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/control_snap_v0.sql", "original_file_path": "macros/tables/control_snap_v0.sql", "unique_id": "macro.datavault4dbt.control_snap_v0", "macro_sql": "\n\n{%- macro control_snap_v0(start_date, daily_snapshot_time, sdts_alias=none, end_date=none) -%}\n    \n    {%- set sdts_alias = datavault4dbt.replace_standard(sdts_alias, 'datavault4dbt.sdts_alias', 'sdts') -%}\n\n    {{ adapter.dispatch('control_snap_v0', 'datavault4dbt')(start_date=start_date,\n                                                            daily_snapshot_time=daily_snapshot_time,\n                                                            sdts_alias=sdts_alias,\n                                                            end_date=end_date) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.replace_standard", "macro.datavault4dbt.snowflake__control_snap_v0"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.944331, "supported_languages": null}, "macro.datavault4dbt.control_snap_v1": {"name": "control_snap_v1", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/control_snap_v1.sql", "original_file_path": "macros/tables/control_snap_v1.sql", "unique_id": "macro.datavault4dbt.control_snap_v1", "macro_sql": "\n\n{%- macro control_snap_v1(control_snap_v0, log_logic=none, sdts_alias=none) -%}\n\n{%- set sdts_alias = datavault4dbt.replace_standard(sdts_alias, 'datavault4dbt.sdts_alias', 'sdts') -%}\n\n{{ adapter.dispatch('control_snap_v1', 'datavault4dbt')(control_snap_v0=control_snap_v0,\n                                                                    log_logic=log_logic,\n                                                                    sdts_alias=sdts_alias) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.replace_standard", "macro.datavault4dbt.snowflake__control_snap_v1"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.9450471, "supported_languages": null}, "macro.datavault4dbt.pit": {"name": "pit", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/pit.sql", "original_file_path": "macros/tables/pit.sql", "unique_id": "macro.datavault4dbt.pit", "macro_sql": "\n\n\n\n{%- macro pit(tracked_entity, hashkey, sat_names, snapshot_relation, dimension_key, snapshot_trigger_column=none, ldts=none, custom_rsrc=none, ledts=none, sdts=none, pit_type=none) -%}\n\n    {# Applying the default aliases as stored inside the global variables, if ldts, sdts and ledts are not set. #}\n\n    {%- set ldts = datavault4dbt.replace_standard(ldts, 'datavault4dbt.ldts_alias', 'ldts') -%}\n    {%- set ledts = datavault4dbt.replace_standard(ledts, 'datavault4dbt.ledts_alias', 'ledts') -%}\n    {%- set sdts = datavault4dbt.replace_standard(sdts, 'datavault4dbt.sdts_alias', 'sdts') -%}\n\n    {{ return(adapter.dispatch('pit','datavault4dbt')(pit_type=pit_type,\n                                                        tracked_entity=tracked_entity,\n                                                        hashkey=hashkey,\n                                                        sat_names=sat_names,\n                                                        ldts=ldts,\n                                                        sdts=sdts,\n                                                        custom_rsrc=custom_rsrc,\n                                                        ledts=ledts,\n                                                        snapshot_relation=snapshot_relation,\n                                                        snapshot_trigger_column=snapshot_trigger_column,\n                                                        dimension_key=dimension_key)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.replace_standard", "macro.datavault4dbt.snowflake__pit"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.946065, "supported_languages": null}, "macro.datavault4dbt.ref_sat_v0": {"name": "ref_sat_v0", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/ref_sat_v0.sql", "original_file_path": "macros/tables/ref_sat_v0.sql", "unique_id": "macro.datavault4dbt.ref_sat_v0", "macro_sql": "\n\n\n\n\n{%- macro ref_sat_v0(parent_ref_keys, src_hashdiff, src_payload, source_model, src_ldts=none, src_rsrc=none, disable_hwm=false, source_is_single_batch=false) -%}\n\n    {# Applying the default aliases as stored inside the global variables, if src_ldts, src_rsrc, and ledts_alias are not set. #}\n    {%- set src_ldts = datavault4dbt.replace_standard(src_ldts, 'datavault4dbt.ldts_alias', 'ldts') -%}\n    {%- set src_rsrc = datavault4dbt.replace_standard(src_rsrc, 'datavault4dbt.rsrc_alias', 'rsrc') -%}\n\n    {{ adapter.dispatch('ref_sat_v0', 'datavault4dbt')(parent_ref_keys=parent_ref_keys,\n                                         src_hashdiff=src_hashdiff,\n                                         src_payload=src_payload,\n                                         src_ldts=src_ldts,\n                                         src_rsrc=src_rsrc,\n                                         source_model=source_model,\n                                         disable_hwm=disable_hwm,\n                                         source_is_single_batch=source_is_single_batch) \n    }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.replace_standard", "macro.datavault4dbt.snowflake__ref_sat_v0"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.946665, "supported_languages": null}, "macro.datavault4dbt.ref_sat_v1": {"name": "ref_sat_v1", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/ref_sat_v1.sql", "original_file_path": "macros/tables/ref_sat_v1.sql", "unique_id": "macro.datavault4dbt.ref_sat_v1", "macro_sql": "\n\n\n\n{%- macro ref_sat_v1(ref_sat_v0, ref_keys, hashdiff, src_ldts=none, src_rsrc=none, ledts_alias=none, add_is_current_flag=false) -%}\n\n    {# Applying the default aliases as stored inside the global variables, if src_ldts, src_rsrc, and ledts_alias are not set. #}\n    \n    {%- set src_ldts = datavault4dbt.replace_standard(src_ldts, 'datavault4dbt.ldts_alias', 'ldts') -%}\n    {%- set src_rsrc = datavault4dbt.replace_standard(src_rsrc, 'datavault4dbt.rsrc_alias', 'rsrc') -%}\n    {%- set src_ledts = datavault4dbt.replace_standard(src_ledts, 'datavault4dbt.ledts_alias', 'ledts') -%}\n\n    {{ adapter.dispatch('ref_sat_v1', 'datavault4dbt')(ref_sat_v0=ref_sat_v0,\n                                         ref_keys=ref_keys,\n                                         hashdiff=hashdiff,\n                                         src_ldts=src_ldts,\n                                         src_rsrc=src_rsrc,\n                                         ledts_alias=ledts_alias,\n                                         add_is_current_flag=add_is_current_flag) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.replace_standard", "macro.datavault4dbt.snowflake__ref_sat_v1"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.9473011, "supported_languages": null}, "macro.datavault4dbt.nh_link": {"name": "nh_link", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/nh_link.sql", "original_file_path": "macros/tables/nh_link.sql", "unique_id": "macro.datavault4dbt.nh_link", "macro_sql": "\n\n{%- macro nh_link(link_hashkey, foreign_hashkeys, payload, source_models, src_ldts=none, src_rsrc=none, disable_hwm=false, source_is_single_batch=false) -%}\n\n    {# Applying the default aliases as stored inside the global variables, if src_ldts and src_rsrc are not set. #}\n\n    {%- set src_ldts = datavault4dbt.replace_standard(src_ldts, 'datavault4dbt.ldts_alias', 'ldts') -%}\n    {%- set src_rsrc = datavault4dbt.replace_standard(src_rsrc, 'datavault4dbt.rsrc_alias', 'rsrc') -%}\n\n    {{- adapter.dispatch('nh_link', 'datavault4dbt')(link_hashkey=link_hashkey,\n                                                        payload=payload,\n                                                        foreign_hashkeys=foreign_hashkeys,\n                                                        src_ldts=src_ldts,\n                                                        src_rsrc=src_rsrc,\n                                                        source_models=source_models,\n                                                        disable_hwm=disable_hwm,\n                                                        source_is_single_batch=source_is_single_batch) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.replace_standard", "macro.datavault4dbt.snowflake__nh_link"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.949622, "supported_languages": null}, "macro.datavault4dbt.ref_table": {"name": "ref_table", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/ref_table.sql", "original_file_path": "macros/tables/ref_table.sql", "unique_id": "macro.datavault4dbt.ref_table", "macro_sql": "\n\n\n{%- macro ref_table(ref_hub, ref_satellites, src_ldts=none, src_rsrc=none, historized='latest', snapshot_relation=none, snapshot_trigger_column=none) -%}\n    {# Applying the default aliases as stored inside the global variables, if src_ldts and src_rsrc are not set. #}\n\n    {%- set src_ldts = datavault4dbt.replace_standard(src_ldts, 'datavault4dbt.ldts_alias', 'ldts') -%}\n    {%- set src_rsrc = datavault4dbt.replace_standard(src_rsrc, 'datavault4dbt.rsrc_alias', 'rsrc') -%}\n    {%- set snapshot_trigger_column = datavault4dbt.replace_standard(snapshot_trigger_column, 'datavault4dbt.snapshot_trigger_column', 'is_active') -%}\n\n    {{ return(adapter.dispatch('ref_table', 'datavault4dbt')(ref_hub=ref_hub,\n                                                            src_ldts=src_ldts,\n                                                            src_rsrc=src_rsrc,\n                                                            ref_satellites=ref_satellites,\n                                                            historized=historized,\n                                                            snapshot_relation=snapshot_relation,\n                                                            snapshot_trigger_column=snapshot_trigger_column)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.replace_standard", "macro.datavault4dbt.snowflake__ref_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.950378, "supported_languages": null}, "macro.datavault4dbt.hub": {"name": "hub", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/hub.sql", "original_file_path": "macros/tables/hub.sql", "unique_id": "macro.datavault4dbt.hub", "macro_sql": "\n\n\n{%- macro hub(hashkey, business_keys, source_models, src_ldts=none, src_rsrc=none, disable_hwm=false) -%}\n\n    {# Applying the default aliases as stored inside the global variables, if src_ldts and src_rsrc are not set. #}\n\n    {%- set src_ldts = datavault4dbt.replace_standard(src_ldts, 'datavault4dbt.ldts_alias', 'ldts') -%}\n    {%- set src_rsrc = datavault4dbt.replace_standard(src_rsrc, 'datavault4dbt.rsrc_alias', 'rsrc') -%}\n\n    {{ return(adapter.dispatch('hub', 'datavault4dbt')(hashkey=hashkey,\n                                                            business_keys=business_keys,\n                                                            src_ldts=src_ldts,\n                                                            src_rsrc=src_rsrc,\n                                                            source_models=source_models,\n                                                            disable_hwm=disable_hwm)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.replace_standard", "macro.datavault4dbt.snowflake__hub"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.952178, "supported_languages": null}, "macro.datavault4dbt.link": {"name": "link", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/link.sql", "original_file_path": "macros/tables/link.sql", "unique_id": "macro.datavault4dbt.link", "macro_sql": "\n\n{%- macro link(link_hashkey, foreign_hashkeys, source_models, src_ldts=none, src_rsrc=none, disable_hwm=false) -%}\n\n    {# Applying the default aliases as stored inside the global variables, if src_ldts and src_rsrc are not set. #}\n\n    {%- set src_ldts = datavault4dbt.replace_standard(src_ldts, 'datavault4dbt.ldts_alias', 'ldts') -%}\n    {%- set src_rsrc = datavault4dbt.replace_standard(src_rsrc, 'datavault4dbt.rsrc_alias', 'rsrc') -%}\n\n    {{- adapter.dispatch('link', 'datavault4dbt')(link_hashkey=link_hashkey, foreign_hashkeys=foreign_hashkeys,\n                                             src_ldts=src_ldts, src_rsrc=src_rsrc,\n                                             source_models=source_models,\n                                             disable_hwm=disable_hwm) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.replace_standard", "macro.datavault4dbt.snowflake__link"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.954098, "supported_languages": null}, "macro.datavault4dbt.ref_hub": {"name": "ref_hub", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/ref_hub.sql", "original_file_path": "macros/tables/ref_hub.sql", "unique_id": "macro.datavault4dbt.ref_hub", "macro_sql": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n{%- macro ref_hub(ref_keys, source_models, src_ldts=none, src_rsrc=none) -%}\n\n    {# Applying the default aliases as stored inside the global variables, if src_ldts and src_rsrc are not set. #}\n\n    {%- set src_ldts = datavault4dbt.replace_standard(src_ldts, 'datavault4dbt.ldts_alias', 'ldts') -%}\n    {%- set src_rsrc = datavault4dbt.replace_standard(src_rsrc, 'datavault4dbt.rsrc_alias', 'rsrc') -%}\n\n    {{ return(adapter.dispatch('ref_hub', 'datavault4dbt')(ref_keys=ref_keys,\n                                                            src_ldts=src_ldts,\n                                                            src_rsrc=src_rsrc,\n                                                            source_models=source_models)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.replace_standard", "macro.datavault4dbt.snowflake__ref_hub"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.954578, "supported_languages": null}, "macro.datavault4dbt.nh_sat": {"name": "nh_sat", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/nh_sat.sql", "original_file_path": "macros/tables/nh_sat.sql", "unique_id": "macro.datavault4dbt.nh_sat", "macro_sql": "\n\n{%- macro nh_sat(parent_hashkey, src_payload, source_model, src_ldts=none, src_rsrc=none, source_is_single_batch=false) -%}\n\n    {# Applying the default aliases as stored inside the global variables, if src_ldts and src_rsrc are not set. #}\n\n    {%- set src_ldts = datavault4dbt.replace_standard(src_ldts, 'datavault4dbt.ldts_alias', 'ldts') -%}\n    {%- set src_rsrc = datavault4dbt.replace_standard(src_rsrc, 'datavault4dbt.rsrc_alias', 'rsrc') -%}\n\n    {{ adapter.dispatch('nh_sat', 'datavault4dbt')(parent_hashkey=parent_hashkey,\n                                         src_payload=src_payload,\n                                         src_ldts=src_ldts,\n                                         src_rsrc=src_rsrc,\n                                         source_model=source_model,\n                                         source_is_single_batch=source_is_single_batch) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.replace_standard", "macro.datavault4dbt.snowflake__nh_sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.955256, "supported_languages": null}, "macro.datavault4dbt.ma_sat_v1": {"name": "ma_sat_v1", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/ma_sat_v1.sql", "original_file_path": "macros/tables/ma_sat_v1.sql", "unique_id": "macro.datavault4dbt.ma_sat_v1", "macro_sql": "\n\n{%- macro ma_sat_v1(sat_v0, hashkey, hashdiff, ma_attribute, src_ldts=none, src_rsrc=none, ledts_alias=none, add_is_current_flag=false) -%}\n\n    {# Applying the default aliases as stored inside the global variables, if src_ldts, src_rsrc, and ledts_alias are not set. #}\n\n    {%- set src_ldts = datavault4dbt.replace_standard(src_ldts, 'datavault4dbt.ldts_alias', 'ldts') -%}\n    {%- set src_rsrc = datavault4dbt.replace_standard(src_rsrc, 'datavault4dbt.rsrc_alias', 'rsrc') -%}\n    {%- set ledts_alias = datavault4dbt.replace_standard(ledts_alias, 'datavault4dbt.ledts_alias', 'ledts') -%}\n\n    {{ adapter.dispatch('ma_sat_v1', 'datavault4dbt')(sat_v0=sat_v0,\n                                                      hashkey=hashkey,\n                                                      hashdiff=hashdiff,\n                                                      ma_attribute=ma_attribute,\n                                                      src_ldts=src_ldts,\n                                                      src_rsrc=src_rsrc,\n                                                      ledts_alias=ledts_alias,\n                                                      add_is_current_flag=add_is_current_flag) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.replace_standard", "macro.datavault4dbt.snowflake__ma_sat_v1"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.956411, "supported_languages": null}, "macro.datavault4dbt.ma_sat_v0": {"name": "ma_sat_v0", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/ma_sat_v0.sql", "original_file_path": "macros/tables/ma_sat_v0.sql", "unique_id": "macro.datavault4dbt.ma_sat_v0", "macro_sql": "\n\n{%- macro ma_sat_v0(parent_hashkey, src_hashdiff, src_ma_key, src_payload, source_model, src_ldts=none, src_rsrc=none) -%}\n\n    {# Applying the default aliases as stored inside the global variables, if src_ldts and src_rsrc are not set. #}\n\n    {%- set src_ldts = datavault4dbt.replace_standard(src_ldts, 'datavault4dbt.ldts_alias', 'ldts') -%}\n    {%- set src_rsrc = datavault4dbt.replace_standard(src_rsrc, 'datavault4dbt.rsrc_alias', 'rsrc') -%}\n\n    {{ adapter.dispatch('ma_sat_v0', 'datavault4dbt')(parent_hashkey=parent_hashkey,\n                                         src_hashdiff=src_hashdiff,\n                                         src_ma_key=src_ma_key,\n                                         src_payload=src_payload,\n                                         src_ldts=src_ldts,\n                                         src_rsrc=src_rsrc,\n                                         source_model=source_model) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.replace_standard", "macro.datavault4dbt.snowflake__ma_sat_v0"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.957367, "supported_languages": null}, "macro.datavault4dbt.sat_v0": {"name": "sat_v0", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/sat_v0.sql", "original_file_path": "macros/tables/sat_v0.sql", "unique_id": "macro.datavault4dbt.sat_v0", "macro_sql": "\n\n{%- macro sat_v0(parent_hashkey, src_hashdiff, src_payload, source_model, src_ldts=none, src_rsrc=none, disable_hwm=false, source_is_single_batch=false) -%}\n\n    {# Applying the default aliases as stored inside the global variables, if src_ldts, src_rsrc, and ledts_alias are not set. #}\n    {%- set src_ldts = datavault4dbt.replace_standard(src_ldts, 'datavault4dbt.ldts_alias', 'ldts') -%}\n    {%- set src_rsrc = datavault4dbt.replace_standard(src_rsrc, 'datavault4dbt.rsrc_alias', 'rsrc') -%}\n\n    {{ adapter.dispatch('sat_v0', 'datavault4dbt')(parent_hashkey=parent_hashkey,\n                                         src_hashdiff=src_hashdiff,\n                                         src_payload=src_payload,\n                                         src_ldts=src_ldts,\n                                         src_rsrc=src_rsrc,\n                                         source_model=source_model,\n                                         disable_hwm=disable_hwm,\n                                         source_is_single_batch=source_is_single_batch) \n    }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.replace_standard", "macro.datavault4dbt.snowflake__sat_v0"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.958226, "supported_languages": null}, "macro.datavault4dbt.rec_track_sat": {"name": "rec_track_sat", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/rec_track_sat.sql", "original_file_path": "macros/tables/rec_track_sat.sql", "unique_id": "macro.datavault4dbt.rec_track_sat", "macro_sql": "\n\n{%- macro rec_track_sat(tracked_hashkey, source_models, src_ldts=none, src_rsrc=none, src_stg=none, disable_hwm=false) -%}\n\n    {# Applying the default aliases as stored inside the global variables, if src_ldts and src_rsrc are not set. #}\n\n    {%- set src_ldts = datavault4dbt.replace_standard(src_ldts, 'datavault4dbt.ldts_alias', 'ldts') -%}\n    {%- set src_rsrc = datavault4dbt.replace_standard(src_rsrc, 'datavault4dbt.rsrc_alias', 'rsrc') -%}\n    {%- set src_stg = datavault4dbt.replace_standard(src_stg, 'datavault4dbt.stg_alias', 'stg') -%}\n\n    {{ return(adapter.dispatch('rec_track_sat', 'datavault4dbt')(tracked_hashkey=tracked_hashkey,\n                                                                      source_models=source_models,\n                                                                      src_ldts=src_ldts,\n                                                                      src_rsrc=src_rsrc,\n                                                                      src_stg=src_stg,\n                                                                      disable_hwm=disable_hwm)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.replace_standard", "macro.datavault4dbt.snowflake__rec_track_sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.9599009, "supported_languages": null}, "macro.datavault4dbt.sat_v1": {"name": "sat_v1", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/sat_v1.sql", "original_file_path": "macros/tables/sat_v1.sql", "unique_id": "macro.datavault4dbt.sat_v1", "macro_sql": "\n\n{%- macro sat_v1(sat_v0, hashkey, hashdiff, src_ldts=none, src_rsrc=none, ledts_alias=none, add_is_current_flag=false, include_payload=true) -%}\n\n    {# Applying the default aliases as stored inside the global variables, if src_ldts, src_rsrc, and ledts_alias are not set. #}\n    \n    {%- set src_ldts = datavault4dbt.replace_standard(src_ldts, 'datavault4dbt.ldts_alias', 'ldts') -%}\n    {%- set src_rsrc = datavault4dbt.replace_standard(src_rsrc, 'datavault4dbt.rsrc_alias', 'rsrc') -%}\n    {%- set ledts_alias = datavault4dbt.replace_standard(ledts_alias, 'datavault4dbt.ledts_alias', 'ledts') -%}\n\n    {{ adapter.dispatch('sat_v1', 'datavault4dbt')(sat_v0=sat_v0,\n                                         hashkey=hashkey,\n                                         hashdiff=hashdiff,\n                                         src_ldts=src_ldts,\n                                         src_rsrc=src_rsrc,\n                                         ledts_alias=ledts_alias,\n                                         add_is_current_flag=add_is_current_flag,\n                                         include_payload=include_payload) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.replace_standard", "macro.datavault4dbt.snowflake__sat_v1"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.960782, "supported_languages": null}, "macro.datavault4dbt.default__control_snap_v0": {"name": "default__control_snap_v0", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/bigquery/control_snap_v0.sql", "original_file_path": "macros/tables/bigquery/control_snap_v0.sql", "unique_id": "macro.datavault4dbt.default__control_snap_v0", "macro_sql": "{%- macro default__control_snap_v0(start_date, daily_snapshot_time, sdts_alias, end_date=none) -%}\n\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- if not datavault4dbt.is_something(sdts_alias) -%}\n    {%- set sdts_alias = var('datavault4dbt.sdts_alias', 'sdts') -%}\n{%- endif -%}\n\nWITH\n\ninitial_timestamps AS (\n\n    SELECT sdts\n    FROM\n        UNNEST(GENERATE_TIMESTAMP_ARRAY(\n            TIMESTAMP_ADD(\n                TIMESTAMP_ADD(\n                    TIMESTAMP(PARSE_DATE('%Y-%m-%d', '{{ start_date }}')),\n                INTERVAL EXTRACT(HOUR FROM TIME '{{ daily_snapshot_time }}') HOUR),\n            INTERVAL EXTRACT(MINUTE FROM TIME '{{ daily_snapshot_time }}') MINUTE),\n            TIMESTAMP_ADD(\n                TIMESTAMP_ADD(\n                    TIMESTAMP_TRUNC(CURRENT_TIMESTAMP(), DAY),\n                INTERVAL EXTRACT(HOUR FROM TIME '{{ daily_snapshot_time }}') HOUR),\n            INTERVAL EXTRACT(MINUTE FROM TIME '{{ daily_snapshot_time }}') MINUTE),\n        INTERVAL 1 DAY)) AS sdts\n\n    {%- if is_incremental() %}\n    WHERE sdts > (SELECT MAX({{ sdts_alias }}) FROM {{ this }})\n    {%- endif -%}\n\n),\n\nenriched_timestamps AS (\n\n    SELECT\n        sdts as {{ sdts_alias }},\n        TRUE as force_active,\n        sdts as replacement_sdts,\n        CONCAT(\"Snapshot \", DATE(sdts)) as caption,\n        CASE\n            WHEN EXTRACT(MINUTE FROM sdts) = 0 AND EXTRACT(SECOND FROM sdts) = 0 THEN TRUE\n            ELSE FALSE\n        END as is_hourly,\n        CASE\n            WHEN EXTRACT(MINUTE FROM sdts) = 0 AND EXTRACT(SECOND FROM sdts) = 0 AND EXTRACT(HOUR FROM sdts) = 0 THEN TRUE\n            ELSE FALSE\n        END as is_daily,\n        CASE\n            WHEN EXTRACT(DAYOFWEEK FROM  sdts) = 2 THEN TRUE\n            ELSE FALSE\n        END as is_weekly,\n        CASE\n            WHEN EXTRACT(DAY FROM sdts) = 1 THEN TRUE\n            ELSE FALSE\n        END as is_monthly,\n        CASE \n            WHEN LAST_DAY(DATE(sdts), MONTH) = DATE(sdts) THEN TRUE\n            ELSE FALSE\n        END as is_end_of_month,\n        CASE\n            WHEN EXTRACT(DAY FROM sdts) = 1 AND EXTRACT(MONTH from sdts) IN (1,4,7,10) THEN TRUE\n            ELSE FALSE\n        END AS is_quarterly,\n        CASE\n            WHEN EXTRACT(DAY FROM sdts) = 1 AND EXTRACT(MONTH FROM sdts) = 1 THEN TRUE\n            ELSE FALSE\n        END as is_yearly,\n        CASE\n            WHEN LAST_DAY(DATE(sdts), YEAR) = DATE(sdts) THEN TRUE\n            ELSE FALSE\n        END AS is_end_of_year,\n        NULL as comment\n    FROM initial_timestamps\n\n)\n\nSELECT * FROM enriched_timestamps\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.is_something", "macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.9613912, "supported_languages": null}, "macro.datavault4dbt.default__control_snap_v1": {"name": "default__control_snap_v1", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/bigquery/control_snap_v1.sql", "original_file_path": "macros/tables/bigquery/control_snap_v1.sql", "unique_id": "macro.datavault4dbt.default__control_snap_v1", "macro_sql": "{%- macro default__control_snap_v1(control_snap_v0, log_logic, sdts_alias) -%}\n\n{# Sample intervals\n   {%-set log_logic = {'daily': {'duration': 3,\n                                'unit': 'MONTH',\n                                'forever': 'FALSE'},\n                      'weekly': {'duration': 1,\n                                 'unit': 'YEAR'},\n                      'monthly': {'duration': 5,\n                                  'unit': 'YEAR'},\n                      'yearly': {'forever': 'TRUE'} } %} \n#}\n\n{%- if log_logic is not none %}\n    {%- for interval in log_logic.keys() %}\n        {%- if 'forever' not in log_logic[interval].keys() -%}\n            {% do log_logic[interval].update({'forever': 'FALSE'}) %}\n        {%- endif -%}\n    {%- endfor -%}\n{%- endif %}\n\n{%- set v0_relation = ref(control_snap_v0) -%}\n{%- set ns = namespace(forever_status=FALSE) %}\n\n{%- set snapshot_trigger_column = var('datavault4dbt.snapshot_trigger_column', 'is_active') -%}\n\nWITH\n\nlatest_row AS (\n\n    SELECT\n        {{ sdts_alias }}\n    FROM {{ v0_relation }}\n    ORDER BY {{ sdts_alias }} DESC\n    LIMIT 1\n\n),\n\nvirtual_logic AS (\n\n    SELECT\n        c.{{ sdts_alias }},\n        c.replacement_sdts,\n        c.force_active,\n        {%- if log_logic is none %}\n        TRUE as {{ snapshot_trigger_column }},\n        {%- else %}\n        CASE\n            WHEN\n            {% if 'daily' in log_logic.keys() %}\n                {%- if log_logic['daily']['forever'] is true -%}\n                    {%- set ns.forever_status = 'TRUE' -%}\n                    (1=1)\n                {%- else %}\n\n                    {%- set daily_duration = log_logic['daily']['duration'] -%}\n                    {%- set daily_unit = log_logic['daily']['unit'] -%}\n\n                    (EXTRACT(DATE FROM c.{{ sdts_alias }}) BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL {{ daily_duration }} {{ daily_unit }}) AND CURRENT_DATE())\n                {%- endif -%}\n            {%- endif %}\n\n            {%- if 'weekly' in log_logic.keys() %}\n            OR\n                {%- if log_logic['weekly']['forever'] is true -%}\n                    {%- set ns.forever_status = 'TRUE' -%}\n                    (c.is_weekly = TRUE)\n                {%- else %}\n\n                    {%- set weekly_duration = log_logic['weekly']['duration'] -%}\n                    {%- set weekly_unit = log_logic['weekly']['unit'] -%}\n\n                    (\n                (EXTRACT(DATE FROM c.{{ sdts_alias }}) BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL {{ weekly_duration }} {{ weekly_unit }}) AND CURRENT_DATE() )\n                AND\n                (c.is_weekly = TRUE)\n            )\n                {%- endif -%}\n            {% endif -%}\n\n            {%- if 'monthly' in log_logic.keys() %}\n            OR\n                {%- if log_logic['monthly']['forever'] is true -%}\n                    {%- set ns.forever_status = 'TRUE' -%}\n                    (c.is_monthly = TRUE)\n                {%- else %}\n\n                    {%- set monthly_duration = log_logic['monthly']['duration'] -%}\n                    {%- set monthly_unit = log_logic['monthly']['unit'] -%}\n\n                    (\n                (EXTRACT(DATE FROM c.{{ sdts_alias }}) BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL {{ monthly_duration }} {{ monthly_unit }}) AND CURRENT_DATE() )\n                AND\n                (c.is_monthly = TRUE)\n            )\n                {%- endif -%}\n            {% endif -%}\n\n            {%- if 'yearly' in log_logic.keys() %}\n            OR\n                {%- if log_logic['yearly']['forever'] is true -%}\n                    {%- set ns.forever_status = 'TRUE' -%}\n                    (c.is_yearly = TRUE)\n                {%- else %}\n\n                    {%- set yearly_duration = log_logic['yearly']['duration'] -%}\n                    {%- set yearly_unit = log_logic['yearly']['unit'] -%}\n\n                    (\n                (EXTRACT(DATE FROM c.{{ sdts_alias }}) BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL {{ yearly_duration }} {{ yearly_unit }}) AND CURRENT_DATE() )\n                AND\n                (c.is_yearly = TRUE)\n            )\n                {%- endif -%}\n            {% endif %}\n            THEN TRUE\n            ELSE FALSE\n\n        END AS {{ snapshot_trigger_column }},\n        {%- endif %}\n\n        CASE\n            WHEN l.{{ sdts_alias }} IS NULL THEN FALSE\n            ELSE TRUE\n        END AS is_latest,\n\n        c.caption,\n        c.is_hourly,\n        c.is_daily,\n        c.is_weekly,\n        c.is_monthly,\n        c.is_yearly,\n        CASE\n            WHEN EXTRACT(YEAR FROM c.{{ sdts_alias }}) = EXTRACT(YEAR FROM CURRENT_DATE()) THEN TRUE\n            ELSE FALSE\n        END AS is_current_year,\n        CASE\n            WHEN EXTRACT(YEAR FROM c.{{ sdts_alias }}) = EXTRACT(YEAR FROM CURRENT_DATE())-1 THEN TRUE\n            ELSE FALSE\n        END AS is_last_year,\n        CASE\n            WHEN EXTRACT(DATE FROM c.{{ sdts_alias }}) BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR) AND CURRENT_DATE() THEN TRUE\n            ELSE FALSE\n        END AS is_rolling_year,\n        CASE\n            WHEN EXTRACT(DATE FROM c.{{ sdts_alias }}) BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR) AND DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR) THEN TRUE\n            ELSE FALSE\n        END AS is_last_rolling_year,\n        c.comment\n    FROM {{ v0_relation }} c\n    LEFT JOIN latest_row l\n        ON c.{{ sdts_alias }} = l.{{ sdts_alias }}\n\n),\n\nactive_logic_combined AS (\n\n    SELECT \n        {{ sdts_alias }},\n        replacement_sdts,\n        CASE\n            WHEN force_active AND {{ snapshot_trigger_column }} THEN TRUE\n            WHEN NOT force_active OR NOT {{ snapshot_trigger_column }} THEN FALSE\n        END AS {{ snapshot_trigger_column }},\n        is_latest, \n        caption,\n        is_hourly,\n        is_daily,\n        is_weekly,\n        is_monthly,\n        is_yearly,\n        is_current_year,\n        is_last_year,\n        is_rolling_year,\n        is_last_rolling_year,\n        comment\n    FROM virtual_logic\n\n)\n\nSELECT * FROM active_logic_combined\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.963906, "supported_languages": null}, "macro.datavault4dbt.default__pit": {"name": "default__pit", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/bigquery/pit.sql", "original_file_path": "macros/tables/bigquery/pit.sql", "unique_id": "macro.datavault4dbt.default__pit", "macro_sql": "{%- macro default__pit(tracked_entity, hashkey, sat_names, ldts, ledts, sdts, snapshot_relation, dimension_key,snapshot_trigger_column=none, custom_rsrc=none, pit_type=none) -%}\n\n{%- set hash = datavault4dbt.hash_method() -%}\n{%- set hash_dtype = var('datavault4dbt.hash_datatype', 'STRING') -%}\n{%- set hash_default_values = fromjson(datavault4dbt.hash_default_values(hash_function=hash,hash_datatype=hash_dtype)) -%}\n{%- set hash_alg = hash_default_values['hash_alg'] -%}\n{%- set unknown_key = hash_default_values['unknown_key'] -%}\n{%- set error_key = hash_default_values['error_key'] -%}\n\n{%- if hash_dtype == 'BYTES' -%}\n    {%- set hashkey_string = 'TO_HEX({})'.format(datavault4dbt.prefix([hashkey],'te')) -%}\n{%- else -%}\n    {%- set hashkey_string = datavault4dbt.prefix([hashkey],'te') -%}\n{%- endif -%}\n\n{%- set rsrc = var('datavault4dbt.rsrc_alias', 'rsrc') -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- if datavault4dbt.is_something(pit_type) -%}\n    {%- set hashed_cols = [pit_type, hashkey_string, datavault4dbt.prefix([sdts], 'snap')] -%}\n{%- else -%}\n    {%- set hashed_cols = [hashkey_string, datavault4dbt.prefix([sdts], 'snap')] -%}\n{%- endif -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{%- if is_incremental() %}\n\nexisting_dimension_keys AS (\n\n    SELECT\n        {{ dimension_key }}\n    FROM {{ this }}\n\n),\n\n{%- endif %}\n\npit_records AS (\n\n    SELECT\n        \n        {% if datavault4dbt.is_something(pit_type) -%}\n            {{ datavault4dbt.as_constant(pit_type) }} as type,\n        {%- endif %}\n        {% if datavault4dbt.is_something(custom_rsrc) -%}\n        '{{ custom_rsrc }}' as {{ rsrc }},\n        {%- endif %}\n        {{ datavault4dbt.hash(columns=hashed_cols,\n                    alias=dimension_key,\n                    is_hashdiff=false)   }} ,\n        te.{{ hashkey }},\n        snap.{{ sdts }},\n        {% for satellite in sat_names %}\n            COALESCE({{ satellite }}.{{ hashkey }}, CAST({{ datavault4dbt.as_constant(column_str=unknown_key) }} as {{ hash_dtype }})) AS hk_{{ satellite }},\n            COALESCE({{ satellite }}.{{ ldts }}, {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }}) AS {{ ldts }}_{{ satellite }}\n            {{- \",\" if not loop.last }}\n        {%- endfor %}\n\n    FROM\n            {{ ref(tracked_entity) }} te\n        FULL OUTER JOIN\n            {{ ref(snapshot_relation) }} snap\n            {% if datavault4dbt.is_something(snapshot_trigger_column) -%}\n                ON snap.{{ snapshot_trigger_column }} = true\n            {% else -%}\n                ON 1=1\n            {%- endif %}\n        {% for satellite in sat_names %}\n        {%- set sat_columns = datavault4dbt.source_columns(ref(satellite)) %}\n        {%- if ledts|string|lower in sat_columns|map('lower') %}\n        LEFT JOIN {{ ref(satellite) }}\n        {%- else %}\n        LEFT JOIN (\n            SELECT\n                {{ hashkey }},\n                {{ ldts }},\n                COALESCE(LEAD(TIMESTAMP_SUB({{ ldts }}, INTERVAL 1 MICROSECOND)) OVER (PARTITION BY {{ hashkey }} ORDER BY {{ ldts }}),{{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}) AS {{ ledts }}\n            FROM {{ ref(satellite) }}\n        ) {{ satellite }}\n        {% endif %}\n            ON\n                {{ satellite }}.{{ hashkey}} = te.{{ hashkey }}\n                AND snap.{{ sdts }} BETWEEN {{ satellite }}.{{ ldts }} AND {{ satellite }}.{{ ledts }}\n        {% endfor %}\n    {% if datavault4dbt.is_something(snapshot_trigger_column) -%}\n        WHERE snap.{{ snapshot_trigger_column }}\n    {%- endif %}\n\n),\n\nrecords_to_insert AS (\n\n    SELECT DISTINCT *\n    FROM pit_records\n    {%- if is_incremental() %}\n    WHERE {{ dimension_key }} NOT IN (SELECT * FROM existing_dimension_keys)\n    {% endif -%}\n\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.hash_method", "macro.datavault4dbt.hash_default_values", "macro.datavault4dbt.prefix", "macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.is_something", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.datavault4dbt.as_constant", "macro.datavault4dbt.hash", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.source_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.966641, "supported_languages": null}, "macro.datavault4dbt.default__ref_sat_v0": {"name": "default__ref_sat_v0", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/bigquery/ref_sat_v0.sql", "original_file_path": "macros/tables/bigquery/ref_sat_v0.sql", "unique_id": "macro.datavault4dbt.default__ref_sat_v0", "macro_sql": "{%- macro default__ref_sat_v0(parent_ref_keys, src_hashdiff, src_payload, src_ldts, src_rsrc, source_model, disable_hwm, source_is_single_batch) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set parent_ref_keys = datavault4dbt.expand_column_list(columns=[parent_ref_keys]) -%}\n\n{%- set ns=namespace(src_hashdiff=\"\", hdiff_alias=\"\") %}\n\n{%- if  src_hashdiff is mapping and src_hashdiff is not none -%}\n    {% set ns.src_hashdiff = src_hashdiff[\"source_column\"] %}\n    {% set ns.hdiff_alias = src_hashdiff[\"alias\"] %}\n{% else %}\n    {% set ns.src_hashdiff = src_hashdiff %}\n    {% set ns.hdiff_alias = src_hashdiff  %}\n{%- endif -%}\n\n{%- set source_cols = datavault4dbt.expand_column_list(columns=[src_rsrc, src_ldts, src_payload]) -%}\n\n{%- set source_relation = ref(source_model) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Selecting all source data, that is newer than latest data in ref_sat if incremental #}\nsource_data AS (\n\n    SELECT\n        {% for ref_key in parent_ref_keys %}\n        {{ref_key}},\n        {% endfor %}\n        {{ ns.src_hashdiff }} as {{ ns.hdiff_alias }},\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM {{ source_relation }}\n\n    {%- if is_incremental() %}\n    WHERE {{ src_ldts }} > (\n        SELECT\n            MAX({{ src_ldts }}) FROM {{ this }}\n        WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    )\n    {%- endif %}\n),\n\n{# Get the latest record for each parent ref key combination in existing sat, if incremental. #}\n{%- if is_incremental() %}\nlatest_entries_in_sat AS (\n\n    SELECT\n        {% for ref_key in parent_ref_keys %}\n        {{ref_key}},\n        {% endfor %}\n        {{ ns.hdiff_alias }}\n    FROM \n        {{ this }}\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY {%- for ref_key in parent_ref_keys %} {{ref_key}} {%- if not loop.last %}, {% endif %}{% endfor %} ORDER BY {{ src_ldts }} DESC) = 1  \n),\n{%- endif %}\n\n{#\n    Deduplicate source by comparing each hashdiff to the hashdiff of the previous record, for each parent ref key combination.\n    Additionally adding a row number based on that order, if incremental.\n#}\ndeduplicated_numbered_source AS (\n\n    SELECT\n    {% for ref_key in parent_ref_keys %}\n    {{ref_key}},\n    {% endfor %}\n    {{ ns.hdiff_alias }},\n    {{ datavault4dbt.print_list(source_cols) }}\n    {% if is_incremental() -%}\n    , ROW_NUMBER() OVER(PARTITION BY {%- for ref_key in parent_ref_keys %} {{ref_key}} {%- if not loop.last %}, {% endif %}{% endfor %} ORDER BY {{ src_ldts }}) as rn\n    {%- endif %}\n    FROM source_data\n    QUALIFY\n        CASE\n            WHEN {{ ns.hdiff_alias }} = LAG({{ ns.hdiff_alias }}) OVER(PARTITION BY {%- for ref_key in parent_ref_keys %} {{ref_key}} {%- if not loop.last %}, {% endif %}{% endfor %} ORDER BY {{ src_ldts }}) THEN FALSE\n            ELSE TRUE\n        END\n),\n\n{#\n    Select all records from the previous CTE. If incremental, compare the oldest incoming entry to\n    the existing records in the satellite.\n#}\nrecords_to_insert AS (\n\n    SELECT\n    {% for ref_key in parent_ref_keys %}\n    {{ref_key}},\n    {% endfor %}\n    {{ ns.hdiff_alias }},\n    {{ datavault4dbt.print_list(source_cols) }}\n    FROM deduplicated_numbered_source\n    {%- if is_incremental() %}\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE 1=1\n            {% for ref_key in parent_ref_keys %}\n            AND {{ datavault4dbt.multikey(ref_key, prefix=['latest_entries_in_sat', 'deduplicated_numbered_source'], condition='=') }}\n            {% endfor %}\n            AND {{ datavault4dbt.multikey(ns.hdiff_alias, prefix=['latest_entries_in_sat', 'deduplicated_numbered_source'], condition='=') }}\n            AND deduplicated_numbered_source.rn = 1)\n    {%- endif %}\n\n    )\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.print_list", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.968989, "supported_languages": null}, "macro.datavault4dbt.default__ref_sat_v1": {"name": "default__ref_sat_v1", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/bigquery/ref_sat_v1.sql", "original_file_path": "macros/tables/bigquery/ref_sat_v1.sql", "unique_id": "macro.datavault4dbt.default__ref_sat_v1", "macro_sql": "{%- macro default__ref_sat_v1(ref_sat_v0, ref_keys, hashdiff, src_ldts, src_rsrc, ledts_alias, add_is_current_flag) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set is_current_col_alias = var('datavault4dbt.is_current_col_alias', 'IS_CURRENT') -%}\n{%- set ledts_alias = var('datavault4dbt.ledts_alias', 'ledts') -%}\n\n{%- set source_relation = ref(ref_sat_v0) -%}\n\n{%- set ref_keys = datavault4dbt.expand_column_list(columns=[ref_keys]) -%}\n\n{%- set all_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n{%- set exclude = ref_keys + [hashdiff, src_ldts, src_rsrc] -%}\n\n{%- set source_columns_to_select = datavault4dbt.process_columns_to_select(all_columns, exclude) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Calculate ledts based on the ldts of the earlier record. #}\nend_dated_source AS (\n\n    SELECT\n        {% for ref_key in ref_keys %}\n        {{ref_key}},\n        {% endfor %}\n        {{ hashdiff }},\n        {{ src_rsrc }},\n        {{ src_ldts }},\n        COALESCE(LEAD(TIMESTAMP_SUB({{ src_ldts }}, INTERVAL 1 MICROSECOND)) OVER (PARTITION BY {%- for ref_key in ref_keys %} {{ref_key}} {%- if not loop.last %}, {% endif %}{% endfor %} ORDER BY {{ src_ldts }}),{{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}) as {{ ledts_alias }},\n        {{ datavault4dbt.print_list(source_columns_to_select) }}\n    FROM {{ source_relation }}\n\n)\n\nSELECT\n    {% for ref_key in ref_keys %}\n    {{ref_key}},\n    {% endfor %}\n    {{ hashdiff }},\n    {{ src_rsrc }},\n    {{ src_ldts }},\n    {{ ledts_alias }},\n    {%- if add_is_current_flag %}\n        CASE WHEN {{ ledts_alias }} = {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n        THEN TRUE\n        ELSE FALSE\n        END AS {{ is_current_col_alias }},\n    {% endif -%}\n    {{ datavault4dbt.print_list(source_columns_to_select) }}\nFROM end_dated_source\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.source_columns", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.9702961, "supported_languages": null}, "macro.datavault4dbt.default__nh_link": {"name": "default__nh_link", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/bigquery/nh_link.sql", "original_file_path": "macros/tables/bigquery/nh_link.sql", "unique_id": "macro.datavault4dbt.default__nh_link", "macro_sql": "{%- macro default__nh_link(link_hashkey, foreign_hashkeys, payload, source_models, src_ldts, src_rsrc, disable_hwm, source_is_single_batch) -%}\n{%- if not (foreign_hashkeys is iterable and foreign_hashkeys is not string) -%}\n\n    {%- if execute -%}\n        {{ exceptions.raise_compiler_error(\"Only one foreign key provided for this link. At least two required.\") }}\n    {%- endif %}\n\n{%- endif -%}\n{%- set ns = namespace(last_cte= \"\", source_included_before = {}, has_rsrc_static_defined=true, source_models_rsrc_dict={}) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n\n{# If no specific link_hk, fk_columns, or payload are defined for each source, we apply the values set in the link_hashkey, foreign_hashkeys, and payload variable. #}\n{# If no rsrc_static parameter is defined in ANY of the source models then the whole code block of record_source performance lookup is not executed  #}\n{# For the use of record_source performance lookup it is required that every source model has the parameter rsrc_static defined and it cannot be an empty string #}\n{%- if source_models is not mapping and not datavault4dbt.is_list(source_models) -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- set source_model_values = fromjson(datavault4dbt.source_model_processing(source_models=source_models, parameters={'link_hk':link_hashkey}, foreign_hashkeys=foreign_hashkeys, payload=payload)) -%}\n{%- set source_models = source_model_values['source_model_list'] -%}\n{%- set ns.has_rsrc_static_defined = source_model_values['has_rsrc_static_defined'] -%}\n{%- set ns.source_models_rsrc_dict = source_model_values['source_models_rsrc_dict'] -%}\n{{ log('source_models: '~source_models, false) }}\n\n{%- set final_columns_to_select = [link_hashkey] + foreign_hashkeys + [src_ldts] + [src_rsrc] + payload -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{%- if is_incremental() -%}\n{# Get all link hashkeys out of the existing link for later incremental logic. #}\n    distinct_target_hashkeys AS (\n\n        SELECT\n        {{ link_hashkey }}\n        FROM {{ this }}\n\n    ),\n    {%- if ns.has_rsrc_static_defined and not disable_hwm -%}\n        {% for source_model in source_models %}\n        {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n            {%- set source_number = source_model.id | string -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number] -%}\n\n            {{log('rsrc_statics: '~ rsrc_statics, false) }}\n\n            {%- set rsrc_static_query_source -%}\n                SELECT count(*) FROM (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.{{ src_rsrc }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                )\n            {% endset %}\n\n            rsrc_static_{{ source_number }} AS (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.*,\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                {%- set ns.last_cte = \"rsrc_static_{}\".format(source_number) -%}\n            ),\n\n            {%- set source_in_target = true -%}\n            \n            {%- if execute -%}\n                {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n\n                {%- set row_count = rsrc_static_result.columns[0].values()[0] -%}\n\n                {{ log('row_count for '~source_model~' is '~row_count, false) }}\n\n                {%- if row_count == 0 -%}\n                    {%- set source_in_target = false -%}\n                {%- endif -%}\n            {%- endif -%}\n\n\n            {%- do ns.source_included_before.update({source_model.id: source_in_target}) -%}\n\n        {% endfor -%}\n\n        {%- if source_models | length > 1 %}\n\n        rsrc_static_union AS (\n            {#  Create one unionized table over all sources. It will be the same as the already existing\n                nh_link, but extended by the rsrc_static column. #}\n\n            {% for source_model in source_models %}\n            {%- set source_number = source_model.id | string -%}\n\n            SELECT rsrc_static_{{ source_number }}.* FROM rsrc_static_{{ source_number }}\n\n            {%- if not loop.last %}\n            UNION ALL\n            {% endif -%}\n            {%- endfor %}\n            {%- set ns.last_cte = \"rsrc_static_union\" -%}\n        ),\n\n        {%- endif %}\n\n        max_ldts_per_rsrc_static_in_target AS (\n        {# Use the previously created CTE to calculate the max load date timestamp per rsrc_static. #}\n\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) AS max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif %}\n{% endif -%}\n\n{% for source_model in source_models %}\n\n{#  Select all deduplicated records from each source, and filter for records that are newer\n    than the max ldts inside the existing link, if incremental. #}\n\n    {%- set source_number = source_model.id | string -%}\n\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number|string] -%}\n    {%- endif -%}\n\n    {%- if 'link_hk' not in source_model.keys() %}\n        {%- set link_hk = link_hashkey -%}\n    {%- else -%}\n        {%- set link_hk = source_model['link_hk'] -%}\n    {% endif %}\n\nsrc_new_{{ source_number }} AS (\n\n    SELECT\n            {{ link_hk }} AS {{ link_hashkey }},\n            {% for fk in source_model['fk_columns'] -%}\n            {{ fk }},\n            {% endfor -%}\n        {{ src_ldts }},\n        {{ src_rsrc }},\n\n        {{ datavault4dbt.print_list(source_model['payload']) | indent(3) }}\n\n    FROM {{ ref(source_model.name) }} src\n    {# If the model is incremental and all sources has rsrc_static defined and valid and the source was already included before in the target transactional link #}\n    {# then an inner join is performed on the CTE for the maximum load date timestamp per record source static to get the records\n    that match any of the rsrc_static present in it #}\n    {# if there are records in the source with a newer load date time stamp than the ones present in the target, those will be selected to be inserted later #}\n    {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_number|int] and not disable_hwm %}\n        INNER JOIN max_ldts_per_rsrc_static_in_target max ON\n        ({%- for rsrc_static in rsrc_statics -%}\n            max.rsrc_static = '{{ rsrc_static }}'\n            {%- if not loop.last -%} OR\n            {% endif -%}\n        {%- endfor %})\n        WHERE src.{{ src_ldts }} > max.max_ldts\n    {%- elif is_incremental() and source_models | length == 1 and not ns.has_rsrc_static_defined and not disable_hwm %}\n        WHERE src.{{ src_ldts }} > (\n            SELECT MAX({{ src_ldts }})\n            FROM {{ this }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            )\n    {%- endif %}\n\n    {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n    ),\n{%- endfor -%}\n\n{%- if source_models | length > 1 %}\n\nsource_new_union AS (\n{# Unionize the new records from all sources. #}\n\n    {%- for source_model in source_models -%}\n\n    {%- set source_number = source_model.id | string -%}\n\n    SELECT\n        {{ link_hashkey }},\n        {% for fk in source_model['fk_columns']|list %}\n            {{ fk }} AS {{ foreign_hashkeys[loop.index - 1] }},\n        {% endfor -%}\n\n        {{ src_ldts }},\n        {{ src_rsrc }},\n\n        {% for col in source_model['payload']|list %}\n            {{ col }} AS {{ payload[loop.index - 1] }}\n            {%- if not loop.last %}, {%- endif %}\n        {% endfor -%}\n\n    FROM src_new_{{ source_number }}\n\n    {%- if not loop.last %}\n    UNION ALL\n    {% endif -%}\n\n    {%- endfor -%}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif %}\n\n{%- if not source_is_single_batch %}\n\nearliest_hk_over_all_sources AS (\n{# Deduplicate the unionized records again to only insert the earliest one. #}\n\n    SELECT\n        lcte.*\n    FROM {{ ns.last_cte }} AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY {{ link_hashkey }} ORDER BY {{ src_ldts }}) = 1\n\n    {%- set ns.last_cte = 'earliest_hk_over_all_sources' -%}\n\n),\n\n{%- endif %}\n\nrecords_to_insert AS (\n{# Select everything from the previous CTE, if its incremental then filter for hashkeys that are not already in the link. #}\n\n    SELECT\n        {{ datavault4dbt.print_list(final_columns_to_select) | indent(4) }}\n    FROM {{ ns.last_cte }}\n\n    {%- if is_incremental() %}\n    WHERE {{ link_hashkey }} NOT IN (SELECT * FROM distinct_target_hashkeys)\n    {% endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.is_list", "macro.datavault4dbt.source_model_processing", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.97515, "supported_languages": null}, "macro.datavault4dbt.default__ref_table": {"name": "default__ref_table", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/bigquery/ref_table.sql", "original_file_path": "macros/tables/bigquery/ref_table.sql", "unique_id": "macro.datavault4dbt.default__ref_table", "macro_sql": "{%- macro default__ref_table(ref_hub, ref_satellites, src_ldts, src_rsrc, historized, snapshot_trigger_column='is_active', snapshot_relation=none) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set ref_hub_relation = ref(ref_hub|string) -%}\n\n{%- set is_current_col_alias = var('datavault4dbt.is_current_col_alias', 'IS_CURRENT') -%}\n{%- set ledts_alias = var('datavault4dbt.ledts_alias', 'ledts') -%}\n{%- set sdts_alias = var('datavault4dbt.sdts_alias', 'sdts') -%}\n\n{%- set include_business_objects_before_appearance = var('datavault4dbt.include_business_objects_before_appearance', 'false') -%}\n\n{{ log('ref_hub_relation: ' ~ ref_hub_relation, false) }}\n{%- set hub_columns = datavault4dbt.source_columns(ref_hub_relation) -%}\n{{ log('hub_columns: ' ~ hub_columns, false) }}\n{%- set hub_columns_to_exclude = [src_ldts, src_rsrc] -%}\n{%- set ref_key_cols = datavault4dbt.process_columns_to_select(columns_list=hub_columns, exclude_columns_list=hub_columns_to_exclude )%}\n{{ log('ref_key_cols: ' ~ ref_key_cols, false) }}\n{%- set sat_columns_to_exclude = [src_ldts, src_rsrc, ledts_alias, is_current_col_alias] + ref_key_cols -%}\n{{ log('sat_columns_to_exclude: '~ sat_columns_to_exclude, false) }}\n\n{%- set ref_satellites_dict = {} -%}\n\n{%- if not datavault4dbt.is_list(ref_satellites) and not ref_satellites is mapping -%}\n    {%- set ref_satellites = [ref_satellites] -%}\n{%- endif -%}\n\n{%- if datavault4dbt.is_list(ref_satellites) -%}\n    {%- for ref_satellite in ref_satellites -%}\n        {%- do ref_satellites_dict.update({ref_satellite:{}}) -%}\n    {%- endfor -%}\n{%- else -%}\n    {%- set ref_satellites_dict = ref_satellites -%}\n{%- endif -%}\n\n\nWITH \n\ndates AS (\n\n{% if historized in ['full', 'latest'] -%}\n\n    {%- set date_column = src_ldts -%}\n\n\n    {{ log('ref_satellites: '~ ref_satellites, false) -}}\n\n    {% if historized == 'full' -%}\n    SELECT distinct {{ date_column }} FROM (\n    {%- elif historized == 'latest' -%}\n    SELECT MAX({{ date_column }}) as {{ date_column }} FROM (\n    {%- endif -%}\n\n    {% for satellite in ref_satellites_dict.keys() -%}\n    SELECT distinct \n        {{ src_ldts }}\n    FROM {{ ref(satellite|string) }}\n    WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    {% if not loop.last -%} UNION {% endif %}\n    {%- endfor %}\n    )\n\n\n{% elif snapshot_relation is not none %}\n\n    {%- set date_column = sdts_alias -%}\n    \n    SELECT \n        {{ date_column }}\n    FROM (\n        \n        SELECT \n            {{ sdts_alias }}\n        FROM {{ ref(snapshot_relation) }}\n        WHERE {{ snapshot_trigger_column }}\n    )\n\n{%- endif %}\n\n{%- if is_incremental() -%}\n    WHERE {{ date_column }} > (SELECT MAX({{ date_column }}) FROM {{ this }})\n{%- endif -%}\n\n\n),\n\nref_table AS (\n\n    SELECT\n    {{ datavault4dbt.print_list(list_to_print=ref_key_cols, indent=2, src_alias='h') }},\n        ld.{{ date_column }},\n        h.{{ src_rsrc }},\n\n    {%- for satellite in ref_satellites_dict.keys() %}\n\n    {%- set sat_alias = 's_' + loop.index|string -%}\n    {%- set sat_columns_pre = [] -%}\n        \n        {%- if ref_satellites_dict[satellite] is mapping and 'include' in ref_satellites_dict[satellite].keys() -%}\n            {%- set sat_columns_pre = ref_satellites_dict[satellite]['include'] -%}\n        {%- elif ref_satellites_dict[satellite] is mapping and 'exclude' in ref_satellites_dict[satellite].keys() -%}\n            {%- set all_sat_columns = datavault4dbt.source_columns(ref(satellite)) -%}\n            {%- set sat_columns_pre = datavault4dbt.process_columns_to_select(all_sat_columns, ref_satellites_dict[satellite]['exclude']) -%}\n        {%- elif datavault4dbt.is_list(ref_satellites_dict[satellite]) -%}\n            {%- set sat_columns_pre = ref_satellites_dict[satellite] -%}\n        {%- else -%}\n            {%- set all_sat_columns = datavault4dbt.source_columns(ref(satellite)) -%}\n            {%- set sat_columns_pre = datavault4dbt.process_columns_to_select(all_sat_columns, sat_columns_to_exclude) -%}\n        {%- endif -%}\n\n    {%- set sat_columns = datavault4dbt.process_columns_to_select(sat_columns_pre, sat_columns_to_exclude) -%}\n    \n    {{- log('sat_columns: '~ sat_columns, false) -}}\n\n    {{ datavault4dbt.print_list(list_to_print=sat_columns, indent=2, src_alias=sat_alias) }}\n    {%- if not loop.last -%} ,\n    {% endif -%}\n\n    {% endfor %} \n\n    FROM {{ ref(ref_hub) }} h\n    \n    FULL OUTER JOIN dates ld\n        ON 1 = 1  \n\n    {% for satellite in ref_satellites_dict.keys() %}\n\n        {%- set sat_alias = 's_' + loop.index|string -%}\n\n    LEFT JOIN {{ ref(satellite) }} {{ sat_alias }}\n        ON {{ datavault4dbt.multikey(columns=ref_key_cols, prefix=['h', sat_alias], condition='=') }}\n        AND  ld.{{ date_column }} BETWEEN {{ sat_alias }}.{{ src_ldts }} AND {{ sat_alias }}.{{ ledts_alias }}\n    \n    {% endfor %}\n    \n    {% if include_business_objects_before_appearance == 'false' -%}\n    WHERE h.{{ src_ldts }} <= ld.{{ date_column }}\n    {% endif %}\n\n) \n\nSELECT * FROM ref_table\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.source_columns", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.is_list", "macro.datavault4dbt.string_to_timestamp", "macro.dbt.is_incremental", "macro.datavault4dbt.print_list", "macro.datavault4dbt.multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.978745, "supported_languages": null}, "macro.datavault4dbt.default__hub": {"name": "default__hub", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/bigquery/hub.sql", "original_file_path": "macros/tables/bigquery/hub.sql", "unique_id": "macro.datavault4dbt.default__hub", "macro_sql": "{%- macro default__hub(hashkey, business_keys, src_ldts, src_rsrc, source_models, disable_hwm) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{{ log('source_models'~source_models, false) }}\n\n{%- set ns = namespace(last_cte= \"\", source_included_before = {}, has_rsrc_static_defined=true, source_models_rsrc_dict={}) -%}\n\n{# Select the Business Key column from the first source model definition provided in the hub model and put them in an array. #}\n{%- set business_keys = datavault4dbt.expand_column_list(columns=[business_keys]) -%}\n\n{# If no specific bk_columns is defined for each source, we apply the values set in the business_keys variable. #}\n{# If no specific hk_column is defined for each source, we apply the values set in the hashkey variable. #}\n{# If no rsrc_static parameter is defined in ANY of the source models then the whole code block of record_source performance lookup is not executed  #}\n{# For the use of record_source performance lookup it is required that every source model has the parameter rsrc_static defined and it cannot be an empty string #}\n{%- if source_models is not mapping and not datavault4dbt.is_list(source_models) -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- set source_model_values = fromjson(datavault4dbt.source_model_processing(source_models=source_models, parameters={'hk_column':hashkey}, business_keys=business_keys)) -%}\n{%- set source_models = source_model_values['source_model_list'] -%}\n{%- set ns.has_rsrc_static_defined = source_model_values['has_rsrc_static_defined'] -%}\n{%- set ns.source_models_rsrc_dict = source_model_values['source_models_rsrc_dict'] -%}\n{{ log('source_models: '~source_models, false) }}\n\n{%- set final_columns_to_select = [hashkey] + business_keys + [src_ldts] + [src_rsrc] -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{% if is_incremental() -%}\n{# Get all target hashkeys out of the existing hub for later incremental logic. #}\n    distinct_target_hashkeys AS (\n\n        SELECT\n            {{ hashkey }}\n        FROM {{ this }}\n\n    ),\n    {%- if ns.has_rsrc_static_defined and not disable_hwm -%}\n        {% for source_model in source_models %}\n         {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n            {%- set source_number = source_model.id | string -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number] -%}\n\n            {{log('rsrc_statics: '~ rsrc_statics, false) }}\n\n            {%- set rsrc_static_query_source -%}\n                SELECT count(*) FROM (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.{{ src_rsrc }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                )\n            {% endset %}\n\n            {{ log('rsrc static query: '~rsrc_static_query_source, false) }}\n\n            rsrc_static_{{ source_number }} AS (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT \n                    t.*,\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                {%- set ns.last_cte = \"rsrc_static_{}\".format(source_number) -%}\n            ),\n            \n            {%- set source_in_target = true -%}\n            \n            {%- if execute -%}\n                {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n\n                {%- set row_count = rsrc_static_result.columns[0].values()[0] -%}\n\n                {{ log('row_count for '~source_model~' is '~row_count, false) }}\n\n                {%- if row_count == 0 -%}\n                    {%- set source_in_target = false -%}\n                {%- endif -%}\n            {%- endif -%}\n\n\n            {%- do ns.source_included_before.update({source_model.id: source_in_target}) -%}\n\n        {% endfor -%}\n\n        {%- if source_models | length > 1 %}\n\n        rsrc_static_union AS (\n            {#  Create one unionized table over all sources. It will be the same as the already existing\n                hub, but extended by the rsrc_static column. #}\n            {% for source_model in source_models %}\n            {%- set source_number = source_model.id | string -%}\n\n            SELECT rsrc_static_{{ source_number }}.* FROM rsrc_static_{{ source_number }}\n\n            {%- if not loop.last %}\n            UNION ALL\n            {% endif -%}\n            {%- endfor %}\n            {%- set ns.last_cte = \"rsrc_static_union\" -%}\n        ),\n\n        {%- endif %}\n\n        max_ldts_per_rsrc_static_in_target AS (\n        {# Use the previously created CTE to calculate the max load date timestamp per rsrc_static. #}\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) as max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif %}\n{% endif -%}\n\n{% for source_model in source_models %}\n\n    {%- set source_number = source_model.id | string -%}\n\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number|string] -%}\n    {%- endif -%}\n\n    {%- if 'hk_column' not in source_model.keys() %}\n        {%- set hk_column = hashkey -%}\n    {%- else -%}\n        {%- set hk_column = source_model['hk_column'] -%}\n    {% endif %}\n\n    src_new_{{ source_number }} AS (\n\n        SELECT\n            {{ hk_column }} AS {{ hashkey }},\n            {% for bk in source_model['bk_columns'] -%}\n            {{ bk }},\n            {% endfor -%}\n\n            {{ src_ldts }},\n            {{ src_rsrc }}\n        FROM {{ ref(source_model.name) }} src\n        {{ log('rsrc_statics defined?: ' ~ ns.source_models_rsrc_dict[source_number|string], false) }}\n\n    {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_number|int] and not disable_hwm %}\n        INNER JOIN max_ldts_per_rsrc_static_in_target max ON\n        ({%- for rsrc_static in rsrc_statics -%}\n            max.rsrc_static = '{{ rsrc_static }}'\n            {%- if not loop.last -%} OR\n            {% endif -%}\n        {%- endfor %})\n        WHERE src.{{ src_ldts }} > max.max_ldts\n    {%- elif is_incremental() and source_models | length == 1 and not ns.has_rsrc_static_defined and not disable_hwm %}\n        WHERE src.{{ src_ldts }} > (\n            SELECT MAX({{ src_ldts }})\n            FROM {{ this }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            )\n    {%- endif %}\n\n         {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n    ),\n{%- endfor -%}\n\n{%- if source_models | length > 1 %}\n\nsource_new_union AS (\n\n    {%- for source_model in source_models -%}\n\n    {%- set source_number = source_model.id | string -%}\n\n    SELECT\n        {{ hashkey }},\n\n        {% for bk in source_model['bk_columns'] -%}\n            {{ bk }} AS {{ business_keys[loop.index - 1] }},\n        {% endfor -%}\n\n        {{ src_ldts }},\n        {{ src_rsrc }}\n    FROM src_new_{{ source_number }}\n\n    {%- if not loop.last %}\n    UNION ALL\n    {% endif -%}\n\n    {%- endfor -%}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif %}\n\nearliest_hk_over_all_sources AS (\n\n    {#- Deduplicate the unionized records again to only insert the earliest one. #}\n    SELECT\n        lcte.*\n    FROM {{ ns.last_cte }} AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY {{ hashkey }} ORDER BY {{ src_ldts }}) = 1\n\n    {%- set ns.last_cte = 'earliest_hk_over_all_sources' -%}\n\n),\n\nrecords_to_insert AS (\n    {#- Select everything from the previous CTE, if incremental filter for hashkeys that are not already in the hub. #}\n    SELECT\n        {{ datavault4dbt.print_list(final_columns_to_select) }}\n    FROM {{ ns.last_cte }}\n\n    {%- if is_incremental() %}\n    WHERE {{ hashkey }} NOT IN (SELECT * FROM distinct_target_hashkeys)\n    {% endif -%}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.is_list", "macro.datavault4dbt.source_model_processing", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.983258, "supported_languages": null}, "macro.datavault4dbt.default__link": {"name": "default__link", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/bigquery/link.sql", "original_file_path": "macros/tables/bigquery/link.sql", "unique_id": "macro.datavault4dbt.default__link", "macro_sql": "{%- macro default__link(link_hashkey, foreign_hashkeys, source_models, src_ldts, src_rsrc, disable_hwm) -%}\n\n{%- if not (foreign_hashkeys is iterable and foreign_hashkeys is not string) -%}\n\n    {%- if execute -%}\n        {{ exceptions.raise_compiler_error(\"Only one foreign key provided for this link. At least two required.\") }}\n    {%- endif %}\n\n{%- endif -%}\n\n{%- set ns = namespace(last_cte= \"\", source_included_before = {}, has_rsrc_static_defined=true, source_models_rsrc_dict={}) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{# If no specific link_hk and fk_columns are defined for each source, we apply the values set in the link_hashkey and foreign_hashkeys variable. #}\n{# If no rsrc_static parameter is defined in ANY of the source models then the whole code block of record_source performance lookup is not executed  #}\n{# For the use of record_source performance lookup it is required that every source model has the parameter rsrc_static defined and it cannot be an empty string #}\n{%- if source_models is not mapping and not datavault4dbt.is_list(source_models) -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- set source_model_values = fromjson(datavault4dbt.source_model_processing(source_models=source_models, parameters={'link_hk':link_hashkey}, foreign_hashkeys=foreign_hashkeys)) -%}\n{%- set source_models = source_model_values['source_model_list'] -%}\n{%- set ns.has_rsrc_static_defined = source_model_values['has_rsrc_static_defined'] -%}\n{%- set ns.source_models_rsrc_dict = source_model_values['source_models_rsrc_dict'] -%}\n{{ log('source_models: '~source_models, false) }}\n\n{%- set final_columns_to_select = [link_hashkey] + foreign_hashkeys + [src_ldts] + [src_rsrc] -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{% if is_incremental() %}\n{# Get all link hashkeys out of the existing link for later incremental logic. #}\n    distinct_target_hashkeys AS (\n        \n        SELECT\n        {{ link_hashkey }}\n        FROM {{ this }}\n\n    ),\n    {%- if ns.has_rsrc_static_defined and not disable_hwm -%}\n        {% for source_model in source_models %}\n        {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n            {%- set source_number = source_model.id | string -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number] -%}\n\n            {{log('rsrc_statics: '~ rsrc_statics, false) }}\n\n            {%- set rsrc_static_query_source -%}\n                SELECT count(*) FROM (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.{{ src_rsrc }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                )\n            {% endset %}\n\n            rsrc_static_{{ source_number }} AS (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.*,\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                {%- set ns.last_cte = \"rsrc_static_{}\".format(source_number) -%}\n            ),\n\n            {%- set source_in_target = true -%}\n            \n            {%- if execute -%}\n                {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n\n                {%- set row_count = rsrc_static_result.columns[0].values()[0] -%}\n\n                {{ log('row_count for '~source_model~' is '~row_count, false) }}\n\n                {%- if row_count == 0 -%}\n                    {%- set source_in_target = false -%}\n                {%- endif -%}\n            {%- endif -%}\n\n\n            {%- do ns.source_included_before.update({source_model.id: source_in_target}) -%}\n\n        {% endfor -%}\n\n        {%- if source_models | length > 1 %}\n\n        rsrc_static_union AS (\n            {#  Create one unionized table over all sources. It will be the same as the already existing\n                link, but extended by the rsrc_static column. #}\n\n            {% for source_model in source_models %}\n            {%- set source_number = source_model.id | string -%}\n\n            SELECT rsrc_static_{{ source_number }}.* FROM rsrc_static_{{ source_number }}\n\n            {%- if not loop.last %}\n            UNION ALL\n            {% endif -%}\n            {%- endfor %}\n            {%- set ns.last_cte = \"rsrc_static_union\" -%}\n        ),\n\n        {%- endif %}\n\n        max_ldts_per_rsrc_static_in_target AS (\n        {# Use the previously created CTE to calculate the max load date timestamp per rsrc_static. #}\n\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) as max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif %}\n{% endif -%}\n\n{% for source_model in source_models %}\n\n{#  Select all deduplicated records from each source, and filter for records that are newer\n    than the max ldts inside the existing link, if incremental. #}\n\n    {%- set source_number = source_model.id | string -%}\n\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number|string] -%}\n    {%- endif -%}\n\n    {%- if 'link_hk' not in source_model.keys() %}\n        {%- set link_hk = link_hashkey -%}\n    {%- else -%}\n        {%- set link_hk = source_model['link_hk'] -%}\n    {% endif %}\n\n    src_new_{{ source_number }} AS (\n\n        SELECT\n            {{ link_hk }} AS {{ link_hashkey }},\n            {% for fk in source_model['fk_columns'] -%}\n            {{ fk }},\n            {% endfor -%}\n            {{ src_ldts }},\n            {{ src_rsrc }}\n        FROM {{ ref(source_model.name) }} src\n        {{ log('rsrc_statics defined?: ' ~ ns.source_models_rsrc_dict[source_number|string], false) }}\n\n    {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_number|int] and not disable_hwm %}\n        INNER JOIN max_ldts_per_rsrc_static_in_target max ON\n        ({%- for rsrc_static in rsrc_statics -%}\n            max.rsrc_static = '{{ rsrc_static }}'\n            {%- if not loop.last -%} OR\n            {% endif -%}\n        {%- endfor %})\n        WHERE src.{{ src_ldts }} > max.max_ldts\n    {%- elif is_incremental() and source_models | length == 1 and not ns.has_rsrc_static_defined and not disable_hwm %}\n        WHERE src.{{ src_ldts }} > (\n            SELECT MAX({{ src_ldts }})\n            FROM {{ this }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            )\n    {%- endif %}\n\n        {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n    ),\n{%- endfor -%}\n\n{%- if source_models | length > 1 %}\n\nsource_new_union AS (\n{# Unionize the new records from all sources. #}\n\n    {%- for source_model in source_models -%}\n\n    {%- set source_number = source_model.id | string -%}\n\n    SELECT\n        {{ link_hashkey }},\n        {% for fk in source_model['fk_columns']|list %}\n            {{ fk }} AS {{ foreign_hashkeys[loop.index - 1] }},\n        {% endfor -%}\n        {{ src_ldts }},\n        {{ src_rsrc }}\n    FROM src_new_{{ source_number }}\n\n    {%- if not loop.last %}\n    UNION ALL\n    {% endif -%}\n\n    {%- endfor -%}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif %}\n\nearliest_hk_over_all_sources AS (\n    {# Deduplicate the unionized records again to only insert the earliest one. #}\n\n    SELECT\n        lcte.*\n    FROM {{ ns.last_cte }} AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY {{ link_hashkey }} ORDER BY {{ src_ldts }}) = 1\n\n    {%- set ns.last_cte = 'earliest_hk_over_all_sources' -%}\n\n),\n\nrecords_to_insert AS (\n    {# Select everything from the previous CTE, if incremental filter for hashkeys that are not already in the link. #}\n\n    SELECT\n        {{ datavault4dbt.print_list(final_columns_to_select) | indent(4) }}\n    FROM {{ ns.last_cte }}\n\n    {%- if is_incremental() %}\n    WHERE {{ link_hashkey }} NOT IN (SELECT * FROM distinct_target_hashkeys)\n    {% endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.is_list", "macro.datavault4dbt.source_model_processing", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.987791, "supported_languages": null}, "macro.datavault4dbt.default__ref_hub": {"name": "default__ref_hub", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/bigquery/ref_hub.sql", "original_file_path": "macros/tables/bigquery/ref_hub.sql", "unique_id": "macro.datavault4dbt.default__ref_hub", "macro_sql": "{%- macro default__ref_hub(ref_keys, src_ldts, src_rsrc, source_models) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set ns = namespace(last_cte= \"\", source_included_before = {}, has_rsrc_static_defined=true, source_models_rsrc_dict={}) -%}\n\n{%- set ref_keys = datavault4dbt.expand_column_list(columns=[ref_keys]) -%}\n\n{# If no specific ref_keys is defined for each source, we apply the values set in the ref_keys variable. #}\n{# If no rsrc_static parameter is defined in ANY of the source models then the whole code block of record_source performance lookup is not executed  #}\n{# For the use of record_source performance lookup it is required that every source model has the parameter rsrc_static defined and it cannot be an empty string #}\n{%- if source_models is not mapping and not datavault4dbt.is_list(source_models) -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- set source_model_values = fromjson(datavault4dbt.source_model_processing(source_models=source_models, parameters={'test':'test'}, reference_keys=ref_keys)) -%}\n{%- set source_models = source_model_values['source_model_list'] -%}\n{%- set ns.has_rsrc_static_defined = source_model_values['has_rsrc_static_defined'] -%}\n{%- set ns.source_models_rsrc_dict = source_model_values['source_models_rsrc_dict'] -%}\n{{ log('source_models: '~source_models, false) }}\n\n{%- set final_columns_to_select = ref_keys + [src_ldts] + [src_rsrc] -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{% if is_incremental() -%}\n{# Get all target ref_keys out of the existing ref_table for later incremental logic. #}\n    distinct_target_ref_keys AS (\n\n        SELECT\n            {{ datavault4dbt.concat_ws(ref_keys) }}\n        FROM {{ this }}\n\n    ),\n    {%- if ns.has_rsrc_static_defined -%}\n        {% for source_model in source_models %}\n         {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n            {%- set source_number = source_model.id | string -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number] -%}\n\n            {{log('rsrc_statics: '~ rsrc_statics, false) }}\n\n            {%- set rsrc_static_query_source -%}\n                SELECT count(*) FROM (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.{{ src_rsrc }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                )\n            {% endset %}\n\n            rsrc_static_{{ source_number }} AS (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT \n                    t.{{ src_ldts }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} LIKE '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                {%- set ns.last_cte = \"rsrc_static_{}\".format(source_number) -%}\n            ),\n\n            {%- set source_in_target = true -%}\n\n            {%- if execute -%}\n                {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n\n                {%- set row_count = rsrc_static_result.columns[0].values()[0] -%}\n\n                {{ log('row_count for '~source_model~' is '~row_count, false) }}\n\n                {%- if row_count == 0 -%}\n                {%- set source_in_target = false -%}\n                {%- endif -%}\n            {%- endif -%}\n\n\n            {%- do ns.source_included_before.update({source_model.id: source_in_target}) -%}\n\n        {% endfor -%}\n\n        {%- if source_models | length > 1 %}\n\n        rsrc_static_union AS (\n            {#  Create one unionized table over all sources. It will be the same as the already existing\n                hub, but extended by the rsrc_static column. #}\n            {% for source_model in source_models %}\n            {%- set source_number = source_model.id | string -%}\n\n            SELECT rsrc_static_{{ source_number }}.* FROM rsrc_static_{{ source_number }}\n\n            {%- if not loop.last %}\n            UNION ALL\n            {% endif -%}\n            {%- endfor %}\n            {%- set ns.last_cte = \"rsrc_static_union\" -%}\n        ),\n\n        {%- endif %}\n\n        max_ldts_per_rsrc_static_in_target AS (\n        {# Use the previously created CTE to calculate the max load date timestamp per rsrc_static. #}\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) as max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif %}\n{% endif -%}\n\n{% for source_model in source_models %}\n\n    {%- set source_number = source_model.id | string -%}\n\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = ns.source_models_rsrc_dict.id -%}\n    {%- endif -%}\n\n\n    src_new_{{ source_number }} AS (\n\n        SELECT\n            {% for ref_key in source_model['ref_keys'] -%}\n            {{ ref_key}},\n            {% endfor -%}\n\n            {{ src_ldts }},\n            {{ src_rsrc }}\n        FROM {{ ref(source_model.name) }} src\n\n    {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_number] %}\n        INNER JOIN max_ldts_per_rsrc_static_in_target max ON\n        ({%- for rsrc_static in rsrc_statics -%}\n            max.rsrc_static = '{{ rsrc_static }}'\n            {%- if not loop.last -%} OR\n            {% endif -%}\n        {%- endfor %})\n        WHERE src.{{ src_ldts }} > max.max_ldts\n    {%- endif %}\n\n         {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n    ),\n{%- endfor -%}\n\n{%- if source_models | length > 1 %}\n\nsource_new_union AS (\n\n    {%- for source_model in source_models -%}\n\n    {%- set source_number = source_model.id | string -%}\n\n    SELECT\n        {% for ref_key in source_model['ref_keys'] -%}\n            {{ ref_key }} AS {{ ref_keys[loop.index - 1] }},\n        {% endfor -%}\n\n        {{ src_ldts }},\n        {{ src_rsrc }}\n    FROM src_new_{{ source_number }}\n\n    {%- if not loop.last %}\n    UNION ALL\n    {% endif -%}\n\n    {%- endfor -%}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif %}\n\nearliest_ref_key_over_all_sources AS (\n\n    {#- Deduplicate the unionized records to only insert the earliest one. #}\n    SELECT\n        lcte.*\n    FROM {{ ns.last_cte }} AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY {%- for ref_key in ref_keys %} {{ref_key}} {%- if not loop.last %}, {% endif %}{% endfor %} ORDER BY {{ src_ldts }}) = 1\n\n    {%- set ns.last_cte = 'earliest_ref_key_over_all_sources' -%}\n\n),\n\nrecords_to_insert AS (\n    {#- Select everything from the previous CTE, if incremental filter for hashkeys that are not already in the hub. #}\n    SELECT\n        {{ datavault4dbt.print_list(final_columns_to_select) }}\n    FROM {{ ns.last_cte }}\n\n    {%- if is_incremental() %}\n    WHERE {{ datavault4dbt.concat_ws(ref_keys) }} NOT IN (SELECT * FROM distinct_target_ref_keys)\n    {% endif -%}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.is_list", "macro.datavault4dbt.source_model_processing", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.datavault4dbt.concat_ws", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.9917839, "supported_languages": null}, "macro.datavault4dbt.default__nh_sat": {"name": "default__nh_sat", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/bigquery/nh_sat.sql", "original_file_path": "macros/tables/bigquery/nh_sat.sql", "unique_id": "macro.datavault4dbt.default__nh_sat", "macro_sql": "{%- macro default__nh_sat(parent_hashkey, src_payload, src_ldts, src_rsrc, source_model, source_is_single_batch) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set source_cols = datavault4dbt.expand_column_list(columns=[parent_hashkey, src_ldts, src_rsrc, src_payload]) -%}\n\n{%- set source_relation = ref(source_model) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Selecting all source data, that is newer than latest data in sat if incremental #}\nsource_data AS (\n\n    SELECT\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM {{ source_relation }}\n\n    {%- if is_incremental() %}\n    WHERE {{ src_ldts }} > (\n        SELECT\n            MAX({{ src_ldts }}) FROM {{ this }}\n        WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    )\n    {%- endif %}\n\n    {% if not source_is_single_batch -%}\n\n    QUALIFY\n        ROW_NUMBER() OVER (PARTITION BY {{ parent_hashkey }} ORDER BY {{ src_ldts }}) = 1\n        \n    {%- endif %}        \n\n),\n\n{% if is_incremental() -%}\n{# Get distinct list of hashkeys inside the existing satellite, if incremental. #}\ndistinct_hashkeys AS (\n\n    SELECT DISTINCT\n        {{ parent_hashkey }}\n    FROM {{ this }}\n\n    ),\n\n{%- endif %}\n\n{#\n    Select all records from the source. If incremental, insert only records, where the\n    hashkey is not already in the existing satellite.\n#}\nrecords_to_insert AS (\n\n    SELECT\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM source_data\n    {%- if is_incremental() %}\n    WHERE {{ parent_hashkey }} NOT IN (SELECT * FROM distinct_hashkeys)\n    {%- endif %}\n\n    )\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.print_list", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.992743, "supported_languages": null}, "macro.datavault4dbt.default__ma_sat_v1": {"name": "default__ma_sat_v1", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/bigquery/ma_sat_v1.sql", "original_file_path": "macros/tables/bigquery/ma_sat_v1.sql", "unique_id": "macro.datavault4dbt.default__ma_sat_v1", "macro_sql": "{%- macro default__ma_sat_v1(sat_v0, hashkey, hashdiff, ma_attribute, src_ldts, src_rsrc, ledts_alias, add_is_current_flag) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set is_current_col_alias = var('datavault4dbt.is_current_col_alias', 'IS_CURRENT') -%}\n\n{%- set source_relation = ref(sat_v0) -%}\n{%- set all_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n{%- set exclude = datavault4dbt.expand_column_list(columns=[hashkey, hashdiff, ma_attribute, src_ldts, src_rsrc]) -%}\n{%- set ma_attributes = datavault4dbt.expand_column_list(columns=[ma_attribute]) -%}\n\n\n{%- set source_columns_to_select = datavault4dbt.process_columns_to_select(all_columns, exclude) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Getting everything from the underlying v0 satellite. #}\nsource_satellite AS (\n\n    SELECT src.*\n    FROM {{ source_relation }} as src\n\n),\n\n{# Selecting all distinct loads per hashkey. #}\ndistinct_hk_ldts AS (\n\n    SELECT DISTINCT\n        {{ hashkey }},\n        {{ src_ldts }}\n    FROM source_satellite\n\n),\n\n{# End-dating each ldts for each hashkey, based on earlier ldts per hashkey. #}\nend_dated_loads AS (\n\n    SELECT\n        {{ hashkey }},\n        {{ src_ldts }},\n        COALESCE(LEAD(TIMESTAMP_SUB({{ src_ldts }}, INTERVAL 1 MICROSECOND)) OVER (PARTITION BY {{ hashkey }} ORDER BY {{ src_ldts }}),{{ datavault4dbt.string_to_timestamp(timestamp_format,end_of_all_times) }}) as {{ ledts_alias }}\n    FROM distinct_hk_ldts\n\n),\n\n{# End-date each source record, based on the end-date for each load. #}\nend_dated_source AS (\n\n    SELECT\n        src.{{ hashkey }},\n        src.{{ hashdiff }},\n        src.{{ src_rsrc }},\n        src.{{ src_ldts }},\n        edl.{{ ledts_alias }},\n        {%- if add_is_current_flag %}\n            CASE WHEN {{ ledts_alias }} = {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            THEN TRUE\n            ELSE FALSE\n            END AS {{ is_current_col_alias }},\n        {% endif %}\n        {{- datavault4dbt.print_list(ma_attributes, indent=10, src_alias='src') }},\n        {{- datavault4dbt.print_list(source_columns_to_select, indent=10, src_alias='src') }}\n    FROM source_satellite AS src\n    LEFT JOIN end_dated_loads edl\n        ON src.{{ hashkey }} = edl.{{ hashkey }}\n        AND src.{{ src_ldts }} = edl.{{ src_ldts }}\n\n)\n\nSELECT * FROM end_dated_source\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.source_columns", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.9940171, "supported_languages": null}, "macro.datavault4dbt.default__ma_sat_v0": {"name": "default__ma_sat_v0", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/bigquery/ma_sat_v0.sql", "original_file_path": "macros/tables/bigquery/ma_sat_v0.sql", "unique_id": "macro.datavault4dbt.default__ma_sat_v0", "macro_sql": "{%- macro default__ma_sat_v0(parent_hashkey, src_hashdiff, src_ma_key, src_payload, src_ldts, src_rsrc, source_model) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set ns=namespace(src_hashdiff=\"\", hdiff_alias=\"\") %}\n{%- if  src_hashdiff is mapping and src_hashdiff is not none -%}\n    {% set ns.src_hashdiff = src_hashdiff[\"source_column\"] %}\n    {% set ns.hdiff_alias = src_hashdiff[\"alias\"] %}\n{% else %}\n    {% set ns.src_hashdiff = src_hashdiff %}\n    {% set ns.hdiff_alias = src_hashdiff  %}\n{%- endif -%}\n\n{%- set source_cols = datavault4dbt.expand_column_list(columns=[src_rsrc, src_ldts, src_ma_key, src_payload]) -%}\n\n{%- set source_relation = ref(source_model) -%}\n\n\nWITH\n\n{# Selecting all source data, that is newer than latest data in sat if incremental #}\nsource_data AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ ns.src_hashdiff }} as {{ ns.hdiff_alias }},\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM {{ source_relation }}\n\n    {%- if is_incremental() %}\n    WHERE {{ src_ldts }} > (\n        SELECT\n            MAX({{ src_ldts }}) FROM {{ this }}\n        WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    )\n    {%- endif %}\n\n),\n\n{# Get the latest record for each parent hashkey in existing sat, if incremental. #}\n{%- if is_incremental() %}\nlatest_entries_in_sat AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ ns.hdiff_alias }}\n    FROM \n        {{ this }}\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY {{ parent_hashkey|lower }} ORDER BY {{ src_ldts }} DESC) = 1  \n),\n{%- endif %}\n\n{# Get a list of all distinct hashdiffs that exist for each parent_hashkey. #}\ndeduped_row_hashdiff AS (\n\n  SELECT \n    {{ parent_hashkey }},\n    {{ src_ldts }},\n    {{ ns.hdiff_alias }}\n  FROM source_data\n  QUALIFY CASE\n            WHEN {{ ns.hdiff_alias }} = LAG({{ ns.hdiff_alias }}) OVER (PARTITION BY {{ parent_hashkey }} ORDER BY {{ src_ldts }}) THEN FALSE\n            ELSE TRUE\n          END\n),\n\n{# Dedupe the source data regarding non-delta groups. #}\ndeduped_rows AS (\n\n  SELECT \n    source_data.{{ parent_hashkey }},\n    source_data.{{ ns.hdiff_alias }},\n    {{ datavault4dbt.alias_all(columns=source_cols, prefix='source_data') }}\n  FROM source_data\n  INNER JOIN deduped_row_hashdiff\n    ON {{ datavault4dbt.multikey(parent_hashkey, prefix=['source_data', 'deduped_row_hashdiff'], condition='=') }}\n    AND {{ datavault4dbt.multikey(src_ldts, prefix=['source_data', 'deduped_row_hashdiff'], condition='=') }}\n    AND {{ datavault4dbt.multikey(ns.hdiff_alias, prefix=['source_data', 'deduped_row_hashdiff'], condition='=') }}\n\n),\n\nrecords_to_insert AS (\n\n    SELECT\n        deduped_rows.{{ parent_hashkey }},\n        deduped_rows.{{ ns.hdiff_alias }},\n        {{ datavault4dbt.alias_all(columns=source_cols, prefix='deduped_rows') }}\n    FROM deduped_rows\n    {%- if is_incremental() %}\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE {{ datavault4dbt.multikey(parent_hashkey, prefix=['latest_entries_in_sat', 'deduped_rows'], condition='=') }}\n            AND {{ datavault4dbt.multikey(ns.hdiff_alias, prefix=['latest_entries_in_sat', 'deduped_rows'], condition='=') }} \n            )\n    {%- endif %}\n\n    )\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.print_list", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.alias_all", "macro.datavault4dbt.multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.996042, "supported_languages": null}, "macro.datavault4dbt.default__sat_v0": {"name": "default__sat_v0", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/bigquery/sat_v0.sql", "original_file_path": "macros/tables/bigquery/sat_v0.sql", "unique_id": "macro.datavault4dbt.default__sat_v0", "macro_sql": "{%- macro default__sat_v0(parent_hashkey, src_hashdiff, src_payload, src_ldts, src_rsrc, source_model, disable_hwm, source_is_single_batch) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set ns=namespace(src_hashdiff=\"\", hdiff_alias=\"\") %}\n\n{%- if  src_hashdiff is mapping and src_hashdiff is not none -%}\n    {% set ns.src_hashdiff = src_hashdiff[\"source_column\"] %}\n    {% set ns.hdiff_alias = src_hashdiff[\"alias\"] %}\n{% else %}\n    {% set ns.src_hashdiff = src_hashdiff %}\n    {% set ns.hdiff_alias = src_hashdiff  %}\n{%- endif -%}\n\n{%- set source_cols = datavault4dbt.expand_column_list(columns=[src_rsrc, src_ldts, src_payload]) -%}\n\n{%- set source_relation = ref(source_model) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Selecting all source data, that is newer than latest data in sat if incremental #}\nsource_data AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ ns.src_hashdiff }} as {{ ns.hdiff_alias }},\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM {{ source_relation }}\n\n    {%- if is_incremental() %}\n    WHERE {{ src_ldts }} > (\n        SELECT\n            MAX({{ src_ldts }}) FROM {{ this }}\n        WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    )\n    {%- endif %}\n),\n\n{# Get the latest record for each parent hashkey in existing sat, if incremental. #}\n{%- if is_incremental() %}\nlatest_entries_in_sat AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ ns.hdiff_alias }}\n    FROM \n        {{ this }}\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY {{ parent_hashkey|lower }} ORDER BY {{ src_ldts }} DESC) = 1  \n),\n{%- endif %}\n\n{#\n    Deduplicate source by comparing each hashdiff to the hashdiff of the previous record, for each hashkey.\n    Additionally adding a row number based on that order, if incremental.\n#}\ndeduplicated_numbered_source AS (\n\n    SELECT\n    {{ parent_hashkey }},\n    {{ ns.hdiff_alias }},\n    {{ datavault4dbt.print_list(source_cols) }}\n    {% if is_incremental() -%}\n    , ROW_NUMBER() OVER(PARTITION BY {{ parent_hashkey }} ORDER BY {{ src_ldts }}) as rn\n    {%- endif %}\n    FROM source_data\n    QUALIFY\n        CASE\n            WHEN {{ ns.hdiff_alias }} = LAG({{ ns.hdiff_alias }}) OVER(PARTITION BY {{ parent_hashkey|lower }} ORDER BY {{ src_ldts }}) THEN FALSE\n            ELSE TRUE\n        END\n),\n\n{#\n    Select all records from the previous CTE. If incremental, compare the oldest incoming entry to\n    the existing records in the satellite.\n#}\nrecords_to_insert AS (\n\n    SELECT\n    {{ parent_hashkey }},\n    {{ ns.hdiff_alias }},\n    {{ datavault4dbt.print_list(source_cols) }}\n    FROM deduplicated_numbered_source\n    {%- if is_incremental() %}\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE {{ datavault4dbt.multikey(parent_hashkey, prefix=['latest_entries_in_sat', 'deduplicated_numbered_source'], condition='=') }}\n            AND {{ datavault4dbt.multikey(ns.hdiff_alias, prefix=['latest_entries_in_sat', 'deduplicated_numbered_source'], condition='=') }}\n            AND deduplicated_numbered_source.rn = 1)\n    {%- endif %}\n\n    )\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.print_list", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626377.99782, "supported_languages": null}, "macro.datavault4dbt.default__rec_track_sat": {"name": "default__rec_track_sat", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/bigquery/rec_track_sat.sql", "original_file_path": "macros/tables/bigquery/rec_track_sat.sql", "unique_id": "macro.datavault4dbt.default__rec_track_sat", "macro_sql": "{%- macro default__rec_track_sat(tracked_hashkey, source_models, src_ldts, src_rsrc, src_stg, disable_hwm) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{# Setting the unknown and error ghost record value for record source column #}\n{%- set rsrc_unknown = var('datavault4dbt.default_unknown_rsrc', 'SYSTEM') -%}\n{%- set rsrc_error = var('datavault4dbt.default_error_rsrc', 'ERROR') -%}\n\n{# Setting the rsrc and stg_alias default datatype and length #}\n{%- set rsrc_default_dtype = var('datavault4dbt.rsrc_default_dtype', 'STRING') -%}\n{%- set stg_default_dtype = var('datavault4dbt.stg_default_dtype', 'STRING') -%}\n{%- set ns = namespace(last_cte = '', source_included_before = {},  source_models_rsrc_dict={},  has_rsrc_static_defined=true) -%}\n\n{%- if source_models is not mapping and not datavault4dbt.is_list(source_models) -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- set source_model_values = fromjson(datavault4dbt.source_model_processing(source_models=source_models, parameters={'hk_column':tracked_hashkey})) -%}\n{%- set source_models = source_model_values['source_model_list'] -%}\n{%- set ns.has_rsrc_static_defined = source_model_values['has_rsrc_static_defined'] -%}\n{%- set ns.source_models_rsrc_dict = source_model_values['source_models_rsrc_dict'] -%}\n{{ log('source_models: '~source_models, false) }}\n\n{%- set final_columns_to_select = [tracked_hashkey] + [src_ldts] + [src_rsrc] + [src_stg] -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{% if is_incremental() %}\n\n    distinct_concated_target AS (\n        {%- set concat_columns = [tracked_hashkey, src_ldts, src_rsrc] -%}\n        {{ \"\\n\" }}\n        SELECT\n        {{ datavault4dbt.concat_ws(concat_columns) }} as concat\n        FROM {{ this }}\n    ),\n    {%- if ns.has_rsrc_static_defined and not disable_hwm -%}\n        rsrc_static_unionized AS (\n        {% for source_model in source_models %}\n        {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n              {%- set source_number = source_model.id | string -%}\n            {%- set hk_column = source_model['hk_column'] -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number] -%}\n\n            {%- set rsrc_static_query_source_count -%}\n                SELECT count(*) FROM (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT \n                    {{ tracked_hashkey }},\n                    {{ src_ldts }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }}\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %} \n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                )\n            {% endset %}\n\n            {%- set rsrc_static_query_source -%}\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT \n                    {{ tracked_hashkey }},\n                    {{ src_ldts }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }}\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %} \n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n            {% endset %}\n\n            {{ rsrc_static_query_source }}  \n\n            {%- set source_in_target = true -%}\n            \n            {%- if execute -%}\n                {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n\n                {%- set row_count = rsrc_static_result.columns[0].values()[0] -%}\n\n                {{ log('row_count for '~source_model~' is '~row_count, false) }}\n\n                {%- if row_count == 0 -%}\n                    {%- set source_in_target = false -%}\n                {%- endif -%}\n            {%- endif -%}\n\n            {%- do ns.source_included_before.update({source_model.id: source_in_target}) -%}\n            {# Unionize over all sources #}\n            {%- if not loop.last %}\n                UNION ALL \n            {% endif -%}\n\n        {% endfor -%}\n        {%- set ns.last_cte = \"rsrc_static_unionized\" -%}\n        ),\n\n        max_ldts_per_rsrc_static_in_target AS (\n\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) as max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif %}\n{% endif -%}\n\n{#\n    We deduplicate each source over hashkey + ldts + rsrc_static and if is_incremental only select the rows, where the ldts is later\n    than the latest one in the existing satellite for that rsrc_static. If a source is added to the existing satellite, all deduplicated\n    rows from that source are loaded into the satellite.\n#}\n\n{%- for source_model in source_models %}\n\n    {%- set source_number = source_model.id | string -%}\n    {%- set hk_column = source_model['hk_column'] -%}\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number|string] -%}\n\n        src_new_{{ source_number }} AS (\n        {%- for rsrc_static in rsrc_statics %}\n            SELECT DISTINCT\n                {{ hk_column }} AS {{ tracked_hashkey }},\n                {{ src_ldts }},\n                CAST('{{ rsrc_static }}' AS {{ rsrc_default_dtype }} ) AS {{ src_rsrc }},\n                CAST(UPPER('{{ source_model.name }}') AS {{ stg_default_dtype }})  AS {{ src_stg }}\n            FROM {{ ref(source_model.name) }} src\n\n\n            {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_number|int] and not disable_hwm %}\n                INNER JOIN max_ldts_per_rsrc_static_in_target max\n                    ON max.rsrc_static = '{{ rsrc_static }}'\n                WHERE src.{{ src_ldts }} > max.max_ldts\n            {%- endif %}\n            {%- if not loop.last %}\n                UNION ALL\n            {% endif -%}\n        {% endfor %}\n\n        ),\n    {%- else -%}\n        src_new_{{ source_number}} AS (\n            SELECT DISTINCT\n                {{ hk_column }} AS {{ tracked_hashkey }},\n                {{ src_ldts }},\n                CAST({{ src_rsrc }} AS {{ rsrc_default_dtype }}) AS {{ src_rsrc }},\n                CAST(UPPER('{{ source_model.name }}') AS {{ stg_default_dtype }}) AS {{ src_stg }}\n            FROM {{ ref(source_model.name) }} src\n            {%- if is_incremental() and source_models | length == 1 and not disable_hwm %}\n                WHERE src.{{ src_ldts }} > (\n            SELECT MAX({{ src_ldts }})\n            FROM {{ this }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            )\n            {%- endif %}\n        ),\n    {%- endif -%}\n\n    {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n{% endfor %}\n\n{#\n    If more than one source model is selected, all previously created deduplicated CTEs are unionized.\n#}\n\n{%- if source_models | length > 1 %}\n\nsource_new_union AS (\n    {% for source_model in source_models %}\n        {%- set hk_column = source_model['hk_column'] -%}\n        {%- set source_number = source_model.id | string -%}\n\n        SELECT\n        {{ tracked_hashkey }},\n        {{ src_ldts }},\n        {{ src_rsrc }},\n        {{ src_stg }}\n        FROM src_new_{{ source_number }}\n\n        {%- if not loop.last %}\n        UNION ALL\n        {% endif -%}\n\n    {% endfor %}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif -%}\n\n{#\n    Selecting everything, either from the unionized data, or from the single CTE (if single source). Checking against the existing\n    satellite to only inserts that are not already inserted, if incremental run.\n#}\n\nrecords_to_insert AS (\n\n    SELECT\n    {{ datavault4dbt.print_list(final_columns_to_select) }}\n    FROM {{ ns.last_cte }}\n    WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }} \n    AND {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }}\n    {%- if is_incremental() %}\n        AND {{ datavault4dbt.concat_ws(concat_columns) }} NOT IN (SELECT * FROM distinct_concated_target)\n    {% endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.is_list", "macro.datavault4dbt.source_model_processing", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.datavault4dbt.concat_ws", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.0023942, "supported_languages": null}, "macro.datavault4dbt.default__sat_v1": {"name": "default__sat_v1", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/bigquery/sat_v1.sql", "original_file_path": "macros/tables/bigquery/sat_v1.sql", "unique_id": "macro.datavault4dbt.default__sat_v1", "macro_sql": "{%- macro default__sat_v1(sat_v0, hashkey, hashdiff, src_ldts, src_rsrc, ledts_alias, add_is_current_flag, include_payload) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set is_current_col_alias = var('datavault4dbt.is_current_col_alias', 'IS_CURRENT') -%}\n{%- set ledts_alias = var('datavault4dbt.ledts_alias', 'ledts') -%}\n\n{%- set source_relation = ref(sat_v0) -%}\n\n{%- set all_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n{%- set exclude = [hashkey, hashdiff, src_ldts, src_rsrc] -%}\n\n{%- set source_columns_to_select = datavault4dbt.process_columns_to_select(all_columns, exclude) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Calculate ledts based on the ldts of the earlier record. #}\nend_dated_source AS (\n\n    SELECT\n        {{ hashkey }},\n        {{ hashdiff }},\n        {{ src_rsrc }},\n        {{ src_ldts }},\n        COALESCE(LEAD(TIMESTAMP_SUB({{ src_ldts }}, INTERVAL 1 MICROSECOND)) OVER (PARTITION BY {{ hashkey }} ORDER BY {{ src_ldts }}),{{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}) as {{ ledts_alias }}\n        {%- if include_payload -%},\n            {{ datavault4dbt.print_list(source_columns_to_select) }}\n        {%- endif %}\n    FROM {{ source_relation }}\n\n)\n\nSELECT\n    {{ hashkey }},\n    {{ hashdiff }},\n    {{ src_rsrc }},\n    {{ src_ldts }},\n    {{ ledts_alias }},\n    {%- if add_is_current_flag %}\n        CASE WHEN {{ ledts_alias }} = {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n        THEN TRUE\n        ELSE FALSE\n        END AS {{ is_current_col_alias }}\n    {% endif -%}\n    {%- if include_payload -%},\n        {{ datavault4dbt.print_list(source_columns_to_select) }}\n    {%- endif %}\nFROM end_dated_source\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.source_columns", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.00354, "supported_languages": null}, "macro.datavault4dbt.snowflake__control_snap_v0": {"name": "snowflake__control_snap_v0", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/snowflake/control_snap_v0.sql", "original_file_path": "macros/tables/snowflake/control_snap_v0.sql", "unique_id": "macro.datavault4dbt.snowflake__control_snap_v0", "macro_sql": "{%- macro snowflake__control_snap_v0(start_date, daily_snapshot_time, sdts_alias, end_date=none) -%}\n\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n{%- set start_date = start_date | replace('00:00:00', daily_snapshot_time) -%}\n\nWITH \n\ninitial_timestamps AS (\n    \n    SELECT\n        DATEADD(DAY, SEQ4(), \n        TIMESTAMPADD(SECOND, EXTRACT(SECOND FROM TO_TIME('{{ daily_snapshot_time }}')), \n            TIMESTAMPADD(MINUTE, EXTRACT(MINUTE FROM TO_TIME('{{ daily_snapshot_time }}')), \n                TIMESTAMPADD(HOUR, EXTRACT(HOUR FROM TO_TIME('{{ daily_snapshot_time }}')), TO_DATE('{{ start_date }}', 'YYYY-MM-DD')))\n                ))::TIMESTAMP AS sdts\n    FROM \n        TABLE(GENERATOR(ROWCOUNT => 100000))\n    WHERE \n        sdts <= CURRENT_TIMESTAMP\n    {%- if is_incremental() %}\n    AND sdts > (SELECT MAX({{ sdts_alias }}) FROM {{ this }})\n    {%- endif %}\n\n),\n\nenriched_timestamps AS (\n\n    SELECT\n        sdts as {{ sdts_alias }},\n        TRUE as force_active,\n        sdts AS replacement_sdts,\n        CONCAT('Snapshot ', DATE(sdts)) AS caption,\n        CASE\n            WHEN EXTRACT(MINUTE FROM sdts) = 0 AND EXTRACT(SECOND FROM sdts) = 0 THEN TRUE\n            ELSE FALSE\n        END AS is_hourly,\n        CASE\n            WHEN EXTRACT(MINUTE FROM sdts) = 0 AND EXTRACT(SECOND FROM sdts) = 0 AND EXTRACT(HOUR FROM sdts) = 0 THEN TRUE\n            ELSE FALSE\n        END AS is_daily,\n        CASE\n            WHEN EXTRACT(DAYOFWEEK FROM  sdts) = 1 THEN TRUE\n            ELSE FALSE\n        END AS is_weekly,\n        CASE\n            WHEN EXTRACT(DAY FROM sdts) = 1 THEN TRUE\n            ELSE FALSE\n        END AS is_monthly,\n        CASE\n            WHEN EXTRACT(DAY FROM sdts) = 1 AND EXTRACT(MONTH FROM sdts) = 1 THEN TRUE\n            ELSE FALSE\n        END AS is_yearly,\n        NULL AS comment\n    FROM initial_timestamps\n\n)\n\nSELECT * FROM enriched_timestamps\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.timestamp_format", "macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.0040362, "supported_languages": null}, "macro.datavault4dbt.snowflake__control_snap_v1": {"name": "snowflake__control_snap_v1", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/snowflake/control_snap_v1.sql", "original_file_path": "macros/tables/snowflake/control_snap_v1.sql", "unique_id": "macro.datavault4dbt.snowflake__control_snap_v1", "macro_sql": "{%- macro snowflake__control_snap_v1(control_snap_v0, log_logic, sdts_alias) -%}\n\n{# Sample intervals\n   {%-set log_logic = {'daily': {'duration': 3,\n                                'unit': 'MONTH',\n                                'forever': 'FALSE'},\n                      'weekly': {'duration': 1,\n                                 'unit': 'YEAR'},\n                      'monthly': {'duration': 5,\n                                  'unit': 'YEAR'},\n                      'yearly': {'forever': 'TRUE'} } %} \n#}\n\n{%- if log_logic is not none %}\n    {%- for interval in log_logic.keys() %}\n        {%- if 'forever' not in log_logic[interval].keys() -%}\n            {% do log_logic[interval].update({'forever': 'FALSE'}) %}\n        {%- endif -%}\n    {%- endfor -%}\n{%- endif %}\n\n{%- set v0_relation = ref(control_snap_v0) -%}\n{%- set ns = namespace(forever_status=FALSE) %}\n\n{%- set snapshot_trigger_column = var('datavault4dbt.snapshot_trigger_column', 'is_active') -%}\n\nWITH \n\nlatest_row AS (\n\n    SELECT\n        {{ sdts_alias }}\n    FROM {{ v0_relation }}\n    ORDER BY {{ sdts_alias }} DESC\n    LIMIT 1\n\n), \n\nvirtual_logic AS (\n    \n    SELECT\n        c.{{ sdts_alias }},\n        c.replacement_sdts,\n        c.force_active,\n        {%- if log_logic is none %}\n        TRUE AS {{ snapshot_trigger_column }},\n        {%- else %}\n        CASE \n            WHEN\n            {% if 'daily' in log_logic.keys() %}\n                {%- if log_logic['daily']['forever'] is true -%}\n                    {%- set ns.forever_status = 'TRUE' -%}\n                  (1=1)\n                {%- else %}                            \n                    {%- set daily_duration = log_logic['daily']['duration'] -%}\n                    {%- set daily_unit = log_logic['daily']['unit'] -%}\n                  (DATE_TRUNC('DAY', c.{{ sdts_alias }}::DATE) BETWEEN CURRENT_DATE() - INTERVAL '{{ daily_duration }} {{ daily_unit }}' AND CURRENT_DATE())\n                {%- endif -%}   \n            {%- endif %}\n\n            {%- if 'weekly' in log_logic.keys() %} OR \n                {%- if log_logic['weekly']['forever'] is true -%}\n                    {%- set ns.forever_status = 'TRUE' -%}\n              (c.is_weekly = TRUE)\n                {%- else %} \n                    {%- set weekly_duration = log_logic['weekly']['duration'] -%}\n                    {%- set weekly_unit = log_logic['weekly']['unit'] %}            \n              ((DATE_TRUNC('DAY', c.{{ sdts_alias }}::DATE) BETWEEN CURRENT_DATE() - INTERVAL '{{ weekly_duration }} {{ weekly_unit }}' AND CURRENT_DATE()) AND (c.is_weekly = TRUE))\n                {%- endif -%}\n            {% endif -%}\n\n            {%- if 'monthly' in log_logic.keys() %} OR\n                {%- if log_logic['monthly']['forever'] is true -%}\n                    {%- set ns.forever_status = 'TRUE' %}\n              (c.is_monthly = TRUE)\n                {%- else %}\n                    {%- set monthly_duration = log_logic['monthly']['duration'] -%}\n                    {%- set monthly_unit = log_logic['monthly']['unit'] %}            \n              ((DATE_TRUNC('DAY', c.{{ sdts_alias }}::DATE) BETWEEN CURRENT_DATE() - INTERVAL '{{ monthly_duration }} {{ monthly_unit }}' AND CURRENT_DATE()) AND (c.is_monthly = TRUE))\n                {%- endif -%}\n            {% endif -%}\n\n            {%- if 'yearly' in log_logic.keys() %} OR \n                {%- if log_logic['yearly']['forever'] is true -%}\n                    {%- set ns.forever_status = 'TRUE' %}\n              (c.is_yearly = TRUE)\n                {%- else %}\n                    {%- set yearly_duration = log_logic['yearly']['duration'] -%}\n                    {%- set yearly_unit = log_logic['yearly']['unit'] %}                    \n              ((DATE_TRUNC('DAY', c.{{ sdts_alias }}::DATE) BETWEEN CURRENT_DATE() - INTERVAL '{{ yearly_duration }} {{ yearly_unit }}' AND CURRENT_DATE()) AND (c.is_yearly = TRUE))\n                {%- endif -%}\n            {% endif %}\n            THEN TRUE\n            ELSE FALSE\n        END AS {{ snapshot_trigger_column }},\n        {%- endif %}\n\n        CASE\n            WHEN l.{{ sdts_alias }} IS NULL THEN FALSE\n            ELSE TRUE\n        END AS is_latest,\n\n        c.caption,\n        c.is_hourly,\n        c.is_daily,\n        c.is_weekly,\n        c.is_monthly,\n        c.is_yearly,\n        CASE\n            WHEN EXTRACT(YEAR FROM c.{{ sdts_alias }}) = EXTRACT(YEAR FROM CURRENT_DATE()) THEN TRUE\n            ELSE FALSE\n        END AS is_current_year,\n        CASE\n            WHEN EXTRACT(YEAR FROM c.{{ sdts_alias }}) = EXTRACT(YEAR FROM CURRENT_DATE())-1 THEN TRUE\n            ELSE FALSE\n        END AS is_last_year,\n        CASE\n            WHEN DATE_TRUNC('DAY', c.{{ sdts_alias }}::DATE) BETWEEN (CURRENT_DATE() - INTERVAL '1 YEAR') AND CURRENT_DATE() THEN TRUE\n            ELSE FALSE\n        END AS is_rolling_year,\n        CASE\n            WHEN DATE_TRUNC('DAY', c.{{ sdts_alias }}::DATE) BETWEEN (CURRENT_DATE() - INTERVAL '2 YEAR') AND (CURRENT_DATE() - INTERVAL '1 YEAR') THEN TRUE\n            ELSE FALSE\n        END AS is_last_rolling_year,\n        c.comment\n    FROM {{ v0_relation }} c\n    LEFT JOIN latest_row l\n    ON c.{{ sdts_alias }} = l.{{ sdts_alias }}\n),\n\nactive_logic_combined AS (\n\n    SELECT \n        {{ sdts_alias }},\n        replacement_sdts,\n        CASE\n            WHEN force_active AND {{ snapshot_trigger_column }} THEN TRUE\n            WHEN NOT force_active OR NOT {{ snapshot_trigger_column }} THEN FALSE\n        END AS {{ snapshot_trigger_column }},\n        is_latest, \n        caption,\n        is_hourly,\n        is_daily,\n        is_weekly,\n        is_monthly,\n        is_yearly,\n        is_current_year,\n        is_last_year,\n        is_rolling_year,\n        is_last_rolling_year,\n        comment\n    FROM virtual_logic\n\n)\n\nSELECT * FROM active_logic_combined\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.006529, "supported_languages": null}, "macro.datavault4dbt.snowflake__pit": {"name": "snowflake__pit", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/snowflake/pit.sql", "original_file_path": "macros/tables/snowflake/pit.sql", "unique_id": "macro.datavault4dbt.snowflake__pit", "macro_sql": "{%- macro snowflake__pit(tracked_entity, hashkey, sat_names, ldts, ledts, sdts, snapshot_relation, dimension_key,snapshot_trigger_column=none, custom_rsrc=none, pit_type=none) -%}\n\n{%- set hash = datavault4dbt.hash_method() -%}\n{%- set hash_dtype = var('datavault4dbt.hash_datatype', 'STRING') -%}\n{%- set hash_default_values = fromjson(datavault4dbt.hash_default_values(hash_function=hash,hash_datatype=hash_dtype)) -%}\n{%- set hash_alg = hash_default_values['hash_alg'] -%}\n{%- set unknown_key = hash_default_values['unknown_key'] -%}\n{%- set error_key = hash_default_values['error_key'] -%}\n\n{%- set rsrc = var('datavault4dbt.rsrc_alias', 'rsrc') -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- if datavault4dbt.is_something(pit_type) -%}\n    {%- set quote = \"'\" -%}\n    {%- set pit_type_quoted = quote + pit_type + quote -%}\n    {%- set hashed_cols = [pit_type_quoted, datavault4dbt.prefix([hashkey],'te'), datavault4dbt.prefix([sdts], 'snap')] -%}\n{%- else -%}\n    {%- set hashed_cols = [datavault4dbt.prefix([hashkey],'te'), datavault4dbt.prefix([sdts], 'snap')] -%}\n{%- endif -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{%- if is_incremental() %}\n\nexisting_dimension_keys AS (\n\n    SELECT\n        {{ dimension_key }}\n    FROM {{ this }}\n\n),\n\n{%- endif %}\n\npit_records AS (\n\n    SELECT\n        \n        {% if datavault4dbt.is_something(pit_type) -%}\n            '{{ datavault4dbt.as_constant(pit_type) }}' as type,\n        {%- endif %}\n        {% if datavault4dbt.is_something(custom_rsrc) -%}\n        '{{ custom_rsrc }}' as {{ rsrc }},\n        {%- endif %}\n        {{ datavault4dbt.hash(columns=hashed_cols,\n                    alias=dimension_key,\n                    is_hashdiff=false)   }} ,\n        te.{{ hashkey }},\n        snap.{{ sdts }},\n        {%- for satellite in sat_names %}\n            COALESCE({{ satellite }}.{{ hashkey }}, CAST({{ datavault4dbt.as_constant(column_str=unknown_key) }} as {{ hash_dtype }})) AS hk_{{ satellite }},\n            COALESCE({{ satellite }}.{{ ldts }}, {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }}) AS {{ ldts }}_{{ satellite }}\n            {{- \",\" if not loop.last }}\n        {%- endfor %}\n\n    FROM\n            {{ ref(tracked_entity) }} te\n        FULL OUTER JOIN\n            {{ ref(snapshot_relation) }} snap\n            {% if datavault4dbt.is_something(snapshot_trigger_column) -%}\n                ON snap.{{ snapshot_trigger_column }} = true\n            {% else -%}\n                ON 1=1\n            {%- endif %}\n        {% for satellite in sat_names %}\n        {%- set sat_columns = datavault4dbt.source_columns(ref(satellite)) %}\n        {%- if ledts|string|lower in sat_columns|map('lower') %}\n        LEFT JOIN {{ ref(satellite) }}\n        {%- else %}\n        LEFT JOIN (\n            SELECT\n                {{ hashkey }},\n                {{ ldts }},\n                COALESCE(LEAD({{ ldts }} - INTERVAL '1 MICROSECOND') OVER (PARTITION BY {{ hashkey }} ORDER BY {{ ldts }}),{{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}) AS {{ ledts }}\n            FROM {{ ref(satellite) }}\n        ) {{ satellite }}\n        {% endif %}\n            ON\n                {{ satellite }}.{{ hashkey}} = te.{{ hashkey }}\n                AND snap.{{ sdts }} BETWEEN {{ satellite }}.{{ ldts }} AND {{ satellite }}.{{ ledts }}\n        {% endfor %}\n    {% if datavault4dbt.is_something(snapshot_trigger_column) %}\n        WHERE snap.{{ snapshot_trigger_column }}\n    {%- endif %}\n\n),\n\nrecords_to_insert AS (\n\n    SELECT DISTINCT *\n    FROM pit_records\n    {%- if is_incremental() %}\n    WHERE {{ dimension_key }} NOT IN (SELECT * FROM existing_dimension_keys)\n    {% endif -%}\n\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.hash_method", "macro.datavault4dbt.hash_default_values", "macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.is_something", "macro.datavault4dbt.prefix", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.datavault4dbt.as_constant", "macro.datavault4dbt.hash", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.source_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.0092502, "supported_languages": null}, "macro.datavault4dbt.snowflake__ref_sat_v0": {"name": "snowflake__ref_sat_v0", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/snowflake/ref_sat_v0.sql", "original_file_path": "macros/tables/snowflake/ref_sat_v0.sql", "unique_id": "macro.datavault4dbt.snowflake__ref_sat_v0", "macro_sql": "{%- macro snowflake__ref_sat_v0(parent_ref_keys, src_hashdiff, src_payload, src_ldts, src_rsrc, source_model, disable_hwm, source_is_single_batch) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set parent_ref_keys = datavault4dbt.expand_column_list(columns=[parent_ref_keys]) -%}\n\n{%- set ns=namespace(src_hashdiff=\"\", hdiff_alias=\"\") %}\n\n{%- if  src_hashdiff is mapping and src_hashdiff is not none -%}\n    {% set ns.src_hashdiff = src_hashdiff[\"source_column\"] %}\n    {% set ns.hdiff_alias = src_hashdiff[\"alias\"] %}\n{% else %}\n    {% set ns.src_hashdiff = src_hashdiff %}\n    {% set ns.hdiff_alias = src_hashdiff  %}\n{%- endif -%}\n\n{%- set source_cols = datavault4dbt.expand_column_list(columns=[src_rsrc, src_ldts, src_payload]) -%}\n\n{%- set source_relation = ref(source_model) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Selecting all source data, that is newer than latest data in ref_sat if incremental #}\nsource_data AS (\n\n    SELECT\n        {% for ref_key in parent_ref_keys %}\n        {{ref_key}},\n        {% endfor %}\n        {{ ns.src_hashdiff }} as {{ ns.hdiff_alias }},\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM {{ source_relation }}\n\n    {%- if is_incremental() %}\n    WHERE {{ src_ldts }} > (\n        SELECT\n            MAX({{ src_ldts }}) FROM {{ this }}\n        WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    )\n    {%- endif %}\n),\n\n{# Get the latest record for each parent ref key combination in existing sat, if incremental. #}\n{%- if is_incremental() %}\nlatest_entries_in_sat AS (\n\n    SELECT\n        {% for ref_key in parent_ref_keys %}\n        {{ref_key}},\n        {% endfor %}\n        {{ ns.hdiff_alias }}\n    FROM \n        {{ this }}\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY {%- for ref_key in parent_ref_keys %} {{ref_key}} {%- if not loop.last %}, {% endif %}{% endfor %} ORDER BY {{ src_ldts }} DESC) = 1  \n),\n{%- endif %}\n\n{#\n    Deduplicate source by comparing each hashdiff to the hashdiff of the previous record, for each parent ref key combination.\n    Additionally adding a row number based on that order, if incremental.\n#}\ndeduplicated_numbered_source AS (\n\n    SELECT\n    {% for ref_key in parent_ref_keys %}\n    {{ref_key}},\n    {% endfor %}\n    {{ ns.hdiff_alias }},\n    {{ datavault4dbt.print_list(source_cols) }}\n    {% if is_incremental() -%}\n    , ROW_NUMBER() OVER(PARTITION BY {%- for ref_key in parent_ref_keys %} {{ref_key}} {%- if not loop.last %}, {% endif %}{% endfor %} ORDER BY {{ src_ldts }}) as rn\n    {%- endif %}\n    FROM source_data\n    QUALIFY\n        CASE\n            WHEN {{ ns.hdiff_alias }} = LAG({{ ns.hdiff_alias }}) OVER(PARTITION BY {%- for ref_key in parent_ref_keys %} {{ref_key}} {%- if not loop.last %}, {% endif %}{% endfor %} ORDER BY {{ src_ldts }}) THEN FALSE\n            ELSE TRUE\n        END\n),\n\n{#\n    Select all records from the previous CTE. If incremental, compare the oldest incoming entry to\n    the existing records in the satellite.\n#}\nrecords_to_insert AS (\n\n    SELECT\n    {% for ref_key in parent_ref_keys %}\n    {{ref_key}},\n    {% endfor %}\n    {{ ns.hdiff_alias }},\n    {{ datavault4dbt.print_list(source_cols) }}\n    FROM deduplicated_numbered_source\n    {%- if is_incremental() %}\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE 1=1\n            {% for ref_key in parent_ref_keys %}\n            AND {{ datavault4dbt.multikey(ref_key, prefix=['latest_entries_in_sat', 'deduplicated_numbered_source'], condition='=') }}\n            {% endfor %}\n            AND {{ datavault4dbt.multikey(ns.hdiff_alias, prefix=['latest_entries_in_sat', 'deduplicated_numbered_source'], condition='=') }}\n            AND deduplicated_numbered_source.rn = 1)\n    {%- endif %}\n\n    )\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.print_list", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.011594, "supported_languages": null}, "macro.datavault4dbt.snowflake__ref_sat_v1": {"name": "snowflake__ref_sat_v1", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/snowflake/ref_sat_v1.sql", "original_file_path": "macros/tables/snowflake/ref_sat_v1.sql", "unique_id": "macro.datavault4dbt.snowflake__ref_sat_v1", "macro_sql": "{%- macro snowflake__ref_sat_v1(ref_sat_v0, ref_keys, hashdiff, src_ldts, src_rsrc, ledts_alias, add_is_current_flag) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set is_current_col_alias = var('datavault4dbt.is_current_col_alias', 'IS_CURRENT') -%}\n{%- set ledts_alias = var('datavault4dbt.ledts_alias', 'ledts') -%}\n\n{%- set source_relation = ref(ref_sat_v0) -%}\n\n{%- set ref_keys = datavault4dbt.expand_column_list(columns=[ref_keys]) -%}\n\n{%- set all_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n{%- set exclude = ref_keys + [hashdiff, src_ldts, src_rsrc] -%}\n\n{%- set source_columns_to_select = datavault4dbt.process_columns_to_select(all_columns, exclude) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Calculate ledts based on the ldts of the earlier record. #}\nend_dated_source AS (\n\n    SELECT\n        {% for ref_key in ref_keys %}\n        {{ref_key}},\n        {% endfor %}\n        {{ hashdiff }},\n        {{ src_rsrc }},\n        {{ src_ldts }},\n        COALESCE(LEAD({{ src_ldts }} - INTERVAL '1 MICROSECOND') OVER (PARTITION BY {%- for ref_key in ref_keys %} {{ref_key}} {%- if not loop.last %}, {% endif %}{% endfor %} ORDER BY {{ src_ldts }}),{{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}) as {{ ledts_alias }},\n        {{ datavault4dbt.print_list(source_columns_to_select) }}\n    FROM {{ source_relation }}\n\n)\n\nSELECT\n    {% for ref_key in ref_keys %}\n    {{ref_key}},\n    {% endfor %}\n    {{ hashdiff }},\n    {{ src_rsrc }},\n    {{ src_ldts }},\n    {{ ledts_alias }},\n    {%- if add_is_current_flag %}\n        CASE WHEN {{ ledts_alias }} = {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n        THEN TRUE\n        ELSE FALSE\n        END AS {{ is_current_col_alias }},\n    {% endif -%}\n    {{ datavault4dbt.print_list(source_columns_to_select) }}\nFROM end_dated_source\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.source_columns", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.012885, "supported_languages": null}, "macro.datavault4dbt.snowflake__nh_link": {"name": "snowflake__nh_link", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/snowflake/nh_link.sql", "original_file_path": "macros/tables/snowflake/nh_link.sql", "unique_id": "macro.datavault4dbt.snowflake__nh_link", "macro_sql": "{%- macro snowflake__nh_link(link_hashkey, foreign_hashkeys, payload, source_models, src_ldts, src_rsrc, disable_hwm, source_is_single_batch) -%}\n{%- if not (foreign_hashkeys is iterable and foreign_hashkeys is not string) -%}\n\n    {%- if execute -%}\n        {{ exceptions.raise_compiler_error(\"Only one foreign key provided for this link. At least two required.\") }}\n    {%- endif %}\n\n{%- endif -%}\n\n{%- set ns = namespace(last_cte= \"\", source_included_before = {}, has_rsrc_static_defined=true, source_models_rsrc_dict={}) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{# If no specific link_hk and fk_columns are defined for each source, we apply the values set in the link_hashkey and foreign_hashkeys variable. #}\n{# If no rsrc_static parameter is defined in ANY of the source models then the whole code block of record_source performance lookup is not executed  #}\n{# For the use of record_source performance lookup it is required that every source model has the parameter rsrc_static defined and it cannot be an empty string #}\n{%- if source_models is not mapping and not datavault4dbt.is_list(source_models) -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- set source_model_values = fromjson(datavault4dbt.source_model_processing(source_models=source_models, parameters={'link_hk':link_hashkey}, foreign_hashkeys=foreign_hashkeys, payload=payload)) -%}\n{%- set source_models = source_model_values['source_model_list'] -%}\n{%- set ns.has_rsrc_static_defined = source_model_values['has_rsrc_static_defined'] -%}\n{%- set ns.source_models_rsrc_dict = source_model_values['source_models_rsrc_dict'] -%}\n{{ log('source_models: '~source_models, false) }}\n\n{%- set final_columns_to_select = [link_hashkey] + foreign_hashkeys + [src_ldts] + [src_rsrc] + payload -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{%- if is_incremental() -%}\n{# Get all link hashkeys out of the existing link for later incremental logic. #}\n    distinct_target_hashkeys AS (\n\n        SELECT\n        {{ link_hashkey }}\n        FROM {{ this }}\n\n    ),\n    {%- if ns.has_rsrc_static_defined and not disable_hwm -%}\n        {% for source_model in source_models %}\n        {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n            {%- set source_number = source_model.id | string -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number] -%}\n\n            {{log('rsrc_statics: '~ rsrc_statics, false) }}\n\n            {%- set rsrc_static_query_source -%}\n                SELECT count(*) FROM (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.{{ src_rsrc }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                )\n            {% endset %}\n\n            rsrc_static_{{ source_number }} AS (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.*,\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                {%- set ns.last_cte = \"rsrc_static_{}\".format(source_number) -%}\n            ),\n\n            {%- set source_in_target = true -%}\n            \n            {%- if execute -%}\n                {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n\n                {%- set row_count = rsrc_static_result.columns[0].values()[0] -%}\n\n                {{ log('row_count for '~source_model~' is '~row_count, false) }}\n\n                {%- if row_count == 0 -%}\n                    {%- set source_in_target = false -%}\n                {%- endif -%}\n            {%- endif -%}\n\n\n            {%- do ns.source_included_before.update({source_model.id: source_in_target}) -%}\n\n        {% endfor -%}\n\n        {%- if source_models | length > 1 %}\n\n        rsrc_static_union AS (\n            {#  Create one unionized table over all sources. It will be the same as the already existing\n                nh_link, but extended by the rsrc_static column. #}\n\n            {% for source_model in source_models %}\n            {%- set source_number = source_model.id | string -%}\n\n            SELECT rsrc_static_{{ source_number }}.* FROM rsrc_static_{{ source_number }}\n\n            {%- if not loop.last %}\n            UNION ALL\n            {% endif -%}\n            {%- endfor %}\n            {%- set ns.last_cte = \"rsrc_static_union\" -%}\n        ),\n\n        {%- endif %}\n\n        max_ldts_per_rsrc_static_in_target AS (\n        {# Use the previously created CTE to calculate the max load date timestamp per rsrc_static. #}\n\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) AS max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif %}\n{% endif -%}\n\n{% for source_model in source_models %}\n\n{#  Select all deduplicated records from each source, and filter for records that are newer\n    than the max ldts inside the existing link, if incremental. #}\n\n    {%- set source_number = source_model.id | string -%}\n\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number|string] -%}\n    {%- endif -%}\n\n    {%- if 'link_hk' not in source_model.keys() %}\n        {%- set link_hk = link_hashkey -%}\n    {%- else -%}\n        {%- set link_hk = source_model['link_hk'] -%}\n    {% endif %}\n\nsrc_new_{{ source_number }} AS (\n\n    SELECT\n            {{ link_hk }} AS {{ link_hashkey }},\n            {% for fk in source_model['fk_columns'] -%}\n            {{ fk }},\n            {% endfor -%}\n        {{ src_ldts }},\n        {{ src_rsrc }},\n\n        {{ datavault4dbt.print_list(source_model['payload']) | indent(3) }}\n\n    FROM {{ ref(source_model.name) }} src\n    {# If the model is incremental and all sources has rsrc_static defined and valid and the source was already included before in the target transactional link #}\n    {# then an inner join is performed on the CTE for the maximum load date timestamp per record source static to get the records\n    that match any of the rsrc_static present in it #}\n    {# if there are records in the source with a newer load date time stamp than the ones present in the target, those will be selected to be inserted later #}\n    {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_number|int] and not disable_hwm %}\n        INNER JOIN max_ldts_per_rsrc_static_in_target max ON\n        ({%- for rsrc_static in rsrc_statics -%}\n            max.rsrc_static = '{{ rsrc_static }}'\n            {%- if not loop.last -%} OR\n            {% endif -%}\n        {%- endfor %})\n        WHERE src.{{ src_ldts }} > max.max_ldts\n    {%- elif is_incremental() and source_models | length == 1 and not ns.has_rsrc_static_defined and not disable_hwm %}\n        WHERE src.{{ src_ldts }} > (\n            SELECT MAX({{ src_ldts }})\n            FROM {{ this }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            )\n    {%- endif %}\n\n    {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n    ),\n{%- endfor -%}\n\n{%- if source_models | length > 1 %}\n\nsource_new_union AS (\n{# Unionize the new records from all sources. #}\n\n    {%- for source_model in source_models -%}\n\n    {%- set source_number = source_model.id | string -%}\n\n    SELECT\n        {{ link_hashkey }},\n        {% for fk in source_model['fk_columns']|list %}\n            {{ fk }} AS {{ foreign_hashkeys[loop.index - 1] }},\n        {% endfor -%}\n\n        {{ src_ldts }},\n        {{ src_rsrc }},\n\n        {% for col in source_model['payload']|list %}\n            {{ col }} AS {{ payload[loop.index - 1] }}\n            {%- if not loop.last %}, {%- endif %}\n        {% endfor -%}\n\n    FROM src_new_{{ source_number }}\n\n    {%- if not loop.last %}\n    UNION ALL\n    {% endif -%}\n\n    {%- endfor -%}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif %}\n\n{%- if not source_is_single_batch %}\n\nearliest_hk_over_all_sources AS (\n{# Deduplicate the unionized records again to only insert the earliest one. #}\n\n    SELECT\n        lcte.*\n    FROM {{ ns.last_cte }} AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY {{ link_hashkey }} ORDER BY {{ src_ldts }}) = 1\n\n    {%- set ns.last_cte = 'earliest_hk_over_all_sources' -%}\n\n),\n\n{%- endif %}\n\nrecords_to_insert AS (\n{# Select everything from the previous CTE, if its incremental then filter for hashkeys that are not already in the link. #}\n\n    SELECT\n        {{ datavault4dbt.print_list(final_columns_to_select) | indent(4) }}\n    FROM {{ ns.last_cte }}\n\n    {%- if is_incremental() %}\n    WHERE {{ link_hashkey }} NOT IN (SELECT * FROM distinct_target_hashkeys)\n    {% endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.is_list", "macro.datavault4dbt.source_model_processing", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.017706, "supported_languages": null}, "macro.datavault4dbt.snowflake__ref_table": {"name": "snowflake__ref_table", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/snowflake/ref_table.sql", "original_file_path": "macros/tables/snowflake/ref_table.sql", "unique_id": "macro.datavault4dbt.snowflake__ref_table", "macro_sql": "{%- macro snowflake__ref_table(ref_hub, ref_satellites, src_ldts, src_rsrc, historized, snapshot_trigger_column='is_active', snapshot_relation=none) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set ref_hub_relation = ref(ref_hub|string) -%}\n\n{%- set is_current_col_alias = var('datavault4dbt.is_current_col_alias', 'IS_CURRENT') -%}\n{%- set ledts_alias = var('datavault4dbt.ledts_alias', 'ledts') -%}\n{%- set sdts_alias = var('datavault4dbt.sdts_alias', 'sdts') -%}\n\n{%- set include_business_objects_before_appearance = var('datavault4dbt.include_business_objects_before_appearance', 'false') -%}\n\n{{ log('ref_hub_relation: ' ~ ref_hub_relation, false) }}\n{%- set hub_columns = datavault4dbt.source_columns(ref_hub_relation) -%}\n{{ log('hub_columns: ' ~ hub_columns, false) }}\n{%- set hub_columns_to_exclude = [src_ldts, src_rsrc] -%}\n{%- set ref_key_cols = datavault4dbt.process_columns_to_select(columns_list=hub_columns, exclude_columns_list=hub_columns_to_exclude )%}\n{{ log('ref_key_cols: ' ~ ref_key_cols, false) }}\n{%- set sat_columns_to_exclude = [src_ldts, src_rsrc, ledts_alias, is_current_col_alias] + ref_key_cols -%}\n{{ log('sat_columns_to_exclude: '~ sat_columns_to_exclude, false) }}\n\n{%- set ref_satellites_dict = {} -%}\n\n{%- if not datavault4dbt.is_list(ref_satellites) and not ref_satellites is mapping -%}\n    {%- set ref_satellites = [ref_satellites] -%}\n{%- endif -%}\n\n{%- if datavault4dbt.is_list(ref_satellites) -%}\n    {%- for ref_satellite in ref_satellites -%}\n        {%- do ref_satellites_dict.update({ref_satellite:{}}) -%}\n    {%- endfor -%}\n{%- else -%}\n    {%- set ref_satellites_dict = ref_satellites -%}\n{%- endif -%}\n\n\nWITH \n\ndates AS (\n\n{% if historized in ['full', 'latest'] -%}\n\n    {%- set date_column = src_ldts -%}\n\n\n    {{ log('ref_satellites: '~ ref_satellites, false) -}}\n\n    {% if historized == 'full' -%}\n    SELECT distinct {{ date_column }} FROM (\n    {%- elif historized == 'latest' -%}\n    SELECT MAX({{ date_column }}) as {{ date_column }} FROM (\n    {%- endif -%}\n\n    {% for satellite in ref_satellites_dict.keys() -%}\n    SELECT distinct \n        {{ src_ldts }}\n    FROM {{ ref(satellite|string) }}\n    WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    {% if not loop.last -%} UNION {% endif %}\n    {%- endfor %}\n    )\n\n\n{% elif snapshot_relation is not none %}\n\n    {%- set date_column = sdts_alias -%}\n    \n    SELECT \n        {{ date_column }}\n    FROM (\n        \n        SELECT \n            {{ sdts_alias }}\n        FROM {{ ref(snapshot_relation) }}\n        WHERE {{ snapshot_trigger_column }}\n    )\n\n{%- endif %}\n\n{%- if is_incremental() -%}\n    WHERE {{ date_column }} > (SELECT MAX({{ date_column }}) FROM {{ this }})\n{%- endif -%}\n\n\n),\n\nref_table AS (\n\n    SELECT\n    {{ datavault4dbt.print_list(list_to_print=ref_key_cols, indent=2, src_alias='h') }},\n        ld.{{ date_column }},\n        h.{{ src_rsrc }},\n\n    {%- for satellite in ref_satellites_dict.keys() %}\n\n    {%- set sat_alias = 's_' + loop.index|string -%}\n    {%- set sat_columns_pre = [] -%}\n        \n        {%- if ref_satellites_dict[satellite] is mapping and 'include' in ref_satellites_dict[satellite].keys() -%}\n            {%- set sat_columns_pre = ref_satellites_dict[satellite]['include'] -%}\n        {%- elif ref_satellites_dict[satellite] is mapping and 'exclude' in ref_satellites_dict[satellite].keys() -%}\n            {%- set all_sat_columns = datavault4dbt.source_columns(ref(satellite)) -%}\n            {%- set sat_columns_pre = datavault4dbt.process_columns_to_select(all_sat_columns, ref_satellites_dict[satellite]['exclude']) -%}\n        {%- elif datavault4dbt.is_list(ref_satellites_dict[satellite]) -%}\n            {%- set sat_columns_pre = ref_satellites_dict[satellite] -%}\n        {%- else -%}\n            {%- set all_sat_columns = datavault4dbt.source_columns(ref(satellite)) -%}\n            {%- set sat_columns_pre = datavault4dbt.process_columns_to_select(all_sat_columns, sat_columns_to_exclude) -%}\n        {%- endif -%}\n\n    {%- set sat_columns = datavault4dbt.process_columns_to_select(sat_columns_pre, sat_columns_to_exclude) -%}\n    \n    {{- log('sat_columns: '~ sat_columns, false) -}}\n\n    {{ datavault4dbt.print_list(list_to_print=sat_columns, indent=2, src_alias=sat_alias) }}\n    {%- if not loop.last -%} ,\n    {% endif -%}\n\n    {% endfor %} \n\n    FROM {{ ref(ref_hub) }} h\n    \n    FULL OUTER JOIN dates ld\n        ON 1 = 1  \n\n    {% for satellite in ref_satellites_dict.keys() %}\n\n        {%- set sat_alias = 's_' + loop.index|string -%}\n\n    LEFT JOIN {{ ref(satellite) }} {{ sat_alias }}\n        ON {{ datavault4dbt.multikey(columns=ref_key_cols, prefix=['h', sat_alias], condition='=') }}\n        AND  ld.{{ date_column }} BETWEEN {{ sat_alias }}.{{ src_ldts }} AND {{ sat_alias }}.{{ ledts_alias }}\n    \n    {% endfor %}\n\n    {% if include_business_objects_before_appearance == 'false' -%}\n    WHERE h.{{ src_ldts }} <= ld.{{ date_column }}\n    {% endif %}\n\n) \n\nSELECT * FROM ref_table\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.source_columns", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.is_list", "macro.datavault4dbt.string_to_timestamp", "macro.dbt.is_incremental", "macro.datavault4dbt.print_list", "macro.datavault4dbt.multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.021292, "supported_languages": null}, "macro.datavault4dbt.snowflake__hub": {"name": "snowflake__hub", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/snowflake/hub.sql", "original_file_path": "macros/tables/snowflake/hub.sql", "unique_id": "macro.datavault4dbt.snowflake__hub", "macro_sql": "{%- macro snowflake__hub(hashkey, business_keys, src_ldts, src_rsrc, source_models, disable_hwm) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{{ log('source_models'~source_models, false) }}\n\n{%- set ns = namespace(last_cte= \"\", source_included_before = {}, has_rsrc_static_defined=true, source_models_rsrc_dict={}) -%}\n\n{# Select the Business Key column from the first source model definition provided in the hub model and put them in an array. #}\n{%- set business_keys = datavault4dbt.expand_column_list(columns=[business_keys]) -%}\n\n{# If no specific bk_columns is defined for each source, we apply the values set in the business_keys variable. #}\n{# If no specific hk_column is defined for each source, we apply the values set in the hashkey variable. #}\n{# If no rsrc_static parameter is defined in ANY of the source models then the whole code block of record_source performance lookup is not executed  #}\n{# For the use of record_source performance lookup it is required that every source model has the parameter rsrc_static defined and it cannot be an empty string #}\n{%- if source_models is not mapping and not datavault4dbt.is_list(source_models) -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- set source_model_values = fromjson(datavault4dbt.source_model_processing(source_models=source_models, parameters={'hk_column':hashkey}, business_keys=business_keys)) -%}\n{%- set source_models = source_model_values['source_model_list'] -%}\n{%- set ns.has_rsrc_static_defined = source_model_values['has_rsrc_static_defined'] -%}\n{%- set ns.source_models_rsrc_dict = source_model_values['source_models_rsrc_dict'] -%}\n{{ log('source_models: '~source_models, false) }}\n\n{%- set final_columns_to_select = [hashkey] + business_keys + [src_ldts] + [src_rsrc] -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{% if is_incremental() -%}\n{# Get all target hashkeys out of the existing hub for later incremental logic. #}\n    distinct_target_hashkeys AS (\n\n        SELECT\n            {{ hashkey }}\n        FROM {{ this }}\n\n    ),\n    {%- if ns.has_rsrc_static_defined and not disable_hwm -%}\n        {% for source_model in source_models %}\n         {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n            {%- set source_number = source_model.id | string -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number] -%}\n\n            {{log('rsrc_statics: '~ rsrc_statics, false) }}\n\n            {%- set rsrc_static_query_source -%}\n                SELECT count(*) FROM (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.{{ src_rsrc }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                )\n            {% endset %}\n\n            {{ log('rsrc static query: '~rsrc_static_query_source, false) }}\n\n            rsrc_static_{{ source_number }} AS (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT \n                    t.*,\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                {%- set ns.last_cte = \"rsrc_static_{}\".format(source_number) -%}\n            ),\n            \n            {%- set source_in_target = true -%}\n            \n            {%- if execute -%}\n                {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n\n                {%- set row_count = rsrc_static_result.columns[0].values()[0] -%}\n\n                {{ log('row_count for '~source_model~' is '~row_count, false) }}\n\n                {%- if row_count == 0 -%}\n                    {%- set source_in_target = false -%}\n                {%- endif -%}\n            {%- endif -%}\n\n\n            {%- do ns.source_included_before.update({source_model.id: source_in_target}) -%}\n\n        {% endfor -%}\n\n        {%- if source_models | length > 1 %}\n\n        rsrc_static_union AS (\n            {#  Create one unionized table over all sources. It will be the same as the already existing\n                hub, but extended by the rsrc_static column. #}\n            {% for source_model in source_models %}\n            {%- set source_number = source_model.id | string -%}\n\n            SELECT rsrc_static_{{ source_number }}.* FROM rsrc_static_{{ source_number }}\n\n            {%- if not loop.last %}\n            UNION ALL\n            {% endif -%}\n            {%- endfor %}\n            {%- set ns.last_cte = \"rsrc_static_union\" -%}\n        ),\n\n        {%- endif %}\n\n        max_ldts_per_rsrc_static_in_target AS (\n        {# Use the previously created CTE to calculate the max load date timestamp per rsrc_static. #}\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) as max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif %}\n{% endif -%}\n\n{% for source_model in source_models %}\n\n    {%- set source_number = source_model.id | string -%}\n\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number|string] -%}\n    {%- endif -%}\n\n    {%- if 'hk_column' not in source_model.keys() %}\n        {%- set hk_column = hashkey -%}\n    {%- else -%}\n        {%- set hk_column = source_model['hk_column'] -%}\n    {% endif %}\n\n    src_new_{{ source_number }} AS (\n\n        SELECT\n            {{ hk_column }} AS {{ hashkey }},\n            {% for bk in source_model['bk_columns'] -%}\n            {{ bk }},\n            {% endfor -%}\n\n            {{ src_ldts }},\n            {{ src_rsrc }}\n        FROM {{ ref(source_model.name) }} src\n        {{ log('rsrc_statics defined?: ' ~ ns.source_models_rsrc_dict[source_number|string], false) }}\n\n    {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_number|int] and not disable_hwm %}\n        INNER JOIN max_ldts_per_rsrc_static_in_target max ON\n        ({%- for rsrc_static in rsrc_statics -%}\n            max.rsrc_static = '{{ rsrc_static }}'\n            {%- if not loop.last -%} OR\n            {% endif -%}\n        {%- endfor %})\n        WHERE src.{{ src_ldts }} > max.max_ldts\n    {%- elif is_incremental() and source_models | length == 1 and not ns.has_rsrc_static_defined and not disable_hwm %}\n        WHERE src.{{ src_ldts }} > (\n            SELECT MAX({{ src_ldts }})\n            FROM {{ this }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            )\n    {%- endif %}\n\n         {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n    ),\n{%- endfor -%}\n\n{%- if source_models | length > 1 %}\n\nsource_new_union AS (\n\n    {%- for source_model in source_models -%}\n\n    {%- set source_number = source_model.id | string -%}\n\n    SELECT\n        {{ hashkey }},\n\n        {% for bk in source_model['bk_columns'] -%}\n            {{ bk }} AS {{ business_keys[loop.index - 1] }},\n        {% endfor -%}\n\n        {{ src_ldts }},\n        {{ src_rsrc }}\n    FROM src_new_{{ source_number }}\n\n    {%- if not loop.last %}\n    UNION ALL\n    {% endif -%}\n\n    {%- endfor -%}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif %}\n\nearliest_hk_over_all_sources AS (\n\n    {#- Deduplicate the unionized records again to only insert the earliest one. #}\n    SELECT\n        lcte.*\n    FROM {{ ns.last_cte }} AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY {{ hashkey }} ORDER BY {{ src_ldts }}) = 1\n\n    {%- set ns.last_cte = 'earliest_hk_over_all_sources' -%}\n\n),\n\nrecords_to_insert AS (\n    {#- Select everything from the previous CTE, if incremental filter for hashkeys that are not already in the hub. #}\n    SELECT\n        {{ datavault4dbt.print_list(final_columns_to_select) }}\n    FROM {{ ns.last_cte }}\n\n    {%- if is_incremental() %}\n    WHERE {{ hashkey }} NOT IN (SELECT * FROM distinct_target_hashkeys)\n    {% endif -%}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.is_list", "macro.datavault4dbt.source_model_processing", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.0258172, "supported_languages": null}, "macro.datavault4dbt.snowflake__link": {"name": "snowflake__link", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/snowflake/link.sql", "original_file_path": "macros/tables/snowflake/link.sql", "unique_id": "macro.datavault4dbt.snowflake__link", "macro_sql": "{%- macro snowflake__link(link_hashkey, foreign_hashkeys, source_models, src_ldts, src_rsrc, disable_hwm) -%}\n\n{%- if not (foreign_hashkeys is iterable and foreign_hashkeys is not string) -%}\n\n    {%- if execute -%}\n        {{ exceptions.raise_compiler_error(\"Only one foreign key provided for this link. At least two required.\") }}\n    {%- endif %}\n\n{%- endif -%}\n\n{%- set ns = namespace(last_cte= \"\", source_included_before = {}, has_rsrc_static_defined=true, source_models_rsrc_dict={}) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{# If no specific link_hk and fk_columns are defined for each source, we apply the values set in the link_hashkey and foreign_hashkeys variable. #}\n{# If no rsrc_static parameter is defined in ANY of the source models then the whole code block of record_source performance lookup is not executed  #}\n{# For the use of record_source performance lookup it is required that every source model has the parameter rsrc_static defined and it cannot be an empty string #}\n{%- if source_models is not mapping and not datavault4dbt.is_list(source_models) -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- set source_model_values = fromjson(datavault4dbt.source_model_processing(source_models=source_models, parameters={'link_hk':link_hashkey}, foreign_hashkeys=foreign_hashkeys)) -%}\n{%- set source_models = source_model_values['source_model_list'] -%}\n{%- set ns.has_rsrc_static_defined = source_model_values['has_rsrc_static_defined'] -%}\n{%- set ns.source_models_rsrc_dict = source_model_values['source_models_rsrc_dict'] -%}\n{{ log('source_models: '~source_models, false) }}\n\n{%- set final_columns_to_select = [link_hashkey] + foreign_hashkeys + [src_ldts] + [src_rsrc] -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{% if is_incremental() %}\n{# Get all link hashkeys out of the existing link for later incremental logic. #}\n    distinct_target_hashkeys AS (\n        \n        SELECT\n        {{ link_hashkey }}\n        FROM {{ this }}\n\n    ),\n    {%- if ns.has_rsrc_static_defined and not disable_hwm -%}\n        {% for source_model in source_models %}\n        {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n            {%- set source_number = source_model.id | string -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number] -%}\n\n            {{log('rsrc_statics: '~ rsrc_statics, false) }}\n\n            {%- set rsrc_static_query_source -%}\n                SELECT count(*) FROM (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.{{ src_rsrc }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                )\n            {% endset %}\n\n            rsrc_static_{{ source_number }} AS (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.*,\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                {%- set ns.last_cte = \"rsrc_static_{}\".format(source_number) -%}\n            ),\n\n            {%- set source_in_target = true -%}\n            \n            {%- if execute -%}\n                {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n\n                {%- set row_count = rsrc_static_result.columns[0].values()[0] -%}\n\n                {{ log('row_count for '~source_model~' is '~row_count, false) }}\n\n                {%- if row_count == 0 -%}\n                    {%- set source_in_target = false -%}\n                {%- endif -%}\n            {%- endif -%}\n\n\n            {%- do ns.source_included_before.update({source_model.id: source_in_target}) -%}\n\n        {% endfor -%}\n\n        {%- if source_models | length > 1 %}\n\n        rsrc_static_union AS (\n            {#  Create one unionized table over all sources. It will be the same as the already existing\n                link, but extended by the rsrc_static column. #}\n\n            {% for source_model in source_models %}\n            {%- set source_number = source_model.id | string -%}\n\n            SELECT rsrc_static_{{ source_number }}.* FROM rsrc_static_{{ source_number }}\n\n            {%- if not loop.last %}\n            UNION ALL\n            {% endif -%}\n            {%- endfor %}\n            {%- set ns.last_cte = \"rsrc_static_union\" -%}\n        ),\n\n        {%- endif %}\n\n        max_ldts_per_rsrc_static_in_target AS (\n        {# Use the previously created CTE to calculate the max load date timestamp per rsrc_static. #}\n\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) as max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif %}\n{% endif -%}\n\n{% for source_model in source_models %}\n\n{#  Select all deduplicated records from each source, and filter for records that are newer\n    than the max ldts inside the existing link, if incremental. #}\n\n    {%- set source_number = source_model.id | string -%}\n\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number|string] -%}\n    {%- endif -%}\n\n    {%- if 'link_hk' not in source_model.keys() %}\n        {%- set link_hk = link_hashkey -%}\n    {%- else -%}\n        {%- set link_hk = source_model['link_hk'] -%}\n    {% endif %}\n\n    src_new_{{ source_number }} AS (\n\n        SELECT\n            {{ link_hk }} AS {{ link_hashkey }},\n            {% for fk in source_model['fk_columns'] -%}\n            {{ fk }},\n            {% endfor -%}\n            {{ src_ldts }},\n            {{ src_rsrc }}\n        FROM {{ ref(source_model.name) }} src\n        {{ log('rsrc_statics defined?: ' ~ ns.source_models_rsrc_dict[source_number|string], false) }}\n\n    {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_number|int] and not disable_hwm %}\n        INNER JOIN max_ldts_per_rsrc_static_in_target max ON\n        ({%- for rsrc_static in rsrc_statics -%}\n            max.rsrc_static = '{{ rsrc_static }}'\n            {%- if not loop.last -%} OR\n            {% endif -%}\n        {%- endfor %})\n        WHERE src.{{ src_ldts }} > max.max_ldts\n    {%- elif is_incremental() and source_models | length == 1 and not ns.has_rsrc_static_defined and not disable_hwm %}\n        WHERE src.{{ src_ldts }} > (\n            SELECT MAX({{ src_ldts }})\n            FROM {{ this }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            )\n    {%- endif %}\n\n        {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n    ),\n{%- endfor -%}\n\n{%- if source_models | length > 1 %}\n\nsource_new_union AS (\n{# Unionize the new records from all sources. #}\n\n    {%- for source_model in source_models -%}\n\n    {%- set source_number = source_model.id | string -%}\n\n    SELECT\n        {{ link_hashkey }},\n        {% for fk in source_model['fk_columns']|list %}\n            {{ fk }} AS {{ foreign_hashkeys[loop.index - 1] }},\n        {% endfor -%}\n        {{ src_ldts }},\n        {{ src_rsrc }}\n    FROM src_new_{{ source_number }}\n\n    {%- if not loop.last %}\n    UNION ALL\n    {% endif -%}\n\n    {%- endfor -%}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif %}\n\nearliest_hk_over_all_sources AS (\n    {# Deduplicate the unionized records again to only insert the earliest one. #}\n\n    SELECT\n        lcte.*\n    FROM {{ ns.last_cte }} AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY {{ link_hashkey }} ORDER BY {{ src_ldts }}) = 1\n\n    {%- set ns.last_cte = 'earliest_hk_over_all_sources' -%}\n\n),\n\nrecords_to_insert AS (\n    {# Select everything from the previous CTE, if incremental filter for hashkeys that are not already in the link. #}\n\n    SELECT\n        {{ datavault4dbt.print_list(final_columns_to_select) | indent(4) }}\n    FROM {{ ns.last_cte }}\n\n    {%- if is_incremental() %}\n    WHERE {{ link_hashkey }} NOT IN (SELECT * FROM distinct_target_hashkeys)\n    {% endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.is_list", "macro.datavault4dbt.source_model_processing", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.030408, "supported_languages": null}, "macro.datavault4dbt.snowflake__ref_hub": {"name": "snowflake__ref_hub", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/snowflake/ref_hub.sql", "original_file_path": "macros/tables/snowflake/ref_hub.sql", "unique_id": "macro.datavault4dbt.snowflake__ref_hub", "macro_sql": "{%- macro snowflake__ref_hub(ref_keys, src_ldts, src_rsrc, source_models) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set ns = namespace(last_cte= \"\", source_included_before = {}, has_rsrc_static_defined=true, source_models_rsrc_dict={}) -%}\n\n{%- set ref_keys = datavault4dbt.expand_column_list(columns=[ref_keys]) -%}\n\n{# If no specific ref_keys is defined for each source, we apply the values set in the ref_keys variable. #}\n{# If no rsrc_static parameter is defined in ANY of the source models then the whole code block of record_source performance lookup is not executed  #}\n{# For the use of record_source performance lookup it is required that every source model has the parameter rsrc_static defined and it cannot be an empty string #}\n{%- if source_models is not mapping and not datavault4dbt.is_list(source_models) -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- set source_model_values = fromjson(datavault4dbt.source_model_processing(source_models=source_models, parameters={'test':'test'}, reference_keys=ref_keys)) -%}\n{%- set source_models = source_model_values['source_model_list'] -%}\n{%- set ns.has_rsrc_static_defined = source_model_values['has_rsrc_static_defined'] -%}\n{%- set ns.source_models_rsrc_dict = source_model_values['source_models_rsrc_dict'] -%}\n{{ log('source_models: '~source_models, false) }}\n\n{%- set final_columns_to_select = ref_keys + [src_ldts] + [src_rsrc] -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{% if is_incremental() -%}\n{# Get all target ref_keys out of the existing ref_table for later incremental logic. #}\n    distinct_target_ref_keys AS (\n\n        SELECT\n            {{ datavault4dbt.concat_ws(ref_keys) }}\n        FROM {{ this }}\n\n    ),\n    {%- if ns.has_rsrc_static_defined -%}\n        {% for source_model in source_models %}\n         {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n            {%- set source_number = source_model.id | string -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number] -%}\n\n            {{log('rsrc_statics: '~ rsrc_statics, false) }}\n\n            {%- set rsrc_static_query_source -%}\n                SELECT count(*) FROM (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.{{ src_rsrc }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                )\n            {% endset %}\n\n            rsrc_static_{{ source_number }} AS (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT \n                    t.{{ src_ldts }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} LIKE '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                {%- set ns.last_cte = \"rsrc_static_{}\".format(source_number) -%}\n            ),\n\n            {%- set source_in_target = true -%}\n\n            {%- if execute -%}\n                {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n\n                {%- set row_count = rsrc_static_result.columns[0].values()[0] -%}\n\n                {{ log('row_count for '~source_model~' is '~row_count, false) }}\n\n                {%- if row_count == 0 -%}\n                {%- set source_in_target = false -%}\n                {%- endif -%}\n            {%- endif -%}\n\n\n            {%- do ns.source_included_before.update({source_model.id: source_in_target}) -%}\n\n        {% endfor -%}\n\n        {%- if source_models | length > 1 %}\n\n        rsrc_static_union AS (\n            {#  Create one unionized table over all sources. It will be the same as the already existing\n                hub, but extended by the rsrc_static column. #}\n            {% for source_model in source_models %}\n            {%- set source_number = source_model.id | string -%}\n\n            SELECT rsrc_static_{{ source_number }}.* FROM rsrc_static_{{ source_number }}\n\n            {%- if not loop.last %}\n            UNION ALL\n            {% endif -%}\n            {%- endfor %}\n            {%- set ns.last_cte = \"rsrc_static_union\" -%}\n        ),\n\n        {%- endif %}\n\n        max_ldts_per_rsrc_static_in_target AS (\n        {# Use the previously created CTE to calculate the max load date timestamp per rsrc_static. #}\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) as max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif %}\n{% endif -%}\n\n{% for source_model in source_models %}\n\n    {%- set source_number = source_model.id | string -%}\n\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = ns.source_models_rsrc_dict.id -%}\n    {%- endif -%}\n\n\n    src_new_{{ source_number }} AS (\n\n        SELECT\n            {% for ref_key in source_model['ref_keys'] -%}\n            {{ ref_key}},\n            {% endfor -%}\n\n            {{ src_ldts }},\n            {{ src_rsrc }}\n        FROM {{ ref(source_model.name) }} src\n\n    {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_number] %}\n        INNER JOIN max_ldts_per_rsrc_static_in_target max ON\n        ({%- for rsrc_static in rsrc_statics -%}\n            max.rsrc_static = '{{ rsrc_static }}'\n            {%- if not loop.last -%} OR\n            {% endif -%}\n        {%- endfor %})\n        WHERE src.{{ src_ldts }} > max.max_ldts\n    {%- endif %}\n\n         {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n    ),\n{%- endfor -%}\n\n{%- if source_models | length > 1 %}\n\nsource_new_union AS (\n\n    {%- for source_model in source_models -%}\n\n    {%- set source_number = source_model.id | string -%}\n\n    SELECT\n        {% for ref_key in source_model['ref_keys'] -%}\n            {{ ref_key }} AS {{ ref_keys[loop.index - 1] }},\n        {% endfor -%}\n\n        {{ src_ldts }},\n        {{ src_rsrc }}\n    FROM src_new_{{ source_number }}\n\n    {%- if not loop.last %}\n    UNION ALL\n    {% endif -%}\n\n    {%- endfor -%}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif %}\n\nearliest_ref_key_over_all_sources AS (\n\n    {#- Deduplicate the unionized records to only insert the earliest one. #}\n    SELECT\n        lcte.*\n    FROM {{ ns.last_cte }} AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY {%- for ref_key in ref_keys %} {{ref_key}} {%- if not loop.last %}, {% endif %}{% endfor %} ORDER BY {{ src_ldts }}) = 1\n\n    {%- set ns.last_cte = 'earliest_ref_key_over_all_sources' -%}\n\n),\n\nrecords_to_insert AS (\n    {#- Select everything from the previous CTE, if incremental filter for hashkeys that are not already in the hub. #}\n    SELECT\n        {{ datavault4dbt.print_list(final_columns_to_select) }}\n    FROM {{ ns.last_cte }}\n\n    {%- if is_incremental() %}\n    WHERE {{ datavault4dbt.concat_ws(ref_keys) }} NOT IN (SELECT * FROM distinct_target_ref_keys)\n    {% endif -%}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.is_list", "macro.datavault4dbt.source_model_processing", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.datavault4dbt.concat_ws", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.034378, "supported_languages": null}, "macro.datavault4dbt.snowflake__nh_sat": {"name": "snowflake__nh_sat", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/snowflake/nh_sat.sql", "original_file_path": "macros/tables/snowflake/nh_sat.sql", "unique_id": "macro.datavault4dbt.snowflake__nh_sat", "macro_sql": "{%- macro snowflake__nh_sat(parent_hashkey, src_payload, src_ldts, src_rsrc, source_model, source_is_single_batch) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set source_cols = datavault4dbt.expand_column_list(columns=[parent_hashkey, src_ldts, src_rsrc, src_payload]) -%}\n{%- set source_relation = ref(source_model) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n{#- Selecting all source data, that is newer than latest data in sat if incremental #}\nsource_data AS \n(\n    SELECT\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM \n        {{ source_relation }}\n    {%- if is_incremental() %}\n    WHERE {{ src_ldts }} > (\n        SELECT \n            MAX({{ src_ldts }}) \n        FROM \n            {{ this }}\n        WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    )\n    {%- endif %}\n    \n    {% if not source_is_single_batch -%}\n\n    QUALIFY\n        ROW_NUMBER() OVER (PARTITION BY {{ parent_hashkey }} ORDER BY {{ src_ldts }}) = 1\n\n    {%- endif %}        \n\n),\n{% if is_incremental() -%}\n{#- Get distinct list of hashkeys inside the existing satellite, if incremental. #}\ndistinct_hashkeys AS \n(\n    SELECT DISTINCT\n        {{ parent_hashkey }}\n    FROM \n        {{ this }}    \n),\n{%- endif %}\n{#- Select all records from the source. If incremental, insert only records, where the\nhashkey is not already in the existing satellite. #}\n\n{#- \nSelect all records from the source. If incremental, insert only records, where the\n    hashkey is not already in the existing satellite.\n#}\nrecords_to_insert AS \n(\n    SELECT \n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM \n        source_data\n    {%- if is_incremental() %}\n    WHERE {{ parent_hashkey }} NOT IN (SELECT * FROM distinct_hashkeys)\n    {%- endif %}\n)\nSELECT \n  * \nFROM \n  records_to_insert                      \n \n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.print_list", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.035329, "supported_languages": null}, "macro.datavault4dbt.snowflake__ma_sat_v1": {"name": "snowflake__ma_sat_v1", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/snowflake/ma_sat_v1.sql", "original_file_path": "macros/tables/snowflake/ma_sat_v1.sql", "unique_id": "macro.datavault4dbt.snowflake__ma_sat_v1", "macro_sql": "{%- macro snowflake__ma_sat_v1(sat_v0, hashkey, hashdiff, ma_attribute, src_ldts, src_rsrc, ledts_alias, add_is_current_flag) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set is_current_col_alias = var('datavault4dbt.is_current_col_alias', 'IS_CURRENT') -%}\n\n{%- set source_relation = ref(sat_v0) -%}\n{%- set all_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n{%- set exclude = datavault4dbt.expand_column_list(columns=[hashkey, hashdiff, ma_attribute, src_ldts, src_rsrc]) -%}\n{%- set ma_attributes = datavault4dbt.expand_column_list(columns=[ma_attribute]) -%}\n\n\n{%- set source_columns_to_select = datavault4dbt.process_columns_to_select(all_columns, exclude) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Getting everything from the underlying v0 satellite. #}\nsource_satellite AS (\n\n    SELECT src.*\n    FROM {{ source_relation }} as src\n\n),\n\n{# Selecting all distinct loads per hashkey. #}\ndistinct_hk_ldts AS (\n\n    SELECT DISTINCT\n        {{ hashkey }},\n        {{ src_ldts }}\n    FROM source_satellite\n\n),\n\n{# End-dating each ldts for each hashkey, based on earlier ldts per hashkey. #}\nend_dated_loads AS (\n\n    SELECT\n        {{ hashkey }},\n        {{ src_ldts }},\n        COALESCE(LEAD({{ src_ldts }} - INTERVAL '1 MICROSECOND') OVER (PARTITION BY {{ hashkey }} ORDER BY {{ src_ldts }}),{{ datavault4dbt.string_to_timestamp(timestamp_format,end_of_all_times) }}) as {{ ledts_alias }}\n    FROM distinct_hk_ldts\n\n),\n\n{# End-date each source record, based on the end-date for each load. #}\nend_dated_source AS (\n\n    SELECT\n        src.{{ hashkey }},\n        src.{{ hashdiff }},\n        src.{{ src_rsrc }},\n        src.{{ src_ldts }},\n        edl.{{ ledts_alias }},\n        {%- if add_is_current_flag %}\n            CASE WHEN {{ ledts_alias }} = {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n              THEN TRUE\n              ELSE FALSE\n            END AS {{ is_current_col_alias }},\n        {% endif %}\n        {{- datavault4dbt.print_list(ma_attributes, indent=10, src_alias='src') }},\n        {{- datavault4dbt.print_list(source_columns_to_select, indent=10, src_alias='src') }}\n    FROM source_satellite AS src\n    LEFT JOIN end_dated_loads edl\n        ON src.{{ hashkey }} = edl.{{ hashkey }}\n        AND src.{{ src_ldts }} = edl.{{ src_ldts }}\n\n)\n\nSELECT * FROM end_dated_source\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.source_columns", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.036597, "supported_languages": null}, "macro.datavault4dbt.snowflake__ma_sat_v0": {"name": "snowflake__ma_sat_v0", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/snowflake/ma_sat_v0.sql", "original_file_path": "macros/tables/snowflake/ma_sat_v0.sql", "unique_id": "macro.datavault4dbt.snowflake__ma_sat_v0", "macro_sql": "{%- macro snowflake__ma_sat_v0(parent_hashkey, src_hashdiff, src_ma_key, src_payload, src_ldts, src_rsrc, source_model) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set ns=namespace(src_hashdiff=\"\", hdiff_alias=\"\") %}\n{%- if  src_hashdiff is mapping and src_hashdiff is not none -%}\n    {% set ns.src_hashdiff = src_hashdiff[\"source_column\"] %}\n    {% set ns.hdiff_alias = src_hashdiff[\"alias\"] %}\n{% else %}\n    {% set ns.src_hashdiff = src_hashdiff %}\n    {% set ns.hdiff_alias = src_hashdiff  %}\n{%- endif -%}\n\n{%- set source_cols = datavault4dbt.expand_column_list(columns=[src_rsrc, src_ldts, src_ma_key, src_payload]) -%}\n\n{%- set source_relation = ref(source_model) -%}\n\n\nWITH\n\n{# Selecting all source data, that is newer than latest data in sat if incremental #}\nsource_data AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ ns.src_hashdiff }} as {{ ns.hdiff_alias }},\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM {{ source_relation }}\n\n    {%- if is_incremental() %}\n    WHERE {{ src_ldts }} > (\n        SELECT\n            MAX({{ src_ldts }}) FROM {{ this }}\n        WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    )\n    {%- endif %}\n\n),\n\n{# Get the latest record for each parent hashkey in existing sat, if incremental. #}\n{%- if is_incremental() %}\nlatest_entries_in_sat AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ ns.hdiff_alias }}\n    FROM \n        {{ this }}\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY {{ parent_hashkey|lower }} ORDER BY {{ src_ldts }} DESC) = 1  \n),\n{%- endif %}\n\n{# Get a list of all distinct hashdiffs that exist for each parent_hashkey. #}\ndeduped_row_hashdiff AS (\n\n  SELECT \n    {{ parent_hashkey }},\n    {{ src_ldts }},\n    {{ ns.hdiff_alias }}\n  FROM source_data\n  QUALIFY CASE\n            WHEN {{ ns.hdiff_alias }} = LAG({{ ns.hdiff_alias }}) OVER (PARTITION BY {{ parent_hashkey }} ORDER BY {{ src_ldts }}) THEN FALSE\n            ELSE TRUE\n          END\n),\n\n{# Dedupe the source data regarding non-delta groups. #}\ndeduped_rows AS (\n\n  SELECT \n    source_data.{{ parent_hashkey }},\n    source_data.{{ ns.hdiff_alias }},\n    {{ datavault4dbt.alias_all(columns=source_cols, prefix='source_data') }}\n  FROM source_data\n  INNER JOIN deduped_row_hashdiff\n    ON {{ datavault4dbt.multikey(parent_hashkey, prefix=['source_data', 'deduped_row_hashdiff'], condition='=') }}\n    AND {{ datavault4dbt.multikey(src_ldts, prefix=['source_data', 'deduped_row_hashdiff'], condition='=') }}\n    AND {{ datavault4dbt.multikey(ns.hdiff_alias, prefix=['source_data', 'deduped_row_hashdiff'], condition='=') }}\n\n),\n\nrecords_to_insert AS (\n\n    SELECT\n        deduped_rows.{{ parent_hashkey }},\n        deduped_rows.{{ ns.hdiff_alias }},\n        {{ datavault4dbt.alias_all(columns=source_cols, prefix='deduped_rows') }}\n    FROM deduped_rows\n    {%- if is_incremental() %}\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE {{ datavault4dbt.multikey(parent_hashkey, prefix=['latest_entries_in_sat', 'deduped_rows'], condition='=') }}\n            AND {{ datavault4dbt.multikey(ns.hdiff_alias, prefix=['latest_entries_in_sat', 'deduped_rows'], condition='=') }} \n            )\n    {%- endif %}\n\n    )\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.print_list", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.alias_all", "macro.datavault4dbt.multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.038593, "supported_languages": null}, "macro.datavault4dbt.snowflake__sat_v0": {"name": "snowflake__sat_v0", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/snowflake/sat_v0.sql", "original_file_path": "macros/tables/snowflake/sat_v0.sql", "unique_id": "macro.datavault4dbt.snowflake__sat_v0", "macro_sql": "{%- macro snowflake__sat_v0(parent_hashkey, src_hashdiff, src_payload, src_ldts, src_rsrc, source_model, disable_hwm, source_is_single_batch) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set ns=namespace(src_hashdiff=\"\", hdiff_alias=\"\") %}\n\n{%- if  src_hashdiff is mapping and src_hashdiff is not none -%}\n    {% set ns.src_hashdiff = src_hashdiff[\"source_column\"] %}\n    {% set ns.hdiff_alias = src_hashdiff[\"alias\"] %}\n{% else %}\n    {% set ns.src_hashdiff = src_hashdiff %}\n    {% set ns.hdiff_alias = src_hashdiff  %}\n{%- endif -%}\n\n{%- set source_cols = datavault4dbt.expand_column_list(columns=[src_rsrc, src_ldts, src_payload]) -%}\n\n{%- set source_relation = ref(source_model) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Selecting all source data, that is newer than latest data in sat if incremental #}\nsource_data AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ ns.src_hashdiff }} as {{ ns.hdiff_alias }},\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM {{ source_relation }}\n\n    {%- if is_incremental() %}\n    WHERE {{ src_ldts }} > (\n        SELECT\n            MAX({{ src_ldts }}) FROM {{ this }}\n        WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    )\n    {%- endif %}\n),\n\n{# Get the latest record for each parent hashkey in existing sat, if incremental. #}\n{%- if is_incremental() %}\nlatest_entries_in_sat AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ ns.hdiff_alias }}\n    FROM \n        {{ this }}\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY {{ parent_hashkey|lower }} ORDER BY {{ src_ldts }} DESC) = 1  \n),\n{%- endif %}\n\n{#\n    Deduplicate source by comparing each hashdiff to the hashdiff of the previous record, for each hashkey.\n    Additionally adding a row number based on that order, if incremental.\n#}\ndeduplicated_numbered_source AS (\n\n    SELECT\n    {{ parent_hashkey }},\n    {{ ns.hdiff_alias }},\n    {{ datavault4dbt.print_list(source_cols) }}\n    {% if is_incremental() -%}\n    , ROW_NUMBER() OVER(PARTITION BY {{ parent_hashkey }} ORDER BY {{ src_ldts }}) as rn\n    {%- endif %}\n    FROM source_data\n    QUALIFY\n        CASE\n            WHEN {{ ns.hdiff_alias }} = LAG({{ ns.hdiff_alias }}) OVER(PARTITION BY {{ parent_hashkey|lower }} ORDER BY {{ src_ldts }}) THEN FALSE\n            ELSE TRUE\n        END\n),\n\n{#\n    Select all records from the previous CTE. If incremental, compare the oldest incoming entry to\n    the existing records in the satellite.\n#}\nrecords_to_insert AS (\n\n    SELECT\n    {{ parent_hashkey }},\n    {{ ns.hdiff_alias }},\n    {{ datavault4dbt.print_list(source_cols) }}\n    FROM deduplicated_numbered_source\n    {%- if is_incremental() %}\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE {{ datavault4dbt.multikey(parent_hashkey, prefix=['latest_entries_in_sat', 'deduplicated_numbered_source'], condition='=') }}\n            AND {{ datavault4dbt.multikey(ns.hdiff_alias, prefix=['latest_entries_in_sat', 'deduplicated_numbered_source'], condition='=') }}\n            AND deduplicated_numbered_source.rn = 1)\n    {%- endif %}\n\n    )\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.print_list", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.040336, "supported_languages": null}, "macro.datavault4dbt.snowflake__rec_track_sat": {"name": "snowflake__rec_track_sat", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/snowflake/rec_track_sat.sql", "original_file_path": "macros/tables/snowflake/rec_track_sat.sql", "unique_id": "macro.datavault4dbt.snowflake__rec_track_sat", "macro_sql": "{%- macro snowflake__rec_track_sat(tracked_hashkey, source_models, src_ldts, src_rsrc, src_stg, disable_hwm) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{# Setting the unknown and error ghost record value for record source column #}\n{%- set rsrc_unknown = var('datavault4dbt.default_unknown_rsrc', 'SYSTEM') -%}\n{%- set rsrc_error = var('datavault4dbt.default_error_rsrc', 'ERROR') -%}\n\n{# Setting the rsrc and stg_alias default datatype and length #}\n{%- set rsrc_default_dtype = var('datavault4dbt.rsrc_default_dtype', 'STRING') -%}\n{%- set stg_default_dtype = var('datavault4dbt.stg_default_dtype', 'STRING') -%}\n{%- set ns = namespace(last_cte = '', source_included_before = {},  source_models_rsrc_dict={},  has_rsrc_static_defined=true) -%}\n\n{%- if source_models is not mapping and not datavault4dbt.is_list(source_models) -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- set source_model_values = fromjson(datavault4dbt.source_model_processing(source_models=source_models, parameters={'hk_column':tracked_hashkey})) -%}\n{%- set source_models = source_model_values['source_model_list'] -%}\n{%- set ns.has_rsrc_static_defined = source_model_values['has_rsrc_static_defined'] -%}\n{%- set ns.source_models_rsrc_dict = source_model_values['source_models_rsrc_dict'] -%}\n{{ log('source_models: '~source_models, false) }}\n\n{%- set final_columns_to_select = [tracked_hashkey] + [src_ldts] + [src_rsrc] + [src_stg] -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{% if is_incremental() %}\n\n    distinct_concated_target AS (\n        {%- set concat_columns = [tracked_hashkey, src_ldts, src_rsrc] -%}\n        {{ \"\\n\" }}\n        SELECT\n        {{ datavault4dbt.concat_ws(concat_columns) }} as concat\n        FROM {{ this }}\n    ),\n    {%- if ns.has_rsrc_static_defined and not disable_hwm -%}\n        rsrc_static_unionized AS (\n        {% for source_model in source_models %}\n        {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n              {%- set source_number = source_model.id | string -%}\n            {%- set hk_column = source_model['hk_column'] -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number] -%}\n\n            {%- set rsrc_static_query_source_count -%}\n                SELECT count(*) FROM (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT \n                    {{ tracked_hashkey }},\n                    {{ src_ldts }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }}\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %} \n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                )\n            {% endset %}\n\n            {%- set rsrc_static_query_source -%}\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT \n                    {{ tracked_hashkey }},\n                    {{ src_ldts }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }}\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %} \n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n            {% endset %}\n\n            {{ rsrc_static_query_source }}  \n\n            {%- set source_in_target = true -%}\n            \n            {%- if execute -%}\n                {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n\n                {%- set row_count = rsrc_static_result.columns[0].values()[0] -%}\n\n                {{ log('row_count for '~source_model~' is '~row_count, false) }}\n\n                {%- if row_count == 0 -%}\n                    {%- set source_in_target = false -%}\n                {%- endif -%}\n            {%- endif -%}\n\n            {%- do ns.source_included_before.update({source_model.id: source_in_target}) -%}\n            {# Unionize over all sources #}\n            {%- if not loop.last %}\n                UNION ALL \n            {% endif -%}\n\n        {% endfor -%}\n        {%- set ns.last_cte = \"rsrc_static_unionized\" -%}\n        ),\n\n        max_ldts_per_rsrc_static_in_target AS (\n\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) as max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif %}\n{% endif -%}\n\n{#\n    We deduplicate each source over hashkey + ldts + rsrc_static and if is_incremental only select the rows, where the ldts is later\n    than the latest one in the existing satellite for that rsrc_static. If a source is added to the existing satellite, all deduplicated\n    rows from that source are loaded into the satellite.\n#}\n\n{%- for source_model in source_models %}\n\n    {%- set source_number = source_model.id | string -%}\n    {%- set hk_column = source_model['hk_column'] -%}\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number|string] -%}\n\n        src_new_{{ source_number }} AS (\n        {%- for rsrc_static in rsrc_statics %}\n            SELECT DISTINCT\n                {{ hk_column }} AS {{ tracked_hashkey }},\n                {{ src_ldts }},\n                CAST('{{ rsrc_static }}' AS {{ rsrc_default_dtype }} ) AS {{ src_rsrc }},\n                CAST(UPPER('{{ source_model.name }}') AS {{ stg_default_dtype }})  AS {{ src_stg }}\n            FROM {{ ref(source_model.name) }} src\n\n\n            {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_number|int] and not disable_hwm %}\n                INNER JOIN max_ldts_per_rsrc_static_in_target max\n                    ON max.rsrc_static = '{{ rsrc_static }}'\n                WHERE src.{{ src_ldts }} > max.max_ldts\n            {%- endif %}\n            {%- if not loop.last %}\n                UNION ALL\n            {% endif -%}\n        {% endfor %}\n\n        ),\n    {%- else -%}\n        src_new_{{ source_number}} AS (\n            SELECT DISTINCT\n                {{ hk_column }} AS {{ tracked_hashkey }},\n                {{ src_ldts }},\n                CAST({{ src_rsrc }} AS {{ rsrc_default_dtype }}) AS {{ src_rsrc }},\n                CAST(UPPER('{{ source_model.name }}') AS {{ stg_default_dtype }}) AS {{ src_stg }}\n            FROM {{ ref(source_model.name) }} src\n            {%- if is_incremental() and source_models | length == 1 and not disable_hwm %}\n                WHERE src.{{ src_ldts }} > (\n            SELECT MAX({{ src_ldts }})\n            FROM {{ this }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            )\n            {%- endif %}\n        ),\n    {%- endif -%}\n\n    {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n{% endfor %}\n\n{#\n    If more than one source model is selected, all previously created deduplicated CTEs are unionized.\n#}\n\n{%- if source_models | length > 1 %}\n\nsource_new_union AS (\n    {% for source_model in source_models %}\n        {%- set hk_column = source_model['hk_column'] -%}\n        {%- set source_number = source_model.id | string -%}\n\n        SELECT\n        {{ tracked_hashkey }},\n        {{ src_ldts }},\n        {{ src_rsrc }},\n        {{ src_stg }}\n        FROM src_new_{{ source_number }}\n\n        {%- if not loop.last %}\n        UNION ALL\n        {% endif -%}\n\n    {% endfor %}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif -%}\n\n{#\n    Selecting everything, either from the unionized data, or from the single CTE (if single source). Checking against the existing\n    satellite to only inserts that are not already inserted, if incremental run.\n#}\n\nrecords_to_insert AS (\n\n    SELECT\n    {{ datavault4dbt.print_list(final_columns_to_select) }}\n    FROM {{ ns.last_cte }}\n    WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }} \n    AND {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }}\n    {%- if is_incremental() %}\n        AND {{ datavault4dbt.concat_ws(concat_columns) }} NOT IN (SELECT * FROM distinct_concated_target)\n    {% endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.is_list", "macro.datavault4dbt.source_model_processing", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.datavault4dbt.concat_ws", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.0448482, "supported_languages": null}, "macro.datavault4dbt.snowflake__sat_v1": {"name": "snowflake__sat_v1", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/snowflake/sat_v1.sql", "original_file_path": "macros/tables/snowflake/sat_v1.sql", "unique_id": "macro.datavault4dbt.snowflake__sat_v1", "macro_sql": "{%- macro snowflake__sat_v1(sat_v0, hashkey, hashdiff, src_ldts, src_rsrc, ledts_alias, add_is_current_flag, include_payload) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set is_current_col_alias = var('datavault4dbt.is_current_col_alias', 'IS_CURRENT') -%}\n{%- set ledts_alias = var('datavault4dbt.ledts_alias', 'ledts') -%}\n\n{%- set source_relation = ref(sat_v0) -%}\n\n{%- set all_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n{%- set exclude = [hashkey, hashdiff, src_ldts, src_rsrc] -%}\n\n{%- set source_columns_to_select = datavault4dbt.process_columns_to_select(all_columns, exclude) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Calculate ledts based on the ldts of the earlier record. #}\nend_dated_source AS (\n\n    SELECT\n        {{ hashkey }},\n        {{ hashdiff }},\n        {{ src_rsrc }},\n        {{ src_ldts }},\n        COALESCE(LEAD({{ src_ldts }} - INTERVAL '1 MICROSECOND') OVER (PARTITION BY {{ hashkey }} ORDER BY {{ src_ldts }}), {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}) AS {{ ledts_alias }}\n        {%- if include_payload -%},\n            {{ datavault4dbt.print_list(source_columns_to_select) }}\n        {%- endif %}\n    FROM {{ source_relation }}\n\n)\n\nSELECT\n    {{ hashkey }},\n    {{ hashdiff }},\n    {{ src_rsrc }},\n    {{ src_ldts }},\n    {{ ledts_alias }},\n    {%- if add_is_current_flag %}\n        CASE WHEN {{ ledts_alias }} = {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n          THEN TRUE\n          ELSE FALSE\n        END AS {{ is_current_col_alias }}\n    {% endif -%}\n    {%- if include_payload -%},\n        {{ datavault4dbt.print_list(source_columns_to_select) }}\n    {%- endif %}\nFROM end_dated_source\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.source_columns", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.045982, "supported_languages": null}, "macro.datavault4dbt.exasol__control_snap_v0": {"name": "exasol__control_snap_v0", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/exasol/control_snap_v0.sql", "original_file_path": "macros/tables/exasol/control_snap_v0.sql", "unique_id": "macro.datavault4dbt.exasol__control_snap_v0", "macro_sql": "{%- macro exasol__control_snap_v0(start_date, daily_snapshot_time, sdts_alias, end_date=none) -%}\n\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n{%- set date_format_std = 'YYYY-mm-dd' -%}\n{%- set daily_snapshot_time = '0001-01-01 ' ~ daily_snapshot_time -%}\n{%- set last_cte = '' -%}\nWITH \ninitial_timestamps AS \n(\n    select\n    add_days(ADD_MINUTES(ADD_HOURS(DATE_TRUNC('day', DATE '{{ start_date }}' ), EXTRACT(HOUR FROM {{ datavault4dbt.string_to_timestamp(timestamp_format, daily_snapshot_time) }}) ),\n                                                        EXTRACT(MINUTE FROM  {{ datavault4dbt.string_to_timestamp(timestamp_format, daily_snapshot_time) }}) \n                                                    ), level-1) as sdts\n    from dual\n    connect by level <= days_between(ADD_MINUTES(ADD_HOURS(CURRENT_DATE(), EXTRACT(HOUR FROM {{ datavault4dbt.string_to_timestamp(timestamp_format, daily_snapshot_time) }}) ),\n                                                        EXTRACT(MINUTE FROM  {{ datavault4dbt.string_to_timestamp(timestamp_format, daily_snapshot_time) }}) \n                                                    ), TO_DATE('{{ start_date}}', '{{ date_format_std }}')\n                                    )+1\n    order by local.sdts\n\n    {%- set last_cte = 'initial_timestamps' -%}\n)\n\n\n{%- if is_incremental() %}\n, incremental_cte AS (\n    SELECT \n        src.* \n    FROM initial_timestamps src\n\n    WHERE src.sdts > (SELECT MAX(t.\"{{ sdts_alias }}\") FROM {{ this }} t)\n    {%- set last_cte = 'incremental_cte' -%}\n\n)\n{%- endif %}\n\n, enriched_timestamps AS \n(\n    SELECT\n        sdts as \"{{ sdts_alias }}\",\n        TRUE as force_active,\n        sdts AS replacement_sdts,\n        CONCAT('Snapshot ', DATE_TRUNC('day', TO_DATE(sdts))) AS caption,\n        CASE\n            WHEN EXTRACT(MINUTE FROM sdts) = 0 AND EXTRACT(SECOND FROM sdts) = 0 THEN TRUE\n            ELSE FALSE\n        END AS is_hourly,\n        CASE\n            WHEN EXTRACT(MINUTE FROM sdts) = 0 AND EXTRACT(SECOND FROM sdts) = 0 AND EXTRACT(HOUR FROM sdts) = 0 THEN TRUE\n            ELSE FALSE\n        END AS is_daily,\n        CASE \n            WHEN to_char(sdts, 'ID') = '1' THEN TRUE\n            ELSE FALSE\n        END AS is_weekly, \n        CASE\n            WHEN EXTRACT(DAY FROM sdts) = 1 THEN TRUE\n            ELSE FALSE\n        END AS is_monthly,\n        CASE\n            WHEN EXTRACT(DAY FROM sdts) = 1 AND EXTRACT(MONTH FROM sdts) = 1 THEN TRUE\n            ELSE FALSE\n        END AS is_yearly,\n        NULL AS comment\n    FROM \n        {{ last_cte }}\n)\n\nSELECT * FROM enriched_timestamps\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.string_to_timestamp", "macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.046845, "supported_languages": null}, "macro.datavault4dbt.exasol__control_snap_v1": {"name": "exasol__control_snap_v1", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/exasol/control_snap_v1.sql", "original_file_path": "macros/tables/exasol/control_snap_v1.sql", "unique_id": "macro.datavault4dbt.exasol__control_snap_v1", "macro_sql": "{%- macro exasol__control_snap_v1(control_snap_v0, log_logic, sdts_alias) -%}\n\n{# sample log_logic \n   {%-set log_logic = {'daily': {'duration': 3,\n                                'unit': 'MONTH',\n                                'forever': 'FALSE'},\n                      'monthly': {'duration': 5,\n                                  'unit': 'YEAR'},\n                      'yearly': {'duration': 10,\n                                'unit': 'YEAR'} } %} \n\n#}\n\n{%- if log_logic is not none %}\n    {%- for interval in log_logic.keys() %}\n        {%- if 'forever' not in log_logic[interval].keys() -%}\n            {% do log_logic[interval].update({'forever': 'FALSE'}) %}\n        {%- endif -%}\n    {%- endfor -%}\n{%- endif %}\n\n{%- set v0_relation = ref(control_snap_v0) -%}\n{%- set ns = namespace(forever_status=FALSE) %}\n\n{%- set snapshot_trigger_column = var('datavault4dbt.snapshot_trigger_column', 'is_active') -%}\n\nWITH\n\nlatest_row AS (\n\n    SELECT\n        {{ sdts_alias }}\n    FROM {{ v0_relation }}\n    ORDER BY {{ sdts_alias }} DESC\n    LIMIT 1\n\n),\n\nvirtual_logic AS (\n\n    SELECT\n        c.{{ sdts_alias }},\n        c.replacement_sdts,\n        c.force_active,\n        {%- if log_logic is none %}\n        TRUE as {{ snapshot_trigger_column }},\n        {%- else %}\n        CASE \n            WHEN\n            {% if 'daily' in log_logic.keys() %}\n                {%- if log_logic['daily']['forever'] == 'TRUE' -%}\n                    {%- set ns.forever_status = 'TRUE' -%}\n                  (1=1)\n                {%- else %}                            \n                    {%- set daily_duration = log_logic['daily']['duration'] -%}\n                    {%- set daily_unit = log_logic['daily']['unit'] -%}\n                  (DATE_TRUNC('DAY', TO_DATE(c.{{ sdts_alias }})) BETWEEN ADD_{{ daily_unit}}S(CURRENT_DATE, -{{ daily_duration }}) AND CURRENT_DATE)\n                {%- endif -%}   \n            {%- endif %}\n\n            {%- if 'monthly' in log_logic.keys() %}\n            OR\n                {%- if log_logic['weekly']['forever'] is true -%}\n                    {%- set ns.forever_status = 'TRUE' -%}\n                    (c.is_weekly = TRUE)\n                {%- else %}\n\n                    {%- set weekly_duration = log_logic['weekly']['duration'] -%}\n                    {%- set weekly_unit = log_logic['weekly']['unit'] -%}\n\n                    ((DATE_TRUNC('DAY', TO_DATE(c.{{ sdts_alias }})) BETWEEN ADD_{{ weekly_unit}}S(CURRENT_DATE, -{{ weekly_duration }}) AND CURRENT_DATE)\n                    AND\n                    (c.is_weekly = TRUE))\n                {%- endif -%}\n            {% endif -%}\n\n            {%- if 'monthly' in log_logic.keys() %} OR\n                {%- if log_logic['monthly']['forever'] == 'TRUE' -%}\n                    {%- set ns.forever_status = 'TRUE' %}\n              (c.is_monthly = TRUE)\n                {%- else %}\n                    {%- set monthly_duration = log_logic['monthly']['duration'] -%}\n                    {%- set monthly_unit = log_logic['monthly']['unit'] %}\n\n                    ((DATE_TRUNC('DAY', TO_DATE(c.{{ sdts_alias }})) BETWEEN ADD_{{ monthly_unit }}S(CURRENT_DATE, -{{ monthly_duration }}) AND CURRENT_DATE) \n                    AND \n                    (c.is_monthly = TRUE))\n                {%- endif -%}\n            {% endif -%}\n\n            {%- if 'yearly' in log_logic.keys() %}\n            OR\n                {%- if log_logic['yearly']['forever'] is true -%}\n                    {%- set ns.forever_status = 'TRUE' -%}\n                    (c.is_yearly = TRUE)\n                {%- else %}\n                    {%- set yearly_duration = log_logic['yearly']['duration'] -%}\n                    {%- set yearly_unit = log_logic['yearly']['unit'] %}\n\n                    ((DATE_TRUNC('DAY', TO_DATE(c.{{ sdts_alias }})) BETWEEN ADD_{{ yearly_unit }}S(CURRENT_DATE, - {{ yearly_duration }}) AND CURRENT_DATE) \n                    AND \n                    (c.is_yearly = TRUE))\n                {%- endif -%}\n            {% endif %}\n            THEN TRUE\n            ELSE FALSE\n\n        END AS {{ snapshot_trigger_column }},\n        {%- endif %}\n        CASE\n            WHEN l.{{ sdts_alias }} IS NULL THEN FALSE\n            ELSE TRUE\n        END AS is_latest,\n\n        c.caption,\n        c.is_hourly,\n        c.is_daily,\n        c.is_weekly,\n        c.is_monthly,\n        c.is_yearly,\n        CASE\n            WHEN EXTRACT(YEAR FROM c.{{ sdts_alias }}) = EXTRACT(YEAR FROM CURRENT_DATE) THEN TRUE\n            ELSE FALSE\n        END AS is_current_year,\n        CASE\n            WHEN EXTRACT(YEAR FROM c.{{ sdts_alias }}) = EXTRACT(YEAR FROM CURRENT_DATE)-1 THEN TRUE\n            ELSE FALSE\n        END AS is_last_year,\n        CASE\n            WHEN DATE_TRUNC('DAY', TO_DATE(c.{{ sdts_alias }})) BETWEEN ADD_YEARS(CURRENT_DATE,-1) AND CURRENT_DATE THEN TRUE\n            ELSE FALSE\n        END AS is_rolling_year,\n        CASE\n            WHEN DATE_TRUNC('DAY', TO_DATE(c.{{ sdts_alias }})) BETWEEN ADD_YEARS(CURRENT_DATE,-2) AND ADD_YEARS(CURRENT_DATE,-1) THEN TRUE\n            ELSE FALSE\n        END AS is_last_rolling_year,\n        c.comment\n    FROM {{ v0_relation }} c\n    LEFT JOIN latest_row l\n        ON c.{{ sdts_alias }} = l.{{ sdts_alias }}\n\n),\n\nactive_logic_combined AS (\n\n    SELECT \n        {{ sdts_alias }},\n        replacement_sdts,\n        CASE\n            WHEN force_active AND {{ snapshot_trigger_column }} THEN TRUE\n            WHEN NOT force_active OR NOT {{ snapshot_trigger_column }} THEN FALSE\n        END AS {{ snapshot_trigger_column }},\n        is_latest, \n        caption,\n        is_hourly,\n        is_daily,\n        is_weekly,\n        is_monthly,\n        is_yearly,\n        is_current_year,\n        is_last_year,\n        is_rolling_year,\n        is_last_rolling_year,\n        comment\n    FROM virtual_logic\n\n)\n\nSELECT * FROM active_logic_combined\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.049377, "supported_languages": null}, "macro.datavault4dbt.exasol__pit": {"name": "exasol__pit", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/exasol/pit.sql", "original_file_path": "macros/tables/exasol/pit.sql", "unique_id": "macro.datavault4dbt.exasol__pit", "macro_sql": "{%- macro exasol__pit(tracked_entity, hashkey, sat_names, ldts, ledts, sdts, snapshot_relation, dimension_key,snapshot_trigger_column=none, custom_rsrc=none, pit_type=none) -%}\n\n{%- set hash = datavault4dbt.hash_method() -%}\n{%- set hash_dtype = var('datavault4dbt.hash_datatype', 'HASHTYPE') -%}\n{%- set hash_default_values = fromjson(datavault4dbt.hash_default_values(hash_function=hash,hash_datatype=hash_dtype)) -%}\n{%- set hash_alg = hash_default_values['hash_alg'] -%}\n{%- set unknown_key = hash_default_values['unknown_key'] -%}\n{%- set error_key = hash_default_values['error_key'] -%}\n\n{%- set rsrc = var('datavault4dbt.rsrc_alias', 'rsrc') -%}\n{%- set hashkey = hashkey | upper -%}\n{%- set dimension_key = dimension_key | upper -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- if datavault4dbt.is_something(pit_type) -%}\n    {%- set hashed_cols = [pit_type, datavault4dbt.prefix([hashkey],'te'), datavault4dbt.prefix([sdts], 'snap')] -%}\n{%- else -%}\n    {%- set hashed_cols = [datavault4dbt.prefix([hashkey],'te'), datavault4dbt.prefix([sdts], 'snap')] -%}\n{%- endif -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{%- if is_incremental() %}\n\nexisting_dimension_keys AS (\n\n    SELECT\n        {{ dimension_key }}\n    FROM {{ this }}\n\n),\n\n{%- endif %}\n\npit_records AS (\n\n    SELECT\n        \n        {% if datavault4dbt.is_something(pit_type) -%}\n            {{ datavault4dbt.as_constant(pit_type) }} as type,\n        {%- endif %}\n        {% if datavault4dbt.is_something(custom_rsrc) -%}\n        '{{ custom_rsrc }}' as {{ rsrc }},\n        {%- endif %}\n        {{ datavault4dbt.hash(columns=hashed_cols,\n                    alias=dimension_key,\n                    is_hashdiff=false)   }} ,\n        te.{{ hashkey }},\n        snap.{{ sdts }},\n        {% for satellite in sat_names %}\n            COALESCE({{ satellite }}.{{ hashkey }}, CAST({{ datavault4dbt.as_constant(column_str=unknown_key) }} as {{ hash_dtype }})) AS hk_{{ satellite }},\n            COALESCE({{ satellite }}.{{ ldts }}, {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }}) AS {{ ldts }}_{{ satellite }}\n            {{- \",\" if not loop.last }}\n        {%- endfor %}\n\n    FROM\n            {{ ref(tracked_entity) }} te\n        FULL OUTER JOIN\n            {{ ref(snapshot_relation) }} snap\n            {% if datavault4dbt.is_something(snapshot_trigger_column) -%}\n                ON snap.{{ snapshot_trigger_column }} = true\n            {% else -%}\n                ON 1=1\n            {%- endif %}\n        {% for satellite in sat_names %}\n        {%- set sat_columns = datavault4dbt.source_columns(ref(satellite)) %}\n        {%- if ledts|string|lower in sat_columns|map('lower') %}\n        LEFT JOIN {{ ref(satellite) }}\n        {%- else %}\n        LEFT JOIN (\n            SELECT\n                {{ hashkey }},\n                {{ ldts }},\n                COALESCE(LEAD(ADD_SECONDS({{ ldts }}, -0.001)) OVER (PARTITION BY {{ hashkey }} ORDER BY {{ ldts }}),{{ datavault4dbt.string_to_timestamp( timestamp_format , end_of_all_times) }}) AS {{ ledts }}\n            FROM {{ ref(satellite) }}\n        ) {{ satellite }}\n        {% endif %}\n            ON\n                {{ satellite }}.{{ hashkey}} = te.{{ hashkey }}\n                AND snap.{{ sdts }} BETWEEN {{ satellite }}.{{ ldts }} AND {{ satellite }}.{{ ledts }}\n        {% endfor %}\n    {% if datavault4dbt.is_something(snapshot_trigger_column) -%}\n        WHERE snap.{{ snapshot_trigger_column }}\n    {%- endif %}\n\n),\n\nrecords_to_insert AS (\n\n    SELECT DISTINCT *\n    FROM pit_records\n    {%- if is_incremental() %}\n    WHERE {{ dimension_key }} NOT IN (SELECT * FROM existing_dimension_keys)\n    {% endif -%}\n\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.hash_method", "macro.datavault4dbt.hash_default_values", "macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.is_something", "macro.datavault4dbt.prefix", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.datavault4dbt.as_constant", "macro.datavault4dbt.hash", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.source_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.052067, "supported_languages": null}, "macro.datavault4dbt.exasol__ref_sat_v0": {"name": "exasol__ref_sat_v0", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/exasol/ref_sat_v0.sql", "original_file_path": "macros/tables/exasol/ref_sat_v0.sql", "unique_id": "macro.datavault4dbt.exasol__ref_sat_v0", "macro_sql": "{%- macro exasol__ref_sat_v0(parent_ref_keys, src_hashdiff, src_payload, src_ldts, src_rsrc, source_model, disable_hwm, source_is_single_batch) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set parent_ref_keys = datavault4dbt.expand_column_list(columns=[parent_ref_keys]) -%}\n\n{%- set ns=namespace(src_hashdiff=\"\", hdiff_alias=\"\") %}\n\n{%- if  src_hashdiff is mapping and src_hashdiff is not none -%}\n    {% set ns.src_hashdiff = src_hashdiff[\"source_column\"] %}\n    {% set ns.hdiff_alias = src_hashdiff[\"alias\"] %}\n{% else %}\n    {% set ns.src_hashdiff = src_hashdiff %}\n    {% set ns.hdiff_alias = src_hashdiff  %}\n{%- endif -%}\n\n{%- set source_cols = datavault4dbt.expand_column_list(columns=[src_rsrc, src_ldts, src_payload]) -%}\n\n{%- set source_relation = ref(source_model) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Selecting all source data, that is newer than latest data in ref_sat if incremental #}\nsource_data AS (\n\n    SELECT\n        {% for ref_key in parent_ref_keys %}\n        {{ref_key}},\n        {% endfor %}\n        {{ ns.src_hashdiff }} as {{ ns.hdiff_alias }},\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM {{ source_relation }}\n\n    {%- if is_incremental() %}\n    WHERE {{ src_ldts }} > (\n        SELECT\n            MAX({{ src_ldts }}) FROM {{ this }}\n        WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    )\n    {%- endif %}\n),\n\n{# Get the latest record for each parent ref key combination in existing sat, if incremental. #}\n{%- if is_incremental() %}\nlatest_entries_in_sat AS (\n\n    SELECT\n        {% for ref_key in parent_ref_keys %}\n        {{ref_key}},\n        {% endfor %}\n        {{ ns.hdiff_alias }}\n    FROM \n        {{ this }}\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY {%- for ref_key in parent_ref_keys %} {{ref_key}} {%- if not loop.last %}, {% endif %}{% endfor %} ORDER BY {{ src_ldts }} DESC) = 1  \n),\n{%- endif %}\n\n{#\n    Deduplicate source by comparing each hashdiff to the hashdiff of the previous record, for each parent ref key combination.\n    Additionally adding a row number based on that order, if incremental.\n#}\ndeduplicated_numbered_source AS (\n\n    SELECT\n    {% for ref_key in parent_ref_keys %}\n    {{ref_key}},\n    {% endfor %}\n    {{ ns.hdiff_alias }},\n    {{ datavault4dbt.print_list(source_cols) }}\n    {% if is_incremental() -%}\n    , ROW_NUMBER() OVER(PARTITION BY {%- for ref_key in parent_ref_keys %} {{ref_key}} {%- if not loop.last %}, {% endif %}{% endfor %} ORDER BY {{ src_ldts }}) as rn\n    {%- endif %}\n    FROM source_data\n    QUALIFY\n        CASE\n            WHEN {{ ns.hdiff_alias }} = LAG({{ ns.hdiff_alias }}) OVER(PARTITION BY {%- for ref_key in parent_ref_keys %} {{ref_key}} {%- if not loop.last %}, {% endif %}{% endfor %} ORDER BY {{ src_ldts }}) THEN FALSE\n            ELSE TRUE\n        END\n),\n\n{#\n    Select all records from the previous CTE. If incremental, compare the oldest incoming entry to\n    the existing records in the satellite.\n#}\nrecords_to_insert AS (\n\n    SELECT\n    {% for ref_key in parent_ref_keys %}\n    {{ref_key}},\n    {% endfor %}\n    {{ ns.hdiff_alias }},\n    {{ datavault4dbt.print_list(source_cols) }}\n    FROM deduplicated_numbered_source\n    {%- if is_incremental() %}\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE 1=1\n            {% for ref_key in parent_ref_keys %}\n            AND {{ datavault4dbt.multikey(ref_key, prefix=['latest_entries_in_sat', 'deduplicated_numbered_source'], condition='=') }}\n            {% endfor %}\n            AND {{ datavault4dbt.multikey(ns.hdiff_alias, prefix=['latest_entries_in_sat', 'deduplicated_numbered_source'], condition='=') }}\n            AND deduplicated_numbered_source.rn = 1)\n    {%- endif %}\n\n    )\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.print_list", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.0544052, "supported_languages": null}, "macro.datavault4dbt.exasol__ref_sat_v1": {"name": "exasol__ref_sat_v1", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/exasol/ref_sat_v1.sql", "original_file_path": "macros/tables/exasol/ref_sat_v1.sql", "unique_id": "macro.datavault4dbt.exasol__ref_sat_v1", "macro_sql": "{%- macro exasol__ref_sat_v1(ref_sat_v0, ref_keys, hashdiff, src_ldts, src_rsrc, ledts_alias, add_is_current_flag) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set is_current_col_alias = var('datavault4dbt.is_current_col_alias', 'IS_CURRENT') -%}\n{%- set ledts_alias = var('datavault4dbt.ledts_alias', 'ledts') -%}\n\n{%- set source_relation = ref(ref_sat_v0) -%}\n\n{%- set ref_keys = datavault4dbt.expand_column_list(columns=[ref_keys]) -%}\n\n{%- set all_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n{%- set exclude = ref_keys + [hashdiff, src_ldts, src_rsrc] -%}\n\n{%- set source_columns_to_select = datavault4dbt.process_columns_to_select(all_columns, exclude) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Calculate ledts based on the ldts of the earlier record. #}\nend_dated_source AS (\n\n    SELECT\n        {% for ref_key in ref_keys %}\n        {{ref_key}},\n        {% endfor %}\n        {{ hashdiff }},\n        {{ src_rsrc }},\n        {{ src_ldts }},\n        COALESCE(LEAD(ADD_SECONDS({{ src_ldts }}, -0.001)) OVER (PARTITION BY {%- for ref_key in ref_keys %} {{ref_key}} {%- if not loop.last %}, {% endif %}{% endfor %} ORDER BY {{ src_ldts }}),{{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}) as {{ ledts_alias }},\n        {{ datavault4dbt.print_list(source_columns_to_select) }}\n    FROM {{ source_relation }}\n\n)\n\nSELECT\n    {% for ref_key in ref_keys %}\n    {{ref_key}},\n    {% endfor %}\n    {{ hashdiff }},\n    {{ src_rsrc }},\n    {{ src_ldts }},\n    {{ ledts_alias }},\n    {%- if add_is_current_flag %}\n        CASE WHEN {{ ledts_alias }} = {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n        THEN TRUE\n        ELSE FALSE\n        END AS {{ is_current_col_alias }},\n    {% endif -%}\n    {{ datavault4dbt.print_list(source_columns_to_select) }}\nFROM end_dated_source\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.source_columns", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.0557299, "supported_languages": null}, "macro.datavault4dbt.exasol__nh_link": {"name": "exasol__nh_link", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/exasol/nh_link.sql", "original_file_path": "macros/tables/exasol/nh_link.sql", "unique_id": "macro.datavault4dbt.exasol__nh_link", "macro_sql": "{%- macro exasol__nh_link(link_hashkey, foreign_hashkeys, payload, source_models, src_ldts, src_rsrc, disable_hwm, source_is_single_batch) -%}\n\n{%- set ns = namespace(last_cte= \"\", source_included_before = {}, has_rsrc_static_defined=true, source_models_rsrc_dict={}) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n\n{# If no specific link_hk, fk_columns, or payload are defined for each source, we apply the values set in the link_hashkey, foreign_hashkeys, and payload variable. #}\n{# If no rsrc_static parameter is defined in ANY of the source models then the whole code block of record_source performance lookup is not executed  #}\n{# For the use of record_source performance lookup it is required that every source model has the parameter rsrc_static defined and it cannot be an empty string #}\n{%- if source_models is not mapping -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- for source_model in source_models.keys() %}\n\n    {%- if 'fk_columns' not in source_models[source_model].keys() -%}\n\n        {%- do source_models[source_model].update({'fk_columns': foreign_hashkeys}) -%}\n\n    {%- endif -%}\n\n    {%- if 'link_hk' not in source_models[source_model].keys() -%}\n\n        {%- do source_models[source_model].update({'link_hk': link_hashkey}) -%}\n\n    {%- endif -%}\n\n    {%- if 'payload' not in source_models[source_model].keys() -%}\n\n        {%- do source_models[source_model].update({'payload': payload}) -%}\n\n    {%- endif -%}\n\n    {%- if 'rsrc_static' not in source_models[source_model].keys() -%}\n\n        {%- set ns.has_rsrc_static_defined = false -%}\n\n    {%- else -%}\n        {%- if not (source_models[source_model]['rsrc_static'] is iterable and source_models[source_model]['rsrc_static'] is not string) -%}\n            {%- if source_models[source_model]['rsrc_static'] == '' or source_models[source_model]['rsrc_static'] is none -%}\n                {%- if execute -%}\n                    {{ exceptions.raise_compiler_error(\"If rsrc_static is defined -> it must not be an empty string \") }}\n                {%- endif %}\n            {%- else -%}\n                {%- do ns.source_models_rsrc_dict.update({source_model : [source_models[source_model]['rsrc_static']] } ) -%}\n            {%- endif -%}\n        {%- elif source_models[source_model]['rsrc_static'] is iterable -%}\n            {%- do ns.source_models_rsrc_dict.update({source_model : source_models[source_model]['rsrc_static'] } ) -%}\n        {%- endif -%}\n\n    {%- endif -%}\n\n\n{% endfor %}\n\n{%- set final_columns_to_select = [link_hashkey] + foreign_hashkeys + [src_ldts] + [src_rsrc] + payload -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{%- if is_incremental() -%}\n{# Get all link hashkeys out of the existing link for later incremental logic. #}\n    distinct_target_hashkeys AS (\n\n        SELECT\n        {{ link_hashkey }}\n        FROM {{ this }}\n\n    ),\n    {%- if ns.has_rsrc_static_defined -%}\n        {% for source_model in source_models.keys() %}\n        {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n\n            {%- set source_number = loop.index | string -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_model] -%}\n\n            {%- set rsrc_static_query_source -%}\n                SELECT count(*) FROM (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT {{ this }}.{{ src_rsrc }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }}\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                )\n            {% endset %}\n\n            rsrc_static_{{ source_number }} AS (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT {{ this }}.*,\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }}\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                {%- set ns.last_cte = \"rsrc_static_{}\".format(source_number) -%}\n            ),\n\n            {%- set source_in_target = true -%}\n            \n            {%- if execute -%}\n                {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n\n                {%- set row_count = rsrc_static_result.columns[0].values()[0] -%}\n\n                {{ log('row_count for '~source_model~' is '~row_count, false) }}\n\n                {%- if row_count == 0 -%}\n                    {%- set source_in_target = false -%}\n                {%- endif -%}\n            {%- endif -%}\n\n            {%- do ns.source_included_before.update({source_model: source_in_target}) -%}\n\n        {% endfor -%}\n\n        {%- if source_models.keys() | length > 1 %}\n\n        rsrc_static_union AS (\n            {#  Create one unionized table over all sources. It will be the same as the already existing\n                nh_link, but extended by the rsrc_static column. #}\n\n            {% for source_model in source_models.keys() %}\n            {%- set source_number = loop.index | string -%}\n\n            SELECT rsrc_static_{{ source_number }}.* FROM rsrc_static_{{ source_number }}\n\n            {%- if not loop.last %}\n            UNION ALL\n            {% endif -%}\n            {%- endfor %}\n            {%- set ns.last_cte = \"rsrc_static_union\" -%}\n        ),\n\n        {%- endif %}\n\n        max_ldts_per_rsrc_static_in_target AS (\n        {# Use the previously created CTE to calculate the max load date timestamp per rsrc_static. #}\n\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) AS max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- else -%}\n        {%- if source_models.keys() | length == 1 %}\n\n            max_ldts_single_src AS (\n            {# Calculate the max load date timestamp of the whole table when there is only one source. #}\n            \n                SELECT \n                    MAX({{ src_ldts }}) as max_ldts\n                FROM {{ this }}\n                WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            ),\n        {%- endif %}\n    {%- endif %}\n{% endif -%}\n\n{%- for source_model in source_models.keys() %}\n{#  Select all deduplicated records from each source, and filter for records that are newer\n    than the max ldts inside the existing link, if incremental. #}\n\n    {%- set source_number = loop.index | string -%}\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = source_models[source_model]['rsrc_static'] %}\n    {%- endif -%}\n\nsrc_new_{{ source_number }} AS (\n\n    SELECT\n        {{ source_models[source_model]['link_hk'] }} AS {{ link_hashkey }},\n\n        {% for fk in source_models[source_model]['fk_columns']|list %}\n            {{ fk }},\n        {%- endfor %}\n\n        {{ src_ldts }},\n        {{ src_rsrc }},\n\n        {{ datavault4dbt.print_list(source_models[source_model]['payload']) | indent(3) }}\n\n    FROM {{ ref(source_model|string) }} src\n    {# If the model is incremental and all sources has rsrc_static defined and valid and the source was already included before in the target transactional link #}\n    {# then an inner join is performed on the CTE for the maximum load date timestamp per record source static to get the records\n    that match any of the rsrc_static present in it #}\n    {# if there are records in the source with a newer load date time stamp than the ones present in the target, those will be selected to be inserted later #}\n    {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_model] %}\n        INNER JOIN max_ldts_per_rsrc_static_in_target max ON\n        ({%- for rsrc_static in rsrc_statics -%}\n            max.rsrc_static = '{{ rsrc_static }}'\n            {%- if not loop.last -%} OR\n            {% endif -%}\n        {%- endfor %})\n        WHERE src.{{ src_ldts }} > max.max_ldts\n    {%- elif is_incremental() and source_models.keys() | length == 1 and not ns.has_rsrc_static_defined %}\n        WHERE src.{{ src_ldts }} > (SELECT max.max_ldts FROM max_ldts_single_src max)\n    {%- endif %}\n\n    {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n    ),\n{%- endfor -%}\n\n{%- if source_models.keys() | length > 1 %}\n\nsource_new_union AS (\n{# Unionize the new records from all sources. #}\n\n    {%- for source_model in source_models.keys() -%}\n\n    {%- set source_number = loop.index | string -%}\n\n    SELECT\n        {{ link_hashkey }},\n\n        {% for fk in source_models[source_model]['fk_columns']|list %}\n            {{ fk }} AS {{ foreign_hashkeys[loop.index - 1] }},\n        {% endfor -%}\n\n        {{ src_ldts }},\n        {{ src_rsrc }},\n\n        {% for col in source_models[source_model]['payload']|list %}\n            {{ col }} AS {{ payload[loop.index - 1] }}\n            {%- if not loop.last %}, {%- endif %}\n        {% endfor -%}\n\n    FROM src_new_{{ source_number }}\n\n    {%- if not loop.last %}\n    UNION ALL\n    {% endif -%}\n\n    {%- endfor -%}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif %}\n\nearliest_hk_over_all_sources AS (\n{# Deduplicate the unionized records again to only insert the earliest one. #}\n\n    SELECT\n        lcte.*\n    FROM {{ ns.last_cte }} AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY {{ link_hashkey }} ORDER BY {{ src_ldts }}) = 1\n\n    {%- set ns.last_cte = 'earliest_hk_over_all_sources' -%}\n\n),\n\nrecords_to_insert AS (\n{# Select everything from the previous CTE, if its incremental then filter for hashkeys that are not already in the link. #}\n\n    SELECT\n    {{ datavault4dbt.print_list(final_columns_to_select) }}\n    FROM {{ ns.last_cte }}\n\n    {%- if is_incremental() %}\n    WHERE {{ link_hashkey }} NOT IN (SELECT * FROM distinct_target_hashkeys)\n    {% endif -%}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.061455, "supported_languages": null}, "macro.datavault4dbt.exasol__ref_table": {"name": "exasol__ref_table", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/exasol/ref_table.sql", "original_file_path": "macros/tables/exasol/ref_table.sql", "unique_id": "macro.datavault4dbt.exasol__ref_table", "macro_sql": "{%- macro exasol__ref_table(ref_hub, ref_satellites, src_ldts, src_rsrc, historized, snapshot_trigger_column='is_active', snapshot_relation=none) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set ref_hub_relation = ref(ref_hub|string) -%}\n\n{%- set is_current_col_alias = var('datavault4dbt.is_current_col_alias', 'IS_CURRENT') -%}\n{%- set ledts_alias = var('datavault4dbt.ledts_alias', 'ledts') -%}\n{%- set sdts_alias = var('datavault4dbt.sdts_alias', 'sdts') -%}\n\n{%- set include_business_objects_before_appearance = var('datavault4dbt.include_business_objects_before_appearance', 'false') -%}\n\n{{ log('ref_hub_relation: ' ~ ref_hub_relation, false) }}\n{%- set hub_columns = datavault4dbt.source_columns(ref_hub_relation) -%}\n{{ log('hub_columns: ' ~ hub_columns, false) }}\n{%- set hub_columns_to_exclude = [src_ldts, src_rsrc] -%}\n{%- set ref_key_cols = datavault4dbt.process_columns_to_select(columns_list=hub_columns, exclude_columns_list=hub_columns_to_exclude )%}\n{{ log('ref_key_cols: ' ~ ref_key_cols, false) }}\n{%- set sat_columns_to_exclude = [src_ldts, src_rsrc, ledts_alias, is_current_col_alias] + ref_key_cols -%}\n{{ log('sat_columns_to_exclude: '~ sat_columns_to_exclude, false) }}\n\n{%- set ref_satellites_dict = {} -%}\n\n{%- if not datavault4dbt.is_list(ref_satellites) and not ref_satellites is mapping -%}\n    {%- set ref_satellites = [ref_satellites] -%}\n{%- endif -%}\n\n{%- if datavault4dbt.is_list(ref_satellites) -%}\n    {%- for ref_satellite in ref_satellites -%}\n        {%- do ref_satellites_dict.update({ref_satellite:{}}) -%}\n    {%- endfor -%}\n{%- else -%}\n    {%- set ref_satellites_dict = ref_satellites -%}\n{%- endif -%}\n\n\nWITH \n\ndates AS (\n\n{% if historized in ['full', 'latest'] -%}\n\n    {%- set date_column = src_ldts -%}\n\n\n    {{ log('ref_satellites: '~ ref_satellites, false) -}}\n\n    {% if historized == 'full' -%}\n    SELECT distinct {{ date_column }} FROM (\n    {%- elif historized == 'latest' -%}\n    SELECT MAX({{ date_column }}) as {{ date_column }} FROM (\n    {%- endif -%}\n\n    {% for satellite in ref_satellites_dict.keys() -%}\n    SELECT distinct \n        {{ src_ldts }}\n    FROM {{ ref(satellite|string) }}\n    WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    {% if not loop.last -%} UNION {% endif %}\n    {%- endfor %}\n    )\n\n\n{% elif snapshot_relation is not none %}\n\n    {%- set date_column = sdts_alias -%}\n    \n    SELECT \n        {{ date_column }}\n    FROM (\n        \n        SELECT \n            {{ sdts_alias }}\n        FROM {{ ref(snapshot_relation) }}\n        WHERE {{ snapshot_trigger_column }}\n    )\n\n{%- endif %}\n\n{%- if is_incremental() -%}\n    WHERE {{ date_column }} > (SELECT MAX({{ date_column }}) FROM {{ this }})\n{%- endif -%}\n\n\n),\n\nref_table AS (\n\n    SELECT\n    {{ datavault4dbt.print_list(list_to_print=ref_key_cols, indent=2, src_alias='h') }},\n        ld.{{ date_column }},\n        h.{{ src_rsrc }},\n\n    {%- for satellite in ref_satellites_dict.keys() %}\n\n    {%- set sat_alias = 's_' + loop.index|string -%}\n    {%- set sat_columns_pre = [] -%}\n        \n        {%- if ref_satellites_dict[satellite] is mapping and 'include' in ref_satellites_dict[satellite].keys() -%}\n            {%- set sat_columns_pre = ref_satellites_dict[satellite]['include'] -%}\n        {%- elif ref_satellites_dict[satellite] is mapping and 'exclude' in ref_satellites_dict[satellite].keys() -%}\n            {%- set all_sat_columns = datavault4dbt.source_columns(ref(satellite)) -%}\n            {%- set sat_columns_pre = datavault4dbt.process_columns_to_select(all_sat_columns, ref_satellites_dict[satellite]['exclude']) -%}\n        {%- elif datavault4dbt.is_list(ref_satellites_dict[satellite]) -%}\n            {%- set sat_columns_pre = ref_satellites_dict[satellite] -%}\n        {%- else -%}\n            {%- set all_sat_columns = datavault4dbt.source_columns(ref(satellite)) -%}\n            {%- set sat_columns_pre = datavault4dbt.process_columns_to_select(all_sat_columns, sat_columns_to_exclude) -%}\n        {%- endif -%}\n\n    {%- set sat_columns = datavault4dbt.process_columns_to_select(sat_columns_pre, sat_columns_to_exclude) -%}\n    \n    {{- log('sat_columns: '~ sat_columns, false) -}}\n\n    {{ datavault4dbt.print_list(list_to_print=sat_columns, indent=2, src_alias=sat_alias) }}\n    {%- if not loop.last -%} ,\n    {% endif -%}\n\n    {% endfor %} \n\n    FROM {{ ref(ref_hub) }} h\n    \n    FULL OUTER JOIN dates ld\n        ON 1 = 1  \n\n    {% for satellite in ref_satellites_dict.keys() %}\n\n        {%- set sat_alias = 's_' + loop.index|string -%}\n\n    LEFT JOIN {{ ref(satellite) }} {{ sat_alias }}\n        ON {{ datavault4dbt.multikey(columns=ref_key_cols, prefix=['h', sat_alias], condition='=') }}\n        AND  ld.{{ date_column }} BETWEEN {{ sat_alias }}.{{ src_ldts }} AND {{ sat_alias }}.{{ ledts_alias }}\n    \n    {% endfor %}\n\n    {% if include_business_objects_before_appearance == 'false' -%}\n    WHERE h.{{ src_ldts }} <= ld.{{ date_column }}\n    {% endif %}\n\n) \n\nSELECT * FROM ref_table\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.source_columns", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.is_list", "macro.datavault4dbt.string_to_timestamp", "macro.dbt.is_incremental", "macro.datavault4dbt.print_list", "macro.datavault4dbt.multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.065103, "supported_languages": null}, "macro.datavault4dbt.exasol__hub": {"name": "exasol__hub", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/exasol/hub.sql", "original_file_path": "macros/tables/exasol/hub.sql", "unique_id": "macro.datavault4dbt.exasol__hub", "macro_sql": "{%- macro exasol__hub(hashkey, business_keys, src_ldts, src_rsrc, source_models) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set ns = namespace(last_cte= \"\", source_included_before = {}, has_rsrc_static_defined=true, source_models_rsrc_dict={}) -%}\n\n{# Select the Business Key column from the first source model definition provided in the hub model and put them in an array. #}\n{%- set business_keys = datavault4dbt.expand_column_list(columns=[business_keys]) -%}\n\n{# If no specific bk_columns is defined for each source, we apply the values set in the business_keys variable. #}\n{# If no specific hk_column is defined for each source, we apply the values set in the hashkey variable. #}\n{# If no rsrc_static parameter is defined in ANY of the source models then the whole code block of record_source performance lookup is not executed  #}\n{# For the use of record_source performance lookup it is required that every source model has the parameter rsrc_static defined and it cannot be an empty string #}\n{%- if source_models is not mapping -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- for source_model in source_models.keys() -%}\n\n    {%- if 'hk_column' not in source_models[source_model].keys() -%}\n        {%- do source_models[source_model].update({'hk_column': hashkey}) -%}\n    {%- endif -%}\n\n    {%- if 'bk_columns' in source_models[source_model].keys() -%}\n        {%- set bk_column_input = source_models[source_model]['bk_columns'] -%}\n\n        {%- if not (bk_column_input is iterable and bk_column_input is not string) -%}\n            {%- set bk_column_input = [bk_column_input] -%}\n        {%- endif -%}\n\n        {%- do source_models[source_model].update({'bk_columns': bk_column_input}) -%}\n    {%- elif not datavault4dbt.is_list(bk_column_input) -%}\n        {%- set bk_list = datavault4dbt.expand_column_list(columns=[bk_column_input]) -%}\n        {%- do source_models[source_model].update({'bk_columns': bk_list}) -%}\n    {%- else -%}{%- do source_models[source_model].update({'bk_columns': business_keys}) -%}\n    {%- endif -%}\n\n    {%- if 'rsrc_static' not in source_models[source_model].keys() -%}\n        {%- set ns.has_rsrc_static_defined = false -%}\n    {%- else -%}\n\n        {%- if not (source_models[source_model]['rsrc_static'] is iterable and source_models[source_model]['rsrc_static'] is not string) -%}\n\n            {%- if source_models[source_model]['rsrc_static'] == '' or source_models[source_model]['rsrc_static'] is none -%}\n                {%- if execute -%}\n                    {{ exceptions.raise_compiler_error(\"If rsrc_static is defined -> it must not be an empty string \") }}\n                {%- endif %}\n            {%- else -%}\n                {%- do ns.source_models_rsrc_dict.update({source_model : [source_models[source_model]['rsrc_static']] } ) -%}\n            {%- endif -%}\n\n        {%- elif source_models[source_model]['rsrc_static'] is iterable -%}\n            {%- do ns.source_models_rsrc_dict.update({source_model : source_models[source_model]['rsrc_static'] } ) -%}\n        {%- endif -%}\n\n    {%- endif -%}\n\n{%- endfor -%}\n\n{%- set final_columns_to_select = [hashkey] + business_keys + [src_ldts] + [src_rsrc] -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{% if is_incremental() -%}\n{# Get all target hashkeys out of the existing hub for later incremental logic. #}\n    distinct_target_hashkeys AS (\n\n        SELECT\n            {{ hashkey }}\n        FROM {{ this }}\n\n    ),\n    {%- if ns.has_rsrc_static_defined -%}\n        {% for source_model in source_models.keys() %}\n         {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n            {%- set source_number = loop.index | string -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_model] -%}\n\n            {%- set rsrc_static_query_source -%}\n                SELECT count(*) FROM (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT {{ this }}.{{ src_rsrc }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }}\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                )\n            {% endset %}\n\n            rsrc_static_{{ source_number }} AS (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT \n                    {{ this }}.*,\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }}\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                {%- set ns.last_cte = \"rsrc_static_{}\".format(source_number) -%}\n            ),\n            \n            {%- set source_in_target = true -%}\n            \n            {%- if execute -%}\n                {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n\n                {%- set row_count = rsrc_static_result.columns[0].values()[0] -%}\n\n                {{ log('row_count for '~source_model~' is '~row_count, false) }}\n\n                {%- if row_count == 0 -%}\n                    {%- set source_in_target = false -%}\n                {%- endif -%}\n            {%- endif -%}\n\n\n            {%- do ns.source_included_before.update({source_model: source_in_target}) -%}\n\n        {% endfor -%}\n\n        {%- if source_models.keys() | length > 1 %}\n\n        rsrc_static_union AS (\n            {#  Create one unionized table over all sources. It will be the same as the already existing\n                hub, but extended by the rsrc_static column. #}\n            {% for source_model in source_models.keys() %}\n            {%- set source_number = loop.index | string -%}\n\n            SELECT rsrc_static_{{ source_number }}.* FROM rsrc_static_{{ source_number }}\n\n            {%- if not loop.last %}\n            UNION ALL\n            {% endif -%}\n            {%- endfor %}\n            {%- set ns.last_cte = \"rsrc_static_union\" -%}\n        ),\n\n        {%- endif %}\n\n        max_ldts_per_rsrc_static_in_target AS (\n        {# Use the previously created CTE to calculate the max load date timestamp per rsrc_static. #}\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) as max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- else -%}\n        {%- if source_models.keys() | length == 1 %}\n\n            max_ldts_single_src AS (\n            {# Calculate the max load date timestamp of the whole table when there is only one source. #}\n            \n                SELECT \n                    MAX({{ src_ldts }}) as max_ldts\n                FROM {{ this }}\n                WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            ),\n        {%- endif %}\n    {%- endif %}\n{% endif -%}\n\n{% for source_model in source_models.keys() %}\n\n    {%- set source_number = loop.index | string -%}\n\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = ns.source_models_rsrc_dict[source_model] -%}\n    {%- endif -%}\n\n    {%- if 'hk_column' not in source_models[source_model].keys() %}\n        {%- set hk_column = hashkey -%}\n    {%- else -%}\n        {%- set hk_column = source_models[source_model]['hk_column'] -%}\n    {% endif %}\n\n    src_new_{{ source_number }} AS (\n\n        SELECT\n            {{ hk_column }} AS {{ hashkey }},\n            {% for bk in source_models[source_model]['bk_columns'] -%}\n            {{ bk }},\n            {% endfor -%}\n\n            {{ src_ldts }},\n            {{ src_rsrc }}\n        FROM {{ ref(source_model) }} src\n\n    {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_model] %}\n        INNER JOIN max_ldts_per_rsrc_static_in_target max ON\n        ({%- for rsrc_static in rsrc_statics -%}\n            max.rsrc_static = '{{ rsrc_static }}'\n            {%- if not loop.last -%} OR\n            {% endif -%}\n        {%- endfor %})\n        WHERE src.{{ src_ldts }} > max.max_ldts\n    {%- elif is_incremental() and source_models.keys() | length == 1 and not ns.has_rsrc_static_defined %}\n        WHERE src.{{ src_ldts }} > (SELECT max.max_ldts FROM max_ldts_single_src max)\n    {%- endif %}\n\n         {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n    ),\n{%- endfor -%}\n\n{%- if source_models.keys() | length > 1 %}\n\nsource_new_union AS (\n\n    {%- for source_model in source_models.keys() -%}\n\n    {%- set source_number = loop.index | string -%}\n\n    SELECT\n        {{ hashkey }},\n\n        {% for bk in source_models[source_model]['bk_columns'] -%}\n            {{ bk }} AS {{ business_keys[loop.index - 1] }},\n        {% endfor -%}\n\n        {{ src_ldts }},\n        {{ src_rsrc }}\n    FROM src_new_{{ source_number }}\n\n    {%- if not loop.last %}\n    UNION ALL\n    {% endif -%}\n\n    {%- endfor -%}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif %}\n\nearliest_hk_over_all_sources AS (\n\n    {#- Deduplicate the unionized records again to only insert the earliest one. #}\n    SELECT\n        lcte.*\n    FROM {{ ns.last_cte }} AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY {{ hashkey }} ORDER BY {{ src_ldts }}) = 1\n\n    {%- set ns.last_cte = 'earliest_hk_over_all_sources' -%}\n\n),\n\nrecords_to_insert AS (\n    {#- Select everything from the previous CTE, if incremental filter for hashkeys that are not already in the hub. #}\n    SELECT\n        {{ datavault4dbt.print_list(final_columns_to_select) }}\n    FROM {{ ns.last_cte }}\n\n    {%- if is_incremental() %}\n    WHERE {{ hashkey }} NOT IN (SELECT * FROM distinct_target_hashkeys)\n    {% endif -%}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.is_list", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.070858, "supported_languages": null}, "macro.datavault4dbt.exasol__link": {"name": "exasol__link", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/exasol/link.sql", "original_file_path": "macros/tables/exasol/link.sql", "unique_id": "macro.datavault4dbt.exasol__link", "macro_sql": "{%- macro exasol__link(link_hashkey, foreign_hashkeys, source_models, src_ldts, src_rsrc) -%}\n\n{%- if not (foreign_hashkeys is iterable and foreign_hashkeys is not string) -%}\n\n    {%- if execute -%}\n        {{ exceptions.raise_compiler_error(\"Only one foreign key provided for this link. At least two required.\") }}\n    {%- endif %}\n\n{%- endif -%}\n\n{%- set ns = namespace(last_cte= \"\", source_included_before = {}, has_rsrc_static_defined=true, source_models_rsrc_dict={}) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{# If no specific link_hk and fk_columns are defined for each source, we apply the values set in the link_hashkey and foreign_hashkeys variable. #}\n{# If no rsrc_static parameter is defined in ANY of the source models then the whole code block of record_source performance lookup is not executed  #}\n{# For the use of record_source performance lookup it is required that every source model has the parameter rsrc_static defined and it cannot be an empty string #}\n{%- if source_models is not mapping -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- for source_model in source_models.keys() %}\n\n    {%- if 'fk_columns' not in source_models[source_model].keys() -%}\n\n        {%- do source_models[source_model].update({'fk_columns': foreign_hashkeys}) -%}\n\n    {%- endif -%}\n\n    {%- if 'link_hk' not in source_models[source_model].keys() -%}\n\n        {%- do source_models[source_model].update({'link_hk': link_hashkey}) -%}\n\n    {%- endif -%}\n\n    {%- if 'rsrc_static' not in source_models[source_model].keys() -%}\n\n        {%- set ns.has_rsrc_static_defined = false -%}\n\n    {%- else -%}\n\n        {%- if not (source_models[source_model]['rsrc_static'] is iterable and source_models[source_model]['rsrc_static'] is not string) -%}\n\n            {%- if source_models[source_model]['rsrc_static'] == '' or source_models[source_model]['rsrc_static'] is none -%}\n\n                {%- if execute -%}\n                    {{ exceptions.raise_compiler_error(\"If rsrc_static is defined -> it must not be an empty string \") }}\n                {%- endif %}\n\n            {%- else -%}\n                {%- do ns.source_models_rsrc_dict.update({source_model : [source_models[source_model]['rsrc_static']] } ) -%}\n            {%- endif -%}\n\n        {%- elif source_models[source_model]['rsrc_static'] is iterable -%}\n            {%- do ns.source_models_rsrc_dict.update({source_model : source_models[source_model]['rsrc_static'] } ) -%}\n        {%- endif -%}\n\n    {%- endif -%}\n\n{% endfor %}\n\n{%- set final_columns_to_select = [link_hashkey] + foreign_hashkeys + [src_ldts] + [src_rsrc] -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{% if is_incremental() %}\n{# Get all link hashkeys out of the existing link for later incremental logic. #}\n    distinct_target_hashkeys AS (\n        \n        SELECT\n        {{ link_hashkey }}\n        FROM {{ this }}\n\n    ),\n    {%- if ns.has_rsrc_static_defined -%}\n        {% for source_model in source_models.keys() %}\n        {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n\n            {%- set source_number = loop.index | string -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_model] -%}\n\n            {%- set rsrc_static_query_source -%}\n                SELECT count(*) FROM (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT {{ this }}.{{ src_rsrc }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }}\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                )\n            {% endset %}\n\n            rsrc_static_{{ source_number }} AS (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT {{ this }}.*,\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }}\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                {%- set ns.last_cte = \"rsrc_static_{}\".format(source_number) -%}\n            ),\n\n            {%- set source_in_target = true -%}\n            \n            {%- if execute -%}\n                {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n\n                {%- set row_count = rsrc_static_result.columns[0].values()[0] -%}\n\n                {{ log('row_count for '~source_model~' is '~row_count, false) }}\n\n                {%- if row_count == 0 -%}\n                    {%- set source_in_target = false -%}\n                {%- endif -%}\n            {%- endif -%}\n\n            {%- do ns.source_included_before.update({source_model: source_in_target}) -%}\n\n        {% endfor -%}\n\n        {%- if source_models.keys() | length > 1 %}\n\n        rsrc_static_union AS (\n            {#  Create one unionized table over all sources. It will be the same as the already existing\n                link, but extended by the rsrc_static column. #}\n\n            {% for source_model in source_models.keys() %}\n            {%- set source_number = loop.index | string -%}\n\n            SELECT rsrc_static_{{ source_number }}.* FROM rsrc_static_{{ source_number }}\n\n            {%- if not loop.last %}\n            UNION ALL\n            {% endif -%}\n            {%- endfor %}\n            {%- set ns.last_cte = \"rsrc_static_union\" -%}\n        ),\n\n        {%- endif %}\n\n        max_ldts_per_rsrc_static_in_target AS (\n        {# Use the previously created CTE to calculate the max load date timestamp per rsrc_static. #}\n\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) as max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- else -%}\n        {%- if source_models.keys() | length == 1 %}\n\n            max_ldts_single_src AS (\n            {# Calculate the max load date timestamp of the whole table when there is only one source. #}\n            \n                SELECT \n                    MAX({{ src_ldts }}) as max_ldts\n                FROM {{ this }}\n                WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            ),\n        {%- endif %}\n    {%- endif %}\n{% endif -%}\n\n{% for source_model in source_models.keys() %}\n{#  Select all deduplicated records from each source, and filter for records that are newer\n    than the max ldts inside the existing link, if incremental. #}\n\n    {%- set source_number = loop.index | string -%}\n\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = ns.source_models_rsrc_dict[source_model] -%}\n    {%- endif -%}\n\n    {{ log('rsrc_static defined: ' ~ ns.has_rsrc_static_defined , false) }}\n    {{ log('source_included_before: ' ~ ns.source_included_before[source_model|string] , false) }}\n\n    src_new_{{ source_number }} AS (\n\n        SELECT\n            {{ source_models[source_model]['link_hk'] }} AS {{ link_hashkey }},\n            {% for fk in source_models[source_model]['fk_columns']|list -%}\n            {{ fk }},\n            {% endfor -%}\n            {{ src_ldts }},\n            {{ src_rsrc }}\n        FROM {{ ref(source_model|string) }} src\n\n    {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_model|string] %}\n        INNER JOIN max_ldts_per_rsrc_static_in_target max ON\n        ({%- for rsrc_static in rsrc_statics -%}\n            max.rsrc_static = '{{ rsrc_static }}'\n            {%- if not loop.last -%} OR\n            {% endif -%}\n        {%- endfor %})\n        WHERE src.{{ src_ldts }} > max.max_ldts\n    {%- elif is_incremental() and source_models.keys() | length == 1 and not ns.has_rsrc_static_defined %}\n        WHERE src.{{ src_ldts }} > (SELECT max.max_ldts FROM max_ldts_single_src max)\n    {%- endif %}\n\n        {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n    ),\n{%- endfor -%}\n\n{%- if source_models.keys() | length > 1 %}\n\nsource_new_union AS (\n{# Unionize the new records from all sources. #}\n\n    {%- for source_model in source_models.keys() -%}\n\n    {%- set source_number = loop.index | string -%}\n\n    SELECT\n        {{ link_hashkey }},\n        {% for fk in source_models[source_model]['fk_columns']|list %}\n            {{ fk }} AS {{ foreign_hashkeys[loop.index - 1] }},\n        {% endfor -%}\n        {{ src_ldts }},\n        {{ src_rsrc }}\n    FROM src_new_{{ source_number }}\n\n    {%- if not loop.last %}\n    UNION ALL\n    {% endif -%}\n\n    {%- endfor -%}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif %}\n\nearliest_hk_over_all_sources AS (\n    {# Deduplicate the unionized records again to only insert the earliest one. #}\n\n    SELECT\n        lcte.*\n    FROM {{ ns.last_cte }} AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY {{ link_hashkey }} ORDER BY {{ src_ldts }}) = 1\n\n    {%- set ns.last_cte = 'earliest_hk_over_all_sources' -%}\n\n),\n\nrecords_to_insert AS (\n    {# Select everything from the previous CTE, if incremental filter for hashkeys that are not already in the link. #}\n\n    SELECT\n        {{ datavault4dbt.print_list(final_columns_to_select) | indent(4) }}\n    FROM {{ ns.last_cte }}\n\n    {%- if is_incremental() %}\n    WHERE {{ link_hashkey }} NOT IN (SELECT * FROM distinct_target_hashkeys)\n    {% endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.076201, "supported_languages": null}, "macro.datavault4dbt.exasol__ref_hub": {"name": "exasol__ref_hub", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/exasol/ref_hub.sql", "original_file_path": "macros/tables/exasol/ref_hub.sql", "unique_id": "macro.datavault4dbt.exasol__ref_hub", "macro_sql": "{%- macro exasol__ref_hub(ref_keys, src_ldts, src_rsrc, source_models) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set ns = namespace(last_cte= \"\", source_included_before = {}, has_rsrc_static_defined=true, source_models_rsrc_dict={}) -%}\n\n{%- set ref_keys = datavault4dbt.expand_column_list(columns=[ref_keys]) -%}\n\n{# If no specific ref_keys is defined for each source, we apply the values set in the ref_keys variable. #}\n{# If no rsrc_static parameter is defined in ANY of the source models then the whole code block of record_source performance lookup is not executed  #}\n{# For the use of record_source performance lookup it is required that every source model has the parameter rsrc_static defined and it cannot be an empty string #}\n{%- if source_models is not mapping and not datavault4dbt.is_list(source_models) -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- set source_model_values = fromjson(datavault4dbt.source_model_processing(source_models=source_models, parameters={'test':'test'}, reference_keys=ref_keys)) -%}\n{%- set source_models = source_model_values['source_model_list'] -%}\n{%- set ns.has_rsrc_static_defined = source_model_values['has_rsrc_static_defined'] -%}\n{%- set ns.source_models_rsrc_dict = source_model_values['source_models_rsrc_dict'] -%}\n{{ log('source_models: '~source_models, false) }}\n\n{%- set final_columns_to_select = ref_keys + [src_ldts] + [src_rsrc] -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{% if is_incremental() -%}\n{# Get all target ref_keys out of the existing ref_table for later incremental logic. #}\n    distinct_target_ref_keys AS (\n\n        SELECT\n            {{ datavault4dbt.concat_ws(ref_keys) }} as c\n        FROM {{ this }}\n\n    ),\n    {%- if ns.has_rsrc_static_defined -%}\n        {% for source_model in source_models %}\n         {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n            {%- set source_number = source_model.id | string -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number] -%}\n\n            {{log('rsrc_statics: '~ rsrc_statics, false) }}\n\n            {%- set rsrc_static_query_source -%}\n                SELECT count(*) FROM (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.{{ src_rsrc }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                )\n            {% endset %}\n\n            rsrc_static_{{ source_number }} AS (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT \n                    t.{{ src_ldts }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} LIKE '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                {%- set ns.last_cte = \"rsrc_static_{}\".format(source_number) -%}\n            ),\n\n            {%- set source_in_target = true -%}\n\n            {%- if execute -%}\n                {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n\n                {%- set row_count = rsrc_static_result.columns[0].values()[0] -%}\n\n                {{ log('row_count for '~source_model~' is '~row_count, false) }}\n\n                {%- if row_count == 0 -%}\n                {%- set source_in_target = false -%}\n                {%- endif -%}\n            {%- endif -%}\n\n\n            {%- do ns.source_included_before.update({source_model.id: source_in_target}) -%}\n\n        {% endfor -%}\n\n        {%- if source_models | length > 1 %}\n\n        rsrc_static_union AS (\n            {#  Create one unionized table over all sources. It will be the same as the already existing\n                hub, but extended by the rsrc_static column. #}\n            {% for source_model in source_models %}\n            {%- set source_number = source_model.id | string -%}\n\n            SELECT rsrc_static_{{ source_number }}.* FROM rsrc_static_{{ source_number }}\n\n            {%- if not loop.last %}\n            UNION ALL\n            {% endif -%}\n            {%- endfor %}\n            {%- set ns.last_cte = \"rsrc_static_union\" -%}\n        ),\n\n        {%- endif %}\n\n        max_ldts_per_rsrc_static_in_target AS (\n        {# Use the previously created CTE to calculate the max load date timestamp per rsrc_static. #}\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) as max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif %}\n{% endif -%}\n\n{% for source_model in source_models %}\n\n    {%- set source_number = source_model.id | string -%}\n\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = ns.source_models_rsrc_dict.id -%}\n    {%- endif -%}\n\n\n    src_new_{{ source_number }} AS (\n\n        SELECT\n            {% for ref_key in source_model['ref_keys'] -%}\n            {{ ref_key}},\n            {% endfor -%}\n\n            {{ src_ldts }},\n            {{ src_rsrc }}\n        FROM {{ ref(source_model.name) }} src\n\n    {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_number] %}\n        INNER JOIN max_ldts_per_rsrc_static_in_target max ON\n        ({%- for rsrc_static in rsrc_statics -%}\n            max.rsrc_static = '{{ rsrc_static }}'\n            {%- if not loop.last -%} OR\n            {% endif -%}\n        {%- endfor %})\n        WHERE src.{{ src_ldts }} > max.max_ldts\n    {%- endif %}\n\n         {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n    ),\n{%- endfor -%}\n\n{%- if source_models | length > 1 %}\n\nsource_new_union AS (\n\n    {%- for source_model in source_models -%}\n\n    {%- set source_number = source_model.id | string -%}\n\n    SELECT\n        {% for ref_key in source_model['ref_keys'] -%}\n            {{ ref_key }} AS {{ ref_keys[loop.index - 1] }},\n        {% endfor -%}\n\n        {{ src_ldts }},\n        {{ src_rsrc }}\n    FROM src_new_{{ source_number }}\n\n    {%- if not loop.last %}\n    UNION ALL\n    {% endif -%}\n\n    {%- endfor -%}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif %}\n\nearliest_ref_key_over_all_sources AS (\n\n    {#- Deduplicate the unionized records to only insert the earliest one. #}\n    SELECT\n        lcte.*\n    FROM {{ ns.last_cte }} AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY {%- for ref_key in ref_keys %} {{ref_key}} {%- if not loop.last %}, {% endif %}{% endfor %} ORDER BY {{ src_ldts }}) = 1\n\n    {%- set ns.last_cte = 'earliest_ref_key_over_all_sources' -%}\n\n),\n\nrecords_to_insert AS (\n    {#- Select everything from the previous CTE, if incremental filter for hashkeys that are not already in the hub. #}\n    SELECT\n        {{ datavault4dbt.print_list(final_columns_to_select) }}\n    FROM {{ ns.last_cte }}\n\n    {%- if is_incremental() %}\n    WHERE {{ datavault4dbt.concat_ws(ref_keys) }} NOT IN (SELECT * FROM distinct_target_ref_keys)\n    {% endif -%}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.is_list", "macro.datavault4dbt.source_model_processing", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.datavault4dbt.concat_ws", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.080163, "supported_languages": null}, "macro.datavault4dbt.exasol__nh_sat": {"name": "exasol__nh_sat", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/exasol/nh_sat.sql", "original_file_path": "macros/tables/exasol/nh_sat.sql", "unique_id": "macro.datavault4dbt.exasol__nh_sat", "macro_sql": "{%- macro exasol__nh_sat(parent_hashkey, src_payload, src_ldts, src_rsrc, source_model, source_is_single_batch) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set source_cols = datavault4dbt.expand_column_list(columns=[parent_hashkey, src_ldts, src_rsrc, src_payload]) -%}\n\n{%- set source_relation = ref(source_model) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Selecting all source data, that is newer than latest data in sat if incremental #}\nsource_data AS (\n\n    SELECT\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM {{ source_relation }}\n\n    {%- if is_incremental() %}\n    WHERE {{ src_ldts }} > (\n        SELECT\n            MAX({{ src_ldts }}) FROM {{ this }}\n        WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    )\n    {%- endif %}\n    \n    {% if not source_is_single_batch -%}\n\n    QUALIFY\n        ROW_NUMBER() OVER (PARTITION BY {{ parent_hashkey }} ORDER BY {{ src_ldts }}) = 1\n\n    {%- endif %}        \n\n),\n\n{% if is_incremental() -%}\n{# Get distinct list of hashkeys inside the existing satellite, if incremental. #}\ndistinct_hashkeys AS (\n\n    SELECT DISTINCT\n        {{ parent_hashkey }}\n    FROM {{ this }}\n\n    ),\n\n{%- endif %}\n\n{#\n    Select all records from the source. If incremental, insert only records, where the\n    hashkey is not already in the existing satellite.\n#}\nrecords_to_insert AS (\n\n    SELECT\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM source_data\n    {%- if is_incremental() %}\n    WHERE {{ parent_hashkey }} NOT IN (SELECT * FROM distinct_hashkeys)\n    {%- endif %}\n\n    )\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.print_list", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.0810938, "supported_languages": null}, "macro.datavault4dbt.exasol__ma_sat_v1": {"name": "exasol__ma_sat_v1", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/exasol/ma_sat_v1.sql", "original_file_path": "macros/tables/exasol/ma_sat_v1.sql", "unique_id": "macro.datavault4dbt.exasol__ma_sat_v1", "macro_sql": "{%- macro exasol__ma_sat_v1(sat_v0, hashkey, hashdiff, ma_attribute, src_ldts, src_rsrc, ledts_alias, add_is_current_flag) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set is_current_col_alias = var('datavault4dbt.is_current_col_alias', 'IS_CURRENT') -%}\n\n{%- set source_relation = ref(sat_v0) -%}\n{%- set all_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n{%- set exclude = datavault4dbt.expand_column_list(columns=[hashkey, hashdiff, ma_attribute, src_ldts, src_rsrc]) -%}\n{%- set ma_attributes = datavault4dbt.expand_column_list(columns=[ma_attribute]) -%}\n\n\n{%- set source_columns_to_select = datavault4dbt.process_columns_to_select(all_columns, exclude) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Getting everything from the underlying v0 satellite. #}\nsource_satellite AS (\n\n    SELECT src.*\n    FROM {{ source_relation }} as src\n\n),\n\n{# Selecting all distinct loads per hashkey. #}\ndistinct_hk_ldts AS (\n\n    SELECT DISTINCT\n        {{ hashkey }},\n        {{ src_ldts }}\n    FROM source_satellite\n\n),\n\n{# End-dating each ldts for each hashkey, based on earlier ldts per hashkey. #}\nend_dated_loads AS (\n\n    SELECT\n        {{ hashkey }},\n        {{ src_ldts }},\n        COALESCE(LEAD(ADD_SECONDS({{ src_ldts }}, -0.001)) OVER (PARTITION BY {{ hashkey }} ORDER BY {{ src_ldts }}),{{ datavault4dbt.string_to_timestamp( timestamp_format , end_of_all_times) }}) as {{ ledts_alias }}\n    FROM distinct_hk_ldts\n\n),\n\n{# End-date each source record, based on the end-date for each load. #}\nend_dated_source AS (\n\n    SELECT\n        src.{{ hashkey }},\n        src.{{ hashdiff }},\n        src.{{ src_rsrc }},\n        src.{{ src_ldts }},\n        edl.{{ ledts_alias }},\n        {%- if add_is_current_flag %}\n            CASE WHEN {{ ledts_alias }} = {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            THEN TRUE\n            ELSE FALSE\n            END AS {{ is_current_col_alias }},\n        {% endif %}\n        {{- datavault4dbt.print_list(ma_attributes, indent=10, src_alias='src') }},\n        {{- datavault4dbt.print_list(source_columns_to_select, indent=10, src_alias='src') }}\n    FROM source_satellite AS src\n    LEFT JOIN end_dated_loads edl\n        ON src.{{ hashkey }} = edl.{{ hashkey }}\n        AND src.{{ src_ldts }} = edl.{{ src_ldts }}\n\n)\n\nSELECT * FROM end_dated_source\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.source_columns", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.082377, "supported_languages": null}, "macro.datavault4dbt.exasol__ma_sat_v0": {"name": "exasol__ma_sat_v0", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/exasol/ma_sat_v0.sql", "original_file_path": "macros/tables/exasol/ma_sat_v0.sql", "unique_id": "macro.datavault4dbt.exasol__ma_sat_v0", "macro_sql": "{%- macro exasol__ma_sat_v0(parent_hashkey, src_hashdiff, src_ma_key, src_payload, src_ldts, src_rsrc, source_model) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set ns=namespace(src_hashdiff=\"\", hdiff_alias=\"\") %}\n{%- if  src_hashdiff is mapping and src_hashdiff is not none -%}\n    {% set ns.src_hashdiff = src_hashdiff[\"source_column\"] %}\n    {% set ns.hdiff_alias = src_hashdiff[\"alias\"] %}\n{% else %}\n    {% set ns.src_hashdiff = src_hashdiff %}\n    {% set ns.hdiff_alias = src_hashdiff  %}\n{%- endif -%}\n\n{%- set source_cols = datavault4dbt.expand_column_list(columns=[src_rsrc, src_ldts, src_ma_key, src_payload]) -%}\n\n{%- set source_relation = ref(source_model) -%}\n\n\nWITH\n\n{# Selecting all source data, that is newer than latest data in sat if incremental #}\nsource_data AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ ns.src_hashdiff }} as {{ ns.hdiff_alias }},\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM {{ source_relation }}\n\n    {%- if is_incremental() %}\n    WHERE {{ src_ldts }} > (\n        SELECT\n            MAX({{ src_ldts }}) FROM {{ this }}\n        WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    )\n    {%- endif %}\n\n),\n\n{# Get the latest record for each parent hashkey in existing sat, if incremental. #}\n{%- if is_incremental() %}\nlatest_entries_in_sat AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ ns.hdiff_alias }}\n    FROM \n        {{ this }}\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY {{ parent_hashkey|lower }} ORDER BY {{ src_ldts }} DESC) = 1  \n),\n{%- endif %}\n\n{# Get a list of all distinct hashdiffs that exist for each parent_hashkey. #}\ndeduped_row_hashdiff AS (\n\n  SELECT \n    {{ parent_hashkey }},\n    {{ src_ldts }},\n    {{ ns.hdiff_alias }}\n  FROM source_data\n  QUALIFY CASE\n            WHEN {{ ns.hdiff_alias }} = LAG({{ ns.hdiff_alias }}) OVER (PARTITION BY {{ parent_hashkey }} ORDER BY {{ src_ldts }}) THEN FALSE\n            ELSE TRUE\n          END\n),\n\n{# Dedupe the source data regarding non-delta groups. #}\ndeduped_rows AS (\n\n  SELECT \n    source_data.{{ parent_hashkey }},\n    source_data.{{ ns.hdiff_alias }},\n    {{ datavault4dbt.alias_all(columns=source_cols, prefix='source_data') }}\n  FROM source_data\n  INNER JOIN deduped_row_hashdiff\n    ON {{ datavault4dbt.multikey(parent_hashkey, prefix=['source_data', 'deduped_row_hashdiff'], condition='=') }}\n    AND {{ datavault4dbt.multikey(src_ldts, prefix=['source_data', 'deduped_row_hashdiff'], condition='=') }}\n    AND {{ datavault4dbt.multikey(ns.hdiff_alias, prefix=['source_data', 'deduped_row_hashdiff'], condition='=') }}\n\n),\n\nrecords_to_insert AS (\n\n    SELECT\n        deduped_rows.{{ parent_hashkey }},\n        deduped_rows.{{ ns.hdiff_alias }},\n        {{ datavault4dbt.alias_all(columns=source_cols, prefix='deduped_rows') }}\n    FROM deduped_rows\n    {%- if is_incremental() %}\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE {{ datavault4dbt.multikey(parent_hashkey, prefix=['latest_entries_in_sat', 'deduped_rows'], condition='=') }}\n            AND {{ datavault4dbt.multikey(ns.hdiff_alias, prefix=['latest_entries_in_sat', 'deduped_rows'], condition='=') }} \n            )\n    {%- endif %}\n\n    )\n\n\nSELECT * FROM records_to_insert\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.print_list", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.alias_all", "macro.datavault4dbt.multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.084356, "supported_languages": null}, "macro.datavault4dbt.exasol__sat_v0": {"name": "exasol__sat_v0", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/exasol/sat_v0.sql", "original_file_path": "macros/tables/exasol/sat_v0.sql", "unique_id": "macro.datavault4dbt.exasol__sat_v0", "macro_sql": "{%- macro exasol__sat_v0(parent_hashkey, src_hashdiff, src_payload, src_ldts, src_rsrc, source_model, disable_hwm, source_is_single_batch) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set ns=namespace(src_hashdiff=\"\", hdiff_alias=\"\") %}\n\n{%- if  src_hashdiff is mapping and src_hashdiff is not none -%}\n    {% set ns.src_hashdiff = src_hashdiff[\"source_column\"] %}\n    {% set ns.hdiff_alias = src_hashdiff[\"alias\"] %}\n{% else %}\n    {% set ns.src_hashdiff = src_hashdiff %}\n    {% set ns.hdiff_alias = src_hashdiff  %}\n{%- endif -%}\n\n{%- set source_cols = datavault4dbt.expand_column_list(columns=[src_rsrc, src_ldts, src_payload]) -%}\n\n{%- set source_relation = ref(source_model) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Selecting all source data, that is newer than latest data in sat if incremental #}\nsource_data AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ ns.src_hashdiff }} as {{ ns.hdiff_alias }},\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM {{ source_relation }}\n\n    {%- if is_incremental() %}\n    WHERE {{ src_ldts }} > (\n        SELECT\n            MAX({{ src_ldts }}) FROM {{ this }}\n        WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    )\n    {%- endif %}\n),\n\n{# Get the latest record for each parent hashkey in existing sat, if incremental. #}\n{%- if is_incremental() %}\nlatest_entries_in_sat AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ ns.hdiff_alias }}\n    FROM \n        {{ this }}\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY {{ parent_hashkey|lower }} ORDER BY {{ src_ldts }} DESC) = 1  \n),\n{%- endif %}\n\n{#\n    Deduplicate source by comparing each hashdiff to the hashdiff of the previous record, for each hashkey.\n    Additionally adding a row number based on that order, if incremental.\n#}\ndeduplicated_numbered_source AS (\n\n    SELECT\n    {{ parent_hashkey }},\n    {{ ns.hdiff_alias }},\n    {{ datavault4dbt.print_list(source_cols) }}\n    {% if is_incremental() -%}\n     , ROW_NUMBER() OVER(PARTITION BY {{ parent_hashkey }} ORDER BY {{ src_ldts }}) as rn\n    {%- endif %}\n    FROM source_data\n    QUALIFY\n        CASE\n            WHEN {{ ns.hdiff_alias }} = LAG({{ ns.hdiff_alias }}) OVER(PARTITION BY {{ parent_hashkey|lower }} ORDER BY {{ src_ldts }}) THEN FALSE\n            ELSE TRUE\n        END\n),\n\n{#\n    Select all records from the previous CTE. If incremental, compare the oldest incoming entry to\n    the existing records in the satellite.\n#}\nrecords_to_insert AS (\n\n    SELECT\n    {{ parent_hashkey }},\n    {{ ns.hdiff_alias }},\n    {{ datavault4dbt.print_list(source_cols) }}\n    FROM deduplicated_numbered_source\n    {%- if is_incremental() %}\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE {{ datavault4dbt.multikey(parent_hashkey, prefix=['latest_entries_in_sat', 'deduplicated_numbered_source'], condition='=') }}\n            AND {{ datavault4dbt.multikey(ns.hdiff_alias, prefix=['latest_entries_in_sat', 'deduplicated_numbered_source'], condition='=') }}\n            AND deduplicated_numbered_source.rn = 1)\n    {%- endif %}\n\n    )\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.print_list", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.086088, "supported_languages": null}, "macro.datavault4dbt.exasol__rec_track_sat": {"name": "exasol__rec_track_sat", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/exasol/rec_track_sat.sql", "original_file_path": "macros/tables/exasol/rec_track_sat.sql", "unique_id": "macro.datavault4dbt.exasol__rec_track_sat", "macro_sql": "{%- macro exasol__rec_track_sat(tracked_hashkey, source_models, src_ldts, src_rsrc, src_stg) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{# Setting the unknown and error ghost record value for record source column #}\n{%- set rsrc_unknown = var('datavault4dbt.default_unknown_rsrc', 'SYSTEM') -%}\n{%- set rsrc_error = var('datavault4dbt.default_error_rsrc', 'ERROR') -%}\n\n{# Setting the rsrc and stg_alias default datatype and length #}\n{%- set rsrc_default_dtype = var('datavault4dbt.rsrc_default_dtype', 'VARCHAR (2000000) UTF8') -%}\n{%- set stg_default_dtype = var('datavault4dbt.stg_default_dtype', 'VARCHAR (200) UTF8') -%}\n{%- set ns = namespace(last_cte = '', source_included_before = {},  source_models_rsrc_dict={},  has_rsrc_static_defined=true) -%}\n\n{%- if source_models is not mapping -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n\n{# If no specific hk_column is defined for each source, we apply the values set in the tracked_hashkey input variable. #}\n{# If no rsrc_static parameter is defined in a source model then the record source performance look up wont be executed  #}\n{%- for source_model in source_models.keys() %}\n\n    {%- if 'hk_column' not in source_models[source_model].keys() -%}\n        {%- do source_models[source_model].update({'hk_column': tracked_hashkey}) -%}\n    {%- endif -%}\n\n    {%- if 'rsrc_static' not in source_models[source_model].keys() -%}\n        {%- set ns.has_rsrc_static_defined = false -%}\n    {%- else -%}\n\n        {%- if not (source_models[source_model]['rsrc_static'] is iterable and source_models[source_model]['rsrc_static'] is not string) -%}\n\n            {%- if source_models[source_model]['rsrc_static'] == '' or source_models[source_model]['rsrc_static'] is none -%}\n                {%- if execute -%}\n                    {{ exceptions.raise_compiler_error(\"If rsrc_static is defined -> it must not be an empty string \") }}\n                {%- endif %}\n            {%- else -%}\n                {%- do ns.source_models_rsrc_dict.update({source_model : [source_models[source_model]['rsrc_static']] } ) -%}\n            {%- endif -%}\n\n        {%- elif source_models[source_model]['rsrc_static'] is iterable -%}\n            {%- do ns.source_models_rsrc_dict.update({source_model : source_models[source_model]['rsrc_static'] } ) -%}\n        {%- endif -%}\n\n    {%- endif -%}\n\n{% endfor %}\n\n{%- set final_columns_to_select = [tracked_hashkey] + [src_ldts] + [src_rsrc] + [src_stg] -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{% if is_incremental() %}\n\n    distinct_concated_target AS (\n        {%- set concat_columns = [tracked_hashkey, src_ldts, src_rsrc] -%}\n        {{ \"\\n\" }}\n        SELECT\n        {{ datavault4dbt.concat_ws(concat_columns) }} as concat\n        FROM {{ this }}\n    ),\n    {%- if ns.has_rsrc_static_defined -%}\n        rsrc_static_unionized AS (\n        {% for source_model in source_models.keys() %}\n        {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n            {%- set source_number = loop.index | string -%}\n            {%- set hk_column = source_models[source_model]['hk_column'] -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_model] -%}\n\n            {%- set rsrc_static_query_source_count -%}\n                SELECT count(*) FROM (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT \n                    {{ tracked_hashkey }},\n                    {{ src_ldts }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }}\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %} \n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                )\n            {% endset %}\n\n            {%- set rsrc_static_query_source -%}\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT \n                    {{ tracked_hashkey }},\n                    {{ src_ldts }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }}\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %} \n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n            {% endset %}\n\n            {{ rsrc_static_query_source }}  \n\n            {%- set source_in_target = true -%}\n            \n            {%- if execute -%}\n                {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n\n                {%- set row_count = rsrc_static_result.columns[0].values()[0] -%}\n\n                {{ log('row_count for '~source_model~' is '~row_count, false) }}\n\n                {%- if row_count == 0 -%}\n                    {%- set source_in_target = false -%}\n                {%- endif -%}\n            {%- endif -%}\n\n            {%- do ns.source_included_before.update({source_model: source_in_target}) -%}\n            {# Unionize over all sources #}\n            {%- if not loop.last %}\n                UNION ALL \n            {% endif -%}\n\n        {% endfor -%}\n        {%- set ns.last_cte = \"rsrc_static_unionized\" -%}\n        ),\n\n        max_ldts_per_rsrc_static_in_target AS (\n\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) as max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- else -%}\n        {%- if source_models.keys() | length == 1 %}\n\n            max_ldts_single_src AS (\n            {# Calculate the max load date timestamp of the whole table when there is only one source. #}\n            \n                SELECT \n                    MAX({{ src_ldts }}) as max_ldts\n                FROM {{ this }}\n                WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            ),\n        {%- endif %}\n    {%- endif %}\n{% endif -%}\n\n{#\n    We deduplicate each source over hashkey + ldts + rsrc_static and if is_incremental only select the rows, where the ldts is later\n    than the latest one in the existing satellite for that rsrc_static. If a source is added to the existing satellite, all deduplicated\n    rows from that source are loaded into the satellite.\n#}\n\n{%- for source_model in source_models.keys() %}\n\n    {%- set source_number = loop.index | string -%}\n    {%- set hk_column = source_models[source_model]['hk_column'] -%}\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = ns.source_models_rsrc_dict[source_model] -%}\n\n        src_new_{{ source_number }} AS (\n        {%- for rsrc_static in rsrc_statics %}\n            SELECT DISTINCT\n                {{ hk_column }} AS {{ tracked_hashkey }},\n                {{ src_ldts }},\n                CAST('{{ rsrc_static }}' AS {{ rsrc_default_dtype }} ) AS {{ src_rsrc }},\n                CAST(UPPER('{{ source_model }}') AS {{ stg_default_dtype }})  AS {{ src_stg }}\n            FROM {{ ref(source_model) }} src\n\n\n            {%- if is_incremental() and ns.source_included_before[source_model] %}\n                INNER JOIN max_ldts_per_rsrc_static_in_target max\n                    ON max.rsrc_static = '{{ rsrc_static }}'\n                WHERE src.{{ src_ldts }} > max.max_ldts\n            {%- endif %}\n\n            {%- if not loop.last %}\n                UNION ALL\n            {% endif -%}\n        {% endfor %}\n\n        ),\n    {%- else -%}\n        src_new_{{ source_number}} AS (\n            SELECT DISTINCT\n                {{ hk_column }} AS {{ tracked_hashkey }},\n                {{ src_ldts }},\n                CAST({{ src_rsrc }} AS {{ rsrc_default_dtype }}) AS {{ src_rsrc }},\n                CAST(UPPER('{{ source_model }}') AS {{ stg_default_dtype }}) AS {{ src_stg }}\n            FROM {{ ref(source_model) }} src\n            {%- if is_incremental() and source_models.keys() | length == 1 %}\n                WHERE src.{{ src_ldts }} > (SELECT max.max_ldts FROM max_ldts_single_src max)\n            {%- endif %}\n        ),\n    {%- endif -%}\n\n    {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n{% endfor %}\n\n{#\n    If more than one source model is selected, all previously created deduplicated CTEs are unionized.\n#}\n\n{%- if source_models.keys() | length > 1 %}\n\nsource_new_union AS (\n    {% for source_model in source_models.keys() %}\n        {%- set hk_column = source_models[source_model]['hk_column'] -%}\n        {%- set source_number = loop.index | string -%}\n\n        SELECT\n        {{ tracked_hashkey }},\n        {{ src_ldts }},\n        {{ src_rsrc }},\n        {{ src_stg }}\n        FROM src_new_{{ source_number }}\n\n        {%- if not loop.last %}\n        UNION ALL\n        {% endif -%}\n\n    {% endfor %}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif -%}\n\n{#\n    Selecting everything, either from the unionized data, or from the single CTE (if single source). Checking against the existing\n    satellite to only inserts that are not already inserted, if incremental run.\n#}\n\nrecords_to_insert AS (\n\n    SELECT\n    {{ datavault4dbt.print_list(final_columns_to_select) }}\n    FROM {{ ns.last_cte }}\n    WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }} \n    AND {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }}\n    {%- if is_incremental() %}\n        AND {{ datavault4dbt.concat_ws(concat_columns) }} NOT IN (SELECT * FROM distinct_concated_target)\n    {% endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.datavault4dbt.concat_ws", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.091372, "supported_languages": null}, "macro.datavault4dbt.exasol__sat_v1": {"name": "exasol__sat_v1", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/exasol/sat_v1.sql", "original_file_path": "macros/tables/exasol/sat_v1.sql", "unique_id": "macro.datavault4dbt.exasol__sat_v1", "macro_sql": "{%- macro exasol__sat_v1(sat_v0, hashkey, hashdiff, src_ldts, src_rsrc, ledts_alias, add_is_current_flag, include_payload) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set is_current_col_alias = var('datavault4dbt.is_current_col_alias', 'IS_CURRENT') -%}\n\n{%- set source_relation = ref(sat_v0) -%}\n\n{%- set all_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n{%- set exclude = [hashkey, hashdiff, src_ldts, src_rsrc] -%}\n\n{%- set source_columns_to_select = datavault4dbt.process_columns_to_select(all_columns, exclude) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Calculate ledts based on the ldts of the earlier record. #}\nend_dated_source AS (\n\n    SELECT\n        {{ hashkey }},\n        {{ hashdiff }},\n        {{ src_rsrc }},\n        {{ src_ldts }},\n        COALESCE(LEAD(ADD_SECONDS({{ src_ldts }}, -0.001)) OVER (PARTITION BY {{ hashkey }} ORDER BY {{ src_ldts }}),{{ datavault4dbt.string_to_timestamp( timestamp_format , end_of_all_times) }}) as {{ ledts_alias }}\n        {%- if include_payload -%},\n            {{ datavault4dbt.print_list(source_columns_to_select) }}\n        {%- endif %}\n    FROM {{ source_relation }}\n\n)\n\nSELECT\n    {{ hashkey }},\n    {{ hashdiff }},\n    {{ src_rsrc }},\n    {{ src_ldts }},\n    {{ ledts_alias }},\n    {%- if add_is_current_flag %}\n        CASE WHEN {{ ledts_alias }} = {{ datavault4dbt.string_to_timestamp( timestamp_format , end_of_all_times) }}\n        THEN TRUE\n        ELSE FALSE\n        END AS {{ is_current_col_alias }}\n    {% endif -%}\n    {%- if include_payload -%},\n        {{ datavault4dbt.print_list(source_columns_to_select) }}\n    {%- endif %}\nFROM end_dated_source\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.source_columns", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.0924768, "supported_languages": null}, "macro.datavault4dbt.redshift__control_snap_v0": {"name": "redshift__control_snap_v0", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/redshift/control_snap_v0.sql", "original_file_path": "macros/tables/redshift/control_snap_v0.sql", "unique_id": "macro.datavault4dbt.redshift__control_snap_v0", "macro_sql": "{%- macro redshift__control_snap_v0(start_date, daily_snapshot_time, sdts_alias) -%}\n\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- if not datavault4dbt.is_something(sdts_alias) -%}\n    {%- set sdts_alias = var('datavault4dbt.sdts_alias', 'sdts') -%}\n{%- endif -%}\n\nwith recursive generate_dates({{ sdts_alias }}) as (\n\tSelect to_timestamp('{{ start_date }} {{ daily_snapshot_time }}', '{{ timestamp_format }}') as {{ sdts_alias }}\n  \tunion all\n  \tselect {{ sdts_alias }} + 1\n  \tfrom generate_dates\n  \twhere {{ sdts_alias }} < current_date\n),\n\ninitial_timestamps AS (\n    \n    SELECT\n        {{ sdts_alias }}\n    FROM \n        generate_dates\n    {%- if is_incremental() %}\n    WHERE\n        {{ sdts_alias }} > (SELECT MAX({{ sdts_alias }}) FROM {{ this }})\n    {%- endif %}\n\n),\n\nenriched_timestamps AS (\n\n    SELECT\n        sdts as {{ sdts_alias }},\n        TRUE as force_active,\n        sdts as replacement_sdts,\n        CONCAT('Snapshot ', DATE(sdts)) as caption,\n        CASE\n            WHEN EXTRACT(m FROM sdts) = 0 AND EXTRACT(s FROM sdts) = 0 THEN TRUE\n            ELSE FALSE\n        END as is_hourly,\n        CASE\n            WHEN EXTRACT(m FROM sdts) = 0 AND EXTRACT(s FROM sdts) = 0 AND EXTRACT(h FROM sdts) = 0 THEN TRUE\n            ELSE FALSE\n        END as is_daily,\n        CASE\n            WHEN EXTRACT(dayofweek FROM  sdts) = 1 THEN TRUE\n            ELSE FALSE\n        END as is_weekly,\n        CASE\n            WHEN EXTRACT(d FROM sdts) = 1 THEN TRUE\n            ELSE FALSE\n        END as is_monthly,\n        CASE\n            WHEN EXTRACT(d FROM sdts) = 1 AND EXTRACT(mon FROM sdts) = 1 THEN TRUE\n            ELSE FALSE\n        END as is_yearly,\n        NULL as comment\n    FROM initial_timestamps\n\n)\n\nSELECT * FROM enriched_timestamps\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.is_something", "macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.093065, "supported_languages": null}, "macro.datavault4dbt.redshift__control_snap_v1": {"name": "redshift__control_snap_v1", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/redshift/control_snap_v1.sql", "original_file_path": "macros/tables/redshift/control_snap_v1.sql", "unique_id": "macro.datavault4dbt.redshift__control_snap_v1", "macro_sql": "{%- macro redshift__control_snap_v1(control_snap_v0, log_logic, sdts_alias) -%}\n\n{# Sample intervals\n   {%-set log_logic = {'daily': {'duration': 3,\n                                'unit': 'mons',\n                                'forever': 'FALSE'},\n                      'weekly': {'duration': 1,\n                                 'unit': 'yr'},\n                      'monthly': {'duration': 5,\n                                  'unit': 'yr'},\n                      'yearly': {'forever': 'TRUE'} } %} \n#}\n\n{%- if log_logic is not none %}\n    {%- for interval in log_logic.keys() %}\n        {%- if 'forever' not in log_logic[interval].keys() -%}\n            {% do log_logic[interval].update({'forever': 'FALSE'}) %}\n        {%- endif -%}\n    {%- endfor -%}\n{%- endif %}\n\n{%- set v0_relation = ref(control_snap_v0) -%}\n{%- set ns = namespace(forever_status=FALSE) %}\n\n{%- set snapshot_trigger_column = var('datavault4dbt.snapshot_trigger_column', 'is_active') -%}\n\nWITH\n\nlatest_row AS (\n\n    SELECT\n        {{ sdts_alias }}\n    FROM {{ v0_relation }}\n    ORDER BY {{ sdts_alias }} DESC\n    LIMIT 1\n\n),\n\nvirtual_logic AS (\n\n    SELECT\n        c.{{ sdts_alias }},\n        c.replacement_sdts,\n        c.force_active,\n        {%- if log_logic is none %}\n        TRUE as {{ snapshot_trigger_column }},\n        {%- else %}\n        CASE\n            WHEN\n            {% if 'daily' in log_logic.keys() %}\n                {%- if log_logic['daily']['forever'] is true -%}\n                    {%- set ns.forever_status = 'TRUE' -%}\n                    (1=1)\n                {%- else %}\n\n                    {%- set daily_duration = log_logic['daily']['duration'] -%}\n                    {%- set daily_unit = log_logic['daily']['unit'] -%}\n\n                    c.{{ sdts_alias }} BETWEEN dateadd({{ daily_unit }}, -{{ daily_duration }}, GETDATE()) AND GETDATE()\n                {%- endif -%}\n            {%- endif %}\n\n            {%- if 'weekly' in log_logic.keys() %}\n            OR\n                {%- if log_logic['weekly']['forever'] is true -%}\n                    {%- set ns.forever_status = 'TRUE' -%}\n                    (c.is_weekly = TRUE)\n                {%- else %}\n\n                    {%- set weekly_duration = log_logic['weekly']['duration'] -%}\n                    {%- set weekly_unit = log_logic['weekly']['unit'] -%}\n\n                    (\n                c.{{ sdts_alias }} BETWEEN dateadd({{ weekly_unit }}, -{{ weekly_duration }}, GETDATE()) AND GETDATE()\n                AND\n                (c.is_weekly = TRUE)\n            )\n                {%- endif -%}\n            {% endif -%}\n\n            {%- if 'monthly' in log_logic.keys() %}\n            OR\n                {%- if log_logic['monthly']['forever'] is true -%}\n                    {%- set ns.forever_status = 'TRUE' -%}\n                    (c.is_monthly = TRUE)\n                {%- else %}\n\n                    {%- set monthly_duration = log_logic['monthly']['duration'] -%}\n                    {%- set monthly_unit = log_logic['monthly']['unit'] -%}\n\n                    (\n                c.{{ sdts_alias }} BETWEEN dateadd({{ monthly_unit }}, -{{ monthly_duration }}, GETDATE()) AND GETDATE()\n                AND\n                (c.is_monthly = TRUE)\n            )\n                {%- endif -%}\n            {% endif -%}\n\n            {%- if 'yearly' in log_logic.keys() %}\n            OR\n                {%- if log_logic['yearly']['forever'] is true -%}\n                    {%- set ns.forever_status = 'TRUE' -%}\n                    (c.is_yearly = TRUE)\n                {%- else %}\n\n                    {%- set yearly_duration = log_logic['yearly']['duration'] -%}\n                    {%- set yearly_unit = log_logic['yearly']['unit'] -%}\n\n                    (\n                DATE FROM c.{{ sdts_alias }} BETWEEN dateadd({{ yearly_unit }}, -{{ yearly_duration }}, GETDATE()) AND GETDATE() \n                AND\n                (c.is_yearly = TRUE)\n            )\n                {%- endif -%}\n            {% endif %}\n            THEN TRUE\n            ELSE FALSE\n\n        END AS {{ snapshot_trigger_column }},\n        {%- endif %}\n\n        CASE\n            WHEN l.{{ sdts_alias }} IS NULL THEN FALSE\n            ELSE TRUE\n        END AS is_latest,\n\n        c.caption,\n        c.is_hourly,\n        c.is_daily,\n        c.is_weekly,\n        c.is_monthly,\n        c.is_yearly,\n        CASE\n            WHEN EXTRACT(yr FROM c.{{ sdts_alias }}) = EXTRACT(yr FROM CURRENT_DATE) THEN TRUE\n            ELSE FALSE\n        END AS is_current_year,\n        CASE\n            WHEN EXTRACT(yr FROM c.{{ sdts_alias }}) = EXTRACT(yr FROM CURRENT_DATE)- '1' THEN TRUE\n            ELSE FALSE\n        END AS is_last_year,\n        CASE\n            WHEN c.{{ sdts_alias }} BETWEEN dateadd(Year, -1, GETDATE()) AND CURRENT_DATE THEN TRUE\n            ELSE FALSE\n        END AS is_rolling_year,\n        CASE\n            WHEN c.{{ sdts_alias }} BETWEEN dateadd(Year, -2, GETDATE()) AND dateadd(Year, -1, GETDATE()) THEN TRUE\n            ELSE FALSE\n        END AS is_last_rolling_year,\n        c.comment\n    FROM {{ v0_relation }} c\n    LEFT JOIN latest_row l\n        ON c.{{ sdts_alias }} = l.{{ sdts_alias }}\n\n),\n\nactive_logic_combined AS (\n\n    SELECT \n        {{ sdts_alias }},\n        replacement_sdts,\n        CASE\n            WHEN force_active AND {{ snapshot_trigger_column }} THEN TRUE\n            WHEN NOT force_active OR NOT {{ snapshot_trigger_column }} THEN FALSE\n        END AS {{ snapshot_trigger_column }},\n        is_latest, \n        caption,\n        is_hourly,\n        is_daily,\n        is_weekly,\n        is_monthly,\n        is_yearly,\n        is_current_year,\n        is_last_year,\n        is_rolling_year,\n        is_last_rolling_year,\n        comment\n    FROM virtual_logic\n\n)\n\nSELECT * FROM active_logic_combined\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.0955489, "supported_languages": null}, "macro.datavault4dbt.redshift__pit": {"name": "redshift__pit", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/redshift/pit.sql", "original_file_path": "macros/tables/redshift/pit.sql", "unique_id": "macro.datavault4dbt.redshift__pit", "macro_sql": "{%- macro redshift__pit(tracked_entity, hashkey, sat_names, ldts, ledts, sdts, snapshot_relation, dimension_key,snapshot_trigger_column=none, custom_rsrc=none, pit_type=none) -%}\n\n{%- set hash = var('datavault4dbt.hash', 'MD5') -%}\n{%- set hash_dtype = var('datavault4dbt.hash_datatype', 'STRING') -%}\n{%- set hash_default_values = fromjson(datavault4dbt.hash_default_values(hash_function=hash,hash_datatype=hash_dtype)) -%}\n{%- set hash_alg = hash_default_values['hash_alg'] -%}\n{%- set unknown_key = hash_default_values['unknown_key'] -%}\n{%- set error_key = hash_default_values['error_key'] -%}\n\n{%- if hash_dtype == 'BYTES' -%}\n    {%- set hashkey_string = 'TO_HEX({})'.format(datavault4dbt.prefix([hashkey],'te')) -%}\n{%- else -%}\n    {%- set hashkey_string = datavault4dbt.prefix([hashkey],'te') -%}\n{%- endif -%}\n\n{%- set rsrc = var('datavault4dbt.rsrc_alias', 'rsrc') -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- if datavault4dbt.is_something(pit_type) -%}\n    {%- set hashed_cols = [pit_type, hashkey_string, datavault4dbt.prefix([sdts], 'snap')] -%}\n{%- else -%}\n    {%- set hashed_cols = [hashkey_string, datavault4dbt.prefix([sdts], 'snap')] -%}\n{%- endif -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{%- if is_incremental() %}\n\nexisting_dimension_keys AS (\n\n    SELECT\n        {{ dimension_key }}\n    FROM {{ this }}\n\n),\n\n{%- endif %}\n\npit_records AS (\n\n    SELECT\n        \n        {% if datavault4dbt.is_something(pit_type) -%}\n            {{ datavault4dbt.as_constant(pit_type) }} as type,\n        {%- endif %}\n        {% if datavault4dbt.is_something(custom_rsrc) -%}\n        '{{ custom_rsrc }}' as {{ rsrc }},\n        {%- endif %}\n        {{ datavault4dbt.hash(columns=hashed_cols,\n                    alias=dimension_key,\n                    is_hashdiff=false)   }} ,\n        te.{{ hashkey }},\n        snap.{{ sdts }},\n        {% for satellite in sat_names %}\n            COALESCE({{ satellite }}.{{ hashkey }}, CAST({{ datavault4dbt.as_constant(column_str=unknown_key) }} as {{ hash_dtype }})) AS hk_{{ satellite }},\n            COALESCE({{ satellite }}.{{ ldts }}, {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }}) AS {{ ldts }}_{{ satellite }}\n            {{- \",\" if not loop.last }}\n        {%- endfor %}\n\n    FROM\n            {{ ref(tracked_entity) }} te\n        FULL OUTER JOIN\n            {{ ref(snapshot_relation) }} snap\n            {% if datavault4dbt.is_something(snapshot_trigger_column) -%}\n                ON snap.{{ snapshot_trigger_column }} = true\n            {% else -%}\n                ON 1=1\n            {%- endif %}\n        {% for satellite in sat_names %}\n        {%- set sat_columns = datavault4dbt.source_columns(ref(satellite)) %}\n        {%- if ledts|string|lower in sat_columns|map('lower') %}\n        LEFT JOIN {{ ref(satellite) }}\n        {%- else %}\n        LEFT JOIN (\n            SELECT\n                {{ hashkey }},\n                {{ ldts }},\n                COALESCE(LEAD(TIMESTAMP_SUB({{ ldts }}, INTERVAL 1 MICROSECOND)) OVER (PARTITION BY {{ hashkey }} ORDER BY {{ ldts }}),{{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}) AS {{ ledts }}\n            FROM {{ ref(satellite) }}\n        ) {{ satellite }}\n        {% endif %}\n            ON\n                {{ satellite }}.{{ hashkey}} = te.{{ hashkey }}\n                AND snap.{{ sdts }} BETWEEN {{ satellite }}.{{ ldts }} AND {{ satellite }}.{{ ledts }}\n        {% endfor %}\n    {% if datavault4dbt.is_something(snapshot_trigger_column) -%}\n        WHERE snap.{{ snapshot_trigger_column }}\n    {%- endif %}\n\n),\n\nrecords_to_insert AS (\n\n    SELECT DISTINCT *\n    FROM pit_records\n    {%- if is_incremental() %}\n    WHERE NOT EXISTS (SELECT 1 FROM existing_dimension_keys \n                        WHERE existing_dimension_keys.{{ dimension_key }} = pit_records.{{ dimension_key }})\n    {% endif -%}\n\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.hash_default_values", "macro.datavault4dbt.prefix", "macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.is_something", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.datavault4dbt.as_constant", "macro.datavault4dbt.hash", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.source_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.0983229, "supported_languages": null}, "macro.datavault4dbt.redshift__ref_sat_v0": {"name": "redshift__ref_sat_v0", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/redshift/ref_sat_v0.sql", "original_file_path": "macros/tables/redshift/ref_sat_v0.sql", "unique_id": "macro.datavault4dbt.redshift__ref_sat_v0", "macro_sql": "{%- macro redshift__ref_sat_v0(parent_ref_keys, src_hashdiff, src_payload, src_ldts, src_rsrc, source_model) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set parent_ref_keys = datavault4dbt.expand_column_list(columns=[parent_ref_keys]) -%}\n\n{%- set ns=namespace(src_hashdiff=\"\", hdiff_alias=\"\") %}\n\n{%- if  src_hashdiff is mapping and src_hashdiff is not none -%}\n    {% set ns.src_hashdiff = src_hashdiff[\"source_column\"] %}\n    {% set ns.hdiff_alias = src_hashdiff[\"alias\"] %}\n{% else %}\n    {% set ns.src_hashdiff = src_hashdiff %}\n    {% set ns.hdiff_alias = src_hashdiff  %}\n{%- endif -%}\n\n{%- set source_cols = datavault4dbt.expand_column_list(columns=[src_rsrc, src_ldts, src_payload]) -%}\n\n{%- set source_relation = ref(source_model) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Selecting all source data, that is newer than latest data in ref_sat if incremental #}\nsource_data AS (\n\n    SELECT\n        {% for ref_key in parent_ref_keys %}\n        {{ref_key}},\n        {% endfor %}\n        {{ ns.src_hashdiff }} as {{ ns.hdiff_alias }},\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM {{ source_relation }}\n\n    {%- if is_incremental() %}\n    WHERE {{ src_ldts }} > (\n        SELECT\n            MAX({{ src_ldts }}) FROM {{ this }}\n        WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    )\n    {%- endif %}\n),\n\n{# Get the latest record for each parent ref key combination in existing sat, if incremental. #}\n{%- if is_incremental() %}\nlatest_entries_in_sat_prep AS (\n\n    SELECT\n        {% for ref_key in parent_ref_keys %}\n        {{ref_key}},\n        {% endfor %}\n        {{ ns.hdiff_alias }},\n        ROW_NUMBER() OVER(PARTITION BY {%- for ref_key in parent_ref_keys %} {{ref_key|lower}} {%- if not loop.last %}, {% endif %}{% endfor %} ORDER BY {{ src_ldts }} DESC) as rn\n    FROM \n        {{ this }}\n),\n\nlatest_entries_in_sat AS (\n\n    SELECT\n        {% for ref_key in parent_ref_keys %}\n        {{ref_key}},\n        {% endfor %}\n        {{ ns.hdiff_alias }}\n    FROM \n        latest_entries_in_sat_prep\n    WHERE rn = 1  \n),\n{%- endif %}\n\n{#\n    Deduplicate source by comparing each hashdiff to the hashdiff of the previous record, for each parent ref key combination.\n    Additionally adding a row number based on that order, if incremental.\n#}\ndeduplicated_numbered_source_prep AS (\n\n    SELECT\n    {% for ref_key in parent_ref_keys %}\n    {{ref_key}},\n    {% endfor %}\n    {{ ns.hdiff_alias }},\n    {{ datavault4dbt.print_list(source_cols) }}\n    {% if is_incremental() -%}\n    , ROW_NUMBER() OVER(PARTITION BY {%- for ref_key in parent_ref_keys %} {{ref_key}} {%- if not loop.last %}, {% endif %}{% endfor %} ORDER BY {{ src_ldts }}) as rn\n    {%- endif %}\n    , LAG({{ ns.hdiff_alias }}) OVER(PARTITION BY {%- for ref_key in parent_ref_keys %} {{ref_key|lower}} {%- if not loop.last %}, {% endif %}{% endfor %} ORDER BY {{ src_ldts }}) as prev_hashdiff\n    FROM source_data\n),\n\ndeduplicated_numbered_source AS (\n\n    SELECT\n    {% for ref_key in parent_ref_keys %}\n    {{ref_key}},\n    {% endfor %}\n    {{ ns.hdiff_alias }},\n    {{ datavault4dbt.print_list(source_cols) }}\n    FROM deduplicated_numbered_source_prep\n    WHERE 1=1\n        AND {{ ns.hdiff_alias }} <> prev_hashdiff OR prev_hashdiff IS NULL\n        {% if is_incremental() -%}\n        AND rn = 1\n        {%- endif %}\n),\n\n{#\n    Select all records from the previous CTE. If incremental, compare the oldest incoming entry to\n    the existing records in the satellite.\n#}\nrecords_to_insert AS (\n\n    SELECT\n    {% for ref_key in parent_ref_keys %}\n    {{ref_key}},\n    {% endfor %}\n    {{ ns.hdiff_alias }},\n    {{ datavault4dbt.print_list(source_cols) }}\n    FROM deduplicated_numbered_source\n    {%- if is_incremental() %}\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE 1=1\n            {% for ref_key in parent_ref_keys %}\n            AND {{ datavault4dbt.multikey(ref_key, prefix=['latest_entries_in_sat', 'deduplicated_numbered_source'], condition='=') }}\n            {% endfor %}\n            AND {{ datavault4dbt.multikey(ns.hdiff_alias, prefix=['latest_entries_in_sat', 'deduplicated_numbered_source'], condition='=') }}\n            )\n    {%- endif %}\n\n    )\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.print_list", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.100964, "supported_languages": null}, "macro.datavault4dbt.redshift__ref_sat_v1": {"name": "redshift__ref_sat_v1", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/redshift/ref_sat_v1.sql", "original_file_path": "macros/tables/redshift/ref_sat_v1.sql", "unique_id": "macro.datavault4dbt.redshift__ref_sat_v1", "macro_sql": "{%- macro redshift__ref_sat_v1(ref_sat_v0, ref_keys, hashdiff, src_ldts, src_rsrc, ledts_alias, add_is_current_flag) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set is_current_col_alias = var('datavault4dbt.is_current_col_alias', 'IS_CURRENT') -%}\n\n{%- set source_relation = ref(ref_sat_v0) -%}\n\n{%- set ref_keys = datavault4dbt.expand_column_list(columns=[ref_keys]) -%}\n\n{%- set all_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n{%- set exclude = ref_keys + [hashdiff, src_ldts, src_rsrc] -%}\n\n{%- set source_columns_to_select = datavault4dbt.process_columns_to_select(all_columns, exclude) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Calculate ledts based on the ldts of the earlier record. #}\nend_dated_source AS (\n\n    SELECT\n        {% for ref_key in ref_keys %}\n        {{ref_key}},\n        {% endfor %}\n        {{ hashdiff }},\n        {{ src_rsrc }},\n        {{ src_ldts }},\n        COALESCE(LEAD({{ src_ldts }}- INTERVAL '00:00:00.000001') OVER (PARTITION BY {%- for ref_key in ref_keys %} {{ref_key}} {%- if not loop.last %}, {% endif %}{% endfor %} ORDER BY {{ src_ldts }}),{{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}) as {{ ledts_alias }},\n        {{ datavault4dbt.print_list(source_columns_to_select) }}\n    FROM {{ source_relation }}\n\n)\n\nSELECT\n    {% for ref_key in ref_keys %}\n    {{ref_key}},\n    {% endfor %}\n    {{ hashdiff }},\n    {{ src_rsrc }},\n    {{ src_ldts }},\n    {{ ledts_alias }},\n    {%- if add_is_current_flag %}\n        CASE WHEN {{ ledts_alias }} = {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n        THEN TRUE\n        ELSE FALSE\n        END AS {{ is_current_col_alias }},\n    {% endif -%}\n    {{ datavault4dbt.print_list(source_columns_to_select) }}\nFROM end_dated_source\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.source_columns", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.1022131, "supported_languages": null}, "macro.datavault4dbt.redshift__nh_link": {"name": "redshift__nh_link", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/redshift/nh_link.sql", "original_file_path": "macros/tables/redshift/nh_link.sql", "unique_id": "macro.datavault4dbt.redshift__nh_link", "macro_sql": "{%- macro redshift__nh_link(link_hashkey, foreign_hashkeys, payload, source_models, src_ldts, src_rsrc, disable_hwm, source_is_single_batch) -%}\n{%- if not (foreign_hashkeys is iterable and foreign_hashkeys is not string) -%}\n\n    {%- if execute -%}\n        {{ exceptions.raise_compiler_error(\"Only one foreign key provided for this link. At least two required.\") }}\n    {%- endif %}\n\n{%- endif -%}\n{%- set ns = namespace(last_cte= \"\", source_included_before = {}, has_rsrc_static_defined=true, source_models_rsrc_dict={}) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n\n{# If no specific link_hk, fk_columns, or payload are defined for each source, we apply the values set in the link_hashkey, foreign_hashkeys, and payload variable. #}\n{# If no rsrc_static parameter is defined in ANY of the source models then the whole code block of record_source performance lookup is not executed  #}\n{# For the use of record_source performance lookup it is required that every source model has the parameter rsrc_static defined and it cannot be an empty string #}\n{%- if source_models is not mapping and not datavault4dbt.is_list(source_models) -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- set source_model_values = fromjson(datavault4dbt.source_model_processing(source_models=source_models, parameters={'link_hk':link_hashkey}, foreign_hashkeys=foreign_hashkeys, payload=payload)) -%}\n{%- set source_models = source_model_values['source_model_list'] -%}\n{%- set ns.has_rsrc_static_defined = source_model_values['has_rsrc_static_defined'] -%}\n{%- set ns.source_models_rsrc_dict = source_model_values['source_models_rsrc_dict'] -%}\n{{ log('source_models: '~source_models, false) }}\n\n{%- set final_columns_to_select = [link_hashkey] + foreign_hashkeys + [src_ldts] + [src_rsrc] + payload -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{%- if is_incremental() -%}\n{# Get all link hashkeys out of the existing link for later incremental logic. #}\n    distinct_target_hashkeys AS (\n\n        SELECT\n        {{ link_hashkey }}\n        FROM {{ this }}\n\n    ),\n    {%- if ns.has_rsrc_static_defined and not disable_hwm -%}\n        {% for source_model in source_models %}\n        {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n            {%- set source_number = source_model.id | string -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number] -%}\n\n            {{log('rsrc_statics: '~ rsrc_statics, false) }}\n\n            {%- set rsrc_static_query_source -%}\n                SELECT count(*) FROM (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.{{ src_rsrc }},\n                    CAST('{{ rsrc_static }}' AS VARCHAR) AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                )\n            {% endset %}\n\n            rsrc_static_{{ source_number }} AS (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.*,\n                    CAST('{{ rsrc_static }}' AS VARCHAR) AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                {%- set ns.last_cte = \"rsrc_static_{}\".format(source_number) -%}\n            ),\n\n            {%- set source_in_target = true -%}\n            \n            {%- if execute -%}\n                {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n\n                {%- set row_count = rsrc_static_result.columns[0].values()[0] -%}\n\n                {{ log('row_count for '~source_model~' is '~row_count, false) }}\n\n                {%- if row_count == 0 -%}\n                    {%- set source_in_target = false -%}\n                {%- endif -%}\n            {%- endif -%}\n\n\n            {%- do ns.source_included_before.update({source_model.id: source_in_target}) -%}\n\n        {% endfor -%}\n\n        {%- if source_models | length > 1 %}\n\n        rsrc_static_union AS (\n            {#  Create one unionized table over all sources. It will be the same as the already existing\n                nh_link, but extended by the rsrc_static column. #}\n\n            {% for source_model in source_models %}\n            {%- set source_number = source_model.id | string -%}\n\n            SELECT rsrc_static_{{ source_number }}.* FROM rsrc_static_{{ source_number }}\n\n            {%- if not loop.last %}\n            UNION ALL\n            {% endif -%}\n            {%- endfor %}\n            {%- set ns.last_cte = \"rsrc_static_union\" -%}\n        ),\n\n        {%- endif %}\n\n        max_ldts_per_rsrc_static_in_target AS (\n        {# Use the previously created CTE to calculate the max load date timestamp per rsrc_static. #}\n\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) AS max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif %}\n{% endif -%}\n\n{% for source_model in source_models %}\n\n{#  Select all deduplicated records from each source, and filter for records that are newer\n    than the max ldts inside the existing link, if incremental. #}\n\n    {%- set source_number = source_model.id | string -%}\n\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number|string] -%}\n    {%- endif -%}\n\n    {%- if 'link_hk' not in source_model.keys() %}\n        {%- set link_hk = link_hashkey -%}\n    {%- else -%}\n        {%- set link_hk = source_model['link_hk'] -%}\n    {% endif %}\n\nsrc_new_{{ source_number }} AS (\n\n    SELECT\n            {{ link_hk }} AS {{ link_hashkey }},\n            {% for fk in source_model['fk_columns'] -%}\n            {{ fk }},\n            {% endfor -%}\n        {{ src_ldts }},\n        {{ src_rsrc }},\n\n        {{ datavault4dbt.print_list(source_model['payload']) | indent(3) }}\n\n    FROM {{ ref(source_model.name) }} src\n    {# If the model is incremental and all sources has rsrc_static defined and valid and the source was already included before in the target transactional link #}\n    {# then an inner join is performed on the CTE for the maximum load date timestamp per record source static to get the records\n    that match any of the rsrc_static present in it #}\n    {# if there are records in the source with a newer load date time stamp than the ones present in the target, those will be selected to be inserted later #}\n    {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_number|int] and not disable_hwm %}\n        INNER JOIN max_ldts_per_rsrc_static_in_target max ON\n        ({%- for rsrc_static in rsrc_statics -%}\n            max.rsrc_static = '{{ rsrc_static }}'\n            {%- if not loop.last -%} OR\n            {% endif -%}\n        {%- endfor %})\n        WHERE src.{{ src_ldts }} > max.max_ldts\n    {%- elif is_incremental() and source_models | length == 1 and not ns.has_rsrc_static_defined and not disable_hwm %}\n        WHERE src.{{ src_ldts }} > (\n            SELECT MAX({{ src_ldts }})\n            FROM {{ this }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            )\n    {%- endif %}\n\n    {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n    ),\n{%- endfor -%}\n\n{%- if source_models | length > 1 %}\n\nsource_new_union AS (\n{# Unionize the new records from all sources. #}\n\n    {%- for source_model in source_models -%}\n\n    {%- set source_number = source_model.id | string -%}\n\n    SELECT\n        {{ link_hashkey }},\n        {% for fk in source_model['fk_columns']|list %}\n            {{ fk }} AS {{ foreign_hashkeys[loop.index - 1] }},\n        {% endfor -%}\n\n        {{ src_ldts }},\n        {{ src_rsrc }},\n\n        {% for col in source_model['payload']|list %}\n            {{ col }} AS {{ payload[loop.index - 1] }}\n            {%- if not loop.last %}, {%- endif %}\n        {% endfor -%}\n\n    FROM src_new_{{ source_number }}\n\n    {%- if not loop.last %}\n    UNION ALL\n    {% endif -%}\n\n    {%- endfor -%}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif %}\n\n{%- if not source_is_single_batch %}\n\nearliest_hk_over_all_sources_prep AS (\n    SELECT\n        lcte.*,\n        ROW_NUMBER() OVER (PARTITION BY {{ link_hashkey }} ORDER BY {{ src_ldts\n        }}) as rn\n    FROM {{ ns.last_cte }} AS lcte),\n\nearliest_hk_over_all_sources AS (\n\n    {#- Deduplicate the unionized records again to only insert the earliest one. #}\n    SELECT\n        lcte.*\n    FROM earliest_hk_over_all_sources_prep AS lcte\n        WHERE rn = 1\n    {%- set ns.last_cte = 'earliest_hk_over_all_sources' -%}),\n\n{%- endif %}\n\nrecords_to_insert AS (\n{# Select everything from the previous CTE, if its incremental then filter for hashkeys that are not already in the link. #}\n\n    SELECT\n        {{ datavault4dbt.print_list(final_columns_to_select) | indent(4) }}\n    FROM {{ ns.last_cte }}\n\n    {%- if is_incremental() %}\n    WHERE NOT EXISTS (SELECT 1 FROM distinct_target_hashkeys \n                WHERE distinct_target_hashkeys.{{ link_hashkey }} = earliest_hk_over_all_sources.{{ link_hashkey }})\n    {% endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.is_list", "macro.datavault4dbt.source_model_processing", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.107072, "supported_languages": null}, "macro.datavault4dbt.redshift__ref_table": {"name": "redshift__ref_table", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/redshift/ref_table.sql", "original_file_path": "macros/tables/redshift/ref_table.sql", "unique_id": "macro.datavault4dbt.redshift__ref_table", "macro_sql": "{%- macro redshift__ref_table(ref_hub, ref_satellites, src_ldts, src_rsrc, historized, snapshot_trigger_column='is_active', snapshot_relation=none) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set ref_hub_relation = ref(ref_hub|string) -%}\n\n{%- set is_current_col_alias = var('datavault4dbt.is_current_col_alias', 'IS_CURRENT') -%}\n{%- set ledts_alias = var('datavault4dbt.ledts_alias', 'ledts') -%}\n{%- set sdts_alias = var('datavault4dbt.sdts_alias', 'sdts') -%}\n\n{%- set include_business_objects_before_appearance = var('datavault4dbt.include_business_objects_before_appearance', 'false') -%}\n\n{{ log('ref_hub_relation: ' ~ ref_hub_relation, false) }}\n{%- set hub_columns = datavault4dbt.source_columns(ref_hub_relation) -%}\n{{ log('hub_columns: ' ~ hub_columns, false) }}\n{%- set hub_columns_to_exclude = [src_ldts, src_rsrc] -%}\n{%- set ref_key_cols = datavault4dbt.process_columns_to_select(columns_list=hub_columns, exclude_columns_list=hub_columns_to_exclude )%}\n{{ log('ref_key_cols: ' ~ ref_key_cols, false) }}\n{%- set sat_columns_to_exclude = [src_ldts, src_rsrc, ledts_alias, is_current_col_alias] + ref_key_cols -%}\n{{ log('sat_columns_to_exclude: '~ sat_columns_to_exclude, false) }}\n\n{%- set ref_satellites_dict = {} -%}\n\n{%- if not datavault4dbt.is_list(ref_satellites) and not ref_satellites is mapping -%}\n    {%- set ref_satellites = [ref_satellites] -%}\n{%- endif -%}\n\n{%- if datavault4dbt.is_list(ref_satellites) -%}\n    {%- for ref_satellite in ref_satellites -%}\n        {%- do ref_satellites_dict.update({ref_satellite:{}}) -%}\n    {%- endfor -%}\n{%- else -%}\n    {%- set ref_satellites_dict = ref_satellites -%}\n{%- endif -%}\n\n\nWITH \n\ndates AS (\n\n{% if historized in ['full', 'latest'] -%}\n\n    {%- set date_column = src_ldts -%}\n\n\n    {{ log('ref_satellites: '~ ref_satellites, false) -}}\n\n    {% if historized == 'full' -%}\n    SELECT distinct {{ date_column }} FROM (\n    {%- elif historized == 'latest' -%}\n    SELECT MAX({{ date_column }}) as {{ date_column }} FROM (\n    {%- endif -%}\n\n    {% for satellite in ref_satellites_dict.keys() -%}\n    SELECT distinct \n        {{ src_ldts }}\n    FROM {{ ref(satellite|string) }}\n    WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    {% if not loop.last -%} UNION {% endif %}\n    {%- endfor %}\n    ) AS TEST\n\n\n{% elif snapshot_relation is not none %}\n\n    {%- set date_column = sdts_alias -%}\n    \n    SELECT \n        {{ date_column }}\n    FROM (\n        \n        SELECT \n            {{ sdts_alias }}\n        FROM {{ ref(snapshot_relation) }}\n        WHERE {{ snapshot_trigger_column }}\n    ) AS TEST \n\n{#\nCaus of whitespace control \n#}\n\n{%- endif %}\n\n{%- if is_incremental() -%}\n    WHERE {{ date_column }} > (SELECT MAX({{ date_column }}) FROM {{ this }})\n{%- endif -%}\n\n\n),\n\nref_table AS (\n\n    SELECT\n    {{ datavault4dbt.print_list(list_to_print=ref_key_cols, indent=2, src_alias='h') }},\n        ld.{{ date_column }},\n        h.{{ src_rsrc }},\n\n    {%- for satellite in ref_satellites_dict.keys() %}\n\n    {%- set sat_alias = 's_' + loop.index|string -%}\n    {%- set sat_columns_pre = [] -%}\n        \n        {%- if ref_satellites_dict[satellite] is mapping and 'include' in ref_satellites_dict[satellite].keys() -%}\n            {%- set sat_columns_pre = ref_satellites_dict[satellite]['include'] -%}\n        {%- elif ref_satellites_dict[satellite] is mapping and 'exclude' in ref_satellites_dict[satellite].keys() -%}\n            {%- set all_sat_columns = datavault4dbt.source_columns(ref(satellite)) -%}\n            {%- set sat_columns_pre = datavault4dbt.process_columns_to_select(all_sat_columns, ref_satellites_dict[satellite]['exclude']) -%}\n        {%- elif datavault4dbt.is_list(ref_satellites_dict[satellite]) -%}\n            {%- set sat_columns_pre = ref_satellites_dict[satellite] -%}\n        {%- else -%}\n            {%- set all_sat_columns = datavault4dbt.source_columns(ref(satellite)) -%}\n            {%- set sat_columns_pre = datavault4dbt.process_columns_to_select(all_sat_columns, sat_columns_to_exclude) -%}\n        {%- endif -%}\n\n    {%- set sat_columns = datavault4dbt.process_columns_to_select(sat_columns_pre, sat_columns_to_exclude) -%}\n    \n    {{- log('sat_columns: '~ sat_columns, false) -}}\n\n    {{ datavault4dbt.print_list(list_to_print=sat_columns, indent=2, src_alias=sat_alias) }}\n    {%- if not loop.last -%} ,\n    {% endif -%}\n\n    {% endfor %} \n\n    FROM {{ ref(ref_hub) }} h\n    \n    FULL OUTER JOIN dates ld\n        ON 1 = 1  \n\n    {% for satellite in ref_satellites_dict.keys() %}\n\n        {%- set sat_alias = 's_' + loop.index|string -%}\n\n    LEFT JOIN {{ ref(satellite) }} {{ sat_alias }}\n        ON {{ datavault4dbt.multikey(columns=ref_key_cols, prefix=['h', sat_alias], condition='=') }}\n        AND  ld.{{ date_column }} BETWEEN {{ sat_alias }}.{{ src_ldts }} AND {{ sat_alias }}.{{ ledts_alias }}\n    \n    {% endfor %}\n    \n    {% if include_business_objects_before_appearance == 'false' -%}\n    WHERE h.{{ src_ldts }} <= ld.{{ date_column }}\n    {% endif %}\n\n) \n\nSELECT * FROM ref_table\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.source_columns", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.is_list", "macro.datavault4dbt.string_to_timestamp", "macro.dbt.is_incremental", "macro.datavault4dbt.print_list", "macro.datavault4dbt.multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.110655, "supported_languages": null}, "macro.datavault4dbt.redshift__hub": {"name": "redshift__hub", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/redshift/hub.sql", "original_file_path": "macros/tables/redshift/hub.sql", "unique_id": "macro.datavault4dbt.redshift__hub", "macro_sql": "{%- macro redshift__hub(hashkey, business_keys, src_ldts, src_rsrc, source_models, disable_hwm) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{{ log('source_models'~source_models, false) }}\n\n{%- set ns = namespace(last_cte= \"\", source_included_before = {}, has_rsrc_static_defined=true, source_models_rsrc_dict={}) -%}\n\n{# Select the Business Key column from the first source model definition provided in the hub model and put them in an array. #}\n{%- set business_keys = datavault4dbt.expand_column_list(columns=[business_keys]) -%}\n\n{# If no specific bk_columns is defined for each source, we apply the values set in the business_keys variable. #}\n{# If no specific hk_column is defined for each source, we apply the values set in the hashkey variable. #}\n{# If no rsrc_static parameter is defined in ANY of the source models then the whole code block of record_source performance lookup is not executed  #}\n{# For the use of record_source performance lookup it is required that every source model has the parameter rsrc_static defined and it cannot be an empty string #}\n{%- if source_models is not mapping and not datavault4dbt.is_list(source_models) -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- set source_model_values = fromjson(datavault4dbt.source_model_processing(source_models=source_models, parameters={'hk_column':hashkey}, business_keys=business_keys)) -%}\n{%- set source_models = source_model_values['source_model_list'] -%}\n{%- set ns.has_rsrc_static_defined = source_model_values['has_rsrc_static_defined'] -%}\n{%- set ns.source_models_rsrc_dict = source_model_values['source_models_rsrc_dict'] -%}\n{{ log('source_models: '~source_models, false) }}\n\n{%- set final_columns_to_select = [hashkey] + business_keys + [src_ldts] + [src_rsrc] -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{% if is_incremental() -%}\n{# Get all target hashkeys out of the existing hub for later incremental logic. #}\n    distinct_target_hashkeys AS (\n\n        SELECT\n            {{ hashkey }}\n        FROM {{ this }}\n\n    ),\n    {%- if ns.has_rsrc_static_defined and not disable_hwm -%}\n        {% for source_model in source_models %}\n         {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n            {%- set source_number = source_model.id | string -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number] -%}\n\n            {{log('rsrc_statics: '~ rsrc_statics, false) }}\n\n            {%- set rsrc_static_query_source -%}\n                SELECT count(*) FROM (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.{{ src_rsrc }},\n                    CAST('{{ rsrc_static }}' AS VARCHAR) AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                ) As test\n            {% endset %}\n\n            {{ log('rsrc static query: '~rsrc_static_query_source, false) }}\n\n            rsrc_static_{{ source_number }} AS (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT \n                    t.*,\n                    CAST('{{ rsrc_static }}' AS VARCHAR) AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                {%- set ns.last_cte = \"rsrc_static_{}\".format(source_number) -%}\n            ),\n            \n            {%- set source_in_target = true -%}\n            \n            {%- if execute -%}\n                {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n\n                {%- set row_count = rsrc_static_result.columns[0].values()[0] -%}\n\n                {{ log('row_count for '~source_model~' is '~row_count, false) }}\n\n                {%- if row_count == 0 -%}\n                    {%- set source_in_target = false -%}\n                {%- endif -%}\n            {%- endif -%}\n\n\n            {%- do ns.source_included_before.update({source_model.id: source_in_target}) -%}\n\n        {% endfor -%}\n\n        {%- if source_models | length > 1 %}\n\n        rsrc_static_union AS (\n            {#  Create one unionized table over all sources. It will be the same as the already existing\n                hub, but extended by the rsrc_static column. #}\n            {% for source_model in source_models %}\n            {%- set source_number = source_model.id | string -%}\n\n            SELECT rsrc_static_{{ source_number }}.* FROM rsrc_static_{{ source_number }}\n\n            {%- if not loop.last %}\n            UNION ALL\n            {% endif -%}\n            {%- endfor %}\n            {%- set ns.last_cte = \"rsrc_static_union\" -%}\n        ),\n\n        {%- endif %}\n\n        max_ldts_per_rsrc_static_in_target AS (\n        {# Use the previously created CTE to calculate the max load date timestamp per rsrc_static. #}\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) as max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif %}\n{% endif -%}\n\n{% for source_model in source_models %}\n\n    {%- set source_number = source_model.id | string -%}\n\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number|string] -%}\n    {%- endif -%}\n\n    {%- if 'hk_column' not in source_model.keys() %}\n        {%- set hk_column = hashkey -%}\n    {%- else -%}\n        {%- set hk_column = source_model['hk_column'] -%}\n    {% endif %}\n\n    src_new_{{ source_number }} AS (\n\n        SELECT\n            {{ hk_column }} AS {{ hashkey }},\n            {% for bk in source_model['bk_columns'] -%}\n            {{ bk }},\n            {% endfor -%}\n\n            {{ src_ldts }},\n            {{ src_rsrc }}\n        FROM {{ ref(source_model.name) }} src\n        {{ log('rsrc_statics defined?: ' ~ ns.source_models_rsrc_dict[source_number|string], false) }}\n\n    {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_number|int] and not disable_hwm %}\n        INNER JOIN max_ldts_per_rsrc_static_in_target max ON\n        ({%- for rsrc_static in rsrc_statics -%}\n            max.rsrc_static = '{{ rsrc_static }}'\n            {%- if not loop.last -%} OR\n            {% endif -%}\n        {%- endfor %})\n        WHERE src.{{ src_ldts }} > max.max_ldts\n    {%- elif is_incremental() and source_models | length == 1 and not ns.has_rsrc_static_defined and not disable_hwm %}\n        WHERE src.{{ src_ldts }} > (\n            SELECT MAX({{ src_ldts }})\n            FROM {{ this }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            )\n    {%- endif %}\n\n         {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n    ),\n{%- endfor -%}\n\n{%- if source_models | length > 1 %}\n\nsource_new_union AS (\n\n    {%- for source_model in source_models -%}\n\n    {%- set source_number = source_model.id | string -%}\n\n    SELECT\n        {{ hashkey }},\n\n        {% for bk in source_model['bk_columns'] -%}\n            {{ bk }} AS {{ business_keys[loop.index - 1] }},\n        {% endfor -%}\n\n        {{ src_ldts }},\n        {{ src_rsrc }}\n    FROM src_new_{{ source_number }}\n\n    {%- if not loop.last %}\n    UNION ALL\n    {% endif -%}\n\n    {%- endfor -%}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif %}\n\nearliest_hk_over_all_sources_prep AS (\n    SELECT\n        lcte.*,\n        ROW_NUMBER() OVER (PARTITION BY {{ hashkey }} ORDER BY {{ src_ldts\n        }}) as rn\n    FROM {{ ns.last_cte }} AS lcte),\n\nearliest_hk_over_all_sources AS (\n\n    {#- Deduplicate the unionized records again to only insert the earliest one. #}\n    SELECT\n        lcte.*\n    FROM earliest_hk_over_all_sources_prep AS lcte\n        WHERE rn = 1\n    {%- set ns.last_cte = 'earliest_hk_over_all_sources' -%}),\n\nrecords_to_insert AS (\n    {#- Select everything from the previous CTE, if incremental filter for hashkeys that are not already in the hub. #}\n    SELECT\n        {{ datavault4dbt.print_list(final_columns_to_select) }}\n    FROM {{ ns.last_cte }}\n\n    {%- if is_incremental() %}\n    WHERE NOT EXISTS (SELECT 1 FROM distinct_target_hashkeys \n                    WHERE distinct_target_hashkeys.{{ hashkey }} = earliest_hk_over_all_sources.{{ hashkey }})\n    {% endif -%}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.is_list", "macro.datavault4dbt.source_model_processing", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.115229, "supported_languages": null}, "macro.datavault4dbt.redshift__link": {"name": "redshift__link", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/redshift/link.sql", "original_file_path": "macros/tables/redshift/link.sql", "unique_id": "macro.datavault4dbt.redshift__link", "macro_sql": "{%- macro redshift__link(link_hashkey, foreign_hashkeys, source_models, src_ldts, src_rsrc, disable_hwm) -%}\n\n{%- if not (foreign_hashkeys is iterable and foreign_hashkeys is not string) -%}\n\n    {%- if execute -%}\n        {{ exceptions.raise_compiler_error(\"Only one foreign key provided for this link. At least two required.\") }}\n    {%- endif %}\n\n{%- endif -%}\n\n{%- set ns = namespace(last_cte= \"\", source_included_before = {}, has_rsrc_static_defined=true, source_models_rsrc_dict={}) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{# If no specific link_hk and fk_columns are defined for each source, we apply the values set in the link_hashkey and foreign_hashkeys variable. #}\n{# If no rsrc_static parameter is defined in ANY of the source models then the whole code block of record_source performance lookup is not executed  #}\n{# For the use of record_source performance lookup it is required that every source model has the parameter rsrc_static defined and it cannot be an empty string #}\n{%- if source_models is not mapping and not datavault4dbt.is_list(source_models) -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- set source_model_values = fromjson(datavault4dbt.source_model_processing(source_models=source_models, parameters={'link_hk':link_hashkey}, foreign_hashkeys=foreign_hashkeys)) -%}\n{%- set source_models = source_model_values['source_model_list'] -%}\n{%- set ns.has_rsrc_static_defined = source_model_values['has_rsrc_static_defined'] -%}\n{%- set ns.source_models_rsrc_dict = source_model_values['source_models_rsrc_dict'] -%}\n{{ log('source_models: '~source_models, false) }}\n\n{%- set final_columns_to_select = [link_hashkey] + foreign_hashkeys + [src_ldts] + [src_rsrc] -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{% if is_incremental() %}\n{# Get all link hashkeys out of the existing link for later incremental logic. #}\n    distinct_target_hashkeys AS (\n        \n        SELECT\n        {{ link_hashkey }}\n        FROM {{ this }}\n\n    ),\n    {%- if ns.has_rsrc_static_defined and not disable_hwm -%}\n        {% for source_model in source_models %}\n        {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n            {%- set source_number = source_model.id | string -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number] -%}\n\n            {{log('rsrc_statics: '~ rsrc_statics, false) }}\n\n            {%- set rsrc_static_query_source -%}\n                SELECT count(*) FROM (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.{{ src_rsrc }},\n                    CAST('{{ rsrc_static }}' AS VARCHAR) AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                )\n            {% endset %}\n\n            rsrc_static_{{ source_number }} AS (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.*,\n                    CAST('{{ rsrc_static }}' AS VARCHAR) AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                {%- set ns.last_cte = \"rsrc_static_{}\".format(source_number) -%}\n            ),\n\n            {%- set source_in_target = true -%}\n            \n            {%- if execute -%}\n                {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n\n                {%- set row_count = rsrc_static_result.columns[0].values()[0] -%}\n\n                {{ log('row_count for '~source_model~' is '~row_count, false) }}\n\n                {%- if row_count == 0 -%}\n                    {%- set source_in_target = false -%}\n                {%- endif -%}\n            {%- endif -%}\n\n\n            {%- do ns.source_included_before.update({source_model.id: source_in_target}) -%}\n\n        {% endfor -%}\n\n        {%- if source_models | length > 1 %}\n\n        rsrc_static_union AS (\n            {#  Create one unionized table over all sources. It will be the same as the already existing\n                link, but extended by the rsrc_static column. #}\n\n            {% for source_model in source_models %}\n            {%- set source_number = source_model.id | string -%}\n\n            SELECT rsrc_static_{{ source_number }}.* FROM rsrc_static_{{ source_number }}\n\n            {%- if not loop.last %}\n            UNION ALL\n            {% endif -%}\n            {%- endfor %}\n            {%- set ns.last_cte = \"rsrc_static_union\" -%}\n        ),\n\n        {%- endif %}\n\n        max_ldts_per_rsrc_static_in_target AS (\n        {# Use the previously created CTE to calculate the max load date timestamp per rsrc_static. #}\n\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) as max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif %}\n{% endif -%}\n\n{% for source_model in source_models %}\n\n{#  Select all deduplicated records from each source, and filter for records that are newer\n    than the max ldts inside the existing link, if incremental. #}\n\n    {%- set source_number = source_model.id | string -%}\n\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number|string] -%}\n    {%- endif -%}\n\n    {%- if 'link_hk' not in source_model.keys() %}\n        {%- set link_hk = link_hashkey -%}\n    {%- else -%}\n        {%- set link_hk = source_model['link_hk'] -%}\n    {% endif %}\n\n    src_new_{{ source_number }} AS (\n\n        SELECT\n            {{ link_hk }} AS {{ link_hashkey }},\n            {% for fk in source_model['fk_columns'] -%}\n            {{ fk }},\n            {% endfor -%}\n            {{ src_ldts }},\n            {{ src_rsrc }}\n        FROM {{ ref(source_model.name) }} src\n        {{ log('rsrc_statics defined?: ' ~ ns.source_models_rsrc_dict[source_number|string], false) }}\n\n    {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_number|int] and not disable_hwm %}\n        INNER JOIN max_ldts_per_rsrc_static_in_target max ON\n        ({%- for rsrc_static in rsrc_statics -%}\n            max.rsrc_static = '{{ rsrc_static }}'\n            {%- if not loop.last -%} OR\n            {% endif -%}\n        {%- endfor %})\n        WHERE src.{{ src_ldts }} > max.max_ldts\n    {%- elif is_incremental() and source_models | length == 1 and not ns.has_rsrc_static_defined and not disable_hwm %}\n        WHERE src.{{ src_ldts }} > (\n            SELECT MAX({{ src_ldts }})\n            FROM {{ this }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            )\n    {%- endif %}\n\n        {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n    ),\n{%- endfor -%}\n\n{%- if source_models | length > 1 %}\n\nsource_new_union AS (\n{# Unionize the new records from all sources. #}\n\n    {%- for source_model in source_models -%}\n\n    {%- set source_number = source_model.id | string -%}\n\n    SELECT\n        {{ link_hashkey }},\n        {% for fk in source_model['fk_columns']|list %}\n            {{ fk }} AS {{ foreign_hashkeys[loop.index - 1] }},\n        {% endfor -%}\n        {{ src_ldts }},\n        {{ src_rsrc }}\n    FROM src_new_{{ source_number }}\n\n    {%- if not loop.last %}\n    UNION ALL\n    {% endif -%}\n\n    {%- endfor -%}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif %}\n\nearliest_hk_over_all_sources_prep AS (\n    SELECT\n        lcte.*,\n        ROW_NUMBER() OVER (PARTITION BY {{ link_hashkey }} ORDER BY {{ src_ldts\n        }}) as rn\n    FROM {{ ns.last_cte }} AS lcte),\n\nearliest_hk_over_all_sources AS (\n\n    {#- Deduplicate the unionized records again to only insert the earliest one. #}\n    SELECT\n        lcte.*\n    FROM earliest_hk_over_all_sources_prep AS lcte\n        WHERE rn = 1\n    {%- set ns.last_cte = 'earliest_hk_over_all_sources' -%}),\n\nrecords_to_insert AS (\n    {# Select everything from the previous CTE, if incremental filter for hashkeys that are not already in the link. #}\n\n    SELECT\n        {{ datavault4dbt.print_list(final_columns_to_select) | indent(4) }}\n    FROM {{ ns.last_cte }}\n\n    {%- if is_incremental() %}\n    WHERE NOT EXISTS (SELECT 1 FROM distinct_target_hashkeys \n                    WHERE distinct_target_hashkeys.{{ link_hashkey }} = earliest_hk_over_all_sources.{{ link_hashkey }})\n    {% endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.is_list", "macro.datavault4dbt.source_model_processing", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.1197922, "supported_languages": null}, "macro.datavault4dbt.redshift__ref_hub": {"name": "redshift__ref_hub", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/redshift/ref_hub.sql", "original_file_path": "macros/tables/redshift/ref_hub.sql", "unique_id": "macro.datavault4dbt.redshift__ref_hub", "macro_sql": "{%- macro redshift__ref_hub(ref_keys, src_ldts, src_rsrc, source_models) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set ns = namespace(last_cte= \"\", source_included_before = {}, has_rsrc_static_defined=true, source_models_rsrc_dict={}) -%}\n\n{%- set ref_keys = datavault4dbt.expand_column_list(columns=[ref_keys]) -%}\n\n{# If no specific ref_keys is defined for each source, we apply the values set in the ref_keys variable. #}\n{# If no rsrc_static parameter is defined in ANY of the source models then the whole code block of record_source performance lookup is not executed  #}\n{# For the use of record_source performance lookup it is required that every source model has the parameter rsrc_static defined and it cannot be an empty string #}\n{%- if source_models is not mapping and not datavault4dbt.is_list(source_models) -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- set source_model_values = fromjson(datavault4dbt.source_model_processing(source_models=source_models, parameters={'test':'test'}, reference_keys=ref_keys)) -%}\n{%- set source_models = source_model_values['source_model_list'] -%}\n{%- set ns.has_rsrc_static_defined = source_model_values['has_rsrc_static_defined'] -%}\n{%- set ns.source_models_rsrc_dict = source_model_values['source_models_rsrc_dict'] -%}\n{{ log('source_models: '~source_models, false) }}\n\n{%- set final_columns_to_select = ref_keys + [src_ldts] + [src_rsrc] -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{% if is_incremental() -%}\n{# Get all target ref_keys out of the existing ref_table for later incremental logic. #}\n    distinct_target_ref_keys AS (\n\n        SELECT\n            {{ datavault4dbt.concat_ws(ref_keys) }}\n        FROM {{ this }}\n\n    ),\n    {%- if ns.has_rsrc_static_defined -%}\n        {% for source_model in source_models %}\n         {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n            {%- set source_number = source_model.id | string -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number] -%}\n\n            {{log('rsrc_statics: '~ rsrc_statics, false) }}\n\n            {%- set rsrc_static_query_source -%}\n                SELECT count(*) FROM (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.{{ src_rsrc }},\n                    CAST('{{ rsrc_static }}' AS VARCHAR) AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                )\n            {% endset %}\n\n            rsrc_static_{{ source_number }} AS (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT \n                    t.{{ src_ldts }},\n                    CAST('{{ rsrc_static }}' AS VARCHAR) AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} LIKE '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                {%- set ns.last_cte = \"rsrc_static_{}\".format(source_number) -%}\n            ),\n\n            {%- set source_in_target = true -%}\n\n            {%- if execute -%}\n                {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n\n                {%- set row_count = rsrc_static_result.columns[0].values()[0] -%}\n\n                {{ log('row_count for '~source_model~' is '~row_count, false) }}\n\n                {%- if row_count == 0 -%}\n                {%- set source_in_target = false -%}\n                {%- endif -%}\n            {%- endif -%}\n\n\n            {%- do ns.source_included_before.update({source_model.id: source_in_target}) -%}\n\n        {% endfor -%}\n\n        {%- if source_models | length > 1 %}\n\n        rsrc_static_union AS (\n            {#  Create one unionized table over all sources. It will be the same as the already existing\n                hub, but extended by the rsrc_static column. #}\n            {% for source_model in source_models %}\n            {%- set source_number = source_model.id | string -%}\n\n            SELECT rsrc_static_{{ source_number }}.* FROM rsrc_static_{{ source_number }}\n\n            {%- if not loop.last %}\n            UNION ALL\n            {% endif -%}\n            {%- endfor %}\n            {%- set ns.last_cte = \"rsrc_static_union\" -%}\n        ),\n\n        {%- endif %}\n\n        max_ldts_per_rsrc_static_in_target AS (\n        {# Use the previously created CTE to calculate the max load date timestamp per rsrc_static. #}\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) as max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif %}\n{% endif -%}\n\n{% for source_model in source_models %}\n\n    {%- set source_number = source_model.id | string -%}\n\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = ns.source_models_rsrc_dict.id -%}\n    {%- endif -%}\n\n\n    src_new_{{ source_number }} AS (\n\n        SELECT\n            {% for ref_key in source_model['ref_keys'] -%}\n            {{ ref_key}},\n            {% endfor -%}\n\n            {{ src_ldts }},\n            {{ src_rsrc }}\n        FROM {{ ref(source_model.name) }} src\n\n    {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_number] %}\n        INNER JOIN max_ldts_per_rsrc_static_in_target max ON\n        ({%- for rsrc_static in rsrc_statics -%}\n            max.rsrc_static = '{{ rsrc_static }}'\n            {%- if not loop.last -%} OR\n            {% endif -%}\n        {%- endfor %})\n        WHERE src.{{ src_ldts }} > max.max_ldts\n    {%- endif %}\n\n         {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n    ),\n{%- endfor -%}\n\n{%- if source_models | length > 1 %}\n\nsource_new_union AS (\n\n    {%- for source_model in source_models -%}\n\n    {%- set source_number = source_model.id | string -%}\n\n    SELECT\n        {% for ref_key in source_model['ref_keys'] -%}\n            {{ ref_key }} AS {{ ref_keys[loop.index - 1] }},\n        {% endfor -%}\n\n        {{ src_ldts }},\n        {{ src_rsrc }}\n    FROM src_new_{{ source_number }}\n\n    {%- if not loop.last %}\n    UNION ALL\n    {% endif -%}\n\n    {%- endfor -%}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif %}\n\n\nearliest_ref_key_over_all_sources_prep AS (\n{%- for source_model in source_models -%}\n    SELECT\n        lcte.*,\n        ROW_NUMBER() OVER (PARTITION BY {% for ref_key in source_model['ref_keys'] -%} \n                                        {{ ref_key}}\n                                        {% endfor -%} \n        ORDER BY {{ src_ldts}}) as rn\n    FROM {{ ns.last_cte }} AS lcte)\n{%- endfor -%},\n\nearliest_ref_key_over_all_sources AS (\n\n    {#- Deduplicate the unionized records again to only insert the earliest one. #}\n    SELECT\n        lcte.*\n    FROM earliest_ref_key_over_all_sources_prep AS lcte\n        WHERE rn = 1\n    {%- set ns.last_cte = 'earliest_ref_key_over_all_sources' -%}),\n\nrecords_to_insert AS (\n    {#- Select everything from the previous CTE, if incremental filter for hashkeys that are not already in the hub. #}\n    SELECT\n        {{ datavault4dbt.print_list(final_columns_to_select) }}\n    FROM {{ ns.last_cte }}\n\n    {%- if is_incremental() %}\n    WHERE {{ datavault4dbt.concat_ws(ref_keys) }} NOT IN (SELECT * FROM distinct_target_ref_keys)\n    {% endif -%}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.is_list", "macro.datavault4dbt.source_model_processing", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.datavault4dbt.concat_ws", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.123904, "supported_languages": null}, "macro.datavault4dbt.redshift__nh_sat": {"name": "redshift__nh_sat", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/redshift/nh_sat.sql", "original_file_path": "macros/tables/redshift/nh_sat.sql", "unique_id": "macro.datavault4dbt.redshift__nh_sat", "macro_sql": "{%- macro redshift__nh_sat(parent_hashkey, src_payload, src_ldts, src_rsrc, source_model, source_is_single_batch) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set source_cols = datavault4dbt.expand_column_list(columns=[parent_hashkey, src_ldts, src_rsrc, src_payload]) -%}\n\n{%- set source_relation = ref(source_model) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Selecting all source data, that is newer than latest data in sat if incremental #}\nsource_data AS (\n\n    SELECT\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM {{ source_relation }}\n\n    {%- if is_incremental() %}\n    WHERE {{ src_ldts }} > (\n        SELECT\n            MAX({{ src_ldts }}) FROM {{ this }}\n        WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    )\n    {%- endif %}\n\n    {% if not source_is_single_batch -%}\n    {%- if not is_incremental() %} redshift_requires_an_alias_if_the_qualify_is_directly_after_the_from {%- endif %}\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY {{ parent_hashkey }} ORDER BY {{ src_ldts }}) = 1\n        \n    {%- endif %} \n),\n\n{% if is_incremental() -%}\n{# Get distinct list of hashkeys inside the existing satellite, if incremental. #}\ndistinct_hashkeys AS (\n\n    SELECT DISTINCT\n        {{ parent_hashkey }}\n    FROM {{ this }}\n\n    ),\n\n{%- endif %}\n\n{#\n    Select all records from the source. If incremental, insert only records, where the\n    hashkey is not already in the existing satellite.\n#}\nrecords_to_insert AS (\n\n    SELECT\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM source_data\n    {%- if is_incremental() %}\n    WHERE NOT EXISTS (SELECT 1 FROM distinct_hashkeys \n                WHERE source_data.{{ parent_hashkey }} = distinct_hashkeys.{{ parent_hashkey }})\n    {%- endif %}\n\n    )\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.print_list", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.124927, "supported_languages": null}, "macro.datavault4dbt.redshift__ma_sat_v1": {"name": "redshift__ma_sat_v1", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/redshift/ma_sat_v1.sql", "original_file_path": "macros/tables/redshift/ma_sat_v1.sql", "unique_id": "macro.datavault4dbt.redshift__ma_sat_v1", "macro_sql": "{%- macro redshift__ma_sat_v1(sat_v0, hashkey, hashdiff, ma_attribute, src_ldts, src_rsrc, ledts_alias, add_is_current_flag) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set is_current_col_alias = var('datavault4dbt.is_current_col_alias', 'IS_CURRENT') -%}\n\n{%- set source_relation = ref(sat_v0) -%}\n{%- set all_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n{%- set exclude = datavault4dbt.expand_column_list(columns=[hashkey, hashdiff, ma_attribute, src_ldts, src_rsrc]) -%}\n{%- set ma_attributes = datavault4dbt.expand_column_list(columns=[ma_attribute]) -%}\n\n\n{%- set source_columns_to_select = datavault4dbt.process_columns_to_select(all_columns, exclude) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Getting everything from the underlying v0 satellite. #}\nsource_satellite AS (\n\n    SELECT src.*\n    FROM {{ source_relation }} as src\n\n),\n\n{# Selecting all distinct loads per hashkey. #}\ndistinct_hk_ldts AS (\n\n    SELECT DISTINCT\n        {{ hashkey }},\n        {{ src_ldts }}\n    FROM source_satellite\n\n),\n\n{# End-dating each ldts for each hashkey, based on earlier ldts per hashkey. #}\nend_dated_loads AS (\n\n    SELECT\n        {{ hashkey }},\n        {{ src_ldts }},\n        COALESCE(LEAD({{ src_ldts }} - INTERVAL '00:00:00.000001') OVER (PARTITION BY {{ hashkey }} ORDER BY {{ src_ldts }}),{{ datavault4dbt.string_to_timestamp(timestamp_format,end_of_all_times) }}) as {{ ledts_alias }}\n    FROM distinct_hk_ldts\n\n),\n\n{# End-date each source record, based on the end-date for each load. #}\nend_dated_source AS (\n\n    SELECT\n        src.{{ hashkey }},\n        src.{{ hashdiff }},\n        src.{{ src_rsrc }},\n        src.{{ src_ldts }},\n        edl.{{ ledts_alias }},\n        {%- if add_is_current_flag %}\n            CASE WHEN {{ ledts_alias }} = {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            THEN TRUE\n            ELSE FALSE\n            END AS {{ is_current_col_alias }},\n        {% endif %}\n        {{- datavault4dbt.print_list(ma_attributes, indent=10, src_alias='src') }},\n        {{- datavault4dbt.print_list(source_columns_to_select, indent=10, src_alias='src') }}\n    FROM source_satellite AS src\n    LEFT JOIN end_dated_loads edl\n        ON src.{{ hashkey }} = edl.{{ hashkey }}\n        AND src.{{ src_ldts }} = edl.{{ src_ldts }}\n\n)\n\nSELECT * FROM end_dated_source\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.source_columns", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.126196, "supported_languages": null}, "macro.datavault4dbt.redshift__ma_sat_v0": {"name": "redshift__ma_sat_v0", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/redshift/ma_sat_v0.sql", "original_file_path": "macros/tables/redshift/ma_sat_v0.sql", "unique_id": "macro.datavault4dbt.redshift__ma_sat_v0", "macro_sql": "{%- macro redshift__ma_sat_v0(parent_hashkey, src_hashdiff, src_ma_key, src_payload, src_ldts, src_rsrc, source_model) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set ns=namespace(src_hashdiff=\"\", hdiff_alias=\"\") %}\n{%- if  src_hashdiff is mapping and src_hashdiff is not none -%}\n    {% set ns.src_hashdiff = src_hashdiff[\"source_column\"] %}\n    {% set ns.hdiff_alias = src_hashdiff[\"alias\"] %}\n{% else %}\n    {% set ns.src_hashdiff = src_hashdiff %}\n    {% set ns.hdiff_alias = src_hashdiff  %}\n{%- endif -%}\n\n{%- set source_cols = datavault4dbt.expand_column_list(columns=[src_rsrc, src_ldts, src_ma_key, src_payload]) -%}\n\n{%- set source_relation = ref(source_model) -%}\n\n\nWITH\n\n{# Selecting all source data, that is newer than latest data in sat if incremental #}\nsource_data AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ ns.src_hashdiff }} as {{ ns.hdiff_alias }},\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM {{ source_relation }}\n\n    {%- if is_incremental() %}\n    WHERE {{ src_ldts }} > (\n        SELECT\n            MAX({{ src_ldts }}) FROM {{ this }}\n        WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    )\n    {%- endif %}\n\n),\n\n{# Get the latest record for each parent hashkey in existing sat, if incremental. #}\n{%- if is_incremental() %}\nlatest_entries_in_sat_prep AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ ns.hdiff_alias }},\n        ROW_NUMBER() OVER(PARTITION BY {{ parent_hashkey|lower }} ORDER BY {{ src_ldts }} DESC) as rn\n    FROM \n        {{ this }}\n),\n\nlatest_entries_in_sat AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ ns.hdiff_alias }}\n    FROM \n        latest_entries_in_sat_prep\n    WHERE rn = 1  \n),\n{%- endif %}\n\n{# Get a list of all distinct hashdiffs that exist for each parent_hashkey. #}\n lag_source_data AS (\n  SELECT \n    {{ parent_hashkey }},\n    {{ src_ldts }},\n    {{ ns.hdiff_alias }},\n    LAG({{ ns.hdiff_alias }}) OVER (PARTITION BY {{ parent_hashkey }} ORDER BY {{ src_ldts }}) as prev_ns_hdiff_alias\n  FROM source_data\n),\n\ndeduped_row_hashdiff AS (\n  SELECT \n    {{ parent_hashkey }},\n    {{ src_ldts }},\n    {{ ns.hdiff_alias }}\n  FROM lag_source_data\n  WHERE {{ ns.hdiff_alias }} != prev_ns_hdiff_alias OR prev_ns_hdiff_alias IS NULL\n),\n\n{# Dedupe the source data regarding non-delta groups. #}\ndeduped_rows AS (\n\n  SELECT \n    source_data.{{ parent_hashkey }},\n    source_data.{{ ns.hdiff_alias }},\n    {{ datavault4dbt.alias_all(columns=source_cols, prefix='source_data') }}\n  FROM source_data\n  INNER JOIN deduped_row_hashdiff\n    ON {{ datavault4dbt.multikey(parent_hashkey, prefix=['source_data', 'deduped_row_hashdiff'], condition='=') }}\n    AND {{ datavault4dbt.multikey(src_ldts, prefix=['source_data', 'deduped_row_hashdiff'], condition='=') }}\n    AND {{ datavault4dbt.multikey(ns.hdiff_alias, prefix=['source_data', 'deduped_row_hashdiff'], condition='=') }}\n\n),\n\nrecords_to_insert AS (\n\n    SELECT\n        deduped_rows.{{ parent_hashkey }},\n        deduped_rows.{{ ns.hdiff_alias }},\n        {{ datavault4dbt.alias_all(columns=source_cols, prefix='deduped_rows') }}\n    FROM deduped_rows\n    {%- if is_incremental() %}\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE {{ datavault4dbt.multikey(parent_hashkey, prefix=['latest_entries_in_sat', 'deduped_rows'], condition='=') }}\n            AND {{ datavault4dbt.multikey(ns.hdiff_alias, prefix=['latest_entries_in_sat', 'deduped_rows'], condition='=') }} \n            )\n    {%- endif %}\n\n    )\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.print_list", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.alias_all", "macro.datavault4dbt.multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.128343, "supported_languages": null}, "macro.datavault4dbt.redshift__sat_v0": {"name": "redshift__sat_v0", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/redshift/sat_v0.sql", "original_file_path": "macros/tables/redshift/sat_v0.sql", "unique_id": "macro.datavault4dbt.redshift__sat_v0", "macro_sql": "{%- macro redshift__sat_v0(parent_hashkey, src_hashdiff, src_payload, src_ldts, src_rsrc, source_model) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set ns=namespace(src_hashdiff=\"\", hdiff_alias=\"\") %}\n\n{%- if  src_hashdiff is mapping and src_hashdiff is not none -%}\n    {% set ns.src_hashdiff = src_hashdiff[\"source_column\"] %}\n    {% set ns.hdiff_alias = src_hashdiff[\"alias\"] %}\n{% else %}\n    {% set ns.src_hashdiff = src_hashdiff %}\n    {% set ns.hdiff_alias = src_hashdiff  %}\n{%- endif -%}\n\n{%- set source_cols = datavault4dbt.expand_column_list(columns=[src_rsrc, src_ldts, src_payload]) -%}\n\n{%- set source_relation = ref(source_model) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Selecting all source data, that is newer than latest data in sat if incremental #}\nsource_data AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ ns.src_hashdiff }} as {{ ns.hdiff_alias }},\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM {{ source_relation }}\n\n    {%- if is_incremental() %}\n    WHERE {{ src_ldts }} > (\n        SELECT\n            MAX({{ src_ldts }}) FROM {{ this }}\n        WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    )\n    {%- endif %}\n),\n\n{# Get the latest record for each parent hashkey in existing sat, if incremental. #}\n{%- if is_incremental() %}\nlatest_entries_in_sat_prep AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ ns.hdiff_alias }},\n        ROW_NUMBER() OVER(PARTITION BY {{ parent_hashkey|lower }} ORDER BY {{ src_ldts }} DESC) as rn\n    FROM \n        {{ this }}\n),\n\nlatest_entries_in_sat AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ ns.hdiff_alias }}\n    FROM \n        latest_entries_in_sat_prep\n    WHERE rn = 1  \n),\n{%- endif %}\n\n{#\n    Deduplicate source by comparing each hashdiff to the hashdiff of the previous record, for each hashkey.\n    Additionally adding a row number based on that order, if incremental.\n#}\ndeduplicated_numbered_source_prep AS (\n\n    SELECT\n    {{ parent_hashkey }},\n    {{ ns.hdiff_alias }},\n    {{ datavault4dbt.print_list(source_cols) }}\n    {% if is_incremental() -%}\n    , ROW_NUMBER() OVER(PARTITION BY {{ parent_hashkey }} ORDER BY {{ src_ldts }}) as rn\n    {%- endif %}\n    , LAG({{ ns.hdiff_alias }}) OVER(PARTITION BY {{ parent_hashkey|lower }} ORDER BY {{ src_ldts }}) as prev_hashdiff\n    FROM source_data\n\n),\n\ndeduplicated_numbered_source AS (\n\n    SELECT\n    {{ parent_hashkey }},\n    {{ ns.hdiff_alias }},\n    {{ datavault4dbt.print_list(source_cols) }}\n    FROM deduplicated_numbered_source_prep\n    WHERE 1=1\n        AND {{ ns.hdiff_alias }} <> prev_hashdiff OR prev_hashdiff IS NULL\n        {% if is_incremental() -%}\n        AND rn = 1\n        {%- endif %}\n),\n\n{#\n    Select all records from the previous CTE. If incremental, compare the oldest incoming entry to\n    the existing records in the satellite.\n#}\nrecords_to_insert AS (\n\n    SELECT\n    {{ parent_hashkey }},\n    {{ ns.hdiff_alias }},\n    {{ datavault4dbt.print_list(source_cols) }}\n    FROM deduplicated_numbered_source\n    {%- if is_incremental() %}\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE {{ datavault4dbt.multikey(parent_hashkey, prefix=['latest_entries_in_sat', 'deduplicated_numbered_source'], condition='=') }}\n            AND {{ datavault4dbt.multikey(ns.hdiff_alias, prefix=['latest_entries_in_sat', 'deduplicated_numbered_source'], condition='=') }})\n    {%- endif %}\n\n    )\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.print_list", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.13027, "supported_languages": null}, "macro.datavault4dbt.redshift__rec_track_sat": {"name": "redshift__rec_track_sat", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/redshift/rec_track_sat.sql", "original_file_path": "macros/tables/redshift/rec_track_sat.sql", "unique_id": "macro.datavault4dbt.redshift__rec_track_sat", "macro_sql": "{%- macro redshift__rec_track_sat(tracked_hashkey, source_models, src_ldts, src_rsrc, src_stg, disable_hwm) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{# Setting the unknown and error ghost record value for record source column #}\n{%- set rsrc_unknown = var('datavault4dbt.default_unknown_rsrc', 'SYSTEM') -%}\n{%- set rsrc_error = var('datavault4dbt.default_error_rsrc', 'ERROR') -%}\n\n{# Setting the rsrc and stg_alias default datatype and length #}\n{%- set rsrc_default_dtype = var('datavault4dbt.rsrc_default_dtype', 'STRING') -%}\n{%- set stg_default_dtype = var('datavault4dbt.stg_default_dtype', 'STRING') -%}\n{%- set ns = namespace(last_cte = '', source_included_before = {},  source_models_rsrc_dict={},  has_rsrc_static_defined=true) -%}\n\n{%- if source_models is not mapping and not datavault4dbt.is_list(source_models) -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- set source_model_values = fromjson(datavault4dbt.source_model_processing(source_models=source_models, parameters={'hk_column':tracked_hashkey})) -%}\n{%- set source_models = source_model_values['source_model_list'] -%}\n{%- set ns.has_rsrc_static_defined = source_model_values['has_rsrc_static_defined'] -%}\n{%- set ns.source_models_rsrc_dict = source_model_values['source_models_rsrc_dict'] -%}\n{{ log('source_models: '~source_models, false) }}\n\n{%- set final_columns_to_select = [tracked_hashkey] + [src_ldts] + [src_rsrc] + [src_stg] -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{% if is_incremental() %}\n\n    distinct_concated_target AS (\n        {%- set concat_columns = [tracked_hashkey, src_ldts, src_rsrc] -%}\n        {{ \"\\n\" }}\n        SELECT\n        {{ datavault4dbt.concat_ws(concat_columns) }} as concat\n        FROM {{ this }}\n    ),\n    {%- if ns.has_rsrc_static_defined and not disable_hwm -%}\n        rsrc_static_unionized AS (\n        {% for source_model in source_models %}\n        {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n              {%- set source_number = source_model.id | string -%}\n            {%- set hk_column = source_model['hk_column'] -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number] -%}\n\n            {%- set rsrc_static_query_source_count -%}\n                SELECT count(*) FROM (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT \n                    {{ tracked_hashkey }},\n                    {{ src_ldts }},\n                    CAST('{{ rsrc_static }}' AS VARCHAR) AS rsrc_static\n                    FROM {{ this }}\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %} \n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                ) AS test\n            {% endset %}\n\n            {%- set rsrc_static_query_source -%}\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT \n                    {{ tracked_hashkey }},\n                    {{ src_ldts }},\n                    CAST('{{ rsrc_static }}' AS VARCHAR) AS rsrc_static\n                    FROM {{ this }}\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %} \n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n            {% endset %}\n\n            {{ rsrc_static_query_source }}  \n\n            {%- set source_in_target = true -%}\n            \n            {%- if execute -%}\n                {%- set rsrc_static_result = run_query(rsrc_static_query_source_count) -%}\n\n                {%- set row_count = rsrc_static_result.columns[0].values()[0] -%}\n\n                {{ log('row_count for '~source_model~' is '~row_count, false) }}\n\n                {%- if row_count == 0 -%}\n                    {%- set source_in_target = false -%}\n                {%- endif -%}\n            {%- endif -%}\n\n            {%- do ns.source_included_before.update({source_model.id: source_in_target}) -%}\n            {# Unionize over all sources #}\n            {%- if not loop.last %}\n                UNION ALL \n            {% endif -%}\n\n        {% endfor -%}\n        {%- set ns.last_cte = \"rsrc_static_unionized\" -%}\n        ),\n\n        max_ldts_per_rsrc_static_in_target AS (\n\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) as max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif %}\n{% endif -%}\n\n{#\n    We deduplicate each source over hashkey + ldts + rsrc_static and if is_incremental only select the rows, where the ldts is later\n    than the latest one in the existing satellite for that rsrc_static. If a source is added to the existing satellite, all deduplicated\n    rows from that source are loaded into the satellite.\n#}\n\n{%- for source_model in source_models %}\n\n    {%- set source_number = source_model.id | string -%}\n    {%- set hk_column = source_model['hk_column'] -%}\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number|string] -%}\n\n        src_new_{{ source_number }} AS (\n        {%- for rsrc_static in rsrc_statics %}\n            SELECT DISTINCT\n                {{ hk_column }} AS {{ tracked_hashkey }},\n                {{ src_ldts }},\n                CAST('{{ rsrc_static }}' AS {{ rsrc_default_dtype }} ) AS {{ src_rsrc }},\n                CAST(UPPER('{{ source_model.name }}') AS {{ stg_default_dtype }})  AS {{ src_stg }}\n            FROM {{ ref(source_model.name) }} src\n\n\n            {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_number|int] and not disable_hwm %}\n                INNER JOIN max_ldts_per_rsrc_static_in_target max\n                    ON max.rsrc_static = '{{ rsrc_static }}'\n                WHERE src.{{ src_ldts }} > max.max_ldts\n            {%- endif %}\n            {%- if not loop.last %}\n                UNION ALL\n            {% endif -%}\n        {% endfor %}\n\n        ),\n    {%- else -%}\n        src_new_{{ source_number}} AS (\n            SELECT DISTINCT\n                {{ hk_column }} AS {{ tracked_hashkey }},\n                {{ src_ldts }},\n                CAST({{ src_rsrc }} AS {{ rsrc_default_dtype }}) AS {{ src_rsrc }},\n                CAST(UPPER('{{ source_model.name }}') AS {{ stg_default_dtype }}) AS {{ src_stg }}\n            FROM {{ ref(source_model.name) }} src\n            {%- if is_incremental() and source_models | length == 1 and not disable_hwm %}\n                WHERE src.{{ src_ldts }} > (\n            SELECT MAX({{ src_ldts }})\n            FROM {{ this }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            )\n            {%- endif %}\n        ),\n    {%- endif -%}\n\n    {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n{% endfor %}\n\n{#\n    If more than one source model is selected, all previously created deduplicated CTEs are unionized.\n#}\n\n{%- if source_models | length > 1 %}\n\nsource_new_union AS (\n    {% for source_model in source_models %}\n        {%- set hk_column = source_model['hk_column'] -%}\n        {%- set source_number = source_model.id | string -%}\n\n        SELECT\n        {{ tracked_hashkey }},\n        {{ src_ldts }},\n        {{ src_rsrc }},\n        {{ src_stg }}\n        FROM src_new_{{ source_number }}\n\n        {%- if not loop.last %}\n        UNION ALL\n        {% endif -%}\n\n    {% endfor %}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif -%}\n\n{#\n    Selecting everything, either from the unionized data, or from the single CTE (if single source). Checking against the existing\n    satellite to only inserts that are not already inserted, if incremental run.\n#}\n\nrecords_to_insert AS (\n\n    SELECT\n    {{ datavault4dbt.print_list(final_columns_to_select) }}\n    FROM {{ ns.last_cte }}\n    WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }} \n    AND {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }}\n    {%- if is_incremental() %}\n        AND {{ datavault4dbt.concat_ws(concat_columns) }} NOT IN (SELECT * FROM distinct_concated_target)\n    {% endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.is_list", "macro.datavault4dbt.source_model_processing", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.datavault4dbt.concat_ws", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.134876, "supported_languages": null}, "macro.datavault4dbt.redshift__sat_v1": {"name": "redshift__sat_v1", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/redshift/sat_v1.sql", "original_file_path": "macros/tables/redshift/sat_v1.sql", "unique_id": "macro.datavault4dbt.redshift__sat_v1", "macro_sql": "{%- macro redshift__sat_v1(sat_v0, hashkey, hashdiff, src_ldts, src_rsrc, ledts_alias, add_is_current_flag,include_payload) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set is_current_col_alias = var('datavault4dbt.is_current_col_alias', 'IS_CURRENT') -%}\n{%- set ledts_alias = var('datavault4dbt.ledts_alias', 'ledts') -%}\n\n{%- set source_relation = ref(sat_v0) -%}\n\n{%- set all_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n{%- set exclude = [hashkey, hashdiff, src_ldts, src_rsrc] -%}\n\n{%- set source_columns_to_select = datavault4dbt.process_columns_to_select(all_columns, exclude) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Calculate ledts based on the ldts of the earlier record. #}\nend_dated_source AS (\n\n    SELECT\n        {{ hashkey }},\n        {{ hashdiff }},\n        {{ src_rsrc }},\n        {{ src_ldts }},\n        COALESCE(LEAD({{ src_ldts }} - interval '00:00:00.000001') OVER (PARTITION BY {{ hashkey }} ORDER BY {{ src_ldts }}),{{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}) as {{ ledts_alias }}\n        {%- if include_payload -%},\n            {{ datavault4dbt.print_list(source_columns_to_select) }}\n        {%- endif %}\n    FROM {{ source_relation }}\n\n)\n\nSELECT\n    {{ hashkey }},\n    {{ hashdiff }},\n    {{ src_rsrc }},\n    {{ src_ldts }},\n    {{ ledts_alias }}\n    {%- if add_is_current_flag %}\n        , CASE WHEN {{ ledts_alias }} = {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n        THEN TRUE\n        ELSE FALSE\n        END AS {{ is_current_col_alias }}\n    {% endif -%}\n    {%- if include_payload -%}\n        , {{ datavault4dbt.print_list(source_columns_to_select) }}\n    {%- endif %}\nFROM end_dated_source\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.source_columns", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.136002, "supported_languages": null}, "macro.datavault4dbt.postgres__control_snap_v0": {"name": "postgres__control_snap_v0", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/postgres/control_snap_v0.sql", "original_file_path": "macros/tables/postgres/control_snap_v0.sql", "unique_id": "macro.datavault4dbt.postgres__control_snap_v0", "macro_sql": "{%- macro postgres__control_snap_v0(start_date, daily_snapshot_time, sdts_alias) -%}\n\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- if not datavault4dbt.is_something(sdts_alias) -%}\n    {%- set sdts_alias = var('datavault4dbt.sdts_alias', 'sdts') -%}\n{%- endif -%}\n\nWITH\n\ninitial_timestamps AS (\n    \n    SELECT\n        sdts::timestamp\n    FROM \n        generate_series(timestamp '{{ start_date }} {{ daily_snapshot_time }}', CURRENT_TIMESTAMP, Interval '1 day') AS sdts(day)\n    {%- if is_incremental() %}\n    WHERE\n        sdts > (SELECT MAX({{ sdts_alias }}) FROM {{ this }})\n    {%- endif %}\n\n),\n\nenriched_timestamps AS (\n\n    SELECT\n        sdts as {{ sdts_alias }},\n        TRUE as force_active,\n        sdts as replacement_sdts,\n        CONCAT('Snapshot ', DATE(sdts)) as caption,\n        CASE\n            WHEN EXTRACT(MINUTE FROM sdts) = 0 AND EXTRACT(SECOND FROM sdts) = 0 THEN TRUE\n            ELSE FALSE\n        END as is_hourly,\n        CASE\n            WHEN EXTRACT(MINUTE FROM sdts) = 0 AND EXTRACT(SECOND FROM sdts) = 0 AND EXTRACT(HOUR FROM sdts) = 0 THEN TRUE\n            ELSE FALSE\n        END as is_daily,\n        CASE\n            WHEN EXTRACT(isodow FROM  sdts) = 1 THEN TRUE\n            ELSE FALSE\n        END as is_weekly,\n        CASE\n            WHEN EXTRACT(DAY FROM sdts) = 1 THEN TRUE\n            ELSE FALSE\n        END as is_monthly,\n        CASE\n            WHEN EXTRACT(DAY FROM sdts) = 1 AND EXTRACT(MONTH FROM sdts) = 1 THEN TRUE\n            ELSE FALSE\n        END as is_yearly,\n        NULL as comment\n    FROM initial_timestamps\n\n)\n\nSELECT * FROM enriched_timestamps\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.is_something", "macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.1365309, "supported_languages": null}, "macro.datavault4dbt.postgres__control_snap_v1": {"name": "postgres__control_snap_v1", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/postgres/control_snap_v1.sql", "original_file_path": "macros/tables/postgres/control_snap_v1.sql", "unique_id": "macro.datavault4dbt.postgres__control_snap_v1", "macro_sql": "{%- macro postgres__control_snap_v1(control_snap_v0, log_logic, sdts_alias) -%}\n\n{# Sample intervals\n   {%-set log_logic = {'daily': {'duration': 3,\n                                'unit': 'MONTH',\n                                'forever': 'FALSE'},\n                      'weekly': {'duration': 1,\n                                 'unit': 'YEAR'},\n                      'monthly': {'duration': 5,\n                                  'unit': 'YEAR'},\n                      'yearly': {'forever': 'TRUE'} } %} \n#}\n\n{%- if log_logic is not none %}\n    {%- for interval in log_logic.keys() %}\n        {%- if 'forever' not in log_logic[interval].keys() -%}\n            {% do log_logic[interval].update({'forever': 'FALSE'}) %}\n        {%- endif -%}\n    {%- endfor -%}\n{%- endif %}\n\n{%- set v0_relation = ref(control_snap_v0) -%}\n{%- set ns = namespace(forever_status=FALSE) %}\n\n{%- set snapshot_trigger_column = var('datavault4dbt.snapshot_trigger_column', 'is_active') -%}\n\nWITH\n\nlatest_row AS (\n\n    SELECT\n        {{ sdts_alias }}\n    FROM {{ v0_relation }}\n    ORDER BY {{ sdts_alias }} DESC\n    LIMIT 1\n\n),\n\nvirtual_logic AS (\n\n    SELECT\n        c.{{ sdts_alias }},\n        c.replacement_sdts,\n        c.force_active,\n        {%- if log_logic is none %}\n        TRUE as {{ snapshot_trigger_column }},\n        {%- else %}\n        CASE\n            WHEN\n            {% if 'daily' in log_logic.keys() %}\n                {%- if log_logic['daily']['forever'] is true -%}\n                    {%- set ns.forever_status = 'TRUE' -%}\n                    (1=1)\n                {%- else %}\n\n                    {%- set daily_duration = log_logic['daily']['duration'] -%}\n                    {%- set daily_unit = log_logic['daily']['unit'] -%}\n\n                    c.{{ sdts_alias }} BETWEEN CURRENT_TIMESTAMP - INTERVAL '{{ daily_duration }}' {{ daily_unit }} AND CURRENT_DATE + 1\n                {%- endif -%}\n            {%- endif %}\n\n            {%- if 'weekly' in log_logic.keys() %}\n            OR\n                {%- if log_logic['weekly']['forever'] is true -%}\n                    {%- set ns.forever_status = 'TRUE' -%}\n                    (c.is_weekly = TRUE)\n                {%- else %}\n\n                    {%- set weekly_duration = log_logic['weekly']['duration'] -%}\n                    {%- set weekly_unit = log_logic['weekly']['unit'] -%}\n\n                    (\n                c.{{ sdts_alias }} BETWEEN CURRENT_DATE - INTERVAL '{{ weekly_duration }}' {{ weekly_unit }} AND CURRENT_DATE\n                AND\n                (c.is_weekly = TRUE)\n            )\n                {%- endif -%}\n            {% endif -%}\n\n            {%- if 'monthly' in log_logic.keys() %}\n            OR\n                {%- if log_logic['monthly']['forever'] is true -%}\n                    {%- set ns.forever_status = 'TRUE' -%}\n                    (c.is_monthly = TRUE)\n                {%- else %}\n\n                    {%- set monthly_duration = log_logic['monthly']['duration'] -%}\n                    {%- set monthly_unit = log_logic['monthly']['unit'] -%}\n\n                    (\n                c.{{ sdts_alias }} BETWEEN CURRENT_DATE - INTERVAL '{{ monthly_duration }}' {{ monthly_unit }} AND CURRENT_DATE\n                AND\n                (c.is_monthly = TRUE)\n            )\n                {%- endif -%}\n            {% endif -%}\n\n            {%- if 'yearly' in log_logic.keys() %}\n            OR\n                {%- if log_logic['yearly']['forever'] is true -%}\n                    {%- set ns.forever_status = 'TRUE' -%}\n                    (c.is_yearly = TRUE)\n                {%- else %}\n\n                    {%- set yearly_duration = log_logic['yearly']['duration'] -%}\n                    {%- set yearly_unit = log_logic['yearly']['unit'] -%}\n\n                    (\n                DATE FROM c.{{ sdts_alias }} BETWEEN CURRENT_DATE - INTERVAL '{{ yearly_duration }}' {{ yearly_unit }} AND CURRENT_DATE \n                AND\n                (c.is_yearly = TRUE)\n            )\n                {%- endif -%}\n            {% endif %}\n            THEN TRUE\n            ELSE FALSE\n\n        END AS {{ snapshot_trigger_column }},\n        {%- endif %}\n\n        CASE\n            WHEN l.{{ sdts_alias }} IS NULL THEN FALSE\n            ELSE TRUE\n        END AS is_latest,\n\n        c.caption,\n        c.is_hourly,\n        c.is_daily,\n        c.is_weekly,\n        c.is_monthly,\n        c.is_yearly,\n        CASE\n            WHEN EXTRACT(YEAR FROM c.{{ sdts_alias }}) = EXTRACT(YEAR FROM CURRENT_DATE) THEN TRUE\n            ELSE FALSE\n        END AS is_current_year,\n        CASE\n            WHEN EXTRACT(YEAR FROM c.{{ sdts_alias }}) = EXTRACT(YEAR FROM CURRENT_DATE)- '1' THEN TRUE\n            ELSE FALSE\n        END AS is_last_year,\n        CASE\n            WHEN c.{{ sdts_alias }} BETWEEN CURRENT_DATE - INTERVAL '1' YEAR AND CURRENT_DATE THEN TRUE\n            ELSE FALSE\n        END AS is_rolling_year,\n        CASE\n            WHEN c.{{ sdts_alias }} BETWEEN CURRENT_DATE - INTERVAL '2' YEAR AND CURRENT_DATE - INTERVAL '1' YEAR THEN TRUE\n            ELSE FALSE\n        END AS is_last_rolling_year,\n        c.comment\n    FROM {{ v0_relation }} c\n    LEFT JOIN latest_row l\n        ON c.{{ sdts_alias }} = l.{{ sdts_alias }}\n\n),\n\nactive_logic_combined AS (\n\n    SELECT \n        {{ sdts_alias }},\n        replacement_sdts,\n        CASE\n            WHEN force_active AND {{ snapshot_trigger_column }} THEN TRUE\n            WHEN NOT force_active OR NOT {{ snapshot_trigger_column }} THEN FALSE\n        END AS {{ snapshot_trigger_column }},\n        is_latest, \n        caption,\n        is_hourly,\n        is_daily,\n        is_weekly,\n        is_monthly,\n        is_yearly,\n        is_current_year,\n        is_last_year,\n        is_rolling_year,\n        is_last_rolling_year,\n        comment\n    FROM virtual_logic\n\n)\n\nSELECT * FROM active_logic_combined\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.13904, "supported_languages": null}, "macro.datavault4dbt.postgres__pit": {"name": "postgres__pit", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/postgres/pit.sql", "original_file_path": "macros/tables/postgres/pit.sql", "unique_id": "macro.datavault4dbt.postgres__pit", "macro_sql": "{%- macro postgres__pit(tracked_entity, hashkey, sat_names, ldts, ledts, sdts, snapshot_relation, dimension_key,snapshot_trigger_column=none, custom_rsrc=none, pit_type=none) -%}\n\n{%- set hash = var('datavault4dbt.hash', 'MD5') -%}\n{%- set hash_dtype = var('datavault4dbt.hash_datatype', 'STRING') -%}\n{%- set hash_default_values = fromjson(datavault4dbt.hash_default_values(hash_function=hash,hash_datatype=hash_dtype)) -%}\n{%- set hash_alg = hash_default_values['hash_alg'] -%}\n{%- set unknown_key = hash_default_values['unknown_key'] -%}\n{%- set error_key = hash_default_values['error_key'] -%}\n\n{%- if hash_dtype == 'BYTES' -%}\n    {%- set hashkey_string = 'TO_HEX({})'.format(datavault4dbt.prefix([hashkey],'te')) -%}\n{%- else -%}\n    {%- set hashkey_string = datavault4dbt.prefix([hashkey],'te') -%}\n{%- endif -%}\n\n{%- set rsrc = var('datavault4dbt.rsrc_alias', 'rsrc') -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- if datavault4dbt.is_something(pit_type) -%}\n    {%- set hashed_cols = [pit_type, hashkey_string, datavault4dbt.prefix([sdts], 'snap')] -%}\n{%- else -%}\n    {%- set hashed_cols = [hashkey_string, datavault4dbt.prefix([sdts], 'snap')] -%}\n{%- endif -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{%- if is_incremental() %}\n\nexisting_dimension_keys AS (\n\n    SELECT\n        {{ dimension_key }}\n    FROM {{ this }}\n\n),\n\n{%- endif %}\n\npit_records AS (\n\n    SELECT\n        \n        {% if datavault4dbt.is_something(pit_type) -%}\n            {{ datavault4dbt.as_constant(pit_type) }} as type,\n        {%- endif %}\n        {% if datavault4dbt.is_something(custom_rsrc) -%}\n        '{{ custom_rsrc }}' as {{ rsrc }},\n        {%- endif %}\n        {{ datavault4dbt.hash(columns=hashed_cols,\n                    alias=dimension_key,\n                    is_hashdiff=false)   }} ,\n        te.{{ hashkey }},\n        snap.{{ sdts }},\n        {% for satellite in sat_names %}\n            COALESCE({{ satellite }}.{{ hashkey }}, CAST({{ datavault4dbt.as_constant(column_str=unknown_key) }} as {{ hash_dtype }})) AS hk_{{ satellite }},\n            COALESCE({{ satellite }}.{{ ldts }}, {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }}) AS {{ ldts }}_{{ satellite }}\n            {{- \",\" if not loop.last }}\n        {%- endfor %}\n\n    FROM\n            {{ ref(tracked_entity) }} te\n        FULL OUTER JOIN\n            {{ ref(snapshot_relation) }} snap\n            {% if datavault4dbt.is_something(snapshot_trigger_column) -%}\n                ON snap.{{ snapshot_trigger_column }} = true\n            {% else -%}\n                ON 1=1\n            {%- endif %}\n        {% for satellite in sat_names %}\n        {%- set sat_columns = datavault4dbt.source_columns(ref(satellite)) %}\n        {%- if ledts|string|lower in sat_columns|map('lower') %}\n        LEFT JOIN {{ ref(satellite) }}\n        {%- else %}\n        LEFT JOIN (\n            SELECT\n                {{ hashkey }},\n                {{ ldts }},\n                COALESCE(LEAD(TIMESTAMP_SUB({{ ldts }}, INTERVAL 1 MICROSECOND)) OVER (PARTITION BY {{ hashkey }} ORDER BY {{ ldts }}),{{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}) AS {{ ledts }}\n            FROM {{ ref(satellite) }}\n        ) {{ satellite }}\n        {% endif %}\n            ON\n                {{ satellite }}.{{ hashkey}} = te.{{ hashkey }}\n                AND snap.{{ sdts }} BETWEEN {{ satellite }}.{{ ldts }} AND {{ satellite }}.{{ ledts }}\n        {% endfor %}\n    {% if datavault4dbt.is_something(snapshot_trigger_column) -%}\n        WHERE snap.{{ snapshot_trigger_column }}\n    {%- endif %}\n\n),\n\nrecords_to_insert AS (\n\n    SELECT DISTINCT *\n    FROM pit_records\n    {%- if is_incremental() %}\n    WHERE NOT EXISTS (SELECT 1 FROM existing_dimension_keys \n                        WHERE existing_dimension_keys.{{ dimension_key }} = pit_records.{{ dimension_key }})\n    {% endif -%}\n\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.hash_default_values", "macro.datavault4dbt.prefix", "macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.is_something", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.datavault4dbt.as_constant", "macro.datavault4dbt.hash", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.source_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.141823, "supported_languages": null}, "macro.datavault4dbt.postgres__ref_sat_v0": {"name": "postgres__ref_sat_v0", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/postgres/ref_sat_v0.sql", "original_file_path": "macros/tables/postgres/ref_sat_v0.sql", "unique_id": "macro.datavault4dbt.postgres__ref_sat_v0", "macro_sql": "{%- macro postgres__ref_sat_v0(parent_ref_keys, src_hashdiff, src_payload, src_ldts, src_rsrc, source_model) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set parent_ref_keys = datavault4dbt.expand_column_list(columns=[parent_ref_keys]) -%}\n\n{%- set ns=namespace(src_hashdiff=\"\", hdiff_alias=\"\") %}\n\n{%- if  src_hashdiff is mapping and src_hashdiff is not none -%}\n    {% set ns.src_hashdiff = src_hashdiff[\"source_column\"] %}\n    {% set ns.hdiff_alias = src_hashdiff[\"alias\"] %}\n{% else %}\n    {% set ns.src_hashdiff = src_hashdiff %}\n    {% set ns.hdiff_alias = src_hashdiff  %}\n{%- endif -%}\n\n{%- set source_cols = datavault4dbt.expand_column_list(columns=[src_rsrc, src_ldts, src_payload]) -%}\n\n{%- set source_relation = ref(source_model) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Selecting all source data, that is newer than latest data in ref_sat if incremental #}\nsource_data AS (\n\n    SELECT\n        {% for ref_key in parent_ref_keys %}\n        {{ref_key}},\n        {% endfor %}\n        {{ ns.src_hashdiff }} as {{ ns.hdiff_alias }},\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM {{ source_relation }}\n\n    {%- if is_incremental() %}\n    WHERE {{ src_ldts }} > (\n        SELECT\n            MAX({{ src_ldts }}) FROM {{ this }}\n        WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    )\n    {%- endif %}\n),\n\n{# Get the latest record for each parent ref key combination in existing sat, if incremental. #}\n{%- if is_incremental() %}\nlatest_entries_in_sat_prep AS (\n\n    SELECT\n        {% for ref_key in parent_ref_keys %}\n        {{ref_key}},\n        {% endfor %}\n        {{ ns.hdiff_alias }},\n        ROW_NUMBER() OVER(PARTITION BY {%- for ref_key in parent_ref_keys %} {{ref_key|lower}} {%- if not loop.last %}, {% endif %}{% endfor %} ORDER BY {{ src_ldts }} DESC) as rn\n    FROM \n        {{ this }}\n),\n\nlatest_entries_in_sat AS (\n\n    SELECT\n        {% for ref_key in parent_ref_keys %}\n        {{ref_key}},\n        {% endfor %}\n        {{ ns.hdiff_alias }}\n    FROM \n        latest_entries_in_sat_prep\n    WHERE rn = 1  \n),\n{%- endif %}\n\n{#\n    Deduplicate source by comparing each hashdiff to the hashdiff of the previous record, for each parent ref key combination.\n    Additionally adding a row number based on that order, if incremental.\n#}\ndeduplicated_numbered_source_prep AS (\n\n    SELECT\n    {% for ref_key in parent_ref_keys %}\n    {{ref_key}},\n    {% endfor %}\n    {{ ns.hdiff_alias }},\n    {{ datavault4dbt.print_list(source_cols) }}\n    {% if is_incremental() -%}\n    , ROW_NUMBER() OVER(PARTITION BY {%- for ref_key in parent_ref_keys %} {{ref_key}} {%- if not loop.last %}, {% endif %}{% endfor %} ORDER BY {{ src_ldts }}) as rn\n    {%- endif %}\n    , LAG({{ ns.hdiff_alias }}) OVER(PARTITION BY {%- for ref_key in parent_ref_keys %} {{ref_key|lower}} {%- if not loop.last %}, {% endif %}{% endfor %} ORDER BY {{ src_ldts }}) as prev_hashdiff\n    FROM source_data\n),\n\ndeduplicated_numbered_source AS (\n\n    SELECT\n    {% for ref_key in parent_ref_keys %}\n    {{ref_key}},\n    {% endfor %}\n    {{ ns.hdiff_alias }},\n    {{ datavault4dbt.print_list(source_cols) }}\n    FROM deduplicated_numbered_source_prep\n    WHERE 1=1\n        AND {{ ns.hdiff_alias }} <> prev_hashdiff OR prev_hashdiff IS NULL\n        {% if is_incremental() -%}\n        AND rn = 1\n        {%- endif %}\n),\n\n{#\n    Select all records from the previous CTE. If incremental, compare the oldest incoming entry to\n    the existing records in the satellite.\n#}\nrecords_to_insert AS (\n\n    SELECT\n    {% for ref_key in parent_ref_keys %}\n    {{ref_key}},\n    {% endfor %}\n    {{ ns.hdiff_alias }},\n    {{ datavault4dbt.print_list(source_cols) }}\n    FROM deduplicated_numbered_source\n    {%- if is_incremental() %}\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE 1=1\n            {% for ref_key in parent_ref_keys %}\n            AND {{ datavault4dbt.multikey(ref_key, prefix=['latest_entries_in_sat', 'deduplicated_numbered_source'], condition='=') }}\n            {% endfor %}\n            AND {{ datavault4dbt.multikey(ns.hdiff_alias, prefix=['latest_entries_in_sat', 'deduplicated_numbered_source'], condition='=') }}\n            )\n    {%- endif %}\n\n    )\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.print_list", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.144448, "supported_languages": null}, "macro.datavault4dbt.postgres__ref_sat_v1": {"name": "postgres__ref_sat_v1", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/postgres/ref_sat_v1.sql", "original_file_path": "macros/tables/postgres/ref_sat_v1.sql", "unique_id": "macro.datavault4dbt.postgres__ref_sat_v1", "macro_sql": "{%- macro postgres__ref_sat_v1(ref_sat_v0, ref_keys, hashdiff, src_ldts, src_rsrc, ledts_alias, add_is_current_flag) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set is_current_col_alias = var('datavault4dbt.is_current_col_alias', 'IS_CURRENT') -%}\n\n{%- set source_relation = ref(ref_sat_v0) -%}\n\n{%- set ref_keys = datavault4dbt.expand_column_list(columns=[ref_keys]) -%}\n\n{%- set all_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n{%- set exclude = ref_keys + [hashdiff, src_ldts, src_rsrc] -%}\n\n{%- set source_columns_to_select = datavault4dbt.process_columns_to_select(all_columns, exclude) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Calculate ledts based on the ldts of the earlier record. #}\nend_dated_source AS (\n\n    SELECT\n        {% for ref_key in ref_keys %}\n        {{ref_key}},\n        {% endfor %}\n        {{ hashdiff }},\n        {{ src_rsrc }},\n        {{ src_ldts }},\n        COALESCE(LEAD({{ src_ldts }}- INTERVAL '00:00:00.000001') OVER (PARTITION BY {%- for ref_key in ref_keys %} {{ref_key}} {%- if not loop.last %}, {% endif %}{% endfor %} ORDER BY {{ src_ldts }}),{{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}) as {{ ledts_alias }},\n        {{ datavault4dbt.print_list(source_columns_to_select) }}\n    FROM {{ source_relation }}\n\n)\n\nSELECT\n    {% for ref_key in ref_keys %}\n    {{ref_key}},\n    {% endfor %}\n    {{ hashdiff }},\n    {{ src_rsrc }},\n    {{ src_ldts }},\n    {{ ledts_alias }},\n    {%- if add_is_current_flag %}\n        CASE WHEN {{ ledts_alias }} = {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n        THEN TRUE\n        ELSE FALSE\n        END AS {{ is_current_col_alias }},\n    {% endif -%}\n    {{ datavault4dbt.print_list(source_columns_to_select) }}\nFROM end_dated_source\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.source_columns", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.145694, "supported_languages": null}, "macro.datavault4dbt.postgres__nh_link": {"name": "postgres__nh_link", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/postgres/nh_link.sql", "original_file_path": "macros/tables/postgres/nh_link.sql", "unique_id": "macro.datavault4dbt.postgres__nh_link", "macro_sql": "{%- macro postgres__nh_link(link_hashkey, foreign_hashkeys, payload, source_models, src_ldts, src_rsrc, disable_hwm, source_is_single_batch) -%}\n{%- if not (foreign_hashkeys is iterable and foreign_hashkeys is not string) -%}\n\n    {%- if execute -%}\n        {{ exceptions.raise_compiler_error(\"Only one foreign key provided for this link. At least two required.\") }}\n    {%- endif %}\n\n{%- endif -%}\n{%- set ns = namespace(last_cte= \"\", source_included_before = {}, has_rsrc_static_defined=true, source_models_rsrc_dict={}) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n\n{# If no specific link_hk, fk_columns, or payload are defined for each source, we apply the values set in the link_hashkey, foreign_hashkeys, and payload variable. #}\n{# If no rsrc_static parameter is defined in ANY of the source models then the whole code block of record_source performance lookup is not executed  #}\n{# For the use of record_source performance lookup it is required that every source model has the parameter rsrc_static defined and it cannot be an empty string #}\n{%- if source_models is not mapping and not datavault4dbt.is_list(source_models) -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- set source_model_values = fromjson(datavault4dbt.source_model_processing(source_models=source_models, parameters={'link_hk':link_hashkey}, foreign_hashkeys=foreign_hashkeys, payload=payload)) -%}\n{%- set source_models = source_model_values['source_model_list'] -%}\n{%- set ns.has_rsrc_static_defined = source_model_values['has_rsrc_static_defined'] -%}\n{%- set ns.source_models_rsrc_dict = source_model_values['source_models_rsrc_dict'] -%}\n{{ log('source_models: '~source_models, false) }}\n\n{%- set final_columns_to_select = [link_hashkey] + foreign_hashkeys + [src_ldts] + [src_rsrc] + payload -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{%- if is_incremental() -%}\n{# Get all link hashkeys out of the existing link for later incremental logic. #}\n    distinct_target_hashkeys AS (\n\n        SELECT\n        {{ link_hashkey }}\n        FROM {{ this }}\n\n    ),\n    {%- if ns.has_rsrc_static_defined and not disable_hwm -%}\n        {% for source_model in source_models %}\n        {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n            {%- set source_number = source_model.id | string -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number] -%}\n\n            {{log('rsrc_statics: '~ rsrc_statics, false) }}\n\n            {%- set rsrc_static_query_source -%}\n                SELECT count(*) FROM (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.{{ src_rsrc }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                )\n            {% endset %}\n\n            rsrc_static_{{ source_number }} AS (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.*,\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                {%- set ns.last_cte = \"rsrc_static_{}\".format(source_number) -%}\n            ),\n\n            {%- set source_in_target = true -%}\n            \n            {%- if execute -%}\n                {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n\n                {%- set row_count = rsrc_static_result.columns[0].values()[0] -%}\n\n                {{ log('row_count for '~source_model~' is '~row_count, false) }}\n\n                {%- if row_count == 0 -%}\n                    {%- set source_in_target = false -%}\n                {%- endif -%}\n            {%- endif -%}\n\n\n            {%- do ns.source_included_before.update({source_model.id: source_in_target}) -%}\n\n        {% endfor -%}\n\n        {%- if source_models | length > 1 %}\n\n        rsrc_static_union AS (\n            {#  Create one unionized table over all sources. It will be the same as the already existing\n                nh_link, but extended by the rsrc_static column. #}\n\n            {% for source_model in source_models %}\n            {%- set source_number = source_model.id | string -%}\n\n            SELECT rsrc_static_{{ source_number }}.* FROM rsrc_static_{{ source_number }}\n\n            {%- if not loop.last %}\n            UNION ALL\n            {% endif -%}\n            {%- endfor %}\n            {%- set ns.last_cte = \"rsrc_static_union\" -%}\n        ),\n\n        {%- endif %}\n\n        max_ldts_per_rsrc_static_in_target AS (\n        {# Use the previously created CTE to calculate the max load date timestamp per rsrc_static. #}\n\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) AS max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif %}\n{% endif -%}\n\n{% for source_model in source_models %}\n\n{#  Select all deduplicated records from each source, and filter for records that are newer\n    than the max ldts inside the existing link, if incremental. #}\n\n    {%- set source_number = source_model.id | string -%}\n\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number|string] -%}\n    {%- endif -%}\n\n    {%- if 'link_hk' not in source_model.keys() %}\n        {%- set link_hk = link_hashkey -%}\n    {%- else -%}\n        {%- set link_hk = source_model['link_hk'] -%}\n    {% endif %}\n\nsrc_new_{{ source_number }} AS (\n\n    SELECT\n            {{ link_hk }} AS {{ link_hashkey }},\n            {% for fk in source_model['fk_columns'] -%}\n            {{ fk }},\n            {% endfor -%}\n        {{ src_ldts }},\n        {{ src_rsrc }},\n\n        {{ datavault4dbt.print_list(source_model['payload']) | indent(3) }}\n\n    FROM {{ ref(source_model.name) }} src\n    {# If the model is incremental and all sources has rsrc_static defined and valid and the source was already included before in the target transactional link #}\n    {# then an inner join is performed on the CTE for the maximum load date timestamp per record source static to get the records\n    that match any of the rsrc_static present in it #}\n    {# if there are records in the source with a newer load date time stamp than the ones present in the target, those will be selected to be inserted later #}\n    {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_number|int] and not disable_hwm %}\n        INNER JOIN max_ldts_per_rsrc_static_in_target max ON\n        ({%- for rsrc_static in rsrc_statics -%}\n            max.rsrc_static = '{{ rsrc_static }}'\n            {%- if not loop.last -%} OR\n            {% endif -%}\n        {%- endfor %})\n        WHERE src.{{ src_ldts }} > max.max_ldts\n    {%- elif is_incremental() and source_models | length == 1 and not ns.has_rsrc_static_defined and not disable_hwm %}\n        WHERE src.{{ src_ldts }} > (\n            SELECT MAX({{ src_ldts }})\n            FROM {{ this }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            )\n    {%- endif %}\n\n    {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n    ),\n{%- endfor -%}\n\n{%- if source_models | length > 1 %}\n\nsource_new_union AS (\n{# Unionize the new records from all sources. #}\n\n    {%- for source_model in source_models -%}\n\n    {%- set source_number = source_model.id | string -%}\n\n    SELECT\n        {{ link_hashkey }},\n        {% for fk in source_model['fk_columns']|list %}\n            {{ fk }} AS {{ foreign_hashkeys[loop.index - 1] }},\n        {% endfor -%}\n\n        {{ src_ldts }},\n        {{ src_rsrc }},\n\n        {% for col in source_model['payload']|list %}\n            {{ col }} AS {{ payload[loop.index - 1] }}\n            {%- if not loop.last %}, {%- endif %}\n        {% endfor -%}\n\n    FROM src_new_{{ source_number }}\n\n    {%- if not loop.last %}\n    UNION ALL\n    {% endif -%}\n\n    {%- endfor -%}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif %}\n\n{%- if not source_is_single_batch %}\n\nearliest_hk_over_all_sources_prep AS (\n    SELECT\n        lcte.*,\n        ROW_NUMBER() OVER (PARTITION BY {{ link_hashkey }} ORDER BY {{ src_ldts\n        }}) as rn\n    FROM {{ ns.last_cte }} AS lcte),\n\nearliest_hk_over_all_sources AS (\n\n    {#- Deduplicate the unionized records again to only insert the earliest one. #}\n    SELECT\n        lcte.*\n    FROM earliest_hk_over_all_sources_prep AS lcte\n        WHERE rn = 1\n    {%- set ns.last_cte = 'earliest_hk_over_all_sources' -%}),\n\n{%- endif %}\n\nrecords_to_insert AS (\n{# Select everything from the previous CTE, if its incremental then filter for hashkeys that are not already in the link. #}\n\n    SELECT\n        {{ datavault4dbt.print_list(final_columns_to_select) | indent(4) }}\n    FROM {{ ns.last_cte }}\n\n    {%- if is_incremental() %}\n    WHERE NOT EXISTS (SELECT 1 FROM distinct_target_hashkeys \n                WHERE distinct_target_hashkeys.{{ link_hashkey }} = earliest_hk_over_all_sources.{{ link_hashkey }})\n    {% endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.is_list", "macro.datavault4dbt.source_model_processing", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.1505659, "supported_languages": null}, "macro.datavault4dbt.postgres__ref_table": {"name": "postgres__ref_table", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/postgres/ref_table.sql", "original_file_path": "macros/tables/postgres/ref_table.sql", "unique_id": "macro.datavault4dbt.postgres__ref_table", "macro_sql": "{%- macro postgres__ref_table(ref_hub, ref_satellites, src_ldts, src_rsrc, historized, snapshot_trigger_column='is_active', snapshot_relation=none) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set ref_hub_relation = ref(ref_hub|string) -%}\n\n{%- set is_current_col_alias = var('datavault4dbt.is_current_col_alias', 'IS_CURRENT') -%}\n{%- set ledts_alias = var('datavault4dbt.ledts_alias', 'ledts') -%}\n{%- set sdts_alias = var('datavault4dbt.sdts_alias', 'sdts') -%}\n\n{%- set include_business_objects_before_appearance = var('datavault4dbt.include_business_objects_before_appearance', 'false') -%}\n\n{{ log('ref_hub_relation: ' ~ ref_hub_relation, false) }}\n{%- set hub_columns = datavault4dbt.source_columns(ref_hub_relation) -%}\n{{ log('hub_columns: ' ~ hub_columns, false) }}\n{%- set hub_columns_to_exclude = [src_ldts, src_rsrc] -%}\n{%- set ref_key_cols = datavault4dbt.process_columns_to_select(columns_list=hub_columns, exclude_columns_list=hub_columns_to_exclude )%}\n{{ log('ref_key_cols: ' ~ ref_key_cols, false) }}\n{%- set sat_columns_to_exclude = [src_ldts, src_rsrc, ledts_alias, is_current_col_alias] + ref_key_cols -%}\n{{ log('sat_columns_to_exclude: '~ sat_columns_to_exclude, false) }}\n\n{%- set ref_satellites_dict = {} -%}\n\n{%- if not datavault4dbt.is_list(ref_satellites) and not ref_satellites is mapping -%}\n    {%- set ref_satellites = [ref_satellites] -%}\n{%- endif -%}\n\n{%- if datavault4dbt.is_list(ref_satellites) -%}\n    {%- for ref_satellite in ref_satellites -%}\n        {%- do ref_satellites_dict.update({ref_satellite:{}}) -%}\n    {%- endfor -%}\n{%- else -%}\n    {%- set ref_satellites_dict = ref_satellites -%}\n{%- endif -%}\n\n\nWITH \n\ndates AS (\n\n{% if historized in ['full', 'latest'] -%}\n\n    {%- set date_column = src_ldts -%}\n\n\n    {{ log('ref_satellites: '~ ref_satellites, false) -}}\n\n    {% if historized == 'full' -%}\n    SELECT distinct {{ date_column }} FROM (\n    {%- elif historized == 'latest' -%}\n    SELECT MAX({{ date_column }}) as {{ date_column }} FROM (\n    {%- endif -%}\n\n    {% for satellite in ref_satellites_dict.keys() -%}\n    SELECT distinct \n        {{ src_ldts }}\n    FROM {{ ref(satellite|string) }}\n    WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    {% if not loop.last -%} UNION {% endif %}\n    {%- endfor %}\n    ) AS TEST\n\n\n{% elif snapshot_relation is not none %}\n\n    {%- set date_column = sdts_alias -%}\n    \n    SELECT \n        {{ date_column }}\n    FROM (\n        \n        SELECT \n            {{ sdts_alias }}\n        FROM {{ ref(snapshot_relation) }}\n        WHERE {{ snapshot_trigger_column }}\n    ) AS TEST \n\n{#\nCaus of whitespace control \n#}\n\n{%- endif %}\n\n{%- if is_incremental() -%}\n    WHERE {{ date_column }} > (SELECT MAX({{ date_column }}) FROM {{ this }})\n{%- endif -%}\n\n\n),\n\nref_table AS (\n\n    SELECT\n    {{ datavault4dbt.print_list(list_to_print=ref_key_cols, indent=2, src_alias='h') }},\n        ld.{{ date_column }},\n        h.{{ src_rsrc }},\n\n    {%- for satellite in ref_satellites_dict.keys() %}\n\n    {%- set sat_alias = 's_' + loop.index|string -%}\n    {%- set sat_columns_pre = [] -%}\n        \n        {%- if ref_satellites_dict[satellite] is mapping and 'include' in ref_satellites_dict[satellite].keys() -%}\n            {%- set sat_columns_pre = ref_satellites_dict[satellite]['include'] -%}\n        {%- elif ref_satellites_dict[satellite] is mapping and 'exclude' in ref_satellites_dict[satellite].keys() -%}\n            {%- set all_sat_columns = datavault4dbt.source_columns(ref(satellite)) -%}\n            {%- set sat_columns_pre = datavault4dbt.process_columns_to_select(all_sat_columns, ref_satellites_dict[satellite]['exclude']) -%}\n        {%- elif datavault4dbt.is_list(ref_satellites_dict[satellite]) -%}\n            {%- set sat_columns_pre = ref_satellites_dict[satellite] -%}\n        {%- else -%}\n            {%- set all_sat_columns = datavault4dbt.source_columns(ref(satellite)) -%}\n            {%- set sat_columns_pre = datavault4dbt.process_columns_to_select(all_sat_columns, sat_columns_to_exclude) -%}\n        {%- endif -%}\n\n    {%- set sat_columns = datavault4dbt.process_columns_to_select(sat_columns_pre, sat_columns_to_exclude) -%}\n    \n    {{- log('sat_columns: '~ sat_columns, false) -}}\n\n    {{ datavault4dbt.print_list(list_to_print=sat_columns, indent=2, src_alias=sat_alias) }}\n    {%- if not loop.last -%} ,\n    {% endif -%}\n\n    {% endfor %} \n\n    FROM {{ ref(ref_hub) }} h\n    \n    FULL OUTER JOIN dates ld\n        ON 1 = 1  \n\n    {% for satellite in ref_satellites_dict.keys() %}\n\n        {%- set sat_alias = 's_' + loop.index|string -%}\n\n    LEFT JOIN {{ ref(satellite) }} {{ sat_alias }}\n        ON {{ datavault4dbt.multikey(columns=ref_key_cols, prefix=['h', sat_alias], condition='=') }}\n        AND  ld.{{ date_column }} BETWEEN {{ sat_alias }}.{{ src_ldts }} AND {{ sat_alias }}.{{ ledts_alias }}\n    \n    {% endfor %}\n    \n    {% if include_business_objects_before_appearance == 'false' -%}\n    WHERE h.{{ src_ldts }} <= ld.{{ date_column }}\n    {% endif %}\n\n) \n\nSELECT * FROM ref_table\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.source_columns", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.is_list", "macro.datavault4dbt.string_to_timestamp", "macro.dbt.is_incremental", "macro.datavault4dbt.print_list", "macro.datavault4dbt.multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.1542022, "supported_languages": null}, "macro.datavault4dbt.postgres__hub": {"name": "postgres__hub", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/postgres/hub.sql", "original_file_path": "macros/tables/postgres/hub.sql", "unique_id": "macro.datavault4dbt.postgres__hub", "macro_sql": "{%- macro postgres__hub(hashkey, business_keys, src_ldts, src_rsrc, source_models, disable_hwm) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{{ log('source_models'~source_models, false) }}\n\n{%- set ns = namespace(last_cte= \"\", source_included_before = {}, has_rsrc_static_defined=true, source_models_rsrc_dict={}) -%}\n\n{# Select the Business Key column from the first source model definition provided in the hub model and put them in an array. #}\n{%- set business_keys = datavault4dbt.expand_column_list(columns=[business_keys]) -%}\n\n{# If no specific bk_columns is defined for each source, we apply the values set in the business_keys variable. #}\n{# If no specific hk_column is defined for each source, we apply the values set in the hashkey variable. #}\n{# If no rsrc_static parameter is defined in ANY of the source models then the whole code block of record_source performance lookup is not executed  #}\n{# For the use of record_source performance lookup it is required that every source model has the parameter rsrc_static defined and it cannot be an empty string #}\n{%- if source_models is not mapping and not datavault4dbt.is_list(source_models) -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- set source_model_values = fromjson(datavault4dbt.source_model_processing(source_models=source_models, parameters={'hk_column':hashkey}, business_keys=business_keys)) -%}\n{%- set source_models = source_model_values['source_model_list'] -%}\n{%- set ns.has_rsrc_static_defined = source_model_values['has_rsrc_static_defined'] -%}\n{%- set ns.source_models_rsrc_dict = source_model_values['source_models_rsrc_dict'] -%}\n{{ log('source_models: '~source_models, false) }}\n\n{%- set final_columns_to_select = [hashkey] + business_keys + [src_ldts] + [src_rsrc] -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{% if is_incremental() -%}\n{# Get all target hashkeys out of the existing hub for later incremental logic. #}\n    distinct_target_hashkeys AS (\n\n        SELECT\n            {{ hashkey }}\n        FROM {{ this }}\n\n    ),\n    {%- if ns.has_rsrc_static_defined and not disable_hwm -%}\n        {% for source_model in source_models %}\n         {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n            {%- set source_number = source_model.id | string -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number] -%}\n\n            {{log('rsrc_statics: '~ rsrc_statics, false) }}\n\n            {%- set rsrc_static_query_source -%}\n                SELECT count(*) FROM (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.{{ src_rsrc }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                ) As test\n            {% endset %}\n\n            {{ log('rsrc static query: '~rsrc_static_query_source, false) }}\n\n            rsrc_static_{{ source_number }} AS (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT \n                    t.*,\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                {%- set ns.last_cte = \"rsrc_static_{}\".format(source_number) -%}\n            ),\n            \n            {%- set source_in_target = true -%}\n            \n            {%- if execute -%}\n                {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n\n                {%- set row_count = rsrc_static_result.columns[0].values()[0] -%}\n\n                {{ log('row_count for '~source_model~' is '~row_count, false) }}\n\n                {%- if row_count == 0 -%}\n                    {%- set source_in_target = false -%}\n                {%- endif -%}\n            {%- endif -%}\n\n\n            {%- do ns.source_included_before.update({source_model.id: source_in_target}) -%}\n\n        {% endfor -%}\n\n        {%- if source_models | length > 1 %}\n\n        rsrc_static_union AS (\n            {#  Create one unionized table over all sources. It will be the same as the already existing\n                hub, but extended by the rsrc_static column. #}\n            {% for source_model in source_models %}\n            {%- set source_number = source_model.id | string -%}\n\n            SELECT rsrc_static_{{ source_number }}.* FROM rsrc_static_{{ source_number }}\n\n            {%- if not loop.last %}\n            UNION ALL\n            {% endif -%}\n            {%- endfor %}\n            {%- set ns.last_cte = \"rsrc_static_union\" -%}\n        ),\n\n        {%- endif %}\n\n        max_ldts_per_rsrc_static_in_target AS (\n        {# Use the previously created CTE to calculate the max load date timestamp per rsrc_static. #}\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) as max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif %}\n{% endif -%}\n\n{% for source_model in source_models %}\n\n    {%- set source_number = source_model.id | string -%}\n\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number|string] -%}\n    {%- endif -%}\n\n    {%- if 'hk_column' not in source_model.keys() %}\n        {%- set hk_column = hashkey -%}\n    {%- else -%}\n        {%- set hk_column = source_model['hk_column'] -%}\n    {% endif %}\n\n    src_new_{{ source_number }} AS (\n\n        SELECT\n            {{ hk_column }} AS {{ hashkey }},\n            {% for bk in source_model['bk_columns'] -%}\n            {{ bk }},\n            {% endfor -%}\n\n            {{ src_ldts }},\n            {{ src_rsrc }}\n        FROM {{ ref(source_model.name) }} src\n        {{ log('rsrc_statics defined?: ' ~ ns.source_models_rsrc_dict[source_number|string], false) }}\n\n    {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_number|int] and not disable_hwm %}\n        INNER JOIN max_ldts_per_rsrc_static_in_target max ON\n        ({%- for rsrc_static in rsrc_statics -%}\n            max.rsrc_static = '{{ rsrc_static }}'\n            {%- if not loop.last -%} OR\n            {% endif -%}\n        {%- endfor %})\n        WHERE src.{{ src_ldts }} > max.max_ldts\n    {%- elif is_incremental() and source_models | length == 1 and not ns.has_rsrc_static_defined and not disable_hwm %}\n        WHERE src.{{ src_ldts }} > (\n            SELECT MAX({{ src_ldts }})\n            FROM {{ this }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            )\n    {%- endif %}\n\n         {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n    ),\n{%- endfor -%}\n\n{%- if source_models | length > 1 %}\n\nsource_new_union AS (\n\n    {%- for source_model in source_models -%}\n\n    {%- set source_number = source_model.id | string -%}\n\n    SELECT\n        {{ hashkey }},\n\n        {% for bk in source_model['bk_columns'] -%}\n            {{ bk }} AS {{ business_keys[loop.index - 1] }},\n        {% endfor -%}\n\n        {{ src_ldts }},\n        {{ src_rsrc }}\n    FROM src_new_{{ source_number }}\n\n    {%- if not loop.last %}\n    UNION ALL\n    {% endif -%}\n\n    {%- endfor -%}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif %}\n\nearliest_hk_over_all_sources_prep AS (\n    SELECT\n        lcte.*,\n        ROW_NUMBER() OVER (PARTITION BY {{ hashkey }} ORDER BY {{ src_ldts\n        }}) as rn\n    FROM {{ ns.last_cte }} AS lcte),\n\nearliest_hk_over_all_sources AS (\n\n    {#- Deduplicate the unionized records again to only insert the earliest one. #}\n    SELECT\n        lcte.*\n    FROM earliest_hk_over_all_sources_prep AS lcte\n        WHERE rn = 1\n    {%- set ns.last_cte = 'earliest_hk_over_all_sources' -%}),\n\nrecords_to_insert AS (\n    {#- Select everything from the previous CTE, if incremental filter for hashkeys that are not already in the hub. #}\n    SELECT\n        {{ datavault4dbt.print_list(final_columns_to_select) }}\n    FROM {{ ns.last_cte }}\n\n    {%- if is_incremental() %}\n    WHERE NOT EXISTS (SELECT 1 FROM distinct_target_hashkeys \n                    WHERE distinct_target_hashkeys.{{ hashkey }} = earliest_hk_over_all_sources.{{ hashkey }})\n    {% endif -%}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.is_list", "macro.datavault4dbt.source_model_processing", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.158775, "supported_languages": null}, "macro.datavault4dbt.postgres__link": {"name": "postgres__link", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/postgres/link.sql", "original_file_path": "macros/tables/postgres/link.sql", "unique_id": "macro.datavault4dbt.postgres__link", "macro_sql": "{%- macro postgres__link(link_hashkey, foreign_hashkeys, source_models, src_ldts, src_rsrc, disable_hwm) -%}\n\n{%- if not (foreign_hashkeys is iterable and foreign_hashkeys is not string) -%}\n\n    {%- if execute -%}\n        {{ exceptions.raise_compiler_error(\"Only one foreign key provided for this link. At least two required.\") }}\n    {%- endif %}\n\n{%- endif -%}\n\n{%- set ns = namespace(last_cte= \"\", source_included_before = {}, has_rsrc_static_defined=true, source_models_rsrc_dict={}) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{# If no specific link_hk and fk_columns are defined for each source, we apply the values set in the link_hashkey and foreign_hashkeys variable. #}\n{# If no rsrc_static parameter is defined in ANY of the source models then the whole code block of record_source performance lookup is not executed  #}\n{# For the use of record_source performance lookup it is required that every source model has the parameter rsrc_static defined and it cannot be an empty string #}\n{%- if source_models is not mapping and not datavault4dbt.is_list(source_models) -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- set source_model_values = fromjson(datavault4dbt.source_model_processing(source_models=source_models, parameters={'link_hk':link_hashkey}, foreign_hashkeys=foreign_hashkeys)) -%}\n{%- set source_models = source_model_values['source_model_list'] -%}\n{%- set ns.has_rsrc_static_defined = source_model_values['has_rsrc_static_defined'] -%}\n{%- set ns.source_models_rsrc_dict = source_model_values['source_models_rsrc_dict'] -%}\n{{ log('source_models: '~source_models, false) }}\n\n{%- set final_columns_to_select = [link_hashkey] + foreign_hashkeys + [src_ldts] + [src_rsrc] -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{% if is_incremental() %}\n{# Get all link hashkeys out of the existing link for later incremental logic. #}\n    distinct_target_hashkeys AS (\n        \n        SELECT\n        {{ link_hashkey }}\n        FROM {{ this }}\n\n    ),\n    {%- if ns.has_rsrc_static_defined and not disable_hwm -%}\n        {% for source_model in source_models %}\n        {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n            {%- set source_number = source_model.id | string -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number] -%}\n\n            {{log('rsrc_statics: '~ rsrc_statics, false) }}\n\n            {%- set rsrc_static_query_source -%}\n                SELECT count(*) FROM (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.{{ src_rsrc }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                )\n            {% endset %}\n\n            rsrc_static_{{ source_number }} AS (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.*,\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                {%- set ns.last_cte = \"rsrc_static_{}\".format(source_number) -%}\n            ),\n\n            {%- set source_in_target = true -%}\n            \n            {%- if execute -%}\n                {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n\n                {%- set row_count = rsrc_static_result.columns[0].values()[0] -%}\n\n                {{ log('row_count for '~source_model~' is '~row_count, false) }}\n\n                {%- if row_count == 0 -%}\n                    {%- set source_in_target = false -%}\n                {%- endif -%}\n            {%- endif -%}\n\n\n            {%- do ns.source_included_before.update({source_model.id: source_in_target}) -%}\n\n        {% endfor -%}\n\n        {%- if source_models | length > 1 %}\n\n        rsrc_static_union AS (\n            {#  Create one unionized table over all sources. It will be the same as the already existing\n                link, but extended by the rsrc_static column. #}\n\n            {% for source_model in source_models %}\n            {%- set source_number = source_model.id | string -%}\n\n            SELECT rsrc_static_{{ source_number }}.* FROM rsrc_static_{{ source_number }}\n\n            {%- if not loop.last %}\n            UNION ALL\n            {% endif -%}\n            {%- endfor %}\n            {%- set ns.last_cte = \"rsrc_static_union\" -%}\n        ),\n\n        {%- endif %}\n\n        max_ldts_per_rsrc_static_in_target AS (\n        {# Use the previously created CTE to calculate the max load date timestamp per rsrc_static. #}\n\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) as max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif %}\n{% endif -%}\n\n{% for source_model in source_models %}\n\n{#  Select all deduplicated records from each source, and filter for records that are newer\n    than the max ldts inside the existing link, if incremental. #}\n\n    {%- set source_number = source_model.id | string -%}\n\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number|string] -%}\n    {%- endif -%}\n\n    {%- if 'link_hk' not in source_model.keys() %}\n        {%- set link_hk = link_hashkey -%}\n    {%- else -%}\n        {%- set link_hk = source_model['link_hk'] -%}\n    {% endif %}\n\n    src_new_{{ source_number }} AS (\n\n        SELECT\n            {{ link_hk }} AS {{ link_hashkey }},\n            {% for fk in source_model['fk_columns'] -%}\n            {{ fk }},\n            {% endfor -%}\n            {{ src_ldts }},\n            {{ src_rsrc }}\n        FROM {{ ref(source_model.name) }} src\n        {{ log('rsrc_statics defined?: ' ~ ns.source_models_rsrc_dict[source_number|string], false) }}\n\n    {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_number|int] and not disable_hwm %}\n        INNER JOIN max_ldts_per_rsrc_static_in_target max ON\n        ({%- for rsrc_static in rsrc_statics -%}\n            max.rsrc_static = '{{ rsrc_static }}'\n            {%- if not loop.last -%} OR\n            {% endif -%}\n        {%- endfor %})\n        WHERE src.{{ src_ldts }} > max.max_ldts\n    {%- elif is_incremental() and source_models | length == 1 and not ns.has_rsrc_static_defined and not disable_hwm %}\n        WHERE src.{{ src_ldts }} > (\n            SELECT MAX({{ src_ldts }})\n            FROM {{ this }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            )\n    {%- endif %}\n\n        {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n    ),\n{%- endfor -%}\n\n{%- if source_models | length > 1 %}\n\nsource_new_union AS (\n{# Unionize the new records from all sources. #}\n\n    {%- for source_model in source_models -%}\n\n    {%- set source_number = source_model.id | string -%}\n\n    SELECT\n        {{ link_hashkey }},\n        {% for fk in source_model['fk_columns']|list %}\n            {{ fk }} AS {{ foreign_hashkeys[loop.index - 1] }},\n        {% endfor -%}\n        {{ src_ldts }},\n        {{ src_rsrc }}\n    FROM src_new_{{ source_number }}\n\n    {%- if not loop.last %}\n    UNION ALL\n    {% endif -%}\n\n    {%- endfor -%}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif %}\n\nearliest_hk_over_all_sources_prep AS (\n    SELECT\n        lcte.*,\n        ROW_NUMBER() OVER (PARTITION BY {{ link_hashkey }} ORDER BY {{ src_ldts\n        }}) as rn\n    FROM {{ ns.last_cte }} AS lcte),\n\nearliest_hk_over_all_sources AS (\n\n    {#- Deduplicate the unionized records again to only insert the earliest one. #}\n    SELECT\n        lcte.*\n    FROM earliest_hk_over_all_sources_prep AS lcte\n        WHERE rn = 1\n    {%- set ns.last_cte = 'earliest_hk_over_all_sources' -%}),\n\nrecords_to_insert AS (\n    {# Select everything from the previous CTE, if incremental filter for hashkeys that are not already in the link. #}\n\n    SELECT\n        {{ datavault4dbt.print_list(final_columns_to_select) | indent(4) }}\n    FROM {{ ns.last_cte }}\n\n    {%- if is_incremental() %}\n    WHERE NOT EXISTS (SELECT 1 FROM distinct_target_hashkeys \n                    WHERE distinct_target_hashkeys.{{ link_hashkey }} = earliest_hk_over_all_sources.{{ link_hashkey }})\n    {% endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.is_list", "macro.datavault4dbt.source_model_processing", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.163383, "supported_languages": null}, "macro.datavault4dbt.postgres__ref_hub": {"name": "postgres__ref_hub", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/postgres/ref_hub.sql", "original_file_path": "macros/tables/postgres/ref_hub.sql", "unique_id": "macro.datavault4dbt.postgres__ref_hub", "macro_sql": "{%- macro postgres__ref_hub(ref_keys, src_ldts, src_rsrc, source_models) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set ns = namespace(last_cte= \"\", source_included_before = {}, has_rsrc_static_defined=true, source_models_rsrc_dict={}) -%}\n\n{%- set ref_keys = datavault4dbt.expand_column_list(columns=[ref_keys]) -%}\n\n{# If no specific ref_keys is defined for each source, we apply the values set in the ref_keys variable. #}\n{# If no rsrc_static parameter is defined in ANY of the source models then the whole code block of record_source performance lookup is not executed  #}\n{# For the use of record_source performance lookup it is required that every source model has the parameter rsrc_static defined and it cannot be an empty string #}\n{%- if source_models is not mapping and not datavault4dbt.is_list(source_models) -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- set source_model_values = fromjson(datavault4dbt.source_model_processing(source_models=source_models, parameters={'test':'test'}, reference_keys=ref_keys)) -%}\n{%- set source_models = source_model_values['source_model_list'] -%}\n{%- set ns.has_rsrc_static_defined = source_model_values['has_rsrc_static_defined'] -%}\n{%- set ns.source_models_rsrc_dict = source_model_values['source_models_rsrc_dict'] -%}\n{{ log('source_models: '~source_models, false) }}\n\n{%- set final_columns_to_select = ref_keys + [src_ldts] + [src_rsrc] -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{% if is_incremental() -%}\n{# Get all target ref_keys out of the existing ref_table for later incremental logic. #}\n    distinct_target_ref_keys AS (\n\n        SELECT\n            {{ datavault4dbt.concat_ws(ref_keys) }}\n        FROM {{ this }}\n\n    ),\n    {%- if ns.has_rsrc_static_defined -%}\n        {% for source_model in source_models %}\n         {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n            {%- set source_number = source_model.id | string -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number] -%}\n\n            {{log('rsrc_statics: '~ rsrc_statics, false) }}\n\n            {%- set rsrc_static_query_source -%}\n                SELECT count(*) FROM (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.{{ src_rsrc }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                )\n            {% endset %}\n\n            rsrc_static_{{ source_number }} AS (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT \n                    t.{{ src_ldts }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} LIKE '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                {%- set ns.last_cte = \"rsrc_static_{}\".format(source_number) -%}\n            ),\n\n            {%- set source_in_target = true -%}\n\n            {%- if execute -%}\n                {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n\n                {%- set row_count = rsrc_static_result.columns[0].values()[0] -%}\n\n                {{ log('row_count for '~source_model~' is '~row_count, false) }}\n\n                {%- if row_count == 0 -%}\n                {%- set source_in_target = false -%}\n                {%- endif -%}\n            {%- endif -%}\n\n\n            {%- do ns.source_included_before.update({source_model.id: source_in_target}) -%}\n\n        {% endfor -%}\n\n        {%- if source_models | length > 1 %}\n\n        rsrc_static_union AS (\n            {#  Create one unionized table over all sources. It will be the same as the already existing\n                hub, but extended by the rsrc_static column. #}\n            {% for source_model in source_models %}\n            {%- set source_number = source_model.id | string -%}\n\n            SELECT rsrc_static_{{ source_number }}.* FROM rsrc_static_{{ source_number }}\n\n            {%- if not loop.last %}\n            UNION ALL\n            {% endif -%}\n            {%- endfor %}\n            {%- set ns.last_cte = \"rsrc_static_union\" -%}\n        ),\n\n        {%- endif %}\n\n        max_ldts_per_rsrc_static_in_target AS (\n        {# Use the previously created CTE to calculate the max load date timestamp per rsrc_static. #}\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) as max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif %}\n{% endif -%}\n\n{% for source_model in source_models %}\n\n    {%- set source_number = source_model.id | string -%}\n\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = ns.source_models_rsrc_dict.id -%}\n    {%- endif -%}\n\n\n    src_new_{{ source_number }} AS (\n\n        SELECT\n            {% for ref_key in source_model['ref_keys'] -%}\n            {{ ref_key}},\n            {% endfor -%}\n\n            {{ src_ldts }},\n            {{ src_rsrc }}\n        FROM {{ ref(source_model.name) }} src\n\n    {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_number] %}\n        INNER JOIN max_ldts_per_rsrc_static_in_target max ON\n        ({%- for rsrc_static in rsrc_statics -%}\n            max.rsrc_static = '{{ rsrc_static }}'\n            {%- if not loop.last -%} OR\n            {% endif -%}\n        {%- endfor %})\n        WHERE src.{{ src_ldts }} > max.max_ldts\n    {%- endif %}\n\n         {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n    ),\n{%- endfor -%}\n\n{%- if source_models | length > 1 %}\n\nsource_new_union AS (\n\n    {%- for source_model in source_models -%}\n\n    {%- set source_number = source_model.id | string -%}\n\n    SELECT\n        {% for ref_key in source_model['ref_keys'] -%}\n            {{ ref_key }} AS {{ ref_keys[loop.index - 1] }},\n        {% endfor -%}\n\n        {{ src_ldts }},\n        {{ src_rsrc }}\n    FROM src_new_{{ source_number }}\n\n    {%- if not loop.last %}\n    UNION ALL\n    {% endif -%}\n\n    {%- endfor -%}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif %}\n\n\nearliest_ref_key_over_all_sources_prep AS (\n{%- for source_model in source_models -%}\n    SELECT\n        lcte.*,\n        ROW_NUMBER() OVER (PARTITION BY {% for ref_key in source_model['ref_keys'] -%} \n                                        {{ ref_key}}\n                                        {% endfor -%} \n        ORDER BY {{ src_ldts}}) as rn\n    FROM {{ ns.last_cte }} AS lcte)\n{%- endfor -%},\n\nearliest_ref_key_over_all_sources AS (\n\n    {#- Deduplicate the unionized records again to only insert the earliest one. #}\n    SELECT\n        lcte.*\n    FROM earliest_ref_key_over_all_sources_prep AS lcte\n        WHERE rn = 1\n    {%- set ns.last_cte = 'earliest_ref_key_over_all_sources' -%}),\n\nrecords_to_insert AS (\n    {#- Select everything from the previous CTE, if incremental filter for hashkeys that are not already in the hub. #}\n    SELECT\n        {{ datavault4dbt.print_list(final_columns_to_select) }}\n    FROM {{ ns.last_cte }}\n\n    {%- if is_incremental() %}\n    WHERE {{ datavault4dbt.concat_ws(ref_keys) }} NOT IN (SELECT * FROM distinct_target_ref_keys)\n    {% endif -%}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.is_list", "macro.datavault4dbt.source_model_processing", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.datavault4dbt.concat_ws", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.16733, "supported_languages": null}, "macro.datavault4dbt.postgres__nh_sat": {"name": "postgres__nh_sat", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/postgres/nh_sat.sql", "original_file_path": "macros/tables/postgres/nh_sat.sql", "unique_id": "macro.datavault4dbt.postgres__nh_sat", "macro_sql": "{%- macro postgres__nh_sat(parent_hashkey, src_payload, src_ldts, src_rsrc, source_model, source_is_single_batch) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set source_cols = datavault4dbt.expand_column_list(columns=[parent_hashkey, src_ldts, src_rsrc, src_payload]) -%}\n\n{%- set source_relation = ref(source_model) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Selecting all source data, that is newer than latest data in sat if incremental #}\nsource_data AS (\n\n    SELECT\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM {{ source_relation }}\n\n    {%- if is_incremental() %}\n    WHERE {{ src_ldts }} > (\n        SELECT\n            MAX({{ src_ldts }}) FROM {{ this }}\n        WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    )\n    {%- endif %}\n),\n\n{% if not source_is_single_batch -%}\nsource_data_single_batch AS (\n    Select distinct on ({{ parent_hashkey }}) \n        source_data.*\n    from source_data\n    order by {{ parent_hashkey }} ,{{ src_ldts }}\n),     \n{%- endif %} \n\n{% if is_incremental() -%}\n{# Get distinct list of hashkeys inside the existing satellite, if incremental. #}\ndistinct_hashkeys AS (\n\n    SELECT DISTINCT\n        {{ parent_hashkey }}\n    FROM {{ this }}\n\n    ),\n\n{%- endif %}\n\n{#\n    Select all records from the source. If incremental, insert only records, where the\n    hashkey is not already in the existing satellite.\n#}\nrecords_to_insert AS (\n\n    SELECT\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM {% if source_is_single_batch -%} source_data {%- endif %} {% if not source_is_single_batch -%} source_data_single_batch {%- endif %} \n    {%- if is_incremental() %}\n    WHERE NOT EXISTS (SELECT 1 FROM distinct_hashkeys \n                WHERE {% if source_is_single_batch -%} source_data.{{ parent_hashkey }} = distinct_hashkeys.{{ parent_hashkey }} {%- endif %}\n                {% if not source_is_single_batch -%} source_data_single_batch.{{ parent_hashkey }} = distinct_hashkeys.{{ parent_hashkey }}) {%- endif %}\n    {%- endif %}\n\n    )\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.print_list", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.16848, "supported_languages": null}, "macro.datavault4dbt.postgres__ma_sat_v1": {"name": "postgres__ma_sat_v1", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/postgres/ma_sat_v1.sql", "original_file_path": "macros/tables/postgres/ma_sat_v1.sql", "unique_id": "macro.datavault4dbt.postgres__ma_sat_v1", "macro_sql": "{%- macro postgres__ma_sat_v1(sat_v0, hashkey, hashdiff, ma_attribute, src_ldts, src_rsrc, ledts_alias, add_is_current_flag) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set is_current_col_alias = var('datavault4dbt.is_current_col_alias', 'IS_CURRENT') -%}\n\n{%- set source_relation = ref(sat_v0) -%}\n{%- set all_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n{%- set exclude = datavault4dbt.expand_column_list(columns=[hashkey, hashdiff, ma_attribute, src_ldts, src_rsrc]) -%}\n{%- set ma_attributes = datavault4dbt.expand_column_list(columns=[ma_attribute]) -%}\n\n\n{%- set source_columns_to_select = datavault4dbt.process_columns_to_select(all_columns, exclude) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Getting everything from the underlying v0 satellite. #}\nsource_satellite AS (\n\n    SELECT src.*\n    FROM {{ source_relation }} as src\n\n),\n\n{# Selecting all distinct loads per hashkey. #}\ndistinct_hk_ldts AS (\n\n    SELECT DISTINCT\n        {{ hashkey }},\n        {{ src_ldts }}\n    FROM source_satellite\n\n),\n\n{# End-dating each ldts for each hashkey, based on earlier ldts per hashkey. #}\nend_dated_loads AS (\n\n    SELECT\n        {{ hashkey }},\n        {{ src_ldts }},\n        COALESCE(LEAD({{ src_ldts }} - INTERVAL '00:00:00.000001') OVER (PARTITION BY {{ hashkey }} ORDER BY {{ src_ldts }}),{{ datavault4dbt.string_to_timestamp(timestamp_format,end_of_all_times) }}) as {{ ledts_alias }}\n    FROM distinct_hk_ldts\n\n),\n\n{# End-date each source record, based on the end-date for each load. #}\nend_dated_source AS (\n\n    SELECT\n        src.{{ hashkey }},\n        src.{{ hashdiff }},\n        src.{{ src_rsrc }},\n        src.{{ src_ldts }},\n        edl.{{ ledts_alias }},\n        {%- if add_is_current_flag %}\n            CASE WHEN {{ ledts_alias }} = {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            THEN TRUE\n            ELSE FALSE\n            END AS {{ is_current_col_alias }},\n        {% endif %}\n        {{- datavault4dbt.print_list(ma_attributes, indent=10, src_alias='src') }},\n        {{- datavault4dbt.print_list(source_columns_to_select, indent=10, src_alias='src') }}\n    FROM source_satellite AS src\n    LEFT JOIN end_dated_loads edl\n        ON src.{{ hashkey }} = edl.{{ hashkey }}\n        AND src.{{ src_ldts }} = edl.{{ src_ldts }}\n\n)\n\nSELECT * FROM end_dated_source\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.source_columns", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.169734, "supported_languages": null}, "macro.datavault4dbt.postgres__ma_sat_v0": {"name": "postgres__ma_sat_v0", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/postgres/ma_sat_v0.sql", "original_file_path": "macros/tables/postgres/ma_sat_v0.sql", "unique_id": "macro.datavault4dbt.postgres__ma_sat_v0", "macro_sql": "{%- macro postgres__ma_sat_v0(parent_hashkey, src_hashdiff, src_ma_key, src_payload, src_ldts, src_rsrc, source_model) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set ns=namespace(src_hashdiff=\"\", hdiff_alias=\"\") %}\n{%- if  src_hashdiff is mapping and src_hashdiff is not none -%}\n    {% set ns.src_hashdiff = src_hashdiff[\"source_column\"] %}\n    {% set ns.hdiff_alias = src_hashdiff[\"alias\"] %}\n{% else %}\n    {% set ns.src_hashdiff = src_hashdiff %}\n    {% set ns.hdiff_alias = src_hashdiff  %}\n{%- endif -%}\n\n{%- set source_cols = datavault4dbt.expand_column_list(columns=[src_rsrc, src_ldts, src_ma_key, src_payload]) -%}\n\n{%- set source_relation = ref(source_model) -%}\n\n\nWITH\n\n{# Selecting all source data, that is newer than latest data in sat if incremental #}\nsource_data AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ ns.src_hashdiff }} as {{ ns.hdiff_alias }},\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM {{ source_relation }}\n\n    {%- if is_incremental() %}\n    WHERE {{ src_ldts }} > (\n        SELECT\n            MAX({{ src_ldts }}) FROM {{ this }}\n        WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    )\n    {%- endif %}\n\n),\n\n{# Get the latest record for each parent hashkey in existing sat, if incremental. #}\n{%- if is_incremental() %}\nlatest_entries_in_sat_prep AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ ns.hdiff_alias }},\n        ROW_NUMBER() OVER(PARTITION BY {{ parent_hashkey|lower }} ORDER BY {{ src_ldts }} DESC) as rn\n    FROM \n        {{ this }}\n),\n\nlatest_entries_in_sat AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ ns.hdiff_alias }}\n    FROM \n        latest_entries_in_sat_prep\n    WHERE rn = 1  \n),\n{%- endif %}\n\n{# Get a list of all distinct hashdiffs that exist for each parent_hashkey. #}\n lag_source_data AS (\n  SELECT \n    {{ parent_hashkey }},\n    {{ src_ldts }},\n    {{ ns.hdiff_alias }},\n    LAG({{ ns.hdiff_alias }}) OVER (PARTITION BY {{ parent_hashkey }} ORDER BY {{ src_ldts }}) as prev_ns_hdiff_alias\n  FROM source_data\n),\n\ndeduped_row_hashdiff AS (\n  SELECT \n    {{ parent_hashkey }},\n    {{ src_ldts }},\n    {{ ns.hdiff_alias }}\n  FROM lag_source_data\n  WHERE {{ ns.hdiff_alias }} != prev_ns_hdiff_alias OR prev_ns_hdiff_alias IS NULL\n),\n\n{# Dedupe the source data regarding non-delta groups. #}\ndeduped_rows AS (\n\n  SELECT \n    source_data.{{ parent_hashkey }},\n    source_data.{{ ns.hdiff_alias }},\n    {{ datavault4dbt.alias_all(columns=source_cols, prefix='source_data') }}\n  FROM source_data\n  INNER JOIN deduped_row_hashdiff\n    ON {{ datavault4dbt.multikey(parent_hashkey, prefix=['source_data', 'deduped_row_hashdiff'], condition='=') }}\n    AND {{ datavault4dbt.multikey(src_ldts, prefix=['source_data', 'deduped_row_hashdiff'], condition='=') }}\n    AND {{ datavault4dbt.multikey(ns.hdiff_alias, prefix=['source_data', 'deduped_row_hashdiff'], condition='=') }}\n\n),\n\nrecords_to_insert AS (\n\n    SELECT\n        deduped_rows.{{ parent_hashkey }},\n        deduped_rows.{{ ns.hdiff_alias }},\n        {{ datavault4dbt.alias_all(columns=source_cols, prefix='deduped_rows') }}\n    FROM deduped_rows\n    {%- if is_incremental() %}\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE {{ datavault4dbt.multikey(parent_hashkey, prefix=['latest_entries_in_sat', 'deduped_rows'], condition='=') }}\n            AND {{ datavault4dbt.multikey(ns.hdiff_alias, prefix=['latest_entries_in_sat', 'deduped_rows'], condition='=') }} \n            )\n    {%- endif %}\n\n    )\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.print_list", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.alias_all", "macro.datavault4dbt.multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.171829, "supported_languages": null}, "macro.datavault4dbt.postgres__sat_v0": {"name": "postgres__sat_v0", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/postgres/sat_v0.sql", "original_file_path": "macros/tables/postgres/sat_v0.sql", "unique_id": "macro.datavault4dbt.postgres__sat_v0", "macro_sql": "{%- macro postgres__sat_v0(parent_hashkey, src_hashdiff, src_payload, src_ldts, src_rsrc, source_model) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set ns=namespace(src_hashdiff=\"\", hdiff_alias=\"\") %}\n\n{%- if  src_hashdiff is mapping and src_hashdiff is not none -%}\n    {% set ns.src_hashdiff = src_hashdiff[\"source_column\"] %}\n    {% set ns.hdiff_alias = src_hashdiff[\"alias\"] %}\n{% else %}\n    {% set ns.src_hashdiff = src_hashdiff %}\n    {% set ns.hdiff_alias = src_hashdiff  %}\n{%- endif -%}\n\n{%- set source_cols = datavault4dbt.expand_column_list(columns=[src_rsrc, src_ldts, src_payload]) -%}\n\n{%- set source_relation = ref(source_model) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Selecting all source data, that is newer than latest data in sat if incremental #}\nsource_data AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ ns.src_hashdiff }} as {{ ns.hdiff_alias }},\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM {{ source_relation }}\n\n    {%- if is_incremental() %}\n    WHERE {{ src_ldts }} > (\n        SELECT\n            MAX({{ src_ldts }}) FROM {{ this }}\n        WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    )\n    {%- endif %}\n),\n\n{# Get the latest record for each parent hashkey in existing sat, if incremental. #}\n{%- if is_incremental() %}\nlatest_entries_in_sat_prep AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ ns.hdiff_alias }},\n        ROW_NUMBER() OVER(PARTITION BY {{ parent_hashkey|lower }} ORDER BY {{ src_ldts }} DESC) as rn\n    FROM \n        {{ this }}\n),\n\nlatest_entries_in_sat AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ ns.hdiff_alias }}\n    FROM \n        latest_entries_in_sat_prep\n    WHERE rn = 1  \n),\n{%- endif %}\n\n{#\n    Deduplicate source by comparing each hashdiff to the hashdiff of the previous record, for each hashkey.\n    Additionally adding a row number based on that order, if incremental.\n#}\ndeduplicated_numbered_source_prep AS (\n\n    SELECT\n    {{ parent_hashkey }},\n    {{ ns.hdiff_alias }},\n    {{ datavault4dbt.print_list(source_cols) }}\n    {% if is_incremental() -%}\n    , ROW_NUMBER() OVER(PARTITION BY {{ parent_hashkey }} ORDER BY {{ src_ldts }}) as rn\n    {%- endif %}\n    , LAG({{ ns.hdiff_alias }}) OVER(PARTITION BY {{ parent_hashkey|lower }} ORDER BY {{ src_ldts }}) as prev_hashdiff\n    FROM source_data\n\n),\n\ndeduplicated_numbered_source AS (\n\n    SELECT\n    {{ parent_hashkey }},\n    {{ ns.hdiff_alias }},\n    {{ datavault4dbt.print_list(source_cols) }}\n    FROM deduplicated_numbered_source_prep\n    WHERE 1=1\n        AND {{ ns.hdiff_alias }} <> prev_hashdiff OR prev_hashdiff IS NULL\n        {% if is_incremental() -%}\n        AND rn = 1\n        {%- endif %}\n),\n\n{#\n    Select all records from the previous CTE. If incremental, compare the oldest incoming entry to\n    the existing records in the satellite.\n#}\nrecords_to_insert AS (\n\n    SELECT\n    {{ parent_hashkey }},\n    {{ ns.hdiff_alias }},\n    {{ datavault4dbt.print_list(source_cols) }}\n    FROM deduplicated_numbered_source\n    {%- if is_incremental() %}\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE {{ datavault4dbt.multikey(parent_hashkey, prefix=['latest_entries_in_sat', 'deduplicated_numbered_source'], condition='=') }}\n            AND {{ datavault4dbt.multikey(ns.hdiff_alias, prefix=['latest_entries_in_sat', 'deduplicated_numbered_source'], condition='=') }})\n    {%- endif %}\n\n    )\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.print_list", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.173755, "supported_languages": null}, "macro.datavault4dbt.postgres__rec_track_sat": {"name": "postgres__rec_track_sat", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/postgres/rec_track_sat.sql", "original_file_path": "macros/tables/postgres/rec_track_sat.sql", "unique_id": "macro.datavault4dbt.postgres__rec_track_sat", "macro_sql": "{%- macro postgres__rec_track_sat(tracked_hashkey, source_models, src_ldts, src_rsrc, src_stg, disable_hwm) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{# Setting the unknown and error ghost record value for record source column #}\n{%- set rsrc_unknown = var('datavault4dbt.default_unknown_rsrc', 'SYSTEM') -%}\n{%- set rsrc_error = var('datavault4dbt.default_error_rsrc', 'ERROR') -%}\n\n{# Setting the rsrc and stg_alias default datatype and length #}\n{%- set rsrc_default_dtype = var('datavault4dbt.rsrc_default_dtype', 'STRING') -%}\n{%- set stg_default_dtype = var('datavault4dbt.stg_default_dtype', 'STRING') -%}\n{%- set ns = namespace(last_cte = '', source_included_before = {},  source_models_rsrc_dict={},  has_rsrc_static_defined=true) -%}\n\n{%- if source_models is not mapping and not datavault4dbt.is_list(source_models) -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- set source_model_values = fromjson(datavault4dbt.source_model_processing(source_models=source_models, parameters={'hk_column':tracked_hashkey})) -%}\n{%- set source_models = source_model_values['source_model_list'] -%}\n{%- set ns.has_rsrc_static_defined = source_model_values['has_rsrc_static_defined'] -%}\n{%- set ns.source_models_rsrc_dict = source_model_values['source_models_rsrc_dict'] -%}\n{{ log('source_models: '~source_models, false) }}\n\n{%- set final_columns_to_select = [tracked_hashkey] + [src_ldts] + [src_rsrc] + [src_stg] -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{% if is_incremental() %}\n\n    distinct_concated_target AS (\n        {%- set concat_columns = [tracked_hashkey, src_ldts, src_rsrc] -%}\n        {{ \"\\n\" }}\n        SELECT\n        {{ datavault4dbt.concat_ws(concat_columns) }} as concat\n        FROM {{ this }}\n    ),\n    {%- if ns.has_rsrc_static_defined and not disable_hwm -%}\n        rsrc_static_unionized AS (\n        {% for source_model in source_models %}\n        {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n              {%- set source_number = source_model.id | string -%}\n            {%- set hk_column = source_model['hk_column'] -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number] -%}\n\n            {%- set rsrc_static_query_source_count -%}\n                SELECT count(*) FROM (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT \n                    {{ tracked_hashkey }},\n                    {{ src_ldts }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }}\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %} \n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                ) AS test\n            {% endset %}\n\n            {%- set rsrc_static_query_source -%}\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT \n                    {{ tracked_hashkey }},\n                    {{ src_ldts }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }}\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %} \n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n            {% endset %}\n\n            {{ rsrc_static_query_source }}  \n\n            {%- set source_in_target = true -%}\n            \n            {%- if execute -%}\n                {%- set rsrc_static_result = run_query(rsrc_static_query_source_count) -%}\n\n                {%- set row_count = rsrc_static_result.columns[0].values()[0] -%}\n\n                {{ log('row_count for '~source_model~' is '~row_count, false) }}\n\n                {%- if row_count == 0 -%}\n                    {%- set source_in_target = false -%}\n                {%- endif -%}\n            {%- endif -%}\n\n            {%- do ns.source_included_before.update({source_model.id: source_in_target}) -%}\n            {# Unionize over all sources #}\n            {%- if not loop.last %}\n                UNION ALL \n            {% endif -%}\n\n        {% endfor -%}\n        {%- set ns.last_cte = \"rsrc_static_unionized\" -%}\n        ),\n\n        max_ldts_per_rsrc_static_in_target AS (\n\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) as max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif %}\n{% endif -%}\n\n{#\n    We deduplicate each source over hashkey + ldts + rsrc_static and if is_incremental only select the rows, where the ldts is later\n    than the latest one in the existing satellite for that rsrc_static. If a source is added to the existing satellite, all deduplicated\n    rows from that source are loaded into the satellite.\n#}\n\n{%- for source_model in source_models %}\n\n    {%- set source_number = source_model.id | string -%}\n    {%- set hk_column = source_model['hk_column'] -%}\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number|string] -%}\n\n        src_new_{{ source_number }} AS (\n        {%- for rsrc_static in rsrc_statics %}\n            SELECT DISTINCT\n                {{ hk_column }} AS {{ tracked_hashkey }},\n                {{ src_ldts }},\n                CAST('{{ rsrc_static }}' AS {{ rsrc_default_dtype }} ) AS {{ src_rsrc }},\n                CAST(UPPER('{{ source_model.name }}') AS {{ stg_default_dtype }})  AS {{ src_stg }}\n            FROM {{ ref(source_model.name) }} src\n\n\n            {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_number|int] and not disable_hwm %}\n                INNER JOIN max_ldts_per_rsrc_static_in_target max\n                    ON max.rsrc_static = '{{ rsrc_static }}'\n                WHERE src.{{ src_ldts }} > max.max_ldts\n            {%- endif %}\n            {%- if not loop.last %}\n                UNION ALL\n            {% endif -%}\n        {% endfor %}\n\n        ),\n    {%- else -%}\n        src_new_{{ source_number}} AS (\n            SELECT DISTINCT\n                {{ hk_column }} AS {{ tracked_hashkey }},\n                {{ src_ldts }},\n                CAST({{ src_rsrc }} AS {{ rsrc_default_dtype }}) AS {{ src_rsrc }},\n                CAST(UPPER('{{ source_model.name }}') AS {{ stg_default_dtype }}) AS {{ src_stg }}\n            FROM {{ ref(source_model.name) }} src\n            {%- if is_incremental() and source_models | length == 1 and not disable_hwm %}\n                WHERE src.{{ src_ldts }} > (\n            SELECT MAX({{ src_ldts }})\n            FROM {{ this }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            )\n            {%- endif %}\n        ),\n    {%- endif -%}\n\n    {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n{% endfor %}\n\n{#\n    If more than one source model is selected, all previously created deduplicated CTEs are unionized.\n#}\n\n{%- if source_models | length > 1 %}\n\nsource_new_union AS (\n    {% for source_model in source_models %}\n        {%- set hk_column = source_model['hk_column'] -%}\n        {%- set source_number = source_model.id | string -%}\n\n        SELECT\n        {{ tracked_hashkey }},\n        {{ src_ldts }},\n        {{ src_rsrc }},\n        {{ src_stg }}\n        FROM src_new_{{ source_number }}\n\n        {%- if not loop.last %}\n        UNION ALL\n        {% endif -%}\n\n    {% endfor %}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif -%}\n\n{#\n    Selecting everything, either from the unionized data, or from the single CTE (if single source). Checking against the existing\n    satellite to only inserts that are not already inserted, if incremental run.\n#}\n\nrecords_to_insert AS (\n\n    SELECT\n    {{ datavault4dbt.print_list(final_columns_to_select) }}\n    FROM {{ ns.last_cte }}\n    WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }} \n    AND {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }}\n    {%- if is_incremental() %}\n        AND NOT EXISTS(SELECT 1 from distinct_concated_target where {{ datavault4dbt.concat_ws(concat_columns) }} = distinct_concated_target.concat)\n    {% endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.is_list", "macro.datavault4dbt.source_model_processing", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.datavault4dbt.concat_ws", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.178331, "supported_languages": null}, "macro.datavault4dbt.postgres__sat_v1": {"name": "postgres__sat_v1", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/postgres/sat_v1.sql", "original_file_path": "macros/tables/postgres/sat_v1.sql", "unique_id": "macro.datavault4dbt.postgres__sat_v1", "macro_sql": "{%- macro postgres__sat_v1(sat_v0, hashkey, hashdiff, src_ldts, src_rsrc, ledts_alias, add_is_current_flag,include_payload) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set is_current_col_alias = var('datavault4dbt.is_current_col_alias', 'IS_CURRENT') -%}\n{%- set ledts_alias = var('datavault4dbt.ledts_alias', 'ledts') -%}\n\n{%- set source_relation = ref(sat_v0) -%}\n\n{%- set all_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n{%- set exclude = [hashkey, hashdiff, src_ldts, src_rsrc] -%}\n\n{%- set source_columns_to_select = datavault4dbt.process_columns_to_select(all_columns, exclude) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Calculate ledts based on the ldts of the earlier record. #}\nend_dated_source AS (\n\n    SELECT\n        {{ hashkey }},\n        {{ hashdiff }},\n        {{ src_rsrc }},\n        {{ src_ldts }},\n        COALESCE(LEAD({{ src_ldts }} - interval '00:00:00.000001') OVER (PARTITION BY {{ hashkey }} ORDER BY {{ src_ldts }}),{{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}) as {{ ledts_alias }}\n        {%- if include_payload -%},\n            {{ datavault4dbt.print_list(source_columns_to_select) }}\n        {%- endif %}\n    FROM {{ source_relation }}\n\n)\n\nSELECT\n    {{ hashkey }},\n    {{ hashdiff }},\n    {{ src_rsrc }},\n    {{ src_ldts }},\n    {{ ledts_alias }}\n    {%- if add_is_current_flag %}\n        , CASE WHEN {{ ledts_alias }} = {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n        THEN TRUE\n        ELSE FALSE\n        END AS {{ is_current_col_alias }}\n    {% endif -%}\n    {%- if include_payload -%}\n        , {{ datavault4dbt.print_list(source_columns_to_select) }}\n    {%- endif %}\nFROM end_dated_source\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.source_columns", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.179488, "supported_languages": null}, "macro.datavault4dbt.synapse__control_snap_v0": {"name": "synapse__control_snap_v0", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/synapse/control_snap_v0.sql", "original_file_path": "macros/tables/synapse/control_snap_v0.sql", "unique_id": "macro.datavault4dbt.synapse__control_snap_v0", "macro_sql": "{%- macro synapse__control_snap_v0(start_date, end_date, daily_snapshot_time, sdts_alias) -%}\n{{ log('start_date: '~ start_date, true)}}\nWITH initial_timestamps AS (\n    SELECT\n        CAST(CAST('{{ start_date }}' AS VARCHAR) + ' ' + '{{ daily_snapshot_time }}' AS DATETIME) + CAST(rn - 1 AS INT) AS {{ sdts_alias }}\n    FROM \n    (\n        SELECT \n            TOP (DATEDIFF(DAY, '{{ start_date }}', '{{ end_date }}') + 1)\n            ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS rn\n        FROM \n            sys.all_objects s1\n        CROSS JOIN \n            sys.all_objects s2\n    ) AS system_row\n),\n\nenriched_timestamps AS (\n\nSELECT \n\tCONVERT(datetime2, {{ sdts_alias }}) as {{ sdts_alias }},\n    CONVERT(varchar, {{ sdts_alias }}, 23) as {{ sdts_alias }}_date,\n\t1 as force_active,\n    {{ sdts_alias }} AS replacement_{{ sdts_alias }},\n    CONCAT('Snapshot ', CONVERT(date, {{ sdts_alias }}, 23)) AS caption,\n\tDATEPART(YEAR, {{ sdts_alias }}) as year,\n\tDATEPART(QUARTER, {{ sdts_alias }}) as quarter, \n\tDATEPART(MONTH, {{ sdts_alias }}) as month,\n\tDATEPART(DAY, {{ sdts_alias }}) as day_of_month,\n\tDATEPART(DAYOFYEAR, {{ sdts_alias }}) as day_of_year,\n\tDATEPART(WEEKDAY, {{ sdts_alias }}) as weekday,\n\tDATEPART(WEEK, {{ sdts_alias }}) as week,\n\tDATEPART(ISO_WEEK, {{ sdts_alias }}) as iso_week,\n\tCASE WHEN DATEPART(weekday, {{ sdts_alias }}) = 7 THEN 1 ELSE 0 END AS is_end_of_week,\n\tCASE WHEN LEAD(DATEPART(Day, {{ sdts_alias }}), 1) OVER (ORDER BY {{ sdts_alias }}) = 1 THEN 1 ELSE 0 END AS is_end_of_month,\n\tCASE WHEN LEAD(DATEPART(QUARTER, {{ sdts_alias }}), 1) OVER (ORDER BY {{ sdts_alias }}) != DATEPART(QUARTER, {{ sdts_alias }}) THEN 1 ELSE 0 END as is_end_of_quarter,\n\tCASE WHEN LEAD(DATEPART(Dayofyear, {{ sdts_alias }}), 1) OVER (ORDER BY {{ sdts_alias }}) = 1 THEN 1 ELSE 0 END AS is_end_of_year,\n    NULL AS comment\nFROM initial_timestamps )\n\nSELECT * FROM enriched_timestamps\n\n{% if is_incremental() -%}\nWHERE {{ sdts_alias }} NOT IN (SELECT {{ sdts_alias }} FROM {{ this }})\n{%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.1802912, "supported_languages": null}, "macro.datavault4dbt.synapse__control_snap_v1": {"name": "synapse__control_snap_v1", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/synapse/control_snap_v1.sql", "original_file_path": "macros/tables/synapse/control_snap_v1.sql", "unique_id": "macro.datavault4dbt.synapse__control_snap_v1", "macro_sql": "{%- macro synapse__control_snap_v1(control_snap_v0, log_logic, sdts_alias) -%}\n\n{%- set snapshot_trigger_column = var('datavault4dbt.snapshot_trigger_column', 'is_active') -%}\n\n{%- set ns = namespace(forever_status_dict={}, log_logic_list=[], col_name='', log_logic={}) %}\n\n\n\n{%- if log_logic is not none %}\n\n{{ log('log_logic: ' ~ log_logic, false) }}\n\n\t{%- if log_logic is mapping -%}\n\n\t\t{%- for interval in log_logic.keys() %}\n\t\t\t{%- if 'forever' not in log_logic[interval].keys() -%}\n\t\t\t\t{% do log_logic[interval].update({'forever': 'FALSE'}) %}\n\t\t\t{%- endif -%}\n\t\t{%- endfor -%}\n\n\t\t{%- do ns.log_logic_list.append({snapshot_trigger_column: log_logic}) -%}\n\t\t{%- do ns.forever_status_dict.update({snapshot_trigger_column: 'FALSE'}) -%}\n\n\t{%- elif datavault4dbt.is_list(log_logic) -%}\n\n\t\t{%- for logic in log_logic -%}\n\n\t\t\t{{ log('logic: ' ~ logic, false) }}\n\t\t\t{% for col_name, logic_definition in logic.items() -%}\n\t\t\t\t{{ log('logic_definition: ' ~ logic_definition, false) }}\n\t\t\t\t{{ log('col_name: ' ~ col_name, false) }}\n\t\t\t\t{%- set ns.col_name = col_name -%}\n\t\t\t\t{%- set ns.logic_definition = logic_definition %}\n\t\t\t{%- endfor -%}\n\n\t\t\t{%- for interval in ns.logic_definition.keys() %}\n\t\t\t\t{%- if 'forever' not in ns.logic_definition[interval].keys() -%}\n\t\t\t\t\t{% do ns.logic_definition[interval].update({'forever': 'FALSE'}) %}\n\t\t\t\t{%- endif -%}\n\t\t\t{%- endfor -%}\n\n\t\t\t{%- do ns.log_logic_list.append({ns.col_name: ns.logic_definition}) -%}\n\t\t\t{%- do ns.forever_status_dict.update({ns.col_name: 'FALSE'}) -%}\n\n\t\t{%- endfor -%}\n\n\t{%- else -%}\n\n\t\t{{ exceptions.raise_compiler_error(\"Invalid format of log_logic definition in Snapshot Control v1. Either one Dictionary with the config, or a list of dictionaries with the name of the output col as a key, and the log config as each value.\")}}\n\n\t{%- endif -%}\n\n{%- endif %}\n\n{%- set v0_relation = ref(control_snap_v0) -%}\n\n\nWITH in_the_past as (\n\nSELECT \n\t*,\n\tROW_NUMBER() OVER (ORDER BY {{ sdts_alias }} desc) as rn\n\nFROM {{ ref(control_snap_v0) }}\nWHERE CONVERT(DATE, {{ sdts_alias }}) <= CONVERT(DATE, GETDATE() )\n),\n\ndynamic as (SELECT \n\tsrc.{{ sdts_alias }},\n\tsrc.{{ sdts_alias }}_date,\n\tsrc.force_active,\n\tCASE WHEN itp.{{ sdts_alias }} is not null THEN 1 ELSE 0 END AS is_in_the_past,\n\tCASE WHEN itp.rn = 1 THEN 1 ELSE 0 END AS is_current, \n\tCASE WHEN src.year = DATEPART(YEAR, GETDATE()) THEN 1 ELSE 0 END as is_current_year, \n\tCASE WHEN src.year = DATEPART(YEAR, GETDATE())-1 THEN 1 ELSE 0 END as is_last_year, \n\tCASE WHEN DATEDIFF(day, src.{{ sdts_alias }}, GETDATE()) between 0 and 365 THEN 1 ELSE 0 END as is_current_rolling_year,\n\tCASE WHEN DATEDIFF(day, src.{{ sdts_alias }}, GETDATE()) between 366 and 730 THEN 1 ELSE 0 END as is_last_rolling_year,\n\tsrc.year,\n\tsrc.quarter,\n\tsrc.month,\n\tsrc.day_of_month,\n\tsrc.day_of_year,\n\tsrc.weekday,\n\tsrc.week,\n\tsrc.iso_week,\n\tsrc.is_end_of_week,\n\tsrc.is_end_of_month,\n\tsrc.is_end_of_quarter,\n\tsrc.is_end_of_year\n\n\n\nFROM {{ ref(control_snap_v0) }} src\nINNER JOIN in_the_past itp ON src.{{ sdts_alias }} = itp.{{ sdts_alias }}),\n\nlog_logic AS (\n\n\tSELECT\n\n\t*,\n\n\t{%- if log_logic is none %}\n\t\t1 AS {{ snapshot_trigger_column }},\n\t{% else %}\n\t\t{% for logic in ns.log_logic_list -%}\n\n\t\t\t{% for col_name, logic_definition in logic.items() -%}\n\t\t\t\t{{ log('logic_definition: ' ~ logic_definition, false) }}\n\t\t\t\t{{ log('col_name: ' ~ col_name, false) }}\n\t\t\t\t{%- set ns.col_name = col_name -%}\n\t\t\t\t{%- set ns.logic_definition = logic_definition %}\n\t\t\t{%- endfor -%}\n\t\t\t{%- set col_name = ns.col_name -%}\n\t\t\t{{ log('col_name: ' ~ col_name, false) }}\n\t\t\t{%- set logic_definition = ns.logic_definition -%}\n\n\t\t\tCASE \n\t\t\t\tWHEN\n\t\t\t\t{% if 'daily' in logic_definition.keys() %}\n\t\t\t\t\t{%- if logic_definition['daily']['forever'] is true -%}\n\t\t\t\t\t\t{%- do ns.forever_status_dict.update({col_name: 'TRUE'}) -%}\n\t\t\t\t\t(1=1)\n\t\t\t\t\t{%- else %}                            \n\t\t\t\t\t\t{%- set daily_duration = logic_definition['daily']['duration'] -%}\n\t\t\t\t\t\t{%- set daily_unit = logic_definition['daily']['unit'] -%}\n\t\t\t\t\t(c.{{ sdts_alias }} BETWEEN DATEADD({{ daily_unit }}, -{{ daily_duration }}, GETDATE()) AND GETDATE())\n\t\t\t\t\t{%- endif -%}   \n\t\t\t\t{%- endif %}\n\n\t\t\t\t{%- if 'weekly' in logic_definition.keys() %} OR \n\t\t\t\t\t{%- if logic_definition['weekly']['forever'] is true -%}\n\t\t\t\t\t\t{%- do ns.forever_status_dict.update({col_name: 'TRUE'}) -%}\n\t\t\t\t(c.is_end_of_week = 1)\n\t\t\t\t\t{%- else %} \n\t\t\t\t\t\t{%- set weekly_duration = logic_definition['weekly']['duration'] -%}\n\t\t\t\t\t\t{%- set weekly_unit = logic_definition['weekly']['unit'] %}            \n\t\t\t\t((c.{{ sdts_alias }} BETWEEN DATEADD({{ weekly_unit }}, -{{ weekly_duration }}, GETDATE()) AND GETDATE()) AND (c.is_end_of_week = 1))\n\t\t\t\t\t{%- endif -%}\n\t\t\t\t{% endif -%}\n\n\t\t\t\t{%- if 'monthly' in logic_definition.keys() %} OR\n\t\t\t\t\t{%- if logic_definition['monthly']['forever'] is true -%}\n\t\t\t\t\t\t{%- do ns.forever_status_dict.update({col_name: 'TRUE'}) %}\n\t\t\t\t(c.is_end_of_month = 1)\n\t\t\t\t\t{%- else %}\n\t\t\t\t\t\t{%- set monthly_duration = logic_definition['monthly']['duration'] -%}\n\t\t\t\t\t\t{%- set monthly_unit = logic_definition['monthly']['unit'] %}            \n\t\t\t\t((c.{{ sdts_alias }} BETWEEN DATEADD({{ monthly_unit }}, -{{ monthly_duration }}, GETDATE()) AND GETDATE()) AND (c.is_end_of_month = 1))\n\t\t\t\t\t{%- endif -%}\n\t\t\t\t{% endif -%}\n\n\t\t\t\t{%- if 'yearly' in logic_definition.keys() %} OR \n\t\t\t\t\t{%- if logic_definition['yearly']['forever'] is true -%}\n\t\t\t\t\t\t{%- do ns.forever_status_dict.update({col_name: 'TRUE'}) %}\n\t\t\t\t(c.is_end_of_year = 1)\n\t\t\t\t\t{%- else %}\n\t\t\t\t\t\t{%- set yearly_duration = logic_definition['yearly']['duration'] -%}\n\t\t\t\t\t\t{%- set yearly_unit = logic_definition['yearly']['unit'] %}                    \n\t\t\t\t((c.{{ sdts_alias }} BETWEEN DATEADD({{ yearly_unit }}, -{{ yearly_duration }}, GETDATE()) AND GETDATE()) AND (c.is_end_of_year = 1))\n\t\t\t\t\t{%- endif -%}\n\t\t\t\t{% endif %}\n\t\t\t\tTHEN 1\n\t\t\t\tELSE 0\n\t\t\tEND AS {{ col_name }}{{ ',' if not loop.last }}\n\t\t{% endfor %}\n\t{%- endif %}\n\n\tFROM dynamic c\n\n)\n\nSELECT * FROM log_logic\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.1842408, "supported_languages": null}, "macro.datavault4dbt.synapse__pit": {"name": "synapse__pit", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/synapse/pit.sql", "original_file_path": "macros/tables/synapse/pit.sql", "unique_id": "macro.datavault4dbt.synapse__pit", "macro_sql": "{%- macro synapse__pit(tracked_entity, hashkey, sat_names, ldts, ledts, sdts, snapshot_relation, dimension_key,snapshot_trigger_column=none, custom_rsrc=none, pit_type=none) -%}\n\n{%- set hash = var('datavault4dbt.hash', 'MD5') -%}\n{%- set hash_dtype = var('datavault4dbt.hash_datatype', 'STRING') -%}\n{%- set hash_default_values = fromjson(datavault4dbt.hash_default_values(hash_function=hash,hash_datatype=hash_dtype)) -%}\n{%- set hash_alg = hash_default_values['hash_alg'] -%}\n{%- set unknown_key = hash_default_values['unknown_key'] -%}\n{%- set error_key = hash_default_values['error_key'] -%}\n\n{%- set rsrc = var('datavault4dbt.rsrc_alias', 'rsrc') -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- if datavault4dbt.is_something(pit_type) -%}\n    {%- set quote = \"'\" -%}\n    {%- set pit_type_quoted = quote + pit_type + quote -%}\n    {%- set hashed_cols = [pit_type_quoted, datavault4dbt.prefix([hashkey],'te'), datavault4dbt.prefix([sdts], 'snap')] -%}\n{%- else -%}\n    {%- set hashed_cols = [datavault4dbt.prefix([hashkey],'te'), datavault4dbt.prefix([sdts], 'snap')] -%}\n{%- endif -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{%- if is_incremental() %}\n\nexisting_dimension_keys AS (\n\n    SELECT\n        {{ dimension_key }}\n    FROM {{ this }}\n\n),\n\n{%- endif %}\n\npit_records AS (\n\n    SELECT\n        \n        {% if datavault4dbt.is_something(pit_type) -%}\n            '{{ datavault4dbt.as_constant(pit_type) }}' as type,\n        {%- endif %}\n        {% if datavault4dbt.is_something(custom_rsrc) -%}\n        '{{ custom_rsrc }}' as {{ rsrc }},\n        {%- endif %}\n        {{ datavault4dbt.hash(columns=hashed_cols,\n                    alias=dimension_key,\n                    is_hashdiff=false)   }} ,\n        te.{{ hashkey }},\n        snap.{{ sdts }},\n        {%- for satellite in sat_names %}\n            COALESCE({{ satellite }}.{{ hashkey }}, CAST({{ datavault4dbt.as_constant(column_str=unknown_key) }} as {{ hash_dtype }})) AS hk_{{ satellite }},\n            COALESCE({{ satellite }}.{{ ldts }}, {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }}) AS {{ ldts }}_{{ satellite }}\n            {{- \",\" if not loop.last }}\n        {%- endfor %}\n\n    FROM\n            {{ ref(tracked_entity) }} te\n        INNER JOIN\n            {{ ref(snapshot_relation) }} snap\n            {% if datavault4dbt.is_something(snapshot_trigger_column) -%}\n                ON snap.{{ snapshot_trigger_column }} = 1\n            {% else -%}\n                ON 1=1\n            {%- endif %}\n        {% for satellite in sat_names %}\n        {%- set sat_columns = datavault4dbt.source_columns(ref(satellite)) %}\n        {%- if ledts|string|lower in sat_columns|map('lower') %}\n        LEFT JOIN {{ ref(satellite) }}\n        {%- else %}\n        LEFT JOIN (\n            SELECT\n                {{ hashkey }},\n                {{ ldts }},\n                COALESCE(LEAD(DATEADD(ns, -100, {{ ldts }})) OVER (PARTITION BY {{ hashkey }} ORDER BY {{ ldts }}),{{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}) AS {{ ledts }}\n            FROM {{ ref(satellite) }}\n        ) {{ satellite }}\n        {% endif %}\n            ON\n                {{ satellite }}.{{ hashkey}} = te.{{ hashkey }}\n                AND snap.{{ sdts }} BETWEEN {{ satellite }}.{{ ldts }} AND {{ satellite }}.{{ ledts }}\n        {% endfor %}\n),\n\nrecords_to_insert AS (\n\n    SELECT DISTINCT *\n    FROM pit_records pr\n    {%- if is_incremental() %} \n        WHERE \n        NOT EXISTS (\n            SELECT 1\n            FROM existing_dimension_keys edk\n            WHERE 1=1\n                AND edk.{{ dimension_key }} = pr.{{ dimension_key }}\n        )\n    {% endif -%}\n\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.hash_default_values", "macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.is_something", "macro.datavault4dbt.prefix", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.datavault4dbt.as_constant", "macro.datavault4dbt.hash", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.source_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.186887, "supported_languages": null}, "macro.datavault4dbt.synapse__ref_sat_v0": {"name": "synapse__ref_sat_v0", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/synapse/ref_sat_v0.sql", "original_file_path": "macros/tables/synapse/ref_sat_v0.sql", "unique_id": "macro.datavault4dbt.synapse__ref_sat_v0", "macro_sql": "{%- macro synapse__ref_sat_v0(parent_ref_keys, src_hashdiff, src_payload, src_ldts, src_rsrc, source_model, disable_hwm, source_is_single_batch) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set parent_ref_keys = datavault4dbt.expand_column_list(columns=[parent_ref_keys]) -%}\n\n{%- set ns=namespace(src_hashdiff=\"\", hdiff_alias=\"\") %}\n\n{%- if  src_hashdiff is mapping and src_hashdiff is not none -%}\n    {% set ns.src_hashdiff = src_hashdiff[\"source_column\"] %}\n    {% set ns.hdiff_alias = src_hashdiff[\"alias\"] %}\n{% else %}\n    {% set ns.src_hashdiff = src_hashdiff %}\n    {% set ns.hdiff_alias = src_hashdiff  %}\n{%- endif -%}\n\n{%- set source_cols = datavault4dbt.expand_column_list(columns=[src_rsrc, src_ldts, src_payload]) -%}\n\n{%- set source_relation = ref(source_model) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Selecting all source data, that is newer than latest data in ref_sat if incremental #}\nsource_data AS (\n\n    SELECT\n        {% for ref_key in parent_ref_keys %}\n        {{ref_key}},\n        {%- endfor %}\n        {{ ns.src_hashdiff }} as {{ ns.hdiff_alias }},\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM {{ source_relation }}\n\n    {%- if is_incremental()  and not disable_hwm %}\n    WHERE {{ src_ldts }} > (\n        SELECT\n            COALESCE (MAX({{ src_ldts }}), {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }}) FROM {{ this }}\n        WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    )\n    AND {{ src_ldts }} <> {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    {%- endif %}\n    \n    {%- set source_cte = 'source_data' -%}\n\n    -- UNION ALL ghost record 000000\n),\n\n{# Adding window functions row_number and lag to target #}\n{%- if is_incremental() %}\ntarget_data AS (\n\n    SELECT\n        {% for ref_key in parent_ref_keys %}\n        {{ref_key}},\n        {% endfor %}\n        {{ ns.hdiff_alias }}\n        , ROW_NUMBER() OVER(PARTITION BY {%- for ref_key in parent_ref_keys %} {{ref_key}} {%- if not loop.last %}, {% endif %}{% endfor %} ORDER BY {{ src_ldts }} DESC) AS rn\n    FROM \n        {{ this }}\n),\n{%- endif %}\n\n{# Get the latest record for each parent ref key combination in existing sat, if incremental. #}\n{%- if is_incremental() %}\nlatest_entries_in_sat AS (\n\n    SELECT\n        {% for ref_key in parent_ref_keys %}\n        {{ref_key}},\n        {% endfor %}\n        {{ ns.hdiff_alias }}\n    FROM \n        target_data\n    WHERE rn = 1\n),\n{%- endif %}\n\n{%- if not source_is_single_batch %}\n\n{#\n    Adding hashdiff of the previous record, for each parent ref key combination.\n#}\nnumbered_source AS (\n\n    SELECT\n    {% for ref_key in parent_ref_keys %}\n    {{ref_key}},\n    {% endfor %}\n    {{ ns.hdiff_alias }},\n    {{ datavault4dbt.print_list(source_cols) }}\n    , LAG({{ ns.hdiff_alias }}) OVER(PARTITION BY {%- for ref_key in parent_ref_keys %} {{ref_key}} {%- if not loop.last %}, {% endif %}{% endfor %} ORDER BY {{ src_ldts }}) prev_hashdiff\n    FROM source_data\n),\n\n{#\n    Deduplicate source by comparing each hashdiff to the hashdiff of the previous record, for each parent ref key combination.\n    Additionally adding a row number based on that order, if incremental.\n#}\ndeduplicated_numbered_source AS (\n\n    SELECT\n    {% for ref_key in parent_ref_keys %}\n    {{ref_key}},\n    {% endfor %}\n    {{ ns.hdiff_alias }},\n    {{ datavault4dbt.print_list(source_cols) }}\n    {% if is_incremental() -%}\n    , ROW_NUMBER() OVER(PARTITION BY {%- for ref_key in parent_ref_keys %} {{ref_key}} {%- if not loop.last %}, {% endif %}{% endfor %} ORDER BY {{ src_ldts }}) as rn\n    {%- endif %}\n    FROM numbered_source\n    WHERE {{ ns.hdiff_alias }} <> prev_hashdiff OR prev_hashdiff IS NULL\n\n    {%- set source_cte = 'deduplicated_numbered_source' -%}\n\n),\n\n{% endif -%}\n\n{#\n    Select all records from the previous CTE. If incremental, compare the oldest incoming entry to\n    the existing records in the satellite.\n#}\nrecords_to_insert AS (\n\n    SELECT\n    {% for ref_key in parent_ref_keys %}\n    {{ref_key}},\n    {% endfor %}\n    {{ ns.hdiff_alias }},\n    {{ datavault4dbt.print_list(source_cols) }}\n    FROM {{ source_cte }} sc\n    {%- if is_incremental() %}\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE 1=1\n            {% for ref_key in parent_ref_keys %}\n            AND {{ datavault4dbt.multikey(ref_key, prefix=['latest_entries_in_sat', 'sc'], condition='=') }}\n            {% endfor %}\n            AND {{ datavault4dbt.multikey(ns.hdiff_alias, prefix=['latest_entries_in_sat', 'sc'], condition='=') }}\n            {%- if not source_is_single_batch %}\n            AND sc.rn = 1\n            {%- endif %}\n            )\n    {%- endif %}\n\n    )\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.print_list", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.189858, "supported_languages": null}, "macro.datavault4dbt.synapse__ref_sat_v1": {"name": "synapse__ref_sat_v1", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/synapse/ref_sat_v1.sql", "original_file_path": "macros/tables/synapse/ref_sat_v1.sql", "unique_id": "macro.datavault4dbt.synapse__ref_sat_v1", "macro_sql": "{%- macro synapse__ref_sat_v1(ref_sat_v0, ref_keys, hashdiff, src_ldts, src_rsrc, ledts_alias, add_is_current_flag) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set is_current_col_alias = var('datavault4dbt.is_current_col_alias', 'IS_CURRENT') -%}\n{%- set ledts_alias = var('datavault4dbt.ledts_alias', 'ledts') -%}\n\n{%- set source_relation = ref(ref_sat_v0) -%}\n\n{%- set ref_keys = datavault4dbt.expand_column_list(columns=[ref_keys]) -%}\n\n{%- set all_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n{%- set exclude = ref_keys + [hashdiff, src_ldts, src_rsrc] -%}\n\n{%- set source_columns_to_select = datavault4dbt.process_columns_to_select(all_columns, exclude) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Calculate ledts based on the ldts of the earlier record. #}\nend_dated_source AS (\n\n    SELECT\n        {% for ref_key in ref_keys %}\n        {{ref_key}},\n        {% endfor %}\n        {{ hashdiff }},\n        {{ src_rsrc }},\n        {{ src_ldts }},\n        COALESCE(LEAD(DATEADD(ns, -100, {{ src_ldts }})) OVER (PARTITION BY {%- for ref_key in ref_keys %} {{ref_key}} {%- if not loop.last %}, {% endif %}{% endfor %} ORDER BY {{ src_ldts }}),{{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}) AS {{ ledts_alias }},\n        {{ datavault4dbt.print_list(source_columns_to_select) }}\n    FROM {{ source_relation }}\n\n)\n\nSELECT\n    {% for ref_key in ref_keys %}\n    {{ref_key}},\n    {% endfor %}\n    {{ hashdiff }},\n    {{ src_rsrc }},\n    {{ src_ldts }},\n    {{ ledts_alias }},\n    {%- if add_is_current_flag %}\n        CASE WHEN {{ ledts_alias }} = {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n        THEN 1\n        ELSE 0\n        END AS {{ is_current_col_alias }},\n    {% endif -%}\n    {{ datavault4dbt.print_list(source_columns_to_select) }}\nFROM end_dated_source\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.source_columns", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.1911628, "supported_languages": null}, "macro.datavault4dbt.synapse__nh_link": {"name": "synapse__nh_link", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/synapse/nh_link.sql", "original_file_path": "macros/tables/synapse/nh_link.sql", "unique_id": "macro.datavault4dbt.synapse__nh_link", "macro_sql": "{%- macro synapse__nh_link(link_hashkey, foreign_hashkeys, payload, source_models, src_ldts, src_rsrc, disable_hwm, source_is_single_batch) -%}\n\n{%- if not (foreign_hashkeys is iterable and foreign_hashkeys is not string) -%}\n\n    {%- if execute -%}\n        {{ exceptions.raise_compiler_error(\"Only one foreign key provided for this link. At least two required.\") }}\n    {%- endif %}\n\n{%- endif -%}\n\n{%- set ns = namespace(last_cte= \"\", source_included_before = {}, has_rsrc_static_defined=true, source_models_rsrc_dict={}) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n\n{# If no specific link_hk, fk_columns, or payload are defined for each source, we apply the values set in the link_hashkey, foreign_hashkeys, and payload variable. #}\n{# If no rsrc_static parameter is defined in ANY of the source models then the whole code block of record_source performance lookup is not executed  #}\n{# For the use of record_source performance lookup it is required that every source model has the parameter rsrc_static defined and it cannot be an empty string #}\n{%- if source_models is not mapping and not datavault4dbt.is_list(source_models) -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- set source_model_values = fromjson(datavault4dbt.source_model_processing(source_models=source_models, parameters={'link_hk':link_hashkey}, foreign_hashkeys=foreign_hashkeys, payload=payload)) -%}\n{%- set source_models = source_model_values['source_model_list'] -%}\n{%- set ns.has_rsrc_static_defined = source_model_values['has_rsrc_static_defined'] -%}\n{%- set ns.source_models_rsrc_dict = source_model_values['source_models_rsrc_dict'] -%}\n{{ log('source_models: '~source_models, false) }}\n\n{%- set final_columns_to_select = [link_hashkey] + foreign_hashkeys + [src_ldts] + [src_rsrc] + payload -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{%- if is_incremental() -%}\n{# Get all link hashkeys out of the existing link for later incremental logic. #}\n    distinct_target_hashkeys AS (\n\n        SELECT\n        {{ link_hashkey }}\n        FROM {{ this }}\n\n    ),\n    {%- if ns.has_rsrc_static_defined and not disable_hwm -%}\n        {% for source_model in source_models %}\n        {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n            {%- set source_number = source_model.id | string -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number] -%}\n\n            {{log('rsrc_statics: '~ rsrc_statics, false) }}\n\n            {%- set rsrc_static_query_source -%}\n                SELECT count(*) FROM (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.{{ src_rsrc }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                ) sub\n            {% endset %}\n\n            rsrc_static_{{ source_number }} AS (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.*,\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                {%- set ns.last_cte = \"rsrc_static_{}\".format(source_number) -%}\n            ),\n\n            {%- set source_in_target = true -%}\n            \n            {%- if execute -%}\n                {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n\n                {%- set row_count = rsrc_static_result.columns[0].values()[0] -%}\n\n                {{ log('row_count for '~source_model~' is '~row_count, false) }}\n\n                {%- if row_count == 0 -%}\n                    {%- set source_in_target = false -%}\n                {%- endif -%}\n            {%- endif -%}\n\n\n            {%- do ns.source_included_before.update({source_model.id: source_in_target}) -%}\n\n        {% endfor -%}\n\n        {%- if source_models | length > 1 %}\n\n        rsrc_static_union AS (\n            {#  Create one unionized table over all sources. It will be the same as the already existing\n                nh_link, but extended by the rsrc_static column. #}\n\n            {% for source_model in source_models %}\n            {%- set source_number = source_model.id | string -%}\n\n            SELECT rsrc_static_{{ source_number }}.* FROM rsrc_static_{{ source_number }}\n\n            {%- if not loop.last %}\n            UNION ALL\n            {% endif -%}\n            {%- endfor %}\n            {%- set ns.last_cte = \"rsrc_static_union\" -%}\n        ),\n\n        {%- endif %}\n\n        max_ldts_per_rsrc_static_in_target AS (\n        {# Use the previously created CTE to calculate the max load date timestamp per rsrc_static. #}\n\n            SELECT\n                rsrc_static,\n                COALESCE(MAX({{ src_ldts }}), {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }}) AS max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif %}\n{% endif -%}\n\n{% for source_model in source_models %}\n\n{#  Select all deduplicated records from each source, and filter for records that are newer\n    than the max ldts inside the existing link, if incremental. #}\n\n    {%- set source_number = source_model.id | string -%}\n\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number|string] -%}\n    {%- endif -%}\n\n    {%- if 'link_hk' not in source_model.keys() %}\n        {%- set link_hk = link_hashkey -%}\n    {%- else -%}\n        {%- set link_hk = source_model['link_hk'] -%}\n    {% endif %}\n\nsrc_new_{{ source_number }} AS (\n\n    SELECT\n            {{ link_hk }} AS {{ link_hashkey }},\n            {% for fk in source_model['fk_columns'] -%}\n            {{ fk }},\n            {% endfor -%}\n        {{ src_ldts }},\n        {{ src_rsrc }},\n\n        {{ datavault4dbt.print_list(source_model['payload']) | indent(3) }}\n\n    FROM {{ ref(source_model.name) }} src\n    {# If the model is incremental and all sources has rsrc_static defined and valid and the source was already included before in the target transactional link #}\n    {# then an inner join is performed on the CTE for the maximum load date timestamp per record source static to get the records\n    that match any of the rsrc_static present in it #}\n    {# if there are records in the source with a newer load date time stamp than the ones present in the target, those will be selected to be inserted later #}\n    {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_number|int] and not disable_hwm %}\n        INNER JOIN max_ldts_per_rsrc_static_in_target max ON\n        ({%- for rsrc_static in rsrc_statics -%}\n            max.rsrc_static = '{{ rsrc_static }}'\n            {%- if not loop.last -%} OR\n            {% endif -%}\n        {%- endfor %})\n        WHERE src.{{ src_ldts }} > max.max_ldts\n    {%- elif is_incremental() and source_models | length == 1 and not ns.has_rsrc_static_defined and not disable_hwm %}\n        WHERE src.{{ src_ldts }} > (\n            SELECT COALESCE(MAX({{ src_ldts }}), {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }})\n            FROM {{ this }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            )\n    {%- endif %}\n\n    {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n    ),\n{%- endfor -%}\n\n{%- if source_models | length > 1 %}\n\nsource_new_union AS (\n{# Unionize the new records from all sources. #}\n\n    {%- for source_model in source_models -%}\n\n    {%- set source_number = source_model.id | string -%}\n\n    SELECT\n        {{ link_hashkey }},\n        {% for fk in source_model['fk_columns']|list %}\n            {{ fk }} AS {{ foreign_hashkeys[loop.index - 1] }},\n        {% endfor -%}\n\n        {{ src_ldts }},\n        {{ src_rsrc }},\n\n        {% for col in source_model['payload']|list %}\n            {{ col }} AS {{ payload[loop.index - 1] }}\n            {%- if not loop.last %}, {%- endif %}\n        {% endfor -%}\n\n    FROM src_new_{{ source_number }}\n\n    {%- if not loop.last %}\n    UNION ALL\n    {% endif -%}\n\n    {%- endfor -%}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif %}\n\n{%- if not source_is_single_batch %}\n\nearliest_hk_over_all_sources_prep AS (\n{# Deduplicate the unionized records again to only insert the earliest one. #}\n\n    SELECT\n        lcte.*,\n        ROW_NUMBER() OVER (PARTITION BY {{ link_hashkey }} ORDER BY {{ src_ldts }}) AS rn\n    FROM {{ ns.last_cte }} AS lcte\n\n\n),\n\nearliest_hk_over_all_sources AS (\n\n    SELECT \n        {{ datavault4dbt.print_list(final_columns_to_select) | indent(4) }}\n    FROM earliest_hk_over_all_sources_prep\n    WHERE rn = 1\n\n    {%- set ns.last_cte = 'earliest_hk_over_all_sources' -%}\n),\n\n{%- endif %}\n\nrecords_to_insert AS (\n{# Select everything from the previous CTE, if its incremental then filter for hashkeys that are not already in the link. #}\n\n    SELECT\n        {{ datavault4dbt.print_list(final_columns_to_select) | indent(4) }}\n    FROM {{ ns.last_cte }} cte\n\n    {%- if is_incremental() %}\n    WHERE\n        NOT EXISTS (\n            SELECT 1\n            FROM distinct_target_hashkeys dth\n            WHERE cte.{{ link_hashkey }} = dth.{{ link_hashkey }}\n        )\n    {% endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.is_list", "macro.datavault4dbt.source_model_processing", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.1963022, "supported_languages": null}, "macro.datavault4dbt.synapse__ref_table": {"name": "synapse__ref_table", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/synapse/ref_table.sql", "original_file_path": "macros/tables/synapse/ref_table.sql", "unique_id": "macro.datavault4dbt.synapse__ref_table", "macro_sql": "{%- macro synapse__ref_table(ref_hub, ref_satellites, src_ldts, src_rsrc, historized, snapshot_trigger_column='is_active', snapshot_relation=none) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set ref_hub_relation = ref(ref_hub|string) -%}\n\n{%- set is_current_col_alias = var('datavault4dbt.is_current_col_alias', 'IS_CURRENT') -%}\n{%- set ledts_alias = var('datavault4dbt.ledts_alias', 'ledts') -%}\n{%- set sdts_alias = var('datavault4dbt.sdts_alias', 'sdts') -%}\n\n{%- set include_business_objects_before_appearance = var('datavault4dbt.include_business_objects_before_appearance', 'false') -%}\n\n{{ log('ref_hub_relation: ' ~ ref_hub_relation, false) }}\n{%- set hub_columns = datavault4dbt.source_columns(ref_hub_relation) -%}\n{{ log('hub_columns: ' ~ hub_columns, false) }}\n{%- set hub_columns_to_exclude = [src_ldts, src_rsrc] -%}\n{%- set ref_key_cols = datavault4dbt.process_columns_to_select(columns_list=hub_columns, exclude_columns_list=hub_columns_to_exclude )%}\n{{ log('ref_key_cols: ' ~ ref_key_cols, false) }}\n{%- set sat_columns_to_exclude = [src_ldts, src_rsrc, ledts_alias, is_current_col_alias] + ref_key_cols -%}\n{{ log('sat_columns_to_exclude: '~ sat_columns_to_exclude, false) }}\n\n{%- set ref_satellites_dict = {} -%}\n\n{%- if not datavault4dbt.is_list(ref_satellites) and not ref_satellites is mapping -%}\n    {%- set ref_satellites = [ref_satellites] -%}\n{%- endif -%}\n\n{%- if datavault4dbt.is_list(ref_satellites) -%}\n    {%- for ref_satellite in ref_satellites -%}\n        {%- do ref_satellites_dict.update({ref_satellite:{}}) -%}\n    {%- endfor -%}\n{%- else -%}\n    {%- set ref_satellites_dict = ref_satellites -%}\n{%- endif -%}\n\n\nWITH \n\ndates AS (\n\n{% if historized in ['full', 'latest'] -%}\n\n    {%- set date_column = src_ldts -%}\n\n\n    {{ log('ref_satellites: '~ ref_satellites, false) -}}\n\n    {% if historized == 'full' -%}\n    SELECT distinct {{ date_column }} FROM (\n    {%- elif historized == 'latest' -%}\n    SELECT MAX({{ date_column }}) as {{ date_column }} FROM (\n    {%- endif -%}\n\n    SELECT distinct \n        {{ src_ldts }}\n    FROM {{ ref_hub_relation }}\n    WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    UNION\n\n    {% for satellite in ref_satellites_dict.keys() -%}\n    SELECT distinct \n        {{ src_ldts }}\n    FROM {{ ref(satellite|string) }}\n    WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    {% if not loop.last -%} UNION {% endif %}\n    {%- endfor %}\n    ) sub\n\n\n{% elif snapshot_relation is not none %}\n\n    {%- set date_column = sdts_alias -%}\n    \n    SELECT \n        {{ date_column }}\n    FROM (\n        \n        SELECT \n            {{ sdts_alias }}\n        FROM {{ ref(snapshot_relation) }}\n        WHERE {{ snapshot_trigger_column }} = 1\n    )\n\n{%- endif %}\n\n{%- if is_incremental() -%}\n    WHERE {{ date_column }} > (\n        SELECT \n            COALESCE(MAX({{ src_ldts }}), {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }}) \n        FROM {{ this }}\n    )\n{%- endif -%}\n\n\n),\n\nref_table AS (\n\n    SELECT\n    {{ datavault4dbt.print_list(list_to_print=ref_key_cols, indent=2, src_alias='h') }},\n        ld.{{ date_column }},\n        h.{{ src_rsrc }},\n\n    {%- for satellite in ref_satellites_dict.keys() %}\n\n    {%- set sat_alias = 's_' + loop.index|string -%}\n    {%- set sat_columns_pre = [] -%}\n        \n        {%- if ref_satellites_dict[satellite] is mapping and 'include' in ref_satellites_dict[satellite].keys() -%}\n            {%- set sat_columns_pre = ref_satellites_dict[satellite]['include'] -%}\n        {%- elif ref_satellites_dict[satellite] is mapping and 'exclude' in ref_satellites_dict[satellite].keys() -%}\n            {%- set all_sat_columns = datavault4dbt.source_columns(ref(satellite)) -%}\n            {%- set sat_columns_pre = datavault4dbt.process_columns_to_select(all_sat_columns, ref_satellites_dict[satellite]['exclude']) -%}\n        {%- elif datavault4dbt.is_list(ref_satellites_dict[satellite]) -%}\n            {%- set sat_columns_pre = ref_satellites_dict[satellite] -%}\n        {%- else -%}\n            {%- set all_sat_columns = datavault4dbt.source_columns(ref(satellite)) -%}\n            {%- set sat_columns_pre = datavault4dbt.process_columns_to_select(all_sat_columns, sat_columns_to_exclude) -%}\n        {%- endif -%}\n\n    {%- set sat_columns = datavault4dbt.process_columns_to_select(sat_columns_pre, sat_columns_to_exclude) -%}\n    \n    {{- log('sat_columns: '~ sat_columns, false) -}}\n\n    {{ datavault4dbt.print_list(list_to_print=sat_columns, indent=2, src_alias=sat_alias) }}\n    {%- if not loop.last -%} ,\n    {% endif -%}\n\n    {% endfor %} \n\n    FROM {{ ref(ref_hub) }} h\n    \n    FULL OUTER JOIN dates ld\n        ON 1 = 1  \n\n    {% for satellite in ref_satellites_dict.keys() %}\n\n        {%- set sat_alias = 's_' + loop.index|string -%}\n\n    LEFT JOIN {{ ref(satellite) }} {{ sat_alias }}\n        ON {{ datavault4dbt.multikey(columns=ref_key_cols, prefix=['h', sat_alias], condition='=') }}\n        AND  ld.{{ date_column }} BETWEEN {{ sat_alias }}.{{ src_ldts }} AND {{ sat_alias }}.{{ ledts_alias }}\n    \n    {% endfor %}\n    \n    {% if include_business_objects_before_appearance == 'false' -%}\n    WHERE h.{{ src_ldts }} <= ld.{{ date_column }}\n    {% endif %}\n\n) \n\nSELECT * FROM ref_table\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.source_columns", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.is_list", "macro.datavault4dbt.string_to_timestamp", "macro.dbt.is_incremental", "macro.datavault4dbt.print_list", "macro.datavault4dbt.multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.2000818, "supported_languages": null}, "macro.datavault4dbt.synapse__hub": {"name": "synapse__hub", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/synapse/hub.sql", "original_file_path": "macros/tables/synapse/hub.sql", "unique_id": "macro.datavault4dbt.synapse__hub", "macro_sql": "{%- macro synapse__hub(hashkey, business_keys, src_ldts, src_rsrc, source_models, disable_hwm) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{{ log('source_models'~source_models, false) }}\n\n{%- set ns = namespace(last_cte= \"\", source_included_before = {}, has_rsrc_static_defined=true, source_models_rsrc_dict={}) -%}\n\n{# Select the Business Key column from the first source model definition provided in the hub model and put them in an array. #}\n{%- set business_keys = datavault4dbt.expand_column_list(columns=[business_keys]) -%}\n\n{# If no specific bk_columns is defined for each source, we apply the values set in the business_keys variable. #}\n{# If no specific hk_column is defined for each source, we apply the values set in the hashkey variable. #}\n{# If no rsrc_static parameter is defined in ANY of the source models then the whole code block of record_source performance lookup is not executed  #}\n{# For the use of record_source performance lookup it is required that every source model has the parameter rsrc_static defined and it cannot be an empty string #}\n{%- if source_models is not mapping -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- set source_model_values = fromjson(datavault4dbt.source_model_processing(source_models=source_models, parameters={'hk_column':hashkey}, business_keys=business_keys)) -%}\n{%- set source_models = source_model_values['source_model_list'] -%}\n{%- set ns.has_rsrc_static_defined = source_model_values['has_rsrc_static_defined'] -%}\n{%- set ns.source_models_rsrc_dict = source_model_values['source_models_rsrc_dict'] -%}\n{{ log('source_models: '~source_models, false) }}\n\n{%- set final_columns_to_select = [hashkey] + business_keys + [src_ldts] + [src_rsrc] -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{% if is_incremental() -%}\n{# Get all target hashkeys out of the existing hub for later incremental logic. #}\n    distinct_target_hashkeys AS (\n\n        SELECT\n            {{ hashkey }}\n        FROM {{ this }}\n\n    ),\n    {%- if ns.has_rsrc_static_defined and not disable_hwm -%}\n        {% for source_model in source_models %}\n         {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n            {%- set source_number = source_model.id | string -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number] -%}\n\n            {{log('rsrc_statics: '~ rsrc_statics, false) }}\n\n            {%- set rsrc_static_query_source -%}\n                SELECT count(*) FROM (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.{{ src_rsrc }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                ) sub\n            {% endset %}\n\n            {{ log('rsrc static query: '~rsrc_static_query_source, false) }}\n\n            rsrc_static_{{ source_number }} AS (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT \n                    t.*,\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                {%- set ns.last_cte = \"rsrc_static_{}\".format(source_number) -%}\n            ),\n            \n            {%- set source_in_target = true -%}\n            \n            {%- if execute -%}\n                {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n\n                {%- set row_count = rsrc_static_result.columns[0].values()[0] -%}\n\n                {{ log('row_count for '~source_model~' is '~row_count, false) }}\n\n                {%- if row_count == 0 -%}\n                    {%- set source_in_target = false -%}\n                {%- endif -%}\n            {%- endif -%}\n\n\n            {%- do ns.source_included_before.update({source_model.id: source_in_target}) -%}\n\n        {% endfor -%}\n\n        {%- if source_models | length > 1 %}\n\n        rsrc_static_union AS (\n            {#  Create one unionized table over all sources. It will be the same as the already existing\n                hub, but extended by the rsrc_static column. #}\n            {% for source_model in source_models %}\n            {%- set source_number = source_model.id | string -%}\n\n            SELECT rsrc_static_{{ source_number }}.* FROM rsrc_static_{{ source_number }}\n\n            {%- if not loop.last %}\n            UNION ALL\n            {% endif -%}\n            {%- endfor %}\n            {%- set ns.last_cte = \"rsrc_static_union\" -%}\n        ),\n\n        {%- endif %}\n\n        max_ldts_per_rsrc_static_in_target AS (\n        {# Use the previously created CTE to calculate the max load date timestamp per rsrc_static. #}\n            SELECT\n                rsrc_static,\n                COALESCE(MAX({{ src_ldts }}), {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }}) as max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif %}\n{% endif -%}\n\n{% for source_model in source_models %}\n\n    {%- set source_number = source_model.id | string -%}\n\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number|string] -%}\n    {%- endif -%}\n\n    {%- if 'hk_column' not in source_model.keys() %}\n        {%- set hk_column = hashkey -%}\n    {%- else -%}\n        {%- set hk_column = source_model['hk_column'] -%}\n    {% endif %}\n\n    src_new_{{ source_number }} AS (\n\n        SELECT\n            {{ hk_column }} AS {{ hashkey }},\n            {% for bk in source_model['bk_columns'] -%}\n            {{ bk }},\n            {% endfor -%}\n\n            {{ src_ldts }},\n            {{ src_rsrc }}\n        FROM {{ ref(source_model.name) }} src\n        {{ log('rsrc_statics defined?: ' ~ ns.source_models_rsrc_dict[source_number|string], false) }}\n\n    {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_number|int] and not disable_hwm %}\n        INNER JOIN max_ldts_per_rsrc_static_in_target max ON\n        ({%- for rsrc_static in rsrc_statics -%}\n            max.rsrc_static = '{{ rsrc_static }}'\n            {%- if not loop.last -%} OR\n            {% endif -%}\n        {%- endfor %})\n        WHERE src.{{ src_ldts }} > max.max_ldts\n    {%- elif is_incremental() and source_models | length == 1 and not ns.has_rsrc_static_defined and not disable_hwm %}\n        WHERE src.{{ src_ldts }} > (\n            SELECT COALESCE(MAX({{ src_ldts }}), {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }})\n            FROM {{ this }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            )\n    {%- endif %}\n\n         {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n    ),\n{%- endfor -%}\n\n{%- if source_models | length > 1 %}\n\nsource_new_union AS (\n\n    {%- for source_model in source_models -%}\n\n    {%- set source_number = source_model.id | string -%}\n\n    SELECT\n        {{ hashkey }},\n\n        {% for bk in source_model['bk_columns'] -%}\n            {{ bk }} AS {{ business_keys[loop.index - 1] }},\n        {% endfor -%}\n\n        {{ src_ldts }},\n        {{ src_rsrc }}\n    FROM src_new_{{ source_number }}\n\n    {%- if not loop.last %}\n    UNION ALL\n    {% endif -%}\n\n    {%- endfor -%}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif %}\n\nearliest_hk_over_all_sources_prep AS (\n\n    {#- Deduplicate the unionized records again to only insert the earliest one. #}\n    SELECT\n        lcte.*,\n        ROW_NUMBER() OVER (PARTITION BY {{ hashkey }} ORDER BY {{ src_ldts }}) as rn\n    FROM {{ ns.last_cte }} AS lcte\n\n),\n\nearliest_hk_over_all_sources AS (\n\n    {#- Deduplicate the unionized records again to only insert the earliest one. #}\n    SELECT\n        lcte.*\n    FROM earliest_hk_over_all_sources_prep AS lcte\n    WHERE rn = 1\n\n    {%- set ns.last_cte = 'earliest_hk_over_all_sources' -%}\n\n),\n\nrecords_to_insert AS (\n    {#- Select everything from the previous CTE, if incremental filter for hashkeys that are not already in the hub. #}\n    SELECT\n        {{ datavault4dbt.print_list(final_columns_to_select) }}\n    FROM {{ ns.last_cte }} cte\n\n    {%- if is_incremental() %}\n    WHERE\n        NOT EXISTS (\n            SELECT 1\n            FROM distinct_target_hashkeys dth\n            WHERE cte.{{ hashkey }} = dth.{{ hashkey }}\n        )\n    {% endif -%}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.source_model_processing", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.204779, "supported_languages": null}, "macro.datavault4dbt.synapse__link": {"name": "synapse__link", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/synapse/link.sql", "original_file_path": "macros/tables/synapse/link.sql", "unique_id": "macro.datavault4dbt.synapse__link", "macro_sql": "{%- macro synapse__link(link_hashkey, foreign_hashkeys, source_models, src_ldts, src_rsrc, disable_hwm) -%}\n\n{%- if not (foreign_hashkeys is iterable and foreign_hashkeys is not string) -%}\n\n    {%- if execute -%}\n        {{ exceptions.raise_compiler_error(\"Only one foreign key provided for this link. At least two required.\") }}\n    {%- endif %}\n\n{%- endif -%}\n\n{%- set ns = namespace(last_cte= \"\", source_included_before = {}, has_rsrc_static_defined=true, source_models_rsrc_dict={}) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{# If no specific link_hk and fk_columns are defined for each source, we apply the values set in the link_hashkey and foreign_hashkeys variable. #}\n{# If no rsrc_static parameter is defined in ANY of the source models then the whole code block of record_source performance lookup is not executed  #}\n{# For the use of record_source performance lookup it is required that every source model has the parameter rsrc_static defined and it cannot be an empty string #}\n{%- if source_models is not mapping -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- set source_model_values = fromjson(datavault4dbt.source_model_processing(source_models=source_models, parameters={'link_hk':link_hashkey}, foreign_hashkeys=foreign_hashkeys)) -%}\n{%- set source_models = source_model_values['source_model_list'] -%}\n{%- set ns.has_rsrc_static_defined = source_model_values['has_rsrc_static_defined'] -%}\n{%- set ns.source_models_rsrc_dict = source_model_values['source_models_rsrc_dict'] -%}\n{{ log('source_models: '~source_models, false) }}\n\n{%- set final_columns_to_select = [link_hashkey] + foreign_hashkeys + [src_ldts] + [src_rsrc] -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{% if is_incremental() %}\n{# Get all link hashkeys out of the existing link for later incremental logic. #}\n    distinct_target_hashkeys AS (\n        \n        SELECT\n        {{ link_hashkey }}\n        FROM {{ this }}\n\n    ),\n    {%- if ns.has_rsrc_static_defined and not disable_hwm -%}\n        {% for source_model in source_models %}\n        {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n            {%- set source_number = source_model.id | string -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number] -%}\n\n            {{log('rsrc_statics: '~ rsrc_statics, false) }}\n\n            {%- set rsrc_static_query_source -%}\n                SELECT count(*) FROM (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.{{ src_rsrc }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                ) sub\n            {% endset %}\n\n            rsrc_static_{{ source_number }} AS (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.*,\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                {%- set ns.last_cte = \"rsrc_static_{}\".format(source_number) -%}\n            ),\n\n            {%- set source_in_target = true -%}\n            \n            {%- if execute -%}\n                {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n\n                {%- set row_count = rsrc_static_result.columns[0].values()[0] -%}\n\n                {{ log('row_count for '~source_model~' is '~row_count, false) }}\n\n                {%- if row_count == 0 -%}\n                    {%- set source_in_target = false -%}\n                {%- endif -%}\n            {%- endif -%}\n\n\n            {%- do ns.source_included_before.update({source_model.id: source_in_target}) -%}\n\n        {% endfor -%}\n\n        {%- if source_models | length > 1 %}\n\n        rsrc_static_union AS (\n            {#  Create one unionized table over all sources. It will be the same as the already existing\n                link, but extended by the rsrc_static column. #}\n\n            {% for source_model in source_models %}\n            {%- set source_number = source_model.id | string -%}\n\n            SELECT rsrc_static_{{ source_number }}.* FROM rsrc_static_{{ source_number }}\n\n            {%- if not loop.last %}\n            UNION ALL\n            {% endif -%}\n            {%- endfor %}\n            {%- set ns.last_cte = \"rsrc_static_union\" -%}\n        ),\n\n        {%- endif %}\n\n        max_ldts_per_rsrc_static_in_target AS (\n        {# Use the previously created CTE to calculate the max load date timestamp per rsrc_static. #}\n\n            SELECT\n                rsrc_static,\n                COALESCE(MAX({{ src_ldts }}), {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }}) as max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif %}\n{% endif -%}\n\n{% for source_model in source_models %}\n\n{#  Select all deduplicated records from each source, and filter for records that are newer\n    than the max ldts inside the existing link, if incremental. #}\n\n    {%- set source_number = source_model.id | string -%}\n\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number|string] -%}\n    {%- endif -%}\n\n    {%- if 'link_hk' not in source_model.keys() %}\n        {%- set link_hk = link_hashkey -%}\n    {%- else -%}\n        {%- set link_hk = source_model['link_hk'] -%}\n    {% endif %}\n\n    src_new_{{ source_number }} AS (\n\n        SELECT\n            {{ link_hk }} AS {{ link_hashkey }},\n            {% for fk in source_model['fk_columns'] -%}\n            {{ fk }},\n            {% endfor -%}\n            {{ src_ldts }},\n            {{ src_rsrc }}\n        FROM {{ ref(source_model.name) }} src\n        {{ log('rsrc_statics defined?: ' ~ ns.source_models_rsrc_dict[source_number|string], false) }}\n\n    {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_number|int] and not disable_hwm %}\n        INNER JOIN max_ldts_per_rsrc_static_in_target max ON\n        ({%- for rsrc_static in rsrc_statics -%}\n            max.rsrc_static = '{{ rsrc_static }}'\n            {%- if not loop.last -%} OR\n            {% endif -%}\n        {%- endfor %})\n        WHERE src.{{ src_ldts }} > max.max_ldts\n    {%- elif is_incremental() and source_models | length == 1 and not ns.has_rsrc_static_defined and not disable_hwm %}\n        WHERE src.{{ src_ldts }} > (\n            SELECT COALESCE(MAX({{ src_ldts }}), {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }})\n            FROM {{ this }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            )\n    {%- endif %}\n\n        {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n    ),\n{%- endfor -%}\n\n{%- if source_models | length > 1 %}\n\nsource_new_union AS (\n{# Unionize the new records from all sources. #}\n\n    {%- for source_model in source_models -%}\n\n    {%- set source_number = source_model.id | string -%}\n\n    SELECT\n        {{ link_hashkey }},\n        {% for fk in source_model['fk_columns']|list %}\n            {{ fk }} AS {{ foreign_hashkeys[loop.index - 1] }},\n        {% endfor -%}\n        {{ src_ldts }},\n        {{ src_rsrc }}\n    FROM src_new_{{ source_number }}\n\n    {%- if not loop.last %}\n    UNION ALL\n    {% endif -%}\n\n    {%- endfor -%}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif %}\n\nearliest_hk_over_all_sources_prep AS (\n    {# Deduplicate the unionized records again to only insert the earliest one. #}\n\n    SELECT\n        lcte.*,\n        ROW_NUMBER() OVER (PARTITION BY {{ link_hashkey }} ORDER BY {{ src_ldts }}) as rn\n    FROM {{ ns.last_cte }} AS lcte\n\n),\n\nearliest_hk_over_all_sources AS (\n    {# Deduplicate the unionized records again to only insert the earliest one. #}\n\n    SELECT\n        lcte.*\n    FROM earliest_hk_over_all_sources_prep AS lcte\n    WHERE rn = 1\n\n    {%- set ns.last_cte = 'earliest_hk_over_all_sources' -%}\n\n),\n\nrecords_to_insert AS (\n    {# Select everything from the previous CTE, if incremental filter for hashkeys that are not already in the link. #}\n\n    SELECT\n        {{ datavault4dbt.print_list(final_columns_to_select) | indent(4) }}\n    FROM {{ ns.last_cte }} cte\n\n    {%- if is_incremental() %}\n    WHERE \n        NOT EXISTS (\n            SELECT 1\n            FROM distinct_target_hashkeys dth\n            WHERE cte.{{ link_hashkey }} = dth.{{ link_hashkey }}\n        )\n    {% endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.source_model_processing", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.209506, "supported_languages": null}, "macro.datavault4dbt.synapse__ref_hub": {"name": "synapse__ref_hub", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/synapse/ref_hub.sql", "original_file_path": "macros/tables/synapse/ref_hub.sql", "unique_id": "macro.datavault4dbt.synapse__ref_hub", "macro_sql": "{%- macro synapse__ref_hub(ref_keys, src_ldts, src_rsrc, source_models) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set ns = namespace(last_cte= \"\", source_included_before = {}, has_rsrc_static_defined=true, source_models_rsrc_dict={}) -%}\n\n{%- set ref_keys = datavault4dbt.expand_column_list(columns=[ref_keys]) -%}\n\n{# If no specific ref_keys is defined for each source, we apply the values set in the ref_keys variable. #}\n{# If no rsrc_static parameter is defined in ANY of the source models then the whole code block of record_source performance lookup is not executed  #}\n{# For the use of record_source performance lookup it is required that every source model has the parameter rsrc_static defined and it cannot be an empty string #}\n{%- if source_models is not mapping and not datavault4dbt.is_list(source_models) -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- set source_model_values = fromjson(datavault4dbt.source_model_processing(source_models=source_models, parameters={'test':'test'}, reference_keys=ref_keys)) -%}\n{%- set source_models = source_model_values['source_model_list'] -%}\n{%- set ns.has_rsrc_static_defined = source_model_values['has_rsrc_static_defined'] -%}\n{%- set ns.source_models_rsrc_dict = source_model_values['source_models_rsrc_dict'] -%}\n{{ log('source_models: '~source_models, false) }}\n\n{%- set final_columns_to_select = ref_keys + [src_ldts] + [src_rsrc] -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{% if is_incremental() -%}\n{# Get all target ref_keys out of the existing ref_table for later incremental logic. #}\n    distinct_target_ref_keys AS (\n\n        SELECT\n            {% for ref_key in ref_keys -%}\n            {{ ref_key}} {%- if not loop.last %},{% endif %}\n            {% endfor %}\n        FROM {{ this }}\n\n    ),\n    {%- if ns.has_rsrc_static_defined -%}\n        {% for source_model in source_models %}\n         {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n            {%- set source_number = source_model.id | string -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number] -%}\n\n            {{log('rsrc_statics: '~ rsrc_statics, false) }}\n\n            {%- set rsrc_static_query_source -%}\n                SELECT count(*) FROM (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.{{ src_rsrc }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                ) sub\n            {% endset %}\n\n            rsrc_static_{{ source_number }} AS (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT \n                    t.{{ src_ldts }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} LIKE '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                {%- set ns.last_cte = \"rsrc_static_{}\".format(source_number) -%}\n            ),\n\n            {%- set source_in_target = true -%}\n\n            {%- if execute -%}\n                {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n\n                {%- set row_count = rsrc_static_result.columns[0].values()[0] -%}\n\n                {{ log('row_count for '~source_model~' is '~row_count, false) }}\n\n                {%- if row_count == 0 -%}\n                {%- set source_in_target = false -%}\n                {%- endif -%}\n            {%- endif -%}\n\n\n            {%- do ns.source_included_before.update({source_model.id: source_in_target}) -%}\n\n        {% endfor -%}\n\n        {%- if source_models | length > 1 %}\n\n        rsrc_static_union AS (\n            {#  Create one unionized table over all sources. It will be the same as the already existing\n                hub, but extended by the rsrc_static column. #}\n            {% for source_model in source_models %}\n            {%- set source_number = source_model.id | string -%}\n\n            SELECT rsrc_static_{{ source_number }}.* FROM rsrc_static_{{ source_number }}\n\n            {%- if not loop.last %}\n            UNION ALL\n            {% endif -%}\n            {%- endfor %}\n            {%- set ns.last_cte = \"rsrc_static_union\" -%}\n        ),\n\n        {%- endif %}\n\n        max_ldts_per_rsrc_static_in_target AS (\n        {# Use the previously created CTE to calculate the max load date timestamp per rsrc_static. #}\n            SELECT\n                rsrc_static,\n                COALESCE(MAX({{ src_ldts }}), {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }}) as max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif %}\n{% endif -%}\n\n{% for source_model in source_models %}\n\n    {%- set source_number = source_model.id | string -%}\n\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = ns.source_models_rsrc_dict.id -%}\n    {%- endif -%}\n\n\n    src_new_{{ source_number }} AS (\n\n        SELECT\n            {% for ref_key in source_model['ref_keys'] -%}\n            {{ ref_key}},\n            {% endfor -%}\n\n            {{ src_ldts }},\n            {{ src_rsrc }}\n        FROM {{ ref(source_model.name) }} src\n\n    {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_number|int] and not disable_hwm %}\n        INNER JOIN max_ldts_per_rsrc_static_in_target max ON\n        ({%- for rsrc_static in rsrc_statics -%}\n            max.rsrc_static = '{{ rsrc_static }}'\n            {%- if not loop.last -%} OR\n            {% endif -%}\n        {%- endfor %})\n        WHERE src.{{ src_ldts }} > max.max_ldts\n    {%- elif is_incremental() and source_models | length == 1 and not ns.has_rsrc_static_defined and not disable_hwm %}\n        WHERE src.{{ src_ldts }} > (\n            SELECT COALESCE(MAX({{ src_ldts }}), {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }})\n            FROM {{ this }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            )\n    {%- endif %}\n\n         {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n         \n    ),\n{%- endfor -%}\n\n{%- if source_models | length > 1 %}\n\nsource_new_union AS (\n\n    {%- for source_model in source_models -%}\n\n    {%- set source_number = source_model.id | string -%}\n\n    SELECT\n        {% for ref_key in source_model['ref_keys'] -%}\n            {{ ref_key }} AS {{ ref_keys[loop.index - 1] }},\n        {% endfor -%}\n\n        {{ src_ldts }},\n        {{ src_rsrc }}\n    FROM src_new_{{ source_number }}\n\n    {%- if not loop.last %}\n    UNION ALL\n    {% endif -%}\n\n    {%- endfor -%}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif %}\n\nprep_earliest_ref_key_over_all_sources AS (\n\n    {#- Prepare unionized records to only insert the earliest one. #}\n    SELECT\n        lcte.*\n        , ROW_NUMBER() OVER (PARTITION BY {%- for ref_key in ref_keys %} {{ref_key}} {%- if not loop.last %}, {% endif %}{% endfor %} ORDER BY {{ src_ldts }}) AS SEQ\n    FROM {{ ns.last_cte }} AS lcte\n\n    {%- set ns.last_cte = 'prep_earliest_ref_key_over_all_sources' -%}\n\n),\nearliest_ref_key_over_all_sources AS (\n\n    {#- Deduplicate the unionized records to only insert the earliest one. #}\n    SELECT\n        lcte.*\n    FROM {{ ns.last_cte }} AS lcte\n    WHERE SEQ = 1\n\n    {%- set ns.last_cte = 'earliest_ref_key_over_all_sources' -%}\n\n),\nrecords_to_insert AS (\n    {#- Select everything from the previous CTE, if incremental filter for hashkeys that are not already in the hub. #}\n    SELECT\n        {{ datavault4dbt.print_list(final_columns_to_select) }}\n    FROM {{ ns.last_cte }} cte\n\n    {%- if is_incremental() %}\n    WHERE NOT EXISTS (\n        SELECT \n            1 \n        FROM distinct_target_ref_keys dtr\n        WHERE \n            {% for ref_key in ref_keys -%}\n            {% if not loop.first %}AND {% endif -%} cte.{{ ref_key}} = dtr.{{ ref_key }}\n            {% endfor -%}\n         )\n        {% for ref_key in ref_keys -%}\n            AND cte.{{ ref_key}} IS NOT NULL\n        {% endfor -%}\n    {% endif -%}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.is_list", "macro.datavault4dbt.source_model_processing", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.214234, "supported_languages": null}, "macro.datavault4dbt.synapse__nh_sat": {"name": "synapse__nh_sat", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/synapse/nh_sat.sql", "original_file_path": "macros/tables/synapse/nh_sat.sql", "unique_id": "macro.datavault4dbt.synapse__nh_sat", "macro_sql": "{%- macro synapse__nh_sat(parent_hashkey, src_payload, src_ldts, src_rsrc, source_model, source_is_single_batch) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set source_cols = datavault4dbt.expand_column_list(columns=[parent_hashkey, src_ldts, src_rsrc, src_payload]) -%}\n{%- set source_relation = ref(source_model) -%}\n\n{%- set ns = namespace(last_cte='') -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Selecting all source data, that is newer than latest data in sat if incremental #}\nsource_data AS (\n\n    SELECT\n        \n        {{ datavault4dbt.print_list(source_cols) }}\n        \n    {% if not source_is_single_batch -%}\n        , ROW_NUMBER() OVER (PARTITION BY {{ parent_hashkey }} ORDER BY {{ src_ldts }}) as RN\n    {%- endif %}\n\n    FROM \n        {{ source_relation }}\n    {%- if is_incremental() %}\n    WHERE {{ src_ldts }} > (\n        SELECT\n            COALESCE(MAX({{ src_ldts }}), {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }})\n        FROM \n            {{ this }}\n        WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    )\n    {%- endif %}\n\n    {%- set ns.last_cte = 'source_data' -%}\n),\n\n{% if not source_is_single_batch -%}\n\ndeduped_source AS (\n\n    SELECT \n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM {{ ns.last_cte }}\n    WHERE RN = 1\n\n    {%- set ns.last_cte = 'deduped_source' -%}\n\n),\n\n{%- endif %} \n\n{% if is_incremental() -%}\n{#- Get distinct list of hashkeys inside the existing satellite, if incremental. #}\ndistinct_hashkeys AS \n(\n    SELECT DISTINCT\n        {{ parent_hashkey }}\n    FROM \n        {{ this }}    \n    ),\n{%- endif %}\n\n{#- \n    Select all records from the source. If incremental, insert only records, where the\n    hashkey is not already in the existing satellite.\n#}\nrecords_to_insert AS (\n\n    SELECT\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM {{ ns.last_cte }} cte\n    {%- if is_incremental() %}\n    WHERE \n        NOT EXISTS (\n            SELECT 1\n            FROM distinct_hashkeys dth\n            WHERE cte.{{ parent_hashkey }} = dth.{{ parent_hashkey }}\n        )\n    {%- endif %}\n    )\nSELECT \n  * \nFROM \n  records_to_insert                      \n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.print_list", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.2155242, "supported_languages": null}, "macro.datavault4dbt.synapse__ma_sat_v1": {"name": "synapse__ma_sat_v1", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/synapse/ma_sat_v1.sql", "original_file_path": "macros/tables/synapse/ma_sat_v1.sql", "unique_id": "macro.datavault4dbt.synapse__ma_sat_v1", "macro_sql": "{%- macro synapse__ma_sat_v1(sat_v0, hashkey, hashdiff, ma_attribute, src_ldts, src_rsrc, ledts_alias, add_is_current_flag) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set is_current_col_alias = var('datavault4dbt.is_current_col_alias', 'IS_CURRENT') -%}\n\n{%- set source_relation = ref(sat_v0) -%}\n{%- set all_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n{%- set exclude = datavault4dbt.expand_column_list(columns=[hashkey, hashdiff, ma_attribute, src_ldts, src_rsrc]) -%}\n{%- set ma_attributes = datavault4dbt.expand_column_list(columns=[ma_attribute]) -%}\n\n\n{%- set source_columns_to_select = datavault4dbt.process_columns_to_select(all_columns, exclude) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Getting everything from the underlying v0 satellite. #}\nsource_satellite AS (\n\n    SELECT src.*\n    FROM {{ source_relation }} as src\n\n),\n\n{# Selecting all distinct loads per hashkey. #}\ndistinct_hk_ldts AS (\n\n    SELECT DISTINCT\n        {{ hashkey }},\n        {{ src_ldts }}\n    FROM source_satellite\n\n),\n\n{# End-dating each ldts for each hashkey, based on earlier ldts per hashkey. #}\nend_dated_loads AS (\n\n  SELECT\n    {{ hashkey }},\n    {{ src_ldts }},\n    COALESCE(\n        DATEADD(MILLISECOND, -1, LEAD({{ src_ldts }}) OVER (PARTITION BY {{ hashkey }} ORDER BY {{ src_ldts }})),\n        CAST('{{ end_of_all_times }}' AS DATETIME2)\n    ) AS {{ ledts_alias }}\nFROM distinct_hk_ldts\n\n),\n\n{# End-date each source record, based on the end-date for each load. #}\nend_dated_source AS (\n\nSELECT\n    src.{{ hashkey }},\n    src.{{ hashdiff }},\n    src.{{ src_rsrc }},\n    src.{{ src_ldts }},\n    edl.{{ ledts_alias }},\n    {%- if add_is_current_flag %}\n        CASE WHEN edl.{{ ledts_alias }} = CAST('{{ end_of_all_times }}' AS DATETIME2)\n        THEN 1\n        ELSE 0\n        END AS {{ is_current_col_alias }},\n    {% endif %}\n    {{- datavault4dbt.print_list(ma_attributes, indent=10, src_alias='src') }},\n    {{- datavault4dbt.print_list(source_columns_to_select, indent=10, src_alias='src') }}\nFROM source_satellite AS src\nLEFT JOIN end_dated_loads edl\n    ON src.{{ hashkey }} = edl.{{ hashkey }}\n    AND src.{{ src_ldts }} = edl.{{ src_ldts }}\n\n\n)\n\nSELECT * FROM end_dated_source\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.source_columns", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.21678, "supported_languages": null}, "macro.datavault4dbt.synapse__ma_sat_v0": {"name": "synapse__ma_sat_v0", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/synapse/ma_sat_v0.sql", "original_file_path": "macros/tables/synapse/ma_sat_v0.sql", "unique_id": "macro.datavault4dbt.synapse__ma_sat_v0", "macro_sql": "{%- macro synapse__ma_sat_v0(parent_hashkey, src_hashdiff, src_ma_key, src_payload, src_ldts, src_rsrc, source_model) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set ns=namespace(src_hashdiff=\"\", hdiff_alias=\"\") %}\n{%- if  src_hashdiff is mapping and src_hashdiff is not none -%}\n    {% set ns.src_hashdiff = src_hashdiff[\"source_column\"] %}\n    {% set ns.hdiff_alias = src_hashdiff[\"alias\"] %}\n{% else %}\n    {% set ns.src_hashdiff = src_hashdiff %}\n    {% set ns.hdiff_alias = src_hashdiff  %}\n{%- endif -%}\n\n{%- set source_cols = datavault4dbt.expand_column_list(columns=[src_rsrc, src_ldts, src_ma_key, src_payload]) -%}\n\n{%- set source_relation = ref(source_model) -%}\n\n\n{# Selecting all source data, that is newer than latest data in sat if incremental #}\nWITH source_data AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ ns.src_hashdiff }} as {{ ns.hdiff_alias }},\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM {{ source_relation }}\n\n    {%- if is_incremental() %}\n    WHERE {{ src_ldts }} > (\n        SELECT\n            COALESCE(MAX({{ src_ldts }}), {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }}) FROM {{ this }}\n        WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    )\n    {%- endif %}\n\n),\n\n{# Get the latest record for each parent hashkey in existing sat, if incremental. #}\n{%- if is_incremental() %}\nlatest_entries_in_sat_prep AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ ns.hdiff_alias }},\n        ROW_NUMBER() OVER(PARTITION BY {{ parent_hashkey|lower }} ORDER BY {{ src_ldts }} DESC) as rn\n    FROM \n        {{ this }}\n),\n\nlatest_entries_in_sat AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ ns.hdiff_alias }}\n    FROM \n        latest_entries_in_sat_prep\n    WHERE rn = 1  \n),\n{%- endif %}\n\n{# Get a list of all distinct hashdiffs that exist for each parent_hashkey. #}\n lag_source_data AS (\n  SELECT \n    {{ parent_hashkey }},\n    {{ src_ldts }},\n    {{ ns.hdiff_alias }},\n    LAG({{ ns.hdiff_alias }}) OVER (PARTITION BY {{ parent_hashkey }} ORDER BY {{ src_ldts }}) as prev_ns_hdiff_alias\n  FROM source_data\n),\n\ndeduped_row_hashdiff AS (\n  SELECT \n    {{ parent_hashkey }},\n    {{ src_ldts }},\n    {{ ns.hdiff_alias }}\n  FROM lag_source_data\n  WHERE {{ ns.hdiff_alias }} != prev_ns_hdiff_alias OR prev_ns_hdiff_alias IS NULL\n),\n\n\n\n{# Dedupe the source data regarding non-delta groups. #}\ndeduped_rows AS (\n\n  SELECT \n    source_data.{{ parent_hashkey }},\n    source_data.{{ ns.hdiff_alias }},\n    {{ datavault4dbt.alias_all(columns=source_cols, prefix='source_data') }}\n  FROM source_data\n  INNER JOIN deduped_row_hashdiff\n    ON {{ datavault4dbt.multikey(parent_hashkey, prefix=['source_data', 'deduped_row_hashdiff'], condition='=') }}\n    AND {{ datavault4dbt.multikey(src_ldts, prefix=['source_data', 'deduped_row_hashdiff'], condition='=') }}\n    AND {{ datavault4dbt.multikey(ns.hdiff_alias, prefix=['source_data', 'deduped_row_hashdiff'], condition='=') }}\n\n),\n\nrecords_to_insert AS (\n\n    SELECT\n        deduped_rows.{{ parent_hashkey }},\n        deduped_rows.{{ ns.hdiff_alias }},\n        {{ datavault4dbt.alias_all(columns=source_cols, prefix='deduped_rows') }}\n    FROM deduped_rows\n    {%- if is_incremental() %}\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE {{ datavault4dbt.multikey(parent_hashkey, prefix=['latest_entries_in_sat', 'deduped_rows'], condition='=') }}\n            AND {{ datavault4dbt.multikey(ns.hdiff_alias, prefix=['latest_entries_in_sat', 'deduped_rows'], condition='=') }} \n            )\n    {%- endif %}\n\n    )\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.print_list", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.alias_all", "macro.datavault4dbt.multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.218986, "supported_languages": null}, "macro.datavault4dbt.synapse__sat_v0": {"name": "synapse__sat_v0", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/synapse/sat_v0.sql", "original_file_path": "macros/tables/synapse/sat_v0.sql", "unique_id": "macro.datavault4dbt.synapse__sat_v0", "macro_sql": "{%- macro synapse__sat_v0(parent_hashkey, src_hashdiff, src_payload, src_ldts, src_rsrc, source_model, disable_hwm, source_is_single_batch) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set ns=namespace(src_hashdiff=\"\", hdiff_alias=\"\") %}\n\n{%- if  src_hashdiff is mapping and src_hashdiff is not none -%}\n    {% set ns.src_hashdiff = src_hashdiff[\"source_column\"] %}\n    {% set ns.hdiff_alias = src_hashdiff[\"alias\"] %}\n{% else %}\n    {% set ns.src_hashdiff = src_hashdiff %}\n    {% set ns.hdiff_alias = src_hashdiff  %}\n{%- endif -%}\n\n{%- set source_cols = datavault4dbt.expand_column_list(columns=[src_rsrc, src_ldts, src_payload]) -%}\n\n{%- set source_relation = ref(source_model) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Selecting all source data, that is newer than latest data in sat if incremental #}\nsource_data AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ ns.src_hashdiff }} as {{ ns.hdiff_alias }},\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM {{ source_relation }}\n\n    {%- if is_incremental() and not disable_hwm %}\n    WHERE {{ src_ldts }} > (\n        SELECT\n            COALESCE(MAX({{ src_ldts }}), {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }}) FROM {{ this }}\n        WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    )\n    {%- endif %}\n\n    {%- set source_cte = 'source_data' -%}\n\n),\n\n{# Get the latest record for each parent hashkey in existing sat, if incremental. #}\n{%- if is_incremental() %}\ndistinct_incoming_hashkeys AS (\n\n    SELECT DISTINCT\n        {{ parent_hashkey }}\n    FROM source_data\n\n),\n\nlatest_entries_in_sat_prep AS (\n\n    SELECT\n        tgt.{{ parent_hashkey }},\n        tgt.{{ ns.hdiff_alias }},\n        ROW_NUMBER() OVER(PARTITION BY tgt.{{ parent_hashkey|lower }} ORDER BY tgt.{{ src_ldts }} DESC) as rn\n    FROM {{ this }} tgt\n    INNER JOIN distinct_incoming_hashkeys src\n        ON tgt.{{ parent_hashkey }} = src.{{ parent_hashkey }}\n),\n\nlatest_entries_in_sat AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ ns.hdiff_alias }}\n    FROM \n        latest_entries_in_sat_prep\n    WHERE rn = 1  \n),\n{%- endif %}\n\n{%- if not source_is_single_batch %}\n{#\n    Deduplicate source by comparing each hashdiff to the hashdiff of the previous record, for each hashkey.\n    Additionally adding a row number based on that order, if incremental.\n#}\ndeduplicated_numbered_source_prep AS (\n\n    SELECT\n    {{ parent_hashkey }},\n    {{ ns.hdiff_alias }},\n    {{ datavault4dbt.print_list(source_cols) }}\n    , LAG({{ ns.hdiff_alias }}) OVER(PARTITION BY {{ parent_hashkey|lower }} ORDER BY {{ src_ldts }}) as prev_hashdiff\n    FROM source_data\n\n),\n\ndeduplicated_numbered_source AS (\n\n    SELECT\n    {{ parent_hashkey }},\n    {{ ns.hdiff_alias }},\n    {{ datavault4dbt.print_list(source_cols) }}\n    {% if is_incremental() -%}\n    , ROW_NUMBER() OVER(PARTITION BY {{ parent_hashkey }} ORDER BY {{ src_ldts }}) as rn\n    {%- endif %}\n    FROM deduplicated_numbered_source_prep\n    WHERE 1=1\n        AND {{ ns.hdiff_alias }} <> prev_hashdiff OR prev_hashdiff IS NULL\n\n    {%- set source_cte = 'deduplicated_numbered_source' -%}\n\n),\n\n{% endif -%}\n\n{#\n    Select all records from the previous CTE. If incremental, compare the oldest incoming entry to\n    the existing records in the satellite.\n#}\nrecords_to_insert AS (\n\n    SELECT\n    {{ parent_hashkey }},\n    {{ ns.hdiff_alias }},\n    {{ datavault4dbt.print_list(source_cols) }}\n    FROM {{ source_cte }} sc\n    {%- if is_incremental() %}\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE {{ datavault4dbt.multikey(parent_hashkey, prefix=['latest_entries_in_sat', 'sc'], condition='=') }}\n            AND {{ datavault4dbt.multikey(ns.hdiff_alias, prefix=['latest_entries_in_sat', 'sc'], condition='=') }}\n            {%- if not source_is_single_batch %}\n            AND sc.rn = 1\n            {%- endif %}\n    )\n    {%- endif %}\n\n    )\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.print_list", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.2212029, "supported_languages": null}, "macro.datavault4dbt.synapse__rec_track_sat": {"name": "synapse__rec_track_sat", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/synapse/rec_track_sat.sql", "original_file_path": "macros/tables/synapse/rec_track_sat.sql", "unique_id": "macro.datavault4dbt.synapse__rec_track_sat", "macro_sql": "{%- macro synapse__rec_track_sat(tracked_hashkey, source_models, src_ldts, src_rsrc, src_stg, disable_hwm) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{# Setting the unknown and error ghost record value for record source column #}\n{%- set rsrc_unknown = var('datavault4dbt.default_unknown_rsrc', 'SYSTEM') -%}\n{%- set rsrc_error = var('datavault4dbt.default_error_rsrc', 'ERROR') -%}\n\n{# Setting the rsrc and stg_alias default datatype and length #}\n{%- set rsrc_default_dtype = var('datavault4dbt.rsrc_default_dtype', 'STRING') -%}\n{%- set stg_default_dtype = var('datavault4dbt.stg_default_dtype', 'STRING') -%}\n{%- set ns = namespace(last_cte = '', source_included_before = {},  source_models_rsrc_dict={},  has_rsrc_static_defined=true) -%}\n\n{%- if source_models is not mapping and not datavault4dbt.is_list(source_models) -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- set source_model_values = fromjson(datavault4dbt.source_model_processing(source_models=source_models, parameters={'hk_column':tracked_hashkey})) -%}\n{%- set source_models = source_model_values['source_model_list'] -%}\n{%- set ns.has_rsrc_static_defined = source_model_values['has_rsrc_static_defined'] -%}\n{%- set ns.source_models_rsrc_dict = source_model_values['source_models_rsrc_dict'] -%}\n{{ log('source_models: '~source_models, false) }}\n\n{%- set final_columns_to_select = [tracked_hashkey] + [src_ldts] + [src_rsrc] + [src_stg] -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{% if is_incremental() %}\n\n    distinct_target AS ( \n        {{ \"\\n\" }}\n        SELECT\n             {{ tracked_hashkey }}\n            ,{{ src_ldts }}\n            ,{{ src_rsrc }}\n        FROM {{ this }}\n    ),\n    {%- if ns.has_rsrc_static_defined and not disable_hwm -%}\n        rsrc_static_unionized AS (\n        {% for source_model in source_models %}\n        {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n              {%- set source_number = source_model.id | string -%}\n            {%- set hk_column = source_model['hk_column'] -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number] -%}\n\n            {%- set rsrc_static_query_source_count -%}\n                SELECT count(*) FROM (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT \n                    {{ tracked_hashkey }},\n                    {{ src_ldts }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }}\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %} \n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                ) sub\n            {% endset %}\n\n            {%- set rsrc_static_query_source -%}\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT \n                    {{ tracked_hashkey }},\n                    {{ src_ldts }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }}\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %} \n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n            {% endset %}\n\n            {{ rsrc_static_query_source }}  \n\n            {%- set source_in_target = true -%}\n            \n            {%- if execute -%}\n                {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n\n                {%- set row_count = rsrc_static_result.columns[0].values()[0] -%}\n\n                {{ log('row_count for '~source_model~' is '~row_count, false) }}\n\n                {%- if row_count == 0 -%}\n                    {%- set source_in_target = false -%}\n                {%- endif -%}\n            {%- endif -%}\n\n            {%- do ns.source_included_before.update({source_model.id: source_in_target}) -%}\n            {# Unionize over all sources #}\n            {%- if not loop.last %}\n                UNION ALL \n            {% endif -%}\n\n        {% endfor -%}\n        {%- set ns.last_cte = \"rsrc_static_unionized\" -%}\n        ),\n\n        max_ldts_per_rsrc_static_in_target AS (\n\n            SELECT\n                rsrc_static,\n                COALESCE(MAX({{ src_ldts }}), {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }}) as max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif %}\n{% endif -%}\n\n{#\n    We deduplicate each source over hashkey + ldts + rsrc_static and if is_incremental only select the rows, where the ldts is later\n    than the latest one in the existing satellite for that rsrc_static. If a source is added to the existing satellite, all deduplicated\n    rows from that source are loaded into the satellite.\n#}\n\n{%- for source_model in source_models %}\n\n    {%- set source_number = source_model.id | string -%}\n    {%- set hk_column = source_model['hk_column'] -%}\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = ns.source_models_rsrc_dict[source_number|string] -%}\n\n        src_new_{{ source_number }} AS (\n        {%- for rsrc_static in rsrc_statics %}\n            SELECT DISTINCT\n                {{ hk_column }} AS {{ tracked_hashkey }},\n                {{ src_ldts }},\n                CAST('{{ rsrc_static }}' AS {{ rsrc_default_dtype }} ) AS {{ src_rsrc }},\n                CAST(UPPER('{{ source_model.name }}') AS {{ stg_default_dtype }})  AS {{ src_stg }}\n            FROM {{ ref(source_model.name) }} src\n\n\n            {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_number|int] and not disable_hwm %}\n                INNER JOIN max_ldts_per_rsrc_static_in_target max\n                    ON max.rsrc_static = '{{ rsrc_static }}'\n                WHERE src.{{ src_ldts }} > max.max_ldts\n            {%- endif %}\n            {%- if not loop.last %}\n                UNION ALL\n            {% endif -%}\n        {% endfor %}\n\n        ),\n    {%- else -%}\n        src_new_{{ source_number}} AS (\n            SELECT DISTINCT\n                {{ hk_column }} AS {{ tracked_hashkey }},\n                {{ src_ldts }},\n                CAST({{ src_rsrc }} AS {{ rsrc_default_dtype }}) AS {{ src_rsrc }},\n                CAST(UPPER('{{ source_model.name }}') AS {{ stg_default_dtype }}) AS {{ src_stg }}\n            FROM {{ ref(source_model.name) }} src\n            {%- if is_incremental() and source_models | length == 1 and not disable_hwm %}\n                WHERE src.{{ src_ldts }} > (\n            SELECT COALESCE(MAX({{ src_ldts }}), {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }})\n            FROM {{ this }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            )\n            {%- endif %}\n        ),\n    {%- endif -%}\n\n    {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n{% endfor %}\n\n{#\n    If more than one source model is selected, all previously created deduplicated CTEs are unionized.\n#}\n\n{%- if source_models | length > 1 %}\n\nsource_new_union AS (\n    {% for source_model in source_models %}\n        {%- set hk_column = source_model['hk_column'] -%}\n        {%- set source_number = source_model.id | string -%}\n\n        SELECT\n        {{ tracked_hashkey }},\n        {{ src_ldts }},\n        {{ src_rsrc }},\n        {{ src_stg }}\n        FROM src_new_{{ source_number }}\n\n        {%- if not loop.last %}\n        UNION ALL\n        {% endif -%}\n\n    {% endfor %}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif -%}\n\n{#\n    Selecting everything, either from the unionized data, or from the single CTE (if single source). Checking against the existing\n    satellite to only inserts that are not already inserted, if incremental run.\n#}\n\nrecords_to_insert AS (\n\n    SELECT\n    {{ datavault4dbt.print_list(final_columns_to_select) }}\n    FROM {{ ns.last_cte }} cte\n    WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }} \n    AND {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }}\n    {%- if is_incremental() %}\n        AND \n            NOT EXISTS (\n                SELECT 1\n                FROM distinct_target dt\n                WHERE 1=1\n                    AND dt.{{ tracked_hashkey }} = cte.{{ tracked_hashkey }}\n                    AND dt.{{ src_ldts }} = cte.{{ src_ldts }}\n                    AND dt.{{ src_rsrc }} = cte.{{ src_rsrc }}\n            )\n    {% endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.is_list", "macro.datavault4dbt.source_model_processing", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.225991, "supported_languages": null}, "macro.datavault4dbt.synapse__sat_v1": {"name": "synapse__sat_v1", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/tables/synapse/sat_v1.sql", "original_file_path": "macros/tables/synapse/sat_v1.sql", "unique_id": "macro.datavault4dbt.synapse__sat_v1", "macro_sql": "{%- macro synapse__sat_v1(sat_v0, hashkey, hashdiff, src_ldts, src_rsrc, ledts_alias, add_is_current_flag, include_payload) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set is_current_col_alias = var('datavault4dbt.is_current_col_alias', 'IS_CURRENT') -%}\n{%- set ledts_alias = var('datavault4dbt.ledts_alias', 'ledts') -%}\n\n{%- set source_relation = ref(sat_v0) -%}\n\n{%- set all_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n{%- set exclude = [hashkey, hashdiff, src_ldts, src_rsrc] -%}\n\n{%- set source_columns_to_select = datavault4dbt.process_columns_to_select(all_columns, exclude) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Calculate ledts based on the ldts of the earlier record. #}\nend_dated_source AS (\n\n    SELECT\n        {{ hashkey }},\n        {{ hashdiff }},\n        {{ src_rsrc }},\n        {{ src_ldts }},\n        COALESCE(LEAD(DATEADD(ns, -100, {{ src_ldts }})) OVER (PARTITION BY {{ hashkey }} ORDER BY {{ src_ldts }}),{{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}) AS {{ ledts_alias }}\n       {%- if source_columns_to_select | length >= 1 -%} , {% endif -%}\n        {{ datavault4dbt.print_list(source_columns_to_select) }}\n    FROM {{ source_relation }}\n\n)\n\nSELECT\n    {{ hashkey }},\n    {{ hashdiff }},\n    {{ src_rsrc }},\n    {{ src_ldts }},\n    {{ ledts_alias }}\n    {%- if source_columns_to_select | length >= 1 or add_is_current_flag -%} , {% endif -%}\n    {%- if add_is_current_flag %}\n        CASE WHEN {{ ledts_alias }} = {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n          THEN 1\n          ELSE 0\n        END AS {{ is_current_col_alias }}\n        {%- if source_columns_to_select | length >= 1 -%} , {% endif -%}\n    {% endif -%}\n    {{ datavault4dbt.print_list(source_columns_to_select) }}\nFROM end_dated_source\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.source_columns", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.2272708, "supported_languages": null}, "macro.datavault4dbt.derived_columns_datatypes": {"name": "derived_columns_datatypes", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/staging/derived_column_datatypes.sql", "original_file_path": "macros/staging/derived_column_datatypes.sql", "unique_id": "macro.datavault4dbt.derived_columns_datatypes", "macro_sql": "{%- macro derived_columns_datatypes(columns, source_relation) -%}\n\n    {{- adapter.dispatch('derived_columns_datatypes', 'datavault4dbt')(columns=columns, source_relation=source_relation) -}}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.default__derived_columns_datatypes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.227993, "supported_languages": null}, "macro.datavault4dbt.default__derived_columns_datatypes": {"name": "default__derived_columns_datatypes", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/staging/derived_column_datatypes.sql", "original_file_path": "macros/staging/derived_column_datatypes.sql", "unique_id": "macro.datavault4dbt.default__derived_columns_datatypes", "macro_sql": "{%- macro default__derived_columns_datatypes(columns, source_relation) -%}\n\n{%- set all_source_columns = adapter.get_columns_in_relation(source_relation) -%}\n\n{%- if columns is not mapping and columns is string -%}\n    {%- if execute -%}\n        {{ exceptions.raise_compiler_error(\"Derived Columns is of datatype string. Needs to be mapping\" ) }}\n    {%- endif -%}\n\n{%- else -%}\n\n    {%- for column_name, column_value in columns.items() -%}\n\n        {%- if not (column_value is mapping) and column_value is string -%}\n        {# This is the case where no datatype is defined and one must be detected based on the input value. #}\n\n            {%- if not datavault4dbt.is_attribute(column_value) -%}\n            {# If the value is a static value, it is not an attribute and no datatype needs to be detected. Instead a default datatype is applied. #}\n\n                {%- set datatype = var('datavault4dbt.derived_columns_default_dtype', 'STRING') -%}\n                {%- set value = column_value -%}\n                {%- set col_size = \"\" -%}\n\n            {%- else -%}\n            {# The value is an attribute and therefore the datatype gets detected out of the source relation. #}\n\n                {%- set value = column_value -%}\n\n                {%- set ns = namespace(datatype = \"\", col_size=\"\") -%}\n\n                {%- for source_column in all_source_columns -%}\n                    {%- if source_column.name|upper == value|upper -%}\n\n                        {%- set ns.datatype = source_column.dtype -%}\n\n                        {% if datavault4dbt.is_something(source_column.char_size) %}\n                            {%- set ns.col_size = source_column.char_size -%}\n                        {%- endif -%}\n                    {%- endif -%}\n\n                {%- endfor -%}\n                {%- set col_size = ns.col_size | int-%}\n                {%- if ns.datatype != \"\" -%}\n\n                    {%- set datatype = ns.datatype -%}\n\n                {%- else -%}\n                {# The input column name could not be found inside the source relation. #}\n\n                    {%- if execute -%}\n                        {{ exceptions.raise_compiler_error(\"Could not find the derived_column input column \" + value + \" inside the source relation \" + source_relation|string ) }}\n                    {%- else -%}\n                        {%- set datatype = \"\" -%}\n                    {%- endif -%}\n\n                {%- endif -%}\n\n            {%- endif -%}\n\n            {%- do columns.update({column_name: {'datatype': datatype, 'value': value, 'col_size': col_size} }) -%}\n        \n        {%- elif column_value is mapping and not column_value.get('datatype') -%}\n\n                {%- set value = column_value['value'] -%}\n\n                {%- set ns = namespace(datatype = \"\", col_size=\"\") -%}\n\n                {%- for source_column in all_source_columns -%}\n\n                    {%- if source_column.name|upper == value|upper -%}\n\n                        {%- set ns.datatype = source_column.dtype -%}\n\n                        {% if datavault4dbt.is_something(source_column.char_size) %}\n                            {%- set ns.col_size = source_column.char_size -%}\n                        {%- endif -%}\n                    {%- endif -%}\n\n                {%- endfor -%}\n\n                {%- if ns.datatype != \"\" -%}\n\n                    {%- set datatype = ns.datatype -%}\n\n                {%- else -%}\n                {# The input column name could not be found inside the source relation. #}\n\n                    {%- if execute -%}\n                        {{ exceptions.raise_compiler_error(\"Could not find the derived_column input column \" + value + \" inside the source relation \" + source_relation|string + \". Try setting it manually with the key 'datatype'.\" ) }}\n                    {%- else -%}\n                        {%- set datatype = \"\" -%}\n                        {%- set col_size = \"\" -%}\n\n                    {%- endif -%}\n\n                {%- endif -%}\n                {%- set col_size = ns.col_size | int-%}\n                {%- do columns.update({column_name: {'datatype': datatype, 'value': value, \"col_size\": col_size} }) -%}\n        {%- elif column_value is mapping and not column_value.get('col_size') -%}\n\n            {%- set value = column_value['value'] -%}\n            {%- set datatype = column_value['datatype'] -%}\n            {%- set ns = namespace(col_size = \"\") -%}\n\n            {%- for source_column in all_source_columns -%}\n\n                {%- if source_column.name|upper == value|upper -%}\n\n                    {%- set ns.col_size = source_column.char_size | int -%}\n                {%- endif -%}\n\n            {%- endfor -%}\n\n            {%- set col_size = ns.col_size -%}\n\n            {%- do columns.update({column_name: {'datatype': datatype, 'value': value, 'col_size': col_size} }) -%}\n        {%- endif -%}\n\n    {%- endfor -%}\n\n{%- endif -%}\n\n{{ return(columns | tojson) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.is_attribute", "macro.datavault4dbt.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.230348, "supported_languages": null}, "macro.datavault4dbt.hash_columns": {"name": "hash_columns", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/staging/hash_columns.sql", "original_file_path": "macros/staging/hash_columns.sql", "unique_id": "macro.datavault4dbt.hash_columns", "macro_sql": "{%- macro hash_columns(columns=none, multi_active_key=none, main_hashkey_column=none) -%}\n\n    {{- adapter.dispatch('hash_columns', 'datavault4dbt')(columns=columns,\n                                                          multi_active_key=multi_active_key,\n                                                          main_hashkey_column=main_hashkey_column) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.datavault4dbt.default__hash_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.2311838, "supported_languages": null}, "macro.datavault4dbt.default__hash_columns": {"name": "default__hash_columns", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/staging/hash_columns.sql", "original_file_path": "macros/staging/hash_columns.sql", "unique_id": "macro.datavault4dbt.default__hash_columns", "macro_sql": "\n\n{%- macro default__hash_columns(columns, multi_active_key, main_hashkey_column) -%}\n\n{%- if columns is mapping and columns is not none -%}\n\n    {%- for col in columns -%}\n\n        {#- Check if multi-active config is defined -#}\n        {%- if datavault4dbt.is_something(multi_active_key) -%}\n            {#- Apply block-based hashing pattern for hash diff attribute in multi-active satellite. -#}\n            {% if columns[col] is mapping and columns[col].is_hashdiff -%}\n                {{- datavault4dbt.hash(columns=columns[col]['columns'], \n                                alias=col, \n                                is_hashdiff=columns[col]['is_hashdiff'],\n                                multi_active_key=multi_active_key,\n                                main_hashkey_column=main_hashkey_column) -}}\n\n            {{- \", \\n\" if not loop.last -}}\n            \n            {#- Apply standard hashing for hash key attributes. -#}\n            {%- elif columns[col] is not mapping -%}\n\n                {{- datavault4dbt.hash(columns=columns[col],\n                                alias=col,\n                                is_hashdiff=false) -}}  \n\n            {%- endif -%}\n\n            {{- \", \\n\" if not loop.last -}}\n\n        {%- else -%}\n            {% if columns[col] is mapping and columns[col].is_hashdiff -%}\n\n                {{- datavault4dbt.hash(columns=columns[col]['columns'], \n                                alias=col, \n                                is_hashdiff=columns[col]['is_hashdiff']) -}}\n\n            {%- elif columns[col] is not mapping -%}\n\n                {{- datavault4dbt.hash(columns=columns[col],\n                                alias=col,\n                                is_hashdiff=false) -}}\n            \n            {%- elif columns[col] is mapping and not columns[col].is_hashdiff -%}\n\n                {%- if execute -%}\n                    {%- do exceptions.warn(\"[\" ~ this ~ \"] Warning: You provided a list of columns under a 'columns' key, but did not provide the 'is_hashdiff' flag. Use list syntax for PKs.\") -%}\n                {% endif %}\n\n                {{- datavault4dbt.hash(columns=columns[col]['columns'], alias=col) -}}\n\n            {%- endif -%}\n\n        {{- \",\\n\" if not loop.last -}}\n\n        {%- endif -%}\n        \n    {%- endfor -%}\n\n{%- endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.datavault4dbt.is_something", "macro.datavault4dbt.hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.232328, "supported_languages": null}, "macro.datavault4dbt.redshift__hash_columns": {"name": "redshift__hash_columns", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/staging/hash_columns.sql", "original_file_path": "macros/staging/hash_columns.sql", "unique_id": "macro.datavault4dbt.redshift__hash_columns", "macro_sql": "{%- macro redshift__hash_columns(columns, multi_active_key, main_hashkey_column) -%}\n{%- if columns is mapping and columns is not none -%}\n\n    {%- for col in columns -%}\n\n        {%- if datavault4dbt.is_something(multi_active_key) -%}\n            {% if columns[col] is mapping and columns[col].is_hashdiff -%}\n                {{- datavault4dbt.hash(columns=columns[col]['columns'], \n                                alias=col, \n                                is_hashdiff=columns[col]['is_hashdiff'],\n                                multi_active_key=multi_active_key,\n                                main_hashkey_column=main_hashkey_column) -}}\n\n            {{- \", \\n\" if not loop.last -}}\n\n            {%- elif columns[col] is not mapping and (col|upper) == (main_hashkey_column | upper) -%}\n                {{- datavault4dbt.hash(columns=columns[col],\n                                alias=col,\n                                is_hashdiff=false) -}}  \n            {{- \", \\n\" if not loop.last -}}\n            {%- endif -%}\n\n\n        {%- else -%}          \n\n            {% if columns[col] is mapping and columns[col].is_hashdiff -%}\n                {%- if columns[col].use_rtrim -%}\n                    {%- set rtrim_hashdiff = true -%}\n                {%- else -%}\n                    {%- set rtrim_hashdiff = false -%}\n                {%- endif -%}\n                {{- datavault4dbt.hash(columns=columns[col]['columns'], \n                                alias=col, \n                                is_hashdiff=columns[col]['is_hashdiff'],\n                                rtrim_hashdiff=rtrim_hashdiff) -}}\n            {%- elif columns[col] is not mapping -%}\n                {{- datavault4dbt.hash(columns=columns[col],\n                                alias=col,\n                                is_hashdiff=false) -}}\n            \n            {%- elif columns[col] is mapping and not columns[col].is_hashdiff -%}\n                {%- if execute -%}\n                    {%- do exceptions.warn(\"[\" ~ this ~ \"] Warning: You provided a list of columns under a 'columns' key, but did not provide the 'is_hashdiff' flag. Use list syntax for PKs.\") -%}\n                {% endif %}\n                {{- datavault4dbt.hash(columns=columns[col]['columns'], alias=col) -}}\n            {%- endif -%}\n        {{- \",\\n\" if not loop.last -}}\n        {%- endif -%}\n        \n    {%- endfor -%}\n{%- endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.is_something", "macro.datavault4dbt.hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.2336519, "supported_languages": null}, "macro.datavault4dbt.source_columns": {"name": "source_columns", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/staging/source_columns.sql", "original_file_path": "macros/staging/source_columns.sql", "unique_id": "macro.datavault4dbt.source_columns", "macro_sql": "{%- macro source_columns(source_relation=none) -%}\n\n    {%- if source_relation -%}\n        {%- set source_model_cols = adapter.get_columns_in_relation(source_relation) -%}\n\n        {%- set column_list = [] -%}\n\n        {%- for source_col in source_model_cols -%}\n            {%- do column_list.append(source_col.column) -%}\n        {%- endfor -%}\n\n        {%- do return(column_list) -%}\n    {%- endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.233977, "supported_languages": null}, "macro.datavault4dbt.stage": {"name": "stage", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/staging/stage.sql", "original_file_path": "macros/staging/stage.sql", "unique_id": "macro.datavault4dbt.stage", "macro_sql": "\n\n\n\n  {%- macro stage(ldts, rsrc, source_model, include_source_columns=true, hashed_columns=none, derived_columns=none, sequence=none, prejoined_columns=none, missing_columns=none, multi_active_config=none) -%}\n    \n    {# If include_source_columns is passed but its empty then it is set with the default value (true) #}\n    {%- if include_source_columns is none or include_source_columns == \"\" -%}\n      {%- set include_source_columns = true -%}\n    {%- endif -%}\n\n    {{- adapter.dispatch('stage', 'datavault4dbt')(include_source_columns=include_source_columns,\n                                        ldts=ldts,\n                                        rsrc=rsrc,\n                                        source_model=source_model,\n                                        hashed_columns=hashed_columns,\n                                        derived_columns=derived_columns,\n                                        sequence=sequence,\n                                        prejoined_columns=prejoined_columns,\n                                        missing_columns=missing_columns,\n                                        multi_active_config=multi_active_config) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.snowflake__stage"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.235562, "supported_languages": null}, "macro.datavault4dbt.derive_columns": {"name": "derive_columns", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/staging/derive_columns.sql", "original_file_path": "macros/staging/derive_columns.sql", "unique_id": "macro.datavault4dbt.derive_columns", "macro_sql": "{%- macro derive_columns(source_relation=none, columns=none) -%}\n\n    {{- adapter.dispatch('derive_columns', 'datavault4dbt')(source_relation=source_relation, columns=columns) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.datavault4dbt.default__derive_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.2360241, "supported_languages": null}, "macro.datavault4dbt.default__derive_columns": {"name": "default__derive_columns", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/staging/derive_columns.sql", "original_file_path": "macros/staging/derive_columns.sql", "unique_id": "macro.datavault4dbt.default__derive_columns", "macro_sql": "\n\n{%- macro default__derive_columns(source_relation=none, columns=none) -%}\n\n{%- set exclude_columns = [] -%}\n{%- set include_columns = [] -%}\n{%- set src_columns = [] -%}\n{%- set der_columns = [] -%}\n\n{%- set source_cols = datavault4dbt.source_columns(source_relation=source_relation) -%}\n\n{%- if columns is mapping and columns is not none -%}\n\n    {#- Add aliases of derived columns to exclude and full SQL to include -#}\n    {%- for col in columns -%}\n\n        {%- if datavault4dbt.is_list(columns[col]['value']) -%}\n            {%- set column_list = [] -%}\n\n            {%- for concat_component in columns[col]['value'] -%}\n                {%- set column_str = datavault4dbt.as_constant(concat_component) -%}\n                {%- do column_list.append(column_str) -%}\n            {%- endfor -%}\n            {%- set concat = datavault4dbt.concat_ws(column_list, \"||\") -%}\n            {%- set concat_string = concat ~ \" AS \" ~ datavault4dbt.escape_column_names(col) -%}\n\n            {%- do der_columns.append(concat_string) -%}\n            {%- set exclude_columns = exclude_columns + columns[col]['value'] -%}\n        {% else %}\n            {%- set column_str = datavault4dbt.as_constant(columns[col]['value']) -%}\n            {%- do der_columns.append(column_str ~ \" AS \" ~ datavault4dbt.escape_column_names(col)) -%}\n            {%- do exclude_columns.append(col) -%}\n        {% endif %}\n\n    {%- endfor -%}\n\n    {#- Add all columns from source_model relation -#}\n    {%- if source_relation is defined and source_relation is not none -%}\n\n        {%- for col in source_cols -%}\n            {%- if col not in exclude_columns -%}\n                {%- do src_columns.append(datavault4dbt.escape_column_names(col)) -%}\n            {%- endif -%}\n        {%- endfor -%}\n\n    {%- endif -%}\n\n    {#- Makes sure the columns are appended in a logical order. Source columns then derived columns -#}\n    {%- set include_columns = src_columns + der_columns -%}\n\n        {#- Print out all columns in includes -#}\n        {%- for col in include_columns -%}\n            {{- col | indent(4) -}}{{ \",\\n\" if not loop.last }}\n        {%- endfor -%}\n    {%- else -%}\n        {%- if execute -%}\n            {{ exceptions.raise_compiler_error(\"Invalid column configuration:\n            expected format: {'source_relation': Relation, 'columns': {column_name: column_value}}\n            got: {'source_relation': \" ~ source_relation ~ \", 'columns': \" ~ columns ~ \"}\") }}\n        {%- endif %}\n    {%- endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.source_columns", "macro.datavault4dbt.is_list", "macro.datavault4dbt.as_constant", "macro.datavault4dbt.concat_ws", "macro.datavault4dbt.escape_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.237361, "supported_languages": null}, "macro.datavault4dbt.default__stage": {"name": "default__stage", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/staging/bigquery/stage.sql", "original_file_path": "macros/staging/bigquery/stage.sql", "unique_id": "macro.datavault4dbt.default__stage", "macro_sql": "\n\n{%- macro default__stage(include_source_columns,\n                ldts,\n                rsrc,\n                source_model,\n                hashed_columns,\n                derived_columns,\n                sequence,\n                prejoined_columns,\n                missing_columns,\n                multi_active_config) -%}\n\n{% if (source_model is none) and execute %}\n\n    {%- set error_message -%}\n    Staging error: Missing source_model configuration. A source model name must be provided.\n    e.g.\n    [REF STYLE]\n    source_model: model_name\n    OR\n    [SOURCES STYLE]\n    source_model:\n        source_name: source_table_name\n    {%- endset -%}\n\n    {{- exceptions.raise_compiler_error(error_message) -}}\n{%- endif -%}\n\n{{ log('source_model: ' ~ source_model, false )}}\n\n{#- Check for source format or ref format and create relation object from source_model -#}\n{% if source_model is mapping and source_model is not none -%}\n\n    {%- set source_name = source_model | first -%}\n    {%- set source_table_name = source_model[source_name] -%}\n\n    {%- set source_relation = source(source_name, source_table_name) -%}\n    {%- set all_source_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n\n{%- elif source_model is not mapping and source_model is not none -%}\n\n    {{ log('source_model is not mapping and not none: ' ~ source_model, false) }}\n\n    {%- set source_relation = ref(source_model) -%}\n    {%- set all_source_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n{%- else -%}\n    {%- set all_source_columns = [] -%}\n{%- endif -%}\n\n{{ log('source_relation: ' ~ source_relation, false) }}\n\n{# Setting the column name for load date timestamp and record source to the alias coming from the attributes #}\n{%- set ldts_alias = var('datavault4dbt.ldts_alias', 'ldts') -%}\n{%- set rsrc_alias = var('datavault4dbt.rsrc_alias', 'rsrc') -%}\n{%- set copy_input_columns = var('datavault4dbt.copy_rsrc_ldts_input_columns', false) -%}\n{%- set load_datetime_col_name = ldts_alias -%}\n{%- set record_source_col_name = rsrc_alias -%}\n\n{%- set ldts_rsrc_input_column_names = [] -%}\n{%- if datavault4dbt.is_attribute(ldts) -%}\n  {%- if not copy_input_columns -%}\n      {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [ldts]  -%}\n  {%- else -%}\n    \n    {%- if ldts|lower == ldts_alias|lower -%}\n      {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [ldts]  -%}\n    {%- endif -%}\n\n  {%- endif %}\n\n{%- endif -%}\n\n{%- if datavault4dbt.is_attribute(rsrc) -%}\n\n  {%- if not copy_input_columns -%}\n    {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [rsrc] -%}\n  {%- else -%}\n  \n    {%- if rsrc|lower == rsrc_alias|lower -%}\n      {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [rsrc] -%}\n    {%- endif -%}\n\n  {%- endif -%}\n\n{%- endif %}\n\n{%- if datavault4dbt.is_something(sequence) -%}\n  {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [sequence] -%}\n{%- endif -%}\n\n{%- set ldts = datavault4dbt.as_constant(ldts) -%}\n{%- set rsrc = datavault4dbt.as_constant(rsrc) -%}\n\n{# Getting the column names for all additional columns #}\n{%- set derived_column_names = datavault4dbt.extract_column_names(derived_columns) -%}\n{%- set hashed_column_names = datavault4dbt.extract_column_names(hashed_columns) -%}\n{%- set prejoined_column_names = datavault4dbt.extract_column_names(prejoined_columns) -%}\n{%- set missing_column_names = datavault4dbt.extract_column_names(missing_columns) -%}\n{%- set exclude_column_names = hashed_column_names + prejoined_column_names + missing_column_names + ldts_rsrc_input_column_names %}\n{%- set source_and_derived_column_names = (all_source_columns + derived_column_names) | unique | list -%}\n{%- set all_columns = adapter.get_columns_in_relation( source_relation ) -%}\n\n{%- set columns_without_excluded_columns = [] -%}\n{%- set final_columns_to_select = [] -%}\n\n\n{%- if include_source_columns -%}\n  {%- set source_columns_to_select = datavault4dbt.process_columns_to_select(all_source_columns, exclude_column_names) | list -%}\n\n  {%- for column in all_columns -%}\n\n    {%- if column.name|lower not in exclude_column_names|map('lower') %}\n      {%- do columns_without_excluded_columns.append(column) -%}\n    {%- endif -%}\n\n  {%- endfor -%}\n{%- else -%}\n  \n  {# Include from the source only the input columns needed #}\n  {# Getting the input columns for the additional columns #}\n  {%- set derived_input_columns = datavault4dbt.extract_input_columns(derived_columns) -%}\n  {%- set hashed_input_columns = datavault4dbt.expand_column_list(datavault4dbt.extract_input_columns(hashed_columns)) -%}\n  {%- set hashed_input_columns = datavault4dbt.process_columns_to_select(hashed_input_columns, derived_column_names) -%}    {# Excluding the names of the derived columns. #}\n  {%- set hashed_input_columns = datavault4dbt.process_columns_to_select(hashed_input_columns, prejoined_column_names) -%}  {# Excluding the names of the prejoined columns. #}\n  {%- set hashed_input_columns = datavault4dbt.process_columns_to_select(hashed_input_columns, missing_column_names) -%}  {# Excluding the names of the missing columns. #}\n  {%- set prejoined_input_columns = datavault4dbt.extract_input_columns(prejoined_columns) -%}\n\n  {% if datavault4dbt.is_something(multi_active_config) %}\n\n    {%- if datavault4dbt.is_list(multi_active_config['multi_active_key']) -%}\n\n      {%- set ma_keys = multi_active_config['multi_active_key'] -%}\n\n    {%- else -%}\n\n      {%- set ma_keys = [multi_active_config['multi_active_key']] -%}\n\n    {%- endif -%}\n\n    {%- set only_include_from_source = (derived_input_columns + hashed_input_columns + prejoined_input_columns + ma_keys) | unique | list -%}\n\n  {%- else -%}\n\n    {%- set only_include_from_source = (derived_input_columns + hashed_input_columns + prejoined_input_columns) | unique | list -%}\n\n  {%- endif -%}\n\n  {%- set source_columns_to_select = only_include_from_source -%}\n\n{%- endif-%}\n\n{%- set final_columns_to_select = final_columns_to_select + source_columns_to_select -%}\n{%- set derived_columns_to_select = datavault4dbt.process_columns_to_select(source_and_derived_column_names, hashed_column_names) | unique | list -%}\n\n{%- if datavault4dbt.is_something(derived_columns) %}\n  {#- Getting Data types for derived columns with detection from source relation -#}\n  {%- set derived_columns_with_datatypes = datavault4dbt.derived_columns_datatypes(derived_columns, source_relation) -%}\n  {%- set derived_columns_with_datatypes_DICT = fromjson(derived_columns_with_datatypes) -%}\n{%- endif -%}\n{#- Select hashing algorithm -#}\n\n{#- Setting unknown and error keys with default values for the selected hash algorithm -#}\n{%- set hash = datavault4dbt.hash_method() -%}\n{%- set hash_dtype = var('datavault4dbt.hash_datatype', 'STRING') -%}\n{%- set hash_default_values = fromjson(datavault4dbt.hash_default_values(hash_function=hash,hash_datatype=hash_dtype)) -%}\n{%- set hash_alg = hash_default_values['hash_alg'] -%}\n{%- set unknown_key = hash_default_values['unknown_key'] -%}\n{%- set error_key = hash_default_values['error_key'] -%}\n\n{# Select timestamp and format variables #}\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{# Setting the error/unknown value for the record source  for the ghost records#}\n{% set error_value_rsrc = var('datavault4dbt.default_error_rsrc', 'ERROR') %}\n{% set unknown_value_rsrc = var('datavault4dbt.default_unknown_rsrc', 'SYSTEM') %}\n\n{# Setting the rsrc default datatype and length #}\n{% set rsrc_default_dtype = var('datavault4dbt.rsrc_default_dtype', 'STRING') %}\n\nWITH\n\n{# Selecting everything that we need from the source relation. #}\nsource_data AS (\n    SELECT\n\n    {{- \"\\n\\n    \" ~ datavault4dbt.print_list(datavault4dbt.escape_column_names(all_source_columns)) if all_source_columns else \" *\" }}\n\n  FROM {{ source_relation }}\n\n  {% if is_incremental() %}\n  WHERE {{ ldts }} > (SELECT max({{ load_datetime_col_name}}) \n                      FROM {{ this }} \n                      WHERE {{ load_datetime_col_name}} != {{ datavault4dbt.string_to_timestamp(timestamp_format , end_of_all_times) }} )\n  {%- endif -%}\n\n  {% set last_cte = \"source_data\" -%}\n),\n\n\n{% set alias_columns = [load_datetime_col_name, record_source_col_name] %}\n\n{# Selecting all columns from the source data, renaming load date and record source to global aliases #}\nldts_rsrc_data AS (\n\n  SELECT\n    {{ ldts }} AS {{ load_datetime_col_name}},\n    CAST( {{ rsrc }} as {{ rsrc_default_dtype }} ) AS {{ record_source_col_name }}\n    {%- if datavault4dbt.is_something(sequence) %},\n      {{ sequence }} AS edwSequence\n      {%- set alias_columns = alias_columns + ['edwSequence'] -%}\n    {% endif -%}\n\n    {%- if source_columns_to_select is not none and source_columns_to_select | length > 0 %},\n      {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(source_columns_to_select)) }}\n    {% endif -%}\n    {{\"\\n\"}}\n  FROM {{ last_cte }}\n\n  {%- set last_cte = \"ldts_rsrc_data\" -%}\n  {%- set final_columns_to_select = alias_columns + final_columns_to_select  %}\n  {%- set final_columns_to_select = datavault4dbt.process_columns_to_select(final_columns_to_select, derived_column_names) | list -%}\n  \n  {%- set columns_without_excluded_columns_tmp = [] -%}\n  {%- for column in columns_without_excluded_columns -%}\n    {%- if column.name not in derived_column_names -%}\n      {%- do columns_without_excluded_columns_tmp.append(column) -%}\n    {%- endif -%}\n  {%- endfor -%}\n  {%- set columns_without_excluded_columns = columns_without_excluded_columns_tmp |list -%}\n),\n\n{%- if datavault4dbt.is_something(missing_columns) %}\n\n{# Filling missing columns with NULL values for schema changes #}\nmissing_columns AS (\n\n  SELECT\n\n  {% if final_columns_to_select | length > 0 -%}\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},\n  {%- endif %}\n  {%- for col, dtype in missing_columns.items() %}\n    CAST(NULL as {{ dtype }}) as {{ col }}{% if not loop.last %},{% endif -%}\n\n  {% endfor %}\n\n  FROM {{ last_cte }}\n  {%- set last_cte = \"missing_columns\" -%}\n  {%- set final_columns_to_select = final_columns_to_select + missing_column_names %}\n),\n{%- endif -%}\n\n{%- if datavault4dbt.is_something(prejoined_columns) %}\n{# Prejoining Business Keys of other source objects for Link purposes #}\nprejoined_columns AS (\n\n  SELECT\n  {% if final_columns_to_select | length > 0 -%}\n    {{ datavault4dbt.print_list(datavault4dbt.prefix(columns=datavault4dbt.escape_column_names(final_columns_to_select), prefix_str='lcte').split(',')) }}\n  {% endif %}\n  {%- for col, vals in prejoined_columns.items() -%}\n    ,pj_{{loop.index}}.{{ vals['bk'] }} AS {{ col }}\n  {% endfor -%}\n\n  FROM {{ last_cte }} lcte\n\n  {% for col, vals in prejoined_columns.items() %}\n\n    {%- if 'src_name' in vals.keys() or 'src_table' in vals.keys() -%}\n      {%- set relation = source(vals['src_name']|string, vals['src_table']) -%}\n    {%- elif 'ref_model' in vals.keys() -%}\n      {%- set relation = ref(vals['ref_model']) -%}\n    {%- else -%}\n      {%- set error_message -%}\n      Prejoin error: Invalid target entity definition. Allowed are: \n      e.g.\n      [REF STYLE]\n      extracted_column_alias:\n        ref_model: model_name\n        bk: extracted_column_name\n        this_column_name: join_columns_in_this_model\n        ref_column_name: join_columns_in_ref_model\n      OR\n      [SOURCES STYLE]\n      extracted_column_alias:\n        src_name: name_of_ref_source\n        src_table: name_of_ref_table\n        bk: extracted_column_name\n        this_column_name: join_columns_in_this_model\n        ref_column_name: join_columns_in_ref_model\n\n      Got: \n      {{ col }}: {{ vals }}\n      {%- endset -%}\n\n    {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n\n{# This sets a default value for the operator that connects multiple joining conditions. Only when it is not set by user. #}\n    {%- if 'operator' not in vals.keys() -%}\n      {%- set operator = 'AND' -%}\n    {%- else -%}\n      {%- set operator = vals['operator'] -%}\n    {%- endif -%}\n\n    {%- set prejoin_alias = 'pj_' + loop.index|string -%}\n\n    left join {{ relation }} as {{ prejoin_alias }} \n      on {{ datavault4dbt.multikey(columns=vals['this_column_name'], prefix=['lcte', prejoin_alias], condition='=', operator=operator, right_columns=vals['ref_column_name']) }}\n\n  {% endfor %}\n\n  {% set last_cte = \"prejoined_columns\" -%}\n  {%- set final_columns_to_select = final_columns_to_select + prejoined_column_names %}\n),\n{%- endif -%}\n\n\n{%- if datavault4dbt.is_something(derived_columns) %}\n{# Adding derived columns to the selection #}\nderived_columns AS (\n\n  {%- set final_columns_to_select = datavault4dbt.process_columns_to_select(final_columns_to_select, derived_column_names) -%}\n\n  SELECT\n  {% if final_columns_to_select | length > 0 -%}\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},\n  {% endif %}\n  {{ datavault4dbt.derive_columns(columns=derived_columns) | indent(4) }}\n\n  FROM {{ last_cte }}\n  {%- set last_cte = \"derived_columns\" -%}\n  {%- set final_columns_to_select = final_columns_to_select + derived_column_names %}\n),\n{%- endif -%}\n\n{%- if datavault4dbt.is_something(hashed_columns) and hashed_columns is mapping %}\n{# Generating Hashed Columns (hashkeys and hashdiffs for Hubs/Links/Satellites) #}\n{% if datavault4dbt.is_something(multi_active_config) %}\n\n{%- set tmp_ns = namespace(main_hashkey_dict={}, remaining_hashed_columns={}, hashdiff_names=[]) -%}\n\n{%- for column in hashed_columns.keys() -%}\n  {%- if column == multi_active_config['main_hashkey_column'] and not hashed_columns[column].is_hashdiff -%}\n    {%- do tmp_ns.main_hashkey_dict.update({column: hashed_columns[column]}) -%}\n  {% elif column != multi_active_config['main_hashkey_column'] and not hashed_columns[column].is_hashdiff -%}\n    {%- do tmp_ns.remaining_hashed_columns.update({column: hashed_columns[column]}) -%}\n  {%- elif hashed_columns[column].is_hashdiff -%}\n    {%- do tmp_ns.hashdiff_names.append(column) -%}\n  {%- endif -%}\n{%- endfor -%}\n\nmain_hashkey_generation AS (\n\n  SELECT \n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},\n    {% set processed_hash_columns = datavault4dbt.process_hash_column_excludes(tmp_ns.main_hashkey_dict) -%}\n      {{- datavault4dbt.hash_columns(columns=processed_hash_columns) | indent(4) }}\n  FROM {{ last_cte }}\n\n),\n\n{# Hash calculation for multi-active source data. #}\nma_hashdiff_prep AS (\n\n    SELECT\n      \n      {% set processed_hash_columns = datavault4dbt.process_hash_column_excludes(hashed_columns) -%}\n      \n      {# Generates only all hashdiffs. #}\n      {{- datavault4dbt.hash_columns(columns=processed_hash_columns, multi_active_key=multi_active_config['multi_active_key'], main_hashkey_column=multi_active_config['main_hashkey_column']) | indent(4) }},\n      {{ ldts_alias }}\n\n    FROM {{ last_cte }}\n    GROUP BY {{ multi_active_config['main_hashkey_column'] }}, {{ ldts_alias }}\n\n),\n\nhashed_columns AS (\n\n    SELECT \n\n      {{ datavault4dbt.alias_all(columns=final_columns_to_select, prefix='main_hashkey_generation') }},                             {# Everything from last_cte before hashed_columns. #}\n      {% set processed_remaining_hash_columns = datavault4dbt.process_hash_column_excludes(tmp_ns.remaining_hashed_columns) -%}   \n      {# Generates only all remaining hashkeys, that are no hashdiffs #}\n      \n      {%- if datavault4dbt.is_something(processed_remaining_hash_columns) %}\n      {{- datavault4dbt.hash_columns(columns=processed_remaining_hash_columns) | indent(4) }},                                {# All remaining hashed_columns get calculated. #}\n      {% endif -%}\n\n      {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(tmp_ns.hashdiff_names)) }},                                   {# All MA Hashdiffs are selected. #}\n      main_hashkey_generation.{{ multi_active_config['main_hashkey_column'] }}                                                                       {# Main Hashkey selected. #}\n\n    FROM main_hashkey_generation\n    LEFT JOIN ma_hashdiff_prep \n      ON main_hashkey_generation.{{ multi_active_config['main_hashkey_column'] }} = ma_hashdiff_prep.{{ multi_active_config['main_hashkey_column'] }} \n      AND main_hashkey_generation.{{ ldts_alias }} = ma_hashdiff_prep.{{ ldts_alias }}\n\n    {%- set last_cte = \"hashed_columns\" -%}\n    {%- set final_columns_to_select = final_columns_to_select + hashed_column_names %}\n\n),\n\n{% else %}\n\n{# Hash calculation for single-active source data. #}\nhashed_columns AS (\n\n    SELECT\n\n    {% if final_columns_to_select | length > 0 -%}\n      {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},\n    {% endif %}\n\n    {%- set processed_hash_columns = datavault4dbt.process_hash_column_excludes(hashed_columns) -%}\n    {{ datavault4dbt.hash_columns(columns=processed_hash_columns) | indent(4) }}\n\n    FROM {{ last_cte }}\n    {%- set last_cte = \"hashed_columns\" -%}\n    {%- set final_columns_to_select = final_columns_to_select + hashed_column_names %}\n  \n),\n\n{%- endif -%}\n{%- endif -%}\n\n{# Creating Ghost Record for unknown case, based on datatype #}\nunknown_values AS (\n\n    SELECT\n\n    {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }} as {{ load_datetime_col_name }},\n    '{{ unknown_value_rsrc }}' as {{ record_source_col_name }}\n\n    {%- if columns_without_excluded_columns is defined and columns_without_excluded_columns| length > 0 -%},\n    {# Generating Ghost Records for all source columns, except the ldts, rsrc & edwSequence column #}\n      {%- for column in columns_without_excluded_columns %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=column.name, datatype=column.dtype, ghost_record_type='unknown') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(missing_columns) -%},\n    {# Additionally generating ghost record for missing columns #}\n      {%- for col, dtype in missing_columns.items() %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=col, datatype=dtype, ghost_record_type='unknown') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(prejoined_columns) -%},\n    {# Additionally generating ghost records for the prejoined attributes#}\n      {% for col, vals in prejoined_columns.items() %}\n\n        {%- if 'src_name' in vals.keys() or 'src_table' in vals.keys() -%}\n          {%- set relation = source(vals['src_name']|string, vals['src_table']) -%}\n        {%- elif 'ref_model' in vals.keys() -%}\n          {%- set relation = ref(vals['ref_model']) -%}\n        {%- endif -%}\n\n        {%- set pj_relation_columns = adapter.get_columns_in_relation( relation ) -%}\n        {{ log('pj_relation_columns: ' ~ pj_relation_columns, false ) }}\n\n          {% for column in pj_relation_columns -%}\n\n            {% if column.name|lower == vals['bk']|lower -%}\n              {{ log('column found? yes, for column :' ~ column.name , false) }}\n              {{ datavault4dbt.ghost_record_per_datatype(column_name=column.name, datatype=column.dtype, ghost_record_type='unknown', alias=col) }}\n            {%- endif -%}\n\n          {%- endfor -%}\n          {%- if not loop.last %},{% endif %}\n        {% endfor -%}\n    {%- endif %}\n\n    {%- if datavault4dbt.is_something(derived_columns) -%},\n    {# Additionally generating Ghost Records for Derived Columns #}\n      {%- for column_name, properties in derived_columns_with_datatypes_DICT.items() %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=column_name, datatype=properties.datatype, ghost_record_type='unknown') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(processed_hash_columns) -%},\n\n      {%- for hash_column in processed_hash_columns %}\n        CAST({{ datavault4dbt.as_constant(column_str=unknown_key) }} as {{ hash_dtype }}) as {{ hash_column }}\n        {%- if not loop.last %},{% endif %}\n      {%- endfor -%}\n\n    {%- endif -%}\n    {{-\"\\n\"-}}\n),\n\n{# Creating Ghost Record for error case, based on datatype #}\nerror_values AS (\n\n    SELECT\n\n    {{ datavault4dbt.string_to_timestamp(timestamp_format , end_of_all_times) }} as {{ load_datetime_col_name }},\n    '{{ error_value_rsrc }}' as {{ record_source_col_name }}\n\n    {%- if columns_without_excluded_columns is defined and columns_without_excluded_columns| length > 0 -%},\n    {# Generating Ghost Records for Source Columns #}\n      {%- for column in columns_without_excluded_columns %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=column.name, datatype=column.dtype, ghost_record_type='error') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(missing_columns) -%},\n    {# Additionally generating ghost record for Missing columns #}\n      {%- for col, dtype in missing_columns.items() %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=col, datatype=dtype, ghost_record_type='error') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(prejoined_columns) -%},\n    {# Additionally generating ghost records for the prejoined attributes #}\n      {%- for col, vals in prejoined_columns.items() %}\n\n        {%- if 'src_name' in vals.keys() or 'src_table' in vals.keys() -%}\n          {%- set relation = source(vals['src_name']|string, vals['src_table']) -%}\n        {%- elif 'ref_model' in vals.keys() -%}\n          {%- set relation = ref(vals['ref_model']) -%}\n        {%- endif -%}\n\n        {%- set pj_relation_columns = adapter.get_columns_in_relation( relation ) -%}\n\n        {% for column in pj_relation_columns -%}\n          {% if column.name|lower == vals['bk']|lower -%}\n            {{ datavault4dbt.ghost_record_per_datatype(column_name=column.name, datatype=column.dtype, ghost_record_type='error', alias=col) -}}\n          {%- endif -%}\n        {%- endfor -%}\n          {%- if not loop.last -%},{%- endif %}\n      {% endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(derived_columns) %},\n    {# Additionally generating Ghost Records for Derived Columns #}\n      {%- for column_name, properties in derived_columns_with_datatypes_DICT.items() %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=column_name, datatype=properties.datatype, ghost_record_type='error') }}\n        {%- if not loop.last %},{% endif %}\n      {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(processed_hash_columns) -%},\n\n      {%- for hash_column in processed_hash_columns %}\n        CAST({{ datavault4dbt.as_constant(column_str=error_key) }} as {{ hash_dtype }}) as {{ hash_column }}\n        {%- if not loop.last %},{% endif %}\n      {%- endfor -%}\n\n    {%- endif -%}\n    {{- \"\\n\" -}}\n),\n\n{# Combining all previous ghost record calculations to two rows with the same width as regular entries #}\nghost_records AS (\n    SELECT * FROM unknown_values\n    UNION ALL\n    SELECT * FROM error_values\n),\n\n{%- if not include_source_columns -%}\n  {% set final_columns_to_select = datavault4dbt.process_columns_to_select(columns_list=final_columns_to_select, exclude_columns_list=source_columns_to_select) %}\n{%- endif -%}\n\n{# Combining the two ghost records with the regular data #}\ncolumns_to_select AS (\n\n    SELECT\n\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }}\n\n    FROM {{ last_cte }}\n\n    UNION ALL\n    \n    SELECT\n\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }}\n\n    FROM ghost_records\n)\n\nSELECT * FROM columns_to_select\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.source_columns", "macro.datavault4dbt.is_attribute", "macro.datavault4dbt.is_something", "macro.datavault4dbt.as_constant", "macro.datavault4dbt.extract_column_names", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.extract_input_columns", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.is_list", "macro.datavault4dbt.derived_columns_datatypes", "macro.datavault4dbt.hash_method", "macro.datavault4dbt.hash_default_values", "macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.print_list", "macro.datavault4dbt.escape_column_names", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.prefix", "macro.datavault4dbt.multikey", "macro.datavault4dbt.derive_columns", "macro.datavault4dbt.process_hash_column_excludes", "macro.datavault4dbt.hash_columns", "macro.datavault4dbt.alias_all", "macro.datavault4dbt.ghost_record_per_datatype"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.251343, "supported_languages": null}, "macro.datavault4dbt.snowflake__stage": {"name": "snowflake__stage", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/staging/snowflake/stage.sql", "original_file_path": "macros/staging/snowflake/stage.sql", "unique_id": "macro.datavault4dbt.snowflake__stage", "macro_sql": "\n\n{%- macro snowflake__stage(include_source_columns,\n                ldts,\n                rsrc,\n                source_model,\n                hashed_columns,\n                derived_columns,\n                sequence,\n                prejoined_columns,\n                missing_columns,\n                multi_active_config) -%}\n\n{% if (source_model is none) and execute %}\n\n    {%- set error_message -%}\n    Staging error: Missing source_model configuration. A source model name must be provided.\n    e.g.\n    [REF STYLE]\n    source_model: model_name\n    OR\n    [SOURCES STYLE]\n    source_model:\n        source_name: source_table_name\n    {%- endset -%}\n\n    {{- exceptions.raise_compiler_error(error_message) -}}\n{%- endif -%}\n\n{{ log('source_model: ' ~ source_model, false )}}\n\n{#- Check for source format or ref format and create relation object from source_model -#}\n{% if source_model is mapping and source_model is not none -%}\n\n    {%- set source_name = source_model | first -%}\n    {%- set source_table_name = source_model[source_name] -%}\n\n    {%- set source_relation = source(source_name, source_table_name) -%}\n    {%- set all_source_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n\n{%- elif source_model is not mapping and source_model is not none -%}\n\n    {{ log('source_model is not mapping and not none: ' ~ source_model, false) }}\n\n    {%- set source_relation = ref(source_model) -%}\n    {%- set all_source_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n{%- else -%}\n    {%- set all_source_columns = [] -%}\n{%- endif -%}\n\n{{ log('source_relation: ' ~ source_relation, false) }}\n\n{# Setting the column name for load date timestamp and record source to the alias coming from the attributes #}\n{%- set ldts_alias = var('datavault4dbt.ldts_alias', 'ldts') -%}\n{%- set rsrc_alias = var('datavault4dbt.rsrc_alias', 'rsrc') -%}\n{%- set copy_input_columns = var('datavault4dbt.copy_rsrc_ldts_input_columns', false) -%}\n{%- set load_datetime_col_name = ldts_alias -%}\n{%- set record_source_col_name = rsrc_alias -%}\n\n{%- set ldts_rsrc_input_column_names = [] -%}\n{%- if datavault4dbt.is_attribute(ldts) -%}\n  {%- if not copy_input_columns -%}\n      {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [ldts]  -%}\n  {%- else -%}\n    \n    {%- if ldts|lower == ldts_alias|lower -%}\n      {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [ldts]  -%}\n    {%- endif -%}\n\n  {%- endif %}\n\n{%- endif -%}\n\n{%- if datavault4dbt.is_attribute(rsrc) -%}\n\n  {%- if not copy_input_columns -%}\n    {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [rsrc] -%}\n  {%- else -%}\n  \n    {%- if rsrc|lower == rsrc_alias|lower -%}\n      {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [rsrc] -%}\n    {%- endif -%}\n\n  {%- endif -%}\n\n{%- endif %}\n\n{%- if datavault4dbt.is_something(sequence) -%}\n  {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [sequence] -%}\n{%- endif -%}\n\n{%- set ldts = datavault4dbt.as_constant(ldts) -%}\n{%- set rsrc = datavault4dbt.as_constant(rsrc) -%}\n\n{# Getting the column names for all additional columns #}\n{%- set derived_column_names = datavault4dbt.extract_column_names(derived_columns) -%}\n{%- set hashed_column_names = datavault4dbt.extract_column_names(hashed_columns) -%}\n{%- set prejoined_column_names = datavault4dbt.extract_column_names(prejoined_columns) -%}\n{%- set missing_column_names = datavault4dbt.extract_column_names(missing_columns) -%}\n{%- set exclude_column_names = hashed_column_names + prejoined_column_names + missing_column_names + ldts_rsrc_input_column_names %}\n{%- set source_and_derived_column_names = (all_source_columns + derived_column_names) | unique | list -%}\n{%- set all_columns = adapter.get_columns_in_relation( source_relation ) -%}\n\n{%- set columns_without_excluded_columns = [] -%}\n{%- set final_columns_to_select = [] -%}\n\n\n{%- if include_source_columns -%}\n  {%- set source_columns_to_select = datavault4dbt.process_columns_to_select(all_source_columns, exclude_column_names) | list -%}\n  {{ log('source_columns_to_select when include_source_columns=true: '~ source_columns_to_select, false) }}\n\n  {%- for column in all_columns -%}\n\n    {%- if column.name|lower not in exclude_column_names|map('lower') %}\n      {%- do columns_without_excluded_columns.append(column) -%}\n    {%- endif -%}\n\n  {%- endfor -%}\n  {{ log('columns_without_excluded_columns: '~ columns_without_excluded_columns, false) }}\n{%- else -%}\n  \n  {# Include from the source only the input columns needed #}\n  {# Getting the input columns for the additional columns #}\n  {%- set derived_input_columns = datavault4dbt.extract_input_columns(derived_columns) -%}\n  {%- set hashed_input_columns = datavault4dbt.expand_column_list(datavault4dbt.extract_input_columns(hashed_columns)) -%}\n  {%- set hashed_input_columns = datavault4dbt.process_columns_to_select(hashed_input_columns, derived_column_names) -%}    {# Excluding the names of the derived columns. #}\n  {%- set hashed_input_columns = datavault4dbt.process_columns_to_select(hashed_input_columns, prejoined_column_names) -%}  {# Excluding the names of the prejoined columns. #}\n  {%- set hashed_input_columns = datavault4dbt.process_columns_to_select(hashed_input_columns, missing_column_names) -%}  {# Excluding the names of the missing columns. #}\n  {%- set prejoined_input_columns = datavault4dbt.extract_input_columns(prejoined_columns) -%}\n\n  {% if datavault4dbt.is_something(multi_active_config) %}\n\n    {%- if datavault4dbt.is_list(multi_active_config['multi_active_key']) -%}\n\n      {%- set ma_keys = multi_active_config['multi_active_key'] -%}\n\n    {%- else -%}\n\n      {%- set ma_keys = [multi_active_config['multi_active_key']] -%}\n\n    {%- endif -%}\n\n    {%- set only_include_from_source = (derived_input_columns + hashed_input_columns + prejoined_input_columns + ma_keys) | unique | list -%}\n\n  {%- else -%}\n\n  {%- set only_include_from_source = (derived_input_columns + hashed_input_columns + prejoined_input_columns) | unique | list -%}\n  {{ log('only_include_from_source : '~ only_include_from_source, false) }}\n  {%- endif -%}\n\n  {%- set source_columns_to_select = only_include_from_source -%}\n  {{ log('source_columns_to_select when include_source_columns=false: '~ source_columns_to_select, false) }}\n\n{%- endif-%}\n\n{%- set final_columns_to_select = final_columns_to_select + source_columns_to_select -%}\n{%- set derived_columns_to_select = datavault4dbt.process_columns_to_select(source_and_derived_column_names, hashed_column_names) | unique | list -%}\n  {{ log('derived_columns_to select : '~ derived_columns_to_select, false) }}\n\n{%- if datavault4dbt.is_something(derived_columns) %}\n  {#- Getting Data types for derived columns with detection from source relation -#}\n  {%- set derived_columns_with_datatypes = datavault4dbt.derived_columns_datatypes(derived_columns, source_relation) -%}\n  {%- set derived_columns_with_datatypes_DICT = fromjson(derived_columns_with_datatypes) -%}\n{%- endif -%}\n{#- Select hashing algorithm -#}\n\n{#- Setting unknown and error keys with default values for the selected hash algorithm -#}\n{%- set hash = datavault4dbt.hash_method() -%}\n{{ log('hash_function: ' ~ hash, false)}}\n{%- set hash_dtype = var('datavault4dbt.hash_datatype', 'STRING') -%}\n{%- set hash_default_values = fromjson(datavault4dbt.hash_default_values(hash_function=hash,hash_datatype=hash_dtype)) -%}\n{%- set hash_alg = hash_default_values['hash_alg'] -%}\n{%- set unknown_key = hash_default_values['unknown_key'] -%}\n{%- set error_key = hash_default_values['error_key'] -%}\n\n{# Select timestamp and format variables #}\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{# Setting the error/unknown value for the record source  for the ghost records#}\n{% set error_value_rsrc = var('datavault4dbt.default_error_rsrc', 'ERROR') %}\n{% set unknown_value_rsrc = var('datavault4dbt.default_unknown_rsrc', 'SYSTEM') %}\n\n{# Setting the rsrc default datatype and length #}\n{% set rsrc_default_dtype = var('datavault4dbt.rsrc_default_dtype', 'STRING') %}\n\nWITH\n\n{# Selecting everything that we need from the source relation. #}\nsource_data AS (\n    SELECT\n\n    {{- \"\\n\\n    \" ~ datavault4dbt.print_list(datavault4dbt.escape_column_names(all_source_columns)) if all_source_columns else \" *\" }}\n\n  FROM {{ source_relation }}\n\n  {% if is_incremental() %}\n  WHERE {{ ldts }} > (SELECT max({{ load_datetime_col_name}}) \n                      FROM {{ this }} \n                      WHERE {{ load_datetime_col_name}} != {{ datavault4dbt.string_to_timestamp(timestamp_format , end_of_all_times) }} )\n  {%- endif -%}\n\n  {% set last_cte = \"source_data\" -%}\n),\n\n\n{% set alias_columns = [load_datetime_col_name, record_source_col_name] %}\n\n{# Selecting all columns from the source data, renaming load date and record source to global aliases #}\nldts_rsrc_data AS (\n\n  SELECT\n    {{ ldts }} AS {{ load_datetime_col_name}},\n    CAST( {{ rsrc }} as {{ rsrc_default_dtype }} ) AS {{ record_source_col_name }}\n    {%- if datavault4dbt.is_something(sequence) %},\n      {{ sequence }} AS edwSequence\n      {%- set alias_columns = alias_columns + ['edwSequence'] -%}\n    {% endif -%}\n\n    {%- if source_columns_to_select is not none and source_columns_to_select | length > 0 %},\n      {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(source_columns_to_select)) }}\n    {% endif -%}\n    {{\"\\n\"}}\n  FROM {{ last_cte }}\n\n  {%- set last_cte = \"ldts_rsrc_data\" -%}\n  {%- set final_columns_to_select = alias_columns + final_columns_to_select  %}\n  {{ log('derived_column_names: '~ derived_column_names, false) }}\n  {%- set final_columns_to_select = datavault4dbt.process_columns_to_select(final_columns_to_select, derived_column_names) | list -%}\n  {{ log('final_columns_to_select without derived col names: '~ final_columns_to_select, false)}}\n  {%- set columns_without_excluded_columns_tmp = [] -%}\n  {%- for column in columns_without_excluded_columns -%}\n    {%- if column.name not in derived_column_names -%}\n      {%- do columns_without_excluded_columns_tmp.append(column) -%}\n    {%- endif -%}\n  {%- endfor -%}\n  {%- set columns_without_excluded_columns = columns_without_excluded_columns_tmp |list -%}\n  {{ log('columns_without_excluded_columns without derived_col_names: '~ columns_without_excluded_columns, false)}}\n\n),\n\n{%- if datavault4dbt.is_something(missing_columns) %}\n\n{# Filling missing columns with NULL values for schema changes #}\nmissing_columns AS (\n\n  SELECT\n\n  {% if final_columns_to_select | length > 0 -%}\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},\n  {%- endif %}\n  {%- for col, dtype in missing_columns.items() %}\n    CAST(NULL as {{ dtype }}) as {{ col }}{% if not loop.last %},{% endif -%}\n\n  {% endfor %}\n\n  FROM {{ last_cte }}\n  {%- set last_cte = \"missing_columns\" -%}\n  {%- set final_columns_to_select = final_columns_to_select + missing_column_names %}\n),\n{%- endif -%}\n\n{%- if datavault4dbt.is_something(prejoined_columns) %}\n{# Prejoining Business Keys of other source objects for Link purposes #}\nprejoined_columns AS (\n\n  SELECT\n  {% if final_columns_to_select | length > 0 -%}\n    {{ datavault4dbt.print_list(datavault4dbt.prefix(columns=datavault4dbt.escape_column_names(final_columns_to_select), prefix_str='lcte').split(',')) }}\n  {% endif %}\n  {%- for col, vals in prejoined_columns.items() -%}\n    ,pj_{{loop.index}}.{{ vals['bk'] }} AS {{ col }}\n  {% endfor -%}\n\n  FROM {{ last_cte }} lcte\n\n  {% for col, vals in prejoined_columns.items() %}\n\n    {%- if 'src_name' in vals.keys() or 'src_table' in vals.keys() -%}\n      {%- set relation = source(vals['src_name']|string, vals['src_table']) -%}\n    {%- elif 'ref_model' in vals.keys() -%}\n      {%- set relation = ref(vals['ref_model']) -%}\n    {%- else -%}\n      {%- set error_message -%}\n      Prejoin error: Invalid target entity definition. Allowed are: \n      e.g.\n      [REF STYLE]\n      extracted_column_alias:\n        ref_model: model_name\n        bk: extracted_column_name\n        this_column_name: join_columns_in_this_model\n        ref_column_name: join_columns_in_ref_model\n      OR\n      [SOURCES STYLE]\n      extracted_column_alias:\n        src_name: name_of_ref_source\n        src_table: name_of_ref_table\n        bk: extracted_column_name\n        this_column_name: join_columns_in_this_model\n        ref_column_name: join_columns_in_ref_model\n\n      Got: \n      {{ col }}: {{ vals }}\n      {%- endset -%}\n\n    {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n\n{# This sets a default value for the operator that connects multiple joining conditions. Only when it is not set by user. #}\n    {%- if 'operator' not in vals.keys() -%}\n      {%- set operator = 'AND' -%}\n    {%- else -%}\n      {%- set operator = vals['operator'] -%}\n    {%- endif -%}\n\n    {%- set prejoin_alias = 'pj_' + loop.index|string -%}\n\n    left join {{ relation }} as {{ prejoin_alias }} \n      on {{ datavault4dbt.multikey(columns=vals['this_column_name'], prefix=['lcte', prejoin_alias], condition='=', operator=operator, right_columns=vals['ref_column_name']) }}\n\n  {% endfor %}\n\n  {% set last_cte = \"prejoined_columns\" -%}\n  {%- set final_columns_to_select = final_columns_to_select + prejoined_column_names %}\n),\n{%- endif -%}\n\n\n{%- if datavault4dbt.is_something(derived_columns) %}\n{# Adding derived columns to the selection #}\nderived_columns AS (\n\n  {%- set final_columns_to_select = datavault4dbt.process_columns_to_select(final_columns_to_select, derived_column_names) -%}\n\n  SELECT\n  {% if final_columns_to_select | length > 0 -%}\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},\n  {% endif %}\n  {{ datavault4dbt.derive_columns(columns=derived_columns) | indent(4) }}\n\n  FROM {{ last_cte }}\n  {%- set last_cte = \"derived_columns\" -%}\n  {%- set final_columns_to_select = final_columns_to_select + derived_column_names %}\n),\n{%- endif -%}\n\n{%- if datavault4dbt.is_something(hashed_columns) and hashed_columns is mapping %}\n{# Generating Hashed Columns (hashkeys and hashdiffs for Hubs/Links/Satellites) #}\n{% if datavault4dbt.is_something(multi_active_config) %}\n\nhashed_columns AS (\n\n    SELECT\n\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},\n\n    {% set processed_hash_columns = datavault4dbt.process_hash_column_excludes(hashed_columns) -%}\n    {{- datavault4dbt.hash_columns(columns=processed_hash_columns, multi_active_key=multi_active_config['multi_active_key'], main_hashkey_column=multi_active_config['main_hashkey_column']) | indent(4) }}\n\n    FROM {{ last_cte }}\n    {%- set last_cte = \"hashed_columns\" -%}\n    {%- set final_columns_to_select = final_columns_to_select + hashed_column_names %}\n\n),\n\n{% else %}\n\n{# Hash calculation for single-active source data. #}\nhashed_columns AS (\n\n    SELECT\n\n    {% if final_columns_to_select | length > 0 -%}\n      {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},\n    {% endif %}\n\n    {%- set processed_hash_columns = datavault4dbt.process_hash_column_excludes(hashed_columns) -%}\n    {{ datavault4dbt.hash_columns(columns=processed_hash_columns) | indent(4) }}\n\n    FROM {{ last_cte }}\n    {%- set last_cte = \"hashed_columns\" -%}\n    {%- set final_columns_to_select = final_columns_to_select + hashed_column_names %}\n  \n),\n\n{%- endif -%}\n{%- endif -%}\n\n{% if not is_incremental() %}\n{# Creating Ghost Record for unknown case, based on datatype #}\nunknown_values AS (\n  \n    SELECT\n\n    {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }} as {{ load_datetime_col_name }},\n    '{{ unknown_value_rsrc }}' as {{ record_source_col_name }}\n\n    {%- if columns_without_excluded_columns is defined and columns_without_excluded_columns| length > 0 -%},\n    {# Generating Ghost Records for all source columns, except the ldts, rsrc & edwSequence column #}\n      {%- for column in columns_without_excluded_columns %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=column.name, datatype=column.dtype, ghost_record_type='unknown') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(missing_columns) -%},\n    {# Additionally generating ghost record for missing columns #}\n      {%- for col, dtype in missing_columns.items() %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=col, datatype=dtype, ghost_record_type='unknown') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(prejoined_columns) -%},\n    {# Additionally generating ghost records for the prejoined attributes#}\n      {% for col, vals in prejoined_columns.items() %}\n\n        {%- if 'src_name' in vals.keys() or 'src_table' in vals.keys() -%}\n          {%- set relation = source(vals['src_name']|string, vals['src_table']) -%}\n        {%- elif 'ref_model' in vals.keys() -%}\n          {%- set relation = ref(vals['ref_model']) -%}\n        {%- endif -%}\n\n        {%- set pj_relation_columns = adapter.get_columns_in_relation( relation ) -%}\n        {{ log('pj_relation_columns: ' ~ pj_relation_columns, false ) }}\n\n          {% for column in pj_relation_columns -%}\n\n            {% if column.name|lower == vals['bk']|lower -%}\n              {{ log('column found? yes, for column :' ~ column.name , false) }}\n              {{ datavault4dbt.ghost_record_per_datatype(column_name=column.name, datatype=column.dtype, ghost_record_type='unknown', alias=col) }}\n            {%- endif -%}\n\n          {%- endfor -%}\n          {%- if not loop.last %},{% endif %}\n        {% endfor -%}\n    {%- endif %}\n\n    {%- if datavault4dbt.is_something(derived_columns) -%},\n    {# Additionally generating Ghost Records for Derived Columns #}\n      {%- for column_name, properties in derived_columns_with_datatypes_DICT.items() %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=column_name, datatype=properties.datatype, col_size=properties.col_size, ghost_record_type='unknown') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(processed_hash_columns) -%},\n\n      {%- for hash_column in processed_hash_columns %}\n        CAST({{ datavault4dbt.as_constant(column_str=unknown_key) }} as {{ hash_dtype }}) as {{ hash_column }}\n        {%- if not loop.last %},{% endif %}\n      {%- endfor -%}\n\n    {%- endif -%}\n    {{-\"\\n\"-}}\n),\n\n{# Creating Ghost Record for error case, based on datatype #}\nerror_values AS (\n\n    SELECT\n\n    {{ datavault4dbt.string_to_timestamp(timestamp_format , end_of_all_times) }} as {{ load_datetime_col_name }},\n    '{{ error_value_rsrc }}' as {{ record_source_col_name }}\n\n    {%- if columns_without_excluded_columns is defined and columns_without_excluded_columns| length > 0 -%},\n    {# Generating Ghost Records for Source Columns #}\n      {%- for column in columns_without_excluded_columns %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=column.name, datatype=column.dtype, ghost_record_type='error') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(missing_columns) -%},\n    {# Additionally generating ghost record for Missing columns #}\n      {%- for col, dtype in missing_columns.items() %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=col, datatype=dtype, ghost_record_type='error') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(prejoined_columns) -%},\n    {# Additionally generating ghost records for the prejoined attributes #}\n      {%- for col, vals in prejoined_columns.items() %}\n\n        {%- if 'src_name' in vals.keys() or 'src_table' in vals.keys() -%}\n          {%- set relation = source(vals['src_name']|string, vals['src_table']) -%}\n        {%- elif 'ref_model' in vals.keys() -%}\n          {%- set relation = ref(vals['ref_model']) -%}\n        {%- endif -%}\n\n        {%- set pj_relation_columns = adapter.get_columns_in_relation( relation ) -%}\n\n        {% for column in pj_relation_columns -%}\n          {% if column.name|lower == vals['bk']|lower -%}\n            {{ datavault4dbt.ghost_record_per_datatype(column_name=column.name, datatype=column.dtype, ghost_record_type='error', alias=col) -}}\n          {%- endif -%}\n        {%- endfor -%}\n          {%- if not loop.last -%},{%- endif %}\n      {% endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(derived_columns) %},\n    {# Additionally generating Ghost Records for Derived Columns #}\n      {%- for column_name, properties in derived_columns_with_datatypes_DICT.items() %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=column_name, datatype=properties.datatype, col_size=properties.col_size, ghost_record_type='error') }}\n        {%- if not loop.last %},{% endif %}\n      {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(processed_hash_columns) -%},\n\n      {%- for hash_column in processed_hash_columns %}\n        CAST({{ datavault4dbt.as_constant(column_str=error_key) }} as {{ hash_dtype }}) as {{ hash_column }}\n        {%- if not loop.last %},{% endif %}\n      {%- endfor -%}\n\n    {%- endif -%}\n    {{- \"\\n\" -}}\n),\n\n{# Combining all previous ghost record calculations to two rows with the same width as regular entries #}\nghost_records AS (\n    SELECT * FROM unknown_values\n    UNION ALL\n    SELECT * FROM error_values\n),\n{%- endif %}\n\n{%- if not include_source_columns -%}\n  {% set source_columns_to_select = datavault4dbt.process_columns_to_select(columns_list=source_columns_to_select, exclude_columns_list=derived_column_names) %}\n  {% set final_columns_to_select = datavault4dbt.process_columns_to_select(columns_list=final_columns_to_select, exclude_columns_list=source_columns_to_select) %}\n{%- endif -%}\n\n{# Combining the two ghost records with the regular data #}\ncolumns_to_select AS (\n\n    SELECT\n\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }}\n\n    FROM {{ last_cte }}\n\n  {% if not is_incremental() %}\n    UNION ALL\n    \n    SELECT\n\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }}\n\n    FROM ghost_records\n  {% endif %}\n)\n\nSELECT * FROM columns_to_select\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.source_columns", "macro.datavault4dbt.is_attribute", "macro.datavault4dbt.is_something", "macro.datavault4dbt.as_constant", "macro.datavault4dbt.extract_column_names", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.extract_input_columns", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.is_list", "macro.datavault4dbt.derived_columns_datatypes", "macro.datavault4dbt.hash_method", "macro.datavault4dbt.hash_default_values", "macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.print_list", "macro.datavault4dbt.escape_column_names", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.prefix", "macro.datavault4dbt.multikey", "macro.datavault4dbt.derive_columns", "macro.datavault4dbt.process_hash_column_excludes", "macro.datavault4dbt.hash_columns", "macro.datavault4dbt.ghost_record_per_datatype"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.2645912, "supported_languages": null}, "macro.datavault4dbt.exasol__stage": {"name": "exasol__stage", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/staging/exasol/stage.sql", "original_file_path": "macros/staging/exasol/stage.sql", "unique_id": "macro.datavault4dbt.exasol__stage", "macro_sql": "{%- macro exasol__stage(include_source_columns,\n                ldts,\n                rsrc,\n                source_model,\n                hashed_columns,\n                derived_columns,\n                sequence,\n                prejoined_columns,\n                missing_columns,\n                multi_active_config) -%}\n\n{% if (source_model is none) and execute %}\n\n    {%- set error_message -%}\n    Staging error: Missing source_model configuration. A source model name must be provided.\n    e.g.\n    [REF STYLE]\n    source_model: model_name\n    OR\n    [SOURCES STYLE]\n    source_model:\n        source_name: source_table_name\n    {%- endset -%}\n\n    {{- exceptions.raise_compiler_error(error_message) -}}\n{%- endif -%}\n\n{#- Check for source format or ref format and create relation object from source_model -#}\n{% if source_model is mapping and source_model is not none -%}\n\n    {%- set source_name = source_model | first -%}\n    {%- set source_table_name = source_model[source_name] -%}\n\n    {%- set source_relation = source(source_name, source_table_name) -%}\n    {%- set all_source_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n{%- elif source_model is not mapping and source_model is not none -%}\n\n    {%- set source_relation = ref(source_model) -%}\n    {%- set all_source_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n{%- else -%}\n\n    {%- set all_source_columns = [] -%}\n{%- endif -%}\n\n\n{# Setting the column name for load date timestamp and record source to the alias coming from the attributes #}\n{%- set ldts_alias = var('datavault4dbt.ldts_alias', 'ldts') -%}\n{%- set rsrc_alias = var('datavault4dbt.rsrc_alias', 'rsrc') -%}\n{%- set copy_input_columns = var('datavault4dbt.copy_rsrc_ldts_input_columns', false) -%}\n{%- set load_datetime_col_name = ldts_alias -%}\n{%- set record_source_col_name = rsrc_alias -%}\n\n{%- set ldts_rsrc_input_column_names = [] -%}\n{%- if datavault4dbt.is_attribute(ldts) -%}\n\n  {%- if not copy_input_columns -%}\n      {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [ldts]  -%}\n  {%- else -%}\n    \n    {%- if ldts|lower == ldts_alias|lower -%}\n      {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [ldts]  -%}\n    {%- endif -%}\n\n  {%- endif %}\n\n{%- endif -%}\n\n{%- if datavault4dbt.is_attribute(rsrc) -%}\n\n  {%- if not copy_input_columns -%}\n    {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [rsrc] -%}\n  {%- else -%}\n  \n    {%- if rsrc|lower == rsrc_alias|lower -%}\n      {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [rsrc] -%}\n    {%- endif -%}\n\n  {%- endif -%}\n\n{%- endif %}\n\n{%- if datavault4dbt.is_something(sequence) -%}\n  {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [sequence] -%}\n{%- endif -%}\n\n{%- set ldts = datavault4dbt.as_constant(ldts) -%}\n{%- set rsrc = datavault4dbt.as_constant(rsrc) -%}\n\n{# Getting the column names for all additional columns #}\n{%- set derived_column_names = datavault4dbt.extract_column_names(derived_columns) -%}\n{%- set hashed_column_names = datavault4dbt.extract_column_names(hashed_columns) -%}\n{%- set prejoined_column_names = datavault4dbt.extract_column_names(prejoined_columns) -%}\n{%- set missing_column_names = datavault4dbt.extract_column_names(missing_columns) -%}\n{%- set exclude_column_names = derived_column_names + hashed_column_names + prejoined_column_names + missing_column_names + ldts_rsrc_input_column_names %}\n{%- set source_and_derived_column_names = (all_source_columns + derived_column_names) | unique | list -%}\n{%- set all_columns = adapter.get_columns_in_relation( source_relation ) -%}\n\n{%- set columns_without_excluded_columns = [] -%}\n{%- set final_columns_to_select = [] -%}\n\n\n{%- if include_source_columns -%}\n  {%- set source_columns_to_select = datavault4dbt.process_columns_to_select(all_source_columns, exclude_column_names) | list -%}\n\n  {%- for column in all_columns -%}\n\n    {%- if column.name|lower not in exclude_column_names|map('lower') %}\n      {%- do columns_without_excluded_columns.append(column) -%}\n    {%- endif -%}\n\n  {%- endfor -%}\n{%- else -%}\n  \n  {# Include from the source only the input columns needed #}\n  {# Getting the input columns for the additional columns #}\n  {%- set derived_input_columns = datavault4dbt.extract_input_columns(derived_columns) -%}\n  {%- set hashed_input_columns = datavault4dbt.expand_column_list(datavault4dbt.extract_input_columns(hashed_columns)) -%}\n  {%- set hashed_input_columns = datavault4dbt.process_columns_to_select(hashed_input_columns, derived_column_names) -%}    {# Excluding the names of the derived columns. #}\n  {%- set hashed_input_columns = datavault4dbt.process_columns_to_select(hashed_input_columns, prejoined_column_names) -%}  {# Excluding the names of the prejoined columns. #}\n  {%- set hashed_input_columns = datavault4dbt.process_columns_to_select(hashed_input_columns, missing_column_names) -%}  {# Excluding the names of the missing columns. #}\n  {%- set prejoined_input_columns = datavault4dbt.extract_input_columns(prejoined_columns) -%}\n\n  {% if datavault4dbt.is_something(multi_active_config) %}\n\n    {%- if datavault4dbt.is_list(multi_active_config['multi_active_key']) -%}\n\n      {%- set ma_keys = multi_active_config['multi_active_key'] -%}\n\n    {%- else -%}\n\n      {%- set ma_keys = [multi_active_config['multi_active_key']] -%}\n\n    {%- endif -%}\n\n    {%- set only_include_from_source = (derived_input_columns + hashed_input_columns + prejoined_input_columns + ma_keys) | unique | list -%}\n\n  {%- else -%}\n\n  {%- set only_include_from_source = (derived_input_columns + hashed_input_columns + prejoined_input_columns) | unique | list -%}\n\n  {%- endif -%}\n\n  {%- set source_columns_to_select = only_include_from_source -%}\n\n{%- endif-%}\n\n{%- set final_columns_to_select = final_columns_to_select + source_columns_to_select -%}\n{%- set derived_columns_to_select = datavault4dbt.process_columns_to_select(source_and_derived_column_names, hashed_column_names) | unique | list -%}\n\n{%- if datavault4dbt.is_something(derived_columns) %}\n  {#- Getting Data types for derived columns with detection from source relation -#}\n  {%- set derived_columns_with_datatypes = datavault4dbt.derived_columns_datatypes(derived_columns, source_relation) -%}\n  {%- set derived_columns_with_datatypes_DICT = fromjson(derived_columns_with_datatypes) -%}\n{%- endif -%}\n{#- Select hashing algorithm -#}\n\n{#- Setting unknown and error keys with default values for the selected hash algorithm -#}\n{%- set hash = datavault4dbt.hash_method() -%}\n{%- set hash_dtype = var('datavault4dbt.hash_datatype', 'HASHTYPE') -%}\n{%- set hash_default_values = fromjson(datavault4dbt.hash_default_values(hash_function=hash,hash_datatype=hash_dtype)) -%}\n{%- set hash_alg = hash_default_values['hash_alg'] -%}\n{%- set unknown_key = hash_default_values['unknown_key'] -%}\n{%- set error_key = hash_default_values['error_key'] -%}\n\n{# Select timestamp and format variables #}\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{# Setting the error/unknown value for the record source  for the ghost records#}\n{% set error_value_rsrc = var('datavault4dbt.default_error_rsrc', 'ERROR') %}\n{% set unknown_value_rsrc = var('datavault4dbt.default_unknown_rsrc', 'SYSTEM') %}\n\n{# Setting the rsrc default datatype and length #}\n{% set rsrc_default_dtype = var('datavault4dbt.rsrc_default_dtype', 'VARCHAR (2000000) UTF8') %}\n\nWITH\n\n{# Selecting everything that we need from the source relation. #}\nsource_data AS (\n    SELECT\n\n    {{- \"\\n\\n    \" ~ datavault4dbt.print_list(datavault4dbt.escape_column_names(all_source_columns)) if all_source_columns else \" *\" }}\n\n  FROM {{ source_relation }}\n\n  {% set last_cte = \"source_data\" -%}\n),\n\n\n{% set alias_columns = [load_datetime_col_name, record_source_col_name] %}\n\n{# Selecting all columns from the source data, renaming load date and record source to global aliases #}\nldts_rsrc_data AS (\n\n  SELECT\n    {{ ldts }} AS {{ load_datetime_col_name}},\n    CAST( {{ rsrc }} as {{ rsrc_default_dtype }} ) AS {{ record_source_col_name }}\n    {%- if datavault4dbt.is_something(sequence) %},\n      {{ sequence }} AS edwSequence\n      {%- set alias_columns = alias_columns + ['edwSequence'] -%}\n    {% endif -%}\n\n    {%- if source_columns_to_select is not none and source_columns_to_select | length > 0 %},\n      {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(source_columns_to_select)) }}\n    {% endif -%}\n    {{\"\\n\"}}\n  FROM {{ last_cte }}\n\n  {%- set last_cte = \"ldts_rsrc_data\" -%}\n  {%- set final_columns_to_select = alias_columns + final_columns_to_select  %}\n),\n\n{%- if datavault4dbt.is_something(missing_columns) %}\n\n{# Filling missing columns with NULL values for schema changes #}\nmissing_columns AS (\n\n  SELECT\n\n  {% if final_columns_to_select | length > 0 -%}\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},\n  {%- endif %}\n  {%- for col, dtype in missing_columns.items() %}\n    CAST(NULL as {{ dtype }}) as \"{{ col | upper }}\"{% if not loop.last %},{% endif -%}\n\n  {% endfor %}\n\n  FROM {{ last_cte }}\n  {%- set last_cte = \"missing_columns\" -%}\n  {%- set final_columns_to_select = final_columns_to_select + missing_column_names %}\n),\n{%- endif -%}\n\n{%- if datavault4dbt.is_something(prejoined_columns) %}\n{# Prejoining Business Keys of other source objects for Link purposes #}\nprejoined_columns AS (\n\n  SELECT\n  {% if final_columns_to_select | length > 0 -%}\n    {{ datavault4dbt.print_list(datavault4dbt.prefix(columns=datavault4dbt.escape_column_names(final_columns_to_select), prefix_str='lcte').split(',')) }}\n  {% endif %}\n  {%- for col, vals in prejoined_columns.items() -%}\n    ,pj_{{loop.index}}.{{ vals['bk'] }} AS \"{{ col | upper }}\"\n  {% endfor -%}\n\n  FROM {{ last_cte }} lcte\n\n  {% for col, vals in prejoined_columns.items() %}\n\n    {%- if 'src_name' in vals.keys() or 'src_table' in vals.keys() -%}\n      {%- set relation = source(vals['src_name']|string, vals['src_table']) -%}\n    {%- elif 'ref_model' in vals.keys() -%}\n      {%- set relation = ref(vals['ref_model']) -%}\n    {%- else -%}\n      {%- set error_message -%}\n      Prejoin error: Invalid target entity definition. Allowed are: \n      e.g.\n      [REF STYLE]\n      extracted_column_alias:\n        ref_model: model_name\n        bk: extracted_column_name\n        this_column_name: join_columns_in_this_model\n        ref_column_name: join_columns_in_ref_model\n      OR\n      [SOURCES STYLE]\n      extracted_column_alias:\n        src_name: name_of_ref_source\n        src_table: name_of_ref_table\n        bk: extracted_column_name\n        this_column_name: join_columns_in_this_model\n        ref_column_name: join_columns_in_ref_model\n\n      Got: \n      {{ col }}: {{ vals }}\n      {%- endset -%}\n\n    {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n\n{# This sets a default value for the operator that connects multiple joining conditions. Only when it is not set by user. #}\n    {%- if 'operator' not in vals.keys() -%}\n      {%- set operator = 'AND' -%}\n    {%- else -%}\n      {%- set operator = vals['operator'] -%}\n    {%- endif -%}\n\n    {%- set prejoin_alias = 'pj_' + loop.index|string -%}\n\n    left join {{ relation }} as {{ prejoin_alias }} \n      on {{ datavault4dbt.multikey(columns=vals['this_column_name'], prefix=['lcte', prejoin_alias], condition='=', operator=operator, right_columns=vals['ref_column_name']) }}\n\n  {% endfor %}\n\n  {% set last_cte = \"prejoined_columns\" -%}\n  {%- set final_columns_to_select = final_columns_to_select + prejoined_column_names %}\n),\n{%- endif -%}\n\n\n{%- if datavault4dbt.is_something(derived_columns) %}\n{# Adding derived columns to the selection #}\nderived_columns AS (\n\n  SELECT\n  {% if final_columns_to_select | length > 0 -%}\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},\n  {% endif %}\n  {{ datavault4dbt.derive_columns(columns=derived_columns) | indent(4) }}\n\n  FROM {{ last_cte }}\n  {%- set last_cte = \"derived_columns\" -%}\n  {%- set final_columns_to_select = final_columns_to_select + derived_column_names %}\n),\n{%- endif -%}\n\n{%- if datavault4dbt.is_something(hashed_columns) and hashed_columns is mapping %}\n{# Generating Hashed Columns (hashkeys and hashdiffs for Hubs/Links/Satellites) #}\n{% if datavault4dbt.is_something(multi_active_config) %}\n\n{%- set tmp_ns = namespace(main_hashkey_dict={}, remaining_hashed_columns={}, hashdiff_names=[]) -%}\n\n{%- for column in hashed_columns.keys() -%}\n  {%- if column | lower == multi_active_config['main_hashkey_column']| lower and not hashed_columns[column].is_hashdiff -%}\n    {%- do tmp_ns.main_hashkey_dict.update({column: hashed_columns[column]}) -%}\n  {% elif column != multi_active_config['main_hashkey_column'] and not hashed_columns[column].is_hashdiff -%}\n    {%- do tmp_ns.remaining_hashed_columns.update({column: hashed_columns[column]}) -%}\n  {%- elif hashed_columns[column].is_hashdiff -%}\n    {%- do tmp_ns.hashdiff_names.append(column) -%}\n  {%- endif -%}\n{%- endfor -%}\n\nmain_hashkey_generation AS (\n\n  SELECT \n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},\n    {% set processed_hash_columns = datavault4dbt.process_hash_column_excludes(tmp_ns.main_hashkey_dict) -%}\n      {{- datavault4dbt.hash_columns(columns=processed_hash_columns) | indent(4) }}\n  FROM {{ last_cte }}\n\n),\n\n{# Hash calculation for multi-active source data. #}\nma_hashdiff_prep AS (\n\n    SELECT\n      \n      {% set processed_hash_columns = datavault4dbt.process_hash_column_excludes(hashed_columns) -%}\n      \n      {# Generates only all hashdiffs. #}\n      {{- datavault4dbt.hash_columns(columns=processed_hash_columns, multi_active_key=multi_active_config['multi_active_key'], main_hashkey_column=multi_active_config['main_hashkey_column']) | indent(4) }},\n      {{ ldts_alias }}\n\n    FROM {{ last_cte }}\n    GROUP BY local.{{ multi_active_config['main_hashkey_column'] }}, {{ ldts_alias }}\n\n),\n\nhashed_columns AS (\n\n    SELECT \n\n      {{ datavault4dbt.alias_all(columns=final_columns_to_select, prefix='main_hashkey_generation') }},                         {# Everything from last_cte before hashed_columns. #}\n      {% set processed_remaining_hash_columns = datavault4dbt.process_hash_column_excludes(tmp_ns.remaining_hashed_columns) -%}   \n      {# Generates only all remaining hashkeys, that are no hashdiffs #}\n      \n      {%- if datavault4dbt.is_something(processed_remaining_hash_columns) %}\n      {{- datavault4dbt.hash_columns(columns=processed_remaining_hash_columns) | indent(4) }},                                  {# All remaining hashed_columns get calculated. #}\n      {% endif -%}\n\n      {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(tmp_ns.hashdiff_names)) }},                                   {# All MA Hashdiffs are selected. #}\n      main_hashkey_generation.{{ multi_active_config['main_hashkey_column'] }}                                                          {# Main Hashkey selected. #}\n\n    FROM main_hashkey_generation\n    LEFT JOIN ma_hashdiff_prep \n      ON main_hashkey_generation.{{ multi_active_config['main_hashkey_column'] }} = ma_hashdiff_prep.{{ multi_active_config['main_hashkey_column'] }} \n      AND main_hashkey_generation.{{ ldts_alias }} = ma_hashdiff_prep.{{ ldts_alias }}\n\n    {%- set last_cte = \"hashed_columns\" -%}\n    {%- set final_columns_to_select = final_columns_to_select + hashed_column_names %}\n\n),\n\n{% else %}\n\n{# Hash calculation for single-active source data. #}\nhashed_columns AS (\n\n    SELECT\n\n    {% if final_columns_to_select | length > 0 -%}\n      {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},\n    {% endif %}\n\n    {%- set processed_hash_columns = datavault4dbt.process_hash_column_excludes(hashed_columns) -%}\n    {{ datavault4dbt.hash_columns(columns=processed_hash_columns) | indent(4) }}\n\n    FROM {{ last_cte }}\n    {%- set last_cte = \"hashed_columns\" -%}\n    {%- set final_columns_to_select = final_columns_to_select + hashed_column_names %}\n  \n),\n\n{%- endif -%}\n{%- endif -%}\n\n{# Creating Ghost Record for unknown case, based on datatype #}\nunknown_values AS (\n    SELECT\n\n    {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }} as {{ load_datetime_col_name }},\n    '{{ unknown_value_rsrc }}' as {{ record_source_col_name }}\n\n    {%- if columns_without_excluded_columns is defined and columns_without_excluded_columns| length > 0 -%},\n    {# Generating Ghost Records for all source columns, except the ldts, rsrc & edwSequence column #}\n      {%- for column in columns_without_excluded_columns %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=column.name, datatype=column.dtype, col_size=column.char_size, ghost_record_type='unknown') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(missing_columns) -%},\n    {# Additionally generating ghost record for missing columns #}\n      {%- for col, dtype in missing_columns.items() %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=col|upper, datatype=dtype, ghost_record_type='unknown') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(prejoined_columns) -%},\n    {# Additionally generating ghost records for the prejoined attributes#}\n      {% for col, vals in prejoined_columns.items() %}\n\n        {%- if 'src_name' in vals.keys() or 'src_table' in vals.keys() -%}\n          {%- set relation = source(vals['src_name']|string, vals['src_table']) -%}\n        {%- elif 'ref_model' in vals.keys() -%}\n          {%- set relation = ref(vals['ref_model']) -%}\n        {%- endif -%}\n\n        {%- set pj_relation_columns = adapter.get_columns_in_relation( relation ) -%}\n          {% for column in pj_relation_columns -%}\n            {% if column.name|lower == vals['bk']|lower -%}\n              {{ datavault4dbt.ghost_record_per_datatype(column_name=col|upper, datatype=column.dtype, col_size=column.char_size, ghost_record_type='unknown') }}\n            {%- endif -%}\n\n          {%- endfor -%}\n          {%- if not loop.last %},{% endif %}\n        {% endfor -%}\n    {%- endif %}\n\n    {%- if datavault4dbt.is_something(derived_columns) -%},\n    {# Additionally generating Ghost Records for Derived Columns #}\n      {%- for column_name, properties in derived_columns_with_datatypes_DICT.items() %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=column_name, datatype=properties.datatype, col_size=properties.col_size, ghost_record_type='unknown') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(processed_hash_columns) -%},\n\n      {%- for hash_column in processed_hash_columns %}\n        CAST({{ datavault4dbt.as_constant(column_str=unknown_key) }} as {{ hash_dtype }}) as \"{{ hash_column }}\"\n        {%- if not loop.last %},{% endif %}\n      {%- endfor -%}\n\n    {%- endif -%}\n    {{-\"\\n\"-}}\n),\n\n{# Creating Ghost Record for error case, based on datatype #}\nerror_values AS (\n\n    SELECT\n\n    {{ datavault4dbt.string_to_timestamp(timestamp_format , end_of_all_times) }} as {{ load_datetime_col_name }},\n    '{{ error_value_rsrc }}' as {{ record_source_col_name }}\n\n    {%- if columns_without_excluded_columns is defined and columns_without_excluded_columns| length > 0 -%},\n    {# Generating Ghost Records for Source Columns #}\n      {%- for column in columns_without_excluded_columns %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=column.name, datatype=column.dtype, col_size=column.char_size, ghost_record_type='error') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(missing_columns) -%},\n    {# Additionally generating ghost record for Missing columns #}\n      {%- for col, dtype in missing_columns.items() %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=col|upper, datatype=dtype, ghost_record_type='error') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(prejoined_columns) -%},\n    {# Additionally generating ghost records for the prejoined attributes #}\n      {%- for col, vals in prejoined_columns.items() %}\n\n        {%- if 'src_name' in vals.keys() or 'src_table' in vals.keys() -%}\n          {%- set relation = source(vals['src_name']|string, vals['src_table']) -%}\n        {%- elif 'ref_model' in vals.keys() -%}\n          {%- set relation = ref(vals['ref_model']) -%}\n        {%- endif -%}\n\n        {%- set pj_relation_columns = adapter.get_columns_in_relation( relation ) -%}\n\n        {% for column in pj_relation_columns -%}\n          {% if column.name|lower == vals['bk']|lower -%}\n            {{ datavault4dbt.ghost_record_per_datatype(column_name=col|upper, datatype=column.dtype, col_size=column.char_size, ghost_record_type='error') -}}\n          {%- endif -%}\n        {%- endfor -%}\n          {%- if not loop.last -%},{%- endif %}\n      {% endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(derived_columns) %},\n    {# Additionally generating Ghost Records for Derived Columns #}\n      {%- for column_name, properties in derived_columns_with_datatypes_DICT.items() %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=column_name, datatype=properties.datatype, col_size=properties.col_size, ghost_record_type='error') }}\n        {%- if not loop.last %},{% endif %}\n      {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(processed_hash_columns) -%},\n\n      {%- for hash_column in processed_hash_columns %}\n        CAST({{ datavault4dbt.as_constant(column_str=error_key) }} as {{ hash_dtype }}) as \"{{ hash_column }}\"\n        {%- if not loop.last %},{% endif %}\n      {%- endfor -%}\n\n    {%- endif -%}\n    {{- \"\\n\" -}}\n),\n\n{# Combining all previous ghost record calculations to two rows with the same width as regular entries #}\nghost_records AS (\n    SELECT * FROM unknown_values\n    UNION ALL\n    SELECT * FROM error_values\n),\n{%- if not include_source_columns -%}\n  {% set final_columns_to_select = datavault4dbt.process_columns_to_select(columns_list=final_columns_to_select, exclude_columns_list=source_columns_to_select) %}\n{%- endif -%}\n{# Combining the two ghost records with the regular data #}\ncolumns_to_select AS (\n\n    SELECT\n\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }}\n\n    FROM {{ last_cte }}\n    UNION ALL\n    SELECT\n\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }}\n\n    FROM ghost_records\n)\n\nSELECT * FROM columns_to_select\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.source_columns", "macro.datavault4dbt.is_attribute", "macro.datavault4dbt.is_something", "macro.datavault4dbt.as_constant", "macro.datavault4dbt.extract_column_names", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.extract_input_columns", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.is_list", "macro.datavault4dbt.derived_columns_datatypes", "macro.datavault4dbt.hash_method", "macro.datavault4dbt.hash_default_values", "macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.print_list", "macro.datavault4dbt.escape_column_names", "macro.datavault4dbt.prefix", "macro.datavault4dbt.multikey", "macro.datavault4dbt.derive_columns", "macro.datavault4dbt.process_hash_column_excludes", "macro.datavault4dbt.hash_columns", "macro.datavault4dbt.alias_all", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.ghost_record_per_datatype"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.2777832, "supported_languages": null}, "macro.datavault4dbt.redshift__stage": {"name": "redshift__stage", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/staging/redshift/stage.sql", "original_file_path": "macros/staging/redshift/stage.sql", "unique_id": "macro.datavault4dbt.redshift__stage", "macro_sql": "\n\n{%- macro redshift__stage(include_source_columns,\n                ldts,\n                rsrc,\n                source_model,\n                hashed_columns,\n                derived_columns,\n                sequence,\n                prejoined_columns,\n                missing_columns,\n                multi_active_config) -%}\n\n{% if (source_model is none) and execute %}\n\n    {%- set error_message -%}\n    Staging error: Missing source_model configuration. A source model name must be provided.\n    e.g.\n    [REF STYLE]\n    source_model: model_name\n    OR\n    [SOURCES STYLE]\n    source_model:\n        source_name: source_table_name\n    {%- endset -%}\n\n    {{- exceptions.raise_compiler_error(error_message) -}}\n{%- endif -%}\n\n{{ log('source_model: ' ~ source_model, false )}}\n\n{#- Check for source format or ref format and create relation object from source_model -#}\n{% if source_model is mapping and source_model is not none -%}\n\n    {%- set source_name = source_model | first -%}\n    {%- set source_table_name = source_model[source_name] -%}\n\n    {%- set source_relation = source(source_name, source_table_name) -%}\n    {%- set all_source_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n\n{%- elif source_model is not mapping and source_model is not none -%}\n\n    {{ log('source_model is not mapping and not none: ' ~ source_model, false) }}\n\n    {%- set source_relation = ref(source_model) -%}\n    {%- set all_source_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n{%- else -%}\n    {%- set all_source_columns = [] -%}\n{%- endif -%}\n\n{{ log('source_relation: ' ~ source_relation, false) }}\n\n{# Setting the column name for load date timestamp and record source to the alias coming from the attributes #}\n{%- set ldts_alias = var('datavault4dbt.ldts_alias', 'ldts') -%}\n{%- set rsrc_alias = var('datavault4dbt.rsrc_alias', 'rsrc') -%}\n{%- set copy_input_columns = var('datavault4dbt.copy_rsrc_ldts_input_columns', false) -%}\n{%- set load_datetime_col_name = ldts_alias -%}\n{%- set record_source_col_name = rsrc_alias -%}\n\n{%- set ldts_rsrc_input_column_names = [] -%}\n{%- if datavault4dbt.is_attribute(ldts) -%}\n  {%- if not copy_input_columns -%}\n      {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [ldts]  -%}\n  {%- else -%}\n    \n    {%- if ldts|lower == ldts_alias|lower -%}\n      {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [ldts]  -%}\n    {%- endif -%}\n\n  {%- endif %}\n\n{%- endif -%}\n\n{%- if datavault4dbt.is_attribute(rsrc) -%}\n\n  {%- if not copy_input_columns -%}\n    {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [rsrc] -%}\n  {%- else -%}\n  \n    {%- if rsrc|lower == rsrc_alias|lower -%}\n      {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [rsrc] -%}\n    {%- endif -%}\n\n  {%- endif -%}\n\n{%- endif %}\n\n{%- if datavault4dbt.is_something(sequence) -%}\n  {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [sequence] -%}\n{%- endif -%}\n\n{%- set ldts = datavault4dbt.as_constant(ldts) -%}\n{%- set rsrc = datavault4dbt.as_constant(rsrc) -%}\n\n{# Getting the column names for all additional columns #}\n{%- set derived_column_names = datavault4dbt.extract_column_names(derived_columns) -%}\n{%- set hashed_column_names = datavault4dbt.extract_column_names(hashed_columns) -%}\n{%- set prejoined_column_names = datavault4dbt.extract_column_names(prejoined_columns) -%}\n{%- set missing_column_names = datavault4dbt.extract_column_names(missing_columns) -%}\n{%- set exclude_column_names = hashed_column_names + prejoined_column_names + missing_column_names + ldts_rsrc_input_column_names %}\n{%- set source_and_derived_column_names = (all_source_columns + derived_column_names) | unique | list -%}\n{%- set all_columns = adapter.get_columns_in_relation( source_relation ) -%}\n\n{%- set columns_without_excluded_columns = [] -%}\n{%- set final_columns_to_select = [] -%}\n\n\n{%- if include_source_columns -%}\n  {%- set source_columns_to_select = datavault4dbt.process_columns_to_select(all_source_columns, exclude_column_names) | list -%}\n\n  {%- for column in all_columns -%}\n\n    {%- if column.name|lower not in exclude_column_names|map('lower') %}\n      {%- do columns_without_excluded_columns.append(column) -%}\n    {%- endif -%}\n\n  {%- endfor -%}\n{%- else -%}\n  \n  {# Include from the source only the input columns needed #}\n  {# Getting the input columns for the additional columns #}\n  {%- set derived_input_columns = datavault4dbt.extract_input_columns(derived_columns) -%}\n  {%- set hashed_input_columns = datavault4dbt.expand_column_list(datavault4dbt.extract_input_columns(hashed_columns)) -%}\n  {%- set hashed_input_columns = datavault4dbt.process_columns_to_select(hashed_input_columns, derived_column_names) -%}    {# Excluding the names of the derived columns. #}\n  {%- set hashed_input_columns = datavault4dbt.process_columns_to_select(hashed_input_columns, prejoined_column_names) -%}  {# Excluding the names of the prejoined columns. #}\n  {%- set hashed_input_columns = datavault4dbt.process_columns_to_select(hashed_input_columns, missing_column_names) -%}  {# Excluding the names of the missing columns. #}\n  {%- set prejoined_input_columns = datavault4dbt.extract_input_columns(prejoined_columns) -%}\n\n  {% if datavault4dbt.is_something(multi_active_config) %}\n\n    {%- if datavault4dbt.is_list(multi_active_config['multi_active_key']) -%}\n\n      {%- set ma_keys = multi_active_config['multi_active_key'] -%}\n\n    {%- else -%}\n\n      {%- set ma_keys = [multi_active_config['multi_active_key']] -%}\n\n    {%- endif -%}\n\n    {%- set only_include_from_source = (derived_input_columns + hashed_input_columns + prejoined_input_columns + ma_keys) | unique | list -%}\n\n  {%- else -%}\n\n    {%- set only_include_from_source = (derived_input_columns + hashed_input_columns + prejoined_input_columns) | unique | list -%}\n\n  {%- endif -%}\n\n  {%- set source_columns_to_select = only_include_from_source -%}\n\n{%- endif-%}\n\n{%- set final_columns_to_select = final_columns_to_select + source_columns_to_select -%}\n{%- set derived_columns_to_select = datavault4dbt.process_columns_to_select(source_and_derived_column_names, hashed_column_names) | unique | list -%}\n\n{%- if datavault4dbt.is_something(derived_columns) %}\n  {#- Getting Data types for derived columns with detection from source relation -#}\n  {%- set derived_columns_with_datatypes = datavault4dbt.derived_columns_datatypes(derived_columns, source_relation) -%}\n  {%- set derived_columns_with_datatypes_DICT = fromjson(derived_columns_with_datatypes) -%}\n{%- endif -%}\n{#- Select hashing algorithm -#}\n\n{#- Setting unknown and error keys with default values for the selected hash algorithm -#}\n{%- set hash = datavault4dbt.hash_method() -%}\n{%- set hash_dtype = var('datavault4dbt.hash_datatype', 'STRING') -%}\n{%- set hash_default_values = fromjson(datavault4dbt.hash_default_values(hash_function=hash,hash_datatype=hash_dtype)) -%}\n{%- set hash_alg = hash_default_values['hash_alg'] -%}\n{%- set unknown_key = hash_default_values['unknown_key'] -%}\n{%- set error_key = hash_default_values['error_key'] -%}\n\n{# Select timestamp and format variables #}\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{# Setting the error/unknown value for the record source  for the ghost records#}\n{% set error_value_rsrc = var('datavault4dbt.default_error_rsrc', 'ERROR') %}\n{% set unknown_value_rsrc = var('datavault4dbt.default_unknown_rsrc', 'SYSTEM') %}\n\n{# Setting the rsrc default datatype and length #}\n{% set rsrc_default_dtype = var('datavault4dbt.rsrc_default_dtype', 'STRING') %}\n\nWITH\n\n{# Selecting everything that we need from the source relation. #}\nsource_data AS (\n    SELECT\n\n    {{- \"\\n\\n    \" ~ datavault4dbt.print_list(datavault4dbt.escape_column_names(all_source_columns)) if all_source_columns else \" *\" }}\n\n  FROM {{ source_relation }}\n\n  {% if is_incremental() %}\n  WHERE {{ ldts }} > (SELECT max({{ load_datetime_col_name}}) \n                      FROM {{ this }} \n                      WHERE {{ load_datetime_col_name}} != {{ datavault4dbt.string_to_timestamp(timestamp_format , end_of_all_times) }} )\n  {%- endif -%}\n\n  {% set last_cte = \"source_data\" -%}\n),\n\n\n{% set alias_columns = [load_datetime_col_name, record_source_col_name] %}\n\n{# Selecting all columns from the source data, renaming load date and record source to global aliases #}\nldts_rsrc_data AS (\n\n  SELECT\n    {{ ldts }} AS {{ load_datetime_col_name}},\n    CAST( {{ rsrc }} as {{ rsrc_default_dtype }} ) AS {{ record_source_col_name }}\n    {%- if datavault4dbt.is_something(sequence) %},\n      {{ sequence }} AS edwSequence\n      {%- set alias_columns = alias_columns + ['edwSequence'] -%}\n    {% endif -%}\n\n    {%- if source_columns_to_select is not none and source_columns_to_select | length > 0 %},\n      {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(source_columns_to_select)) }}\n    {% endif -%}\n    {{\"\\n\"}}\n  FROM {{ last_cte }}\n\n  {%- set last_cte = \"ldts_rsrc_data\" -%}\n  {%- set final_columns_to_select = alias_columns + final_columns_to_select  %}\n  {%- set final_columns_to_select = datavault4dbt.process_columns_to_select(final_columns_to_select, derived_column_names) | list -%}\n  \n  {%- set columns_without_excluded_columns_tmp = [] -%}\n  {%- for column in columns_without_excluded_columns -%}\n    {%- if column.name not in derived_column_names -%}\n      {%- do columns_without_excluded_columns_tmp.append(column) -%}\n    {%- endif -%}\n  {%- endfor -%}\n  {%- set columns_without_excluded_columns = columns_without_excluded_columns_tmp |list -%}\n),\n\n{%- if datavault4dbt.is_something(missing_columns) %}\n\n{# Filling missing columns with NULL values for schema changes #}\nmissing_columns AS (\n\n  SELECT\n\n  {% if final_columns_to_select | length > 0 -%}\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},\n  {%- endif %}\n  {%- for col, dtype in missing_columns.items() %}\n    CAST(NULL as {{ dtype }}) as {{ col }}{% if not loop.last %},{% endif -%}\n\n  {% endfor %}\n\n  FROM {{ last_cte }}\n  {%- set last_cte = \"missing_columns\" -%}\n  {%- set final_columns_to_select = final_columns_to_select + missing_column_names %}\n),\n{%- endif -%}\n\n{%- if datavault4dbt.is_something(prejoined_columns) %}\n{# Prejoining Business Keys of other source objects for Link purposes #}\nprejoined_columns AS (\n\n  SELECT\n  {% if final_columns_to_select | length > 0 -%}\n    {{ datavault4dbt.print_list(datavault4dbt.prefix(columns=datavault4dbt.escape_column_names(final_columns_to_select), prefix_str='lcte').split(',')) }}\n  {% endif %}\n  {%- for col, vals in prejoined_columns.items() -%}\n    ,pj_{{loop.index}}.{{ vals['bk'] }} AS {{ col }}\n  {% endfor -%}\n\n  FROM {{ last_cte }} lcte\n\n  {% for col, vals in prejoined_columns.items() %}\n\n    {%- if 'src_name' in vals.keys() or 'src_table' in vals.keys() -%}\n      {%- set relation = source(vals['src_name']|string, vals['src_table']) -%}\n    {%- elif 'ref_model' in vals.keys() -%}\n      {%- set relation = ref(vals['ref_model']) -%}\n    {%- else -%}\n      {%- set error_message -%}\n      Prejoin error: Invalid target entity definition. Allowed are: \n      e.g.\n      [REF STYLE]\n      extracted_column_alias:\n        ref_model: model_name\n        bk: extracted_column_name\n        this_column_name: join_columns_in_this_model\n        ref_column_name: join_columns_in_ref_model\n      OR\n      [SOURCES STYLE]\n      extracted_column_alias:\n        src_name: name_of_ref_source\n        src_table: name_of_ref_table\n        bk: extracted_column_name\n        this_column_name: join_columns_in_this_model\n        ref_column_name: join_columns_in_ref_model\n\n      Got: \n      {{ col }}: {{ vals }}\n      {%- endset -%}\n\n    {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n\n{# This sets a default value for the operator that connects multiple joining conditions. Only when it is not set by user. #}\n    {%- if 'operator' not in vals.keys() -%}\n      {%- set operator = 'AND' -%}\n    {%- else -%}\n      {%- set operator = vals['operator'] -%}\n    {%- endif -%}\n\n    {%- set prejoin_alias = 'pj_' + loop.index|string -%}\n\n    left join {{ relation }} as {{ prejoin_alias }} \n      on {{ datavault4dbt.multikey(columns=vals['this_column_name'], prefix=['lcte', prejoin_alias], condition='=', operator=operator, right_columns=vals['ref_column_name']) }}\n\n  {% endfor %}\n\n  {% set last_cte = \"prejoined_columns\" -%}\n  {%- set final_columns_to_select = final_columns_to_select + prejoined_column_names %}\n),\n{%- endif -%}\n\n\n{%- if datavault4dbt.is_something(derived_columns) %}\n{# Adding derived columns to the selection #}\nderived_columns AS (\n\n  {%- set final_columns_to_select = datavault4dbt.process_columns_to_select(final_columns_to_select, derived_column_names) -%}\n\n  SELECT\n  {% if final_columns_to_select | length > 0 -%}\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},\n  {% endif %}\n  {{ datavault4dbt.derive_columns(columns=derived_columns) | indent(4) }}\n\n  FROM {{ last_cte }}\n  {%- set last_cte = \"derived_columns\" -%}\n  {%- set final_columns_to_select = final_columns_to_select + derived_column_names %}\n),\n{%- endif -%}\n\n{%- if datavault4dbt.is_something(hashed_columns) and hashed_columns is mapping %}\n{# Generating Hashed Columns (hashkeys and hashdiffs for Hubs/Links/Satellites) #}\n{% if datavault4dbt.is_something(multi_active_config) %}\n\n{%- set tmp_ns = namespace(main_hashkey_dict={}, remaining_hashed_columns={}, hashdiff_names=[]) -%}\n\n{%- for column in hashed_columns.keys() -%}\n  {%- if column == multi_active_config['main_hashkey_column'] and not hashed_columns[column].is_hashdiff -%}\n    {%- do tmp_ns.main_hashkey_dict.update({column: hashed_columns[column]}) -%}\n  {% elif column != multi_active_config['main_hashkey_column'] and not hashed_columns[column].is_hashdiff -%}\n    {%- do tmp_ns.remaining_hashed_columns.update({column: hashed_columns[column]}) -%}\n  {%- elif hashed_columns[column].is_hashdiff -%}\n    {%- do tmp_ns.hashdiff_names.append(column) -%}\n  {%- endif -%}\n{%- endfor -%}\n\nmain_hashkey_generation AS (\n\n  SELECT \n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},\n    {% set processed_hash_columns = datavault4dbt.process_hash_column_excludes(tmp_ns.main_hashkey_dict) -%}\n      {{- datavault4dbt.hash_columns(columns=processed_hash_columns) | indent(4) }}\n  FROM {{ last_cte }}\n\n),\n\n{# Hash calculation for multi-active source data. #}\nma_hashdiff_prep AS (\n\n    SELECT\n      \n      {% set processed_hash_columns = datavault4dbt.process_hash_column_excludes(hashed_columns) -%}\n      \n      {# Generates only all hashdiffs. #}\n      {{- datavault4dbt.hash_columns(columns=processed_hash_columns, multi_active_key=multi_active_config['multi_active_key'], main_hashkey_column=multi_active_config['main_hashkey_column']) | indent(4) }},\n      {{ ldts_alias }}\n\n    FROM {{ last_cte }}\n    GROUP BY {{ multi_active_config['main_hashkey_column'] }}, {{ ldts_alias }}\n\n),\n\nhashed_columns AS (\n\n    SELECT \n\n      {{ datavault4dbt.alias_all(columns=final_columns_to_select, prefix='main_hashkey_generation') }},                             {# Everything from last_cte before hashed_columns. #}\n      {% set processed_remaining_hash_columns = datavault4dbt.process_hash_column_excludes(tmp_ns.remaining_hashed_columns) -%}   \n      {# Generates only all remaining hashkeys, that are no hashdiffs #}\n      \n      {%- if datavault4dbt.is_something(processed_remaining_hash_columns) %}\n      {{- datavault4dbt.hash_columns(columns=processed_remaining_hash_columns) | indent(4) }},                                {# All remaining hashed_columns get calculated. #}\n      {% endif -%}\n\n      {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(tmp_ns.hashdiff_names)) }},                                   {# All MA Hashdiffs are selected. #}\n      main_hashkey_generation.{{ multi_active_config['main_hashkey_column'] }}                                                                       {# Main Hashkey selected. #}\n\n    FROM main_hashkey_generation\n    LEFT JOIN ma_hashdiff_prep \n      ON main_hashkey_generation.{{ multi_active_config['main_hashkey_column'] }} = ma_hashdiff_prep.{{ multi_active_config['main_hashkey_column'] }} \n      AND main_hashkey_generation.{{ ldts_alias }} = ma_hashdiff_prep.{{ ldts_alias }}\n\n    {%- set last_cte = \"hashed_columns\" -%}\n    {%- set final_columns_to_select = final_columns_to_select + hashed_column_names %}\n\n),\n\n{% else %}\n\n{# Hash calculation for single-active source data. #}\nhashed_columns AS (\n\n    SELECT\n\n    {% if final_columns_to_select | length > 0 -%}\n      {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},\n    {% endif %}\n\n    {%- set processed_hash_columns = datavault4dbt.process_hash_column_excludes(hashed_columns) -%}\n    {{ datavault4dbt.hash_columns(columns=processed_hash_columns) | indent(4) }}\n\n    FROM {{ last_cte }}\n    {%- set last_cte = \"hashed_columns\" -%}\n    {%- set final_columns_to_select = final_columns_to_select + hashed_column_names %}\n  \n),\n\n{%- endif -%}\n{%- endif -%}\n\n{# Creating Ghost Record for unknown case, based on datatype #}\nunknown_values AS (\n\n    SELECT\n\n    {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }} as {{ load_datetime_col_name }},\n    '{{ unknown_value_rsrc }}' as {{ record_source_col_name }}\n\n    {%- if columns_without_excluded_columns is defined and columns_without_excluded_columns| length > 0 -%},\n    {# Generating Ghost Records for all source columns, except the ldts, rsrc & edwSequence column #}\n      {%- for column in columns_without_excluded_columns %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=column.name, datatype=column.dtype, ghost_record_type='unknown') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(missing_columns) -%},\n    {# Additionally generating ghost record for missing columns #}\n      {%- for col, dtype in missing_columns.items() %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=col, datatype=dtype, ghost_record_type='unknown') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(prejoined_columns) -%},\n    {# Additionally generating ghost records for the prejoined attributes#}\n      {% for col, vals in prejoined_columns.items() %}\n\n        {%- if 'src_name' in vals.keys() or 'src_table' in vals.keys() -%}\n          {%- set relation = source(vals['src_name']|string, vals['src_table']) -%}\n        {%- elif 'ref_model' in vals.keys() -%}\n          {%- set relation = ref(vals['ref_model']) -%}\n        {%- endif -%}\n\n        {%- set pj_relation_columns = adapter.get_columns_in_relation( relation ) -%}\n        {{ log('pj_relation_columns: ' ~ pj_relation_columns, false ) }}\n\n          {% for column in pj_relation_columns -%}\n\n            {% if column.name|lower == vals['bk']|lower -%}\n              {{ log('column found? yes, for column :' ~ column.name , false) }}\n              {{ datavault4dbt.ghost_record_per_datatype(column_name=column.name, datatype=column.dtype, ghost_record_type='unknown', alias=col) }}\n            {%- endif -%}\n\n          {%- endfor -%}\n          {%- if not loop.last %},{% endif %}\n        {% endfor -%}\n    {%- endif %}\n\n    {%- if datavault4dbt.is_something(derived_columns) -%},\n    {# Additionally generating Ghost Records for Derived Columns #}\n      {%- for column_name, properties in derived_columns_with_datatypes_DICT.items() %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=column_name, datatype=properties.datatype, ghost_record_type='unknown') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(processed_hash_columns) -%},\n\n      {%- for hash_column in processed_hash_columns %}\n        CAST({{ datavault4dbt.as_constant(column_str=unknown_key) }} as {{ hash_dtype }}) as {{ hash_column }}\n        {%- if not loop.last %},{% endif %}\n      {%- endfor -%}\n\n    {%- endif -%}\n    {{-\"\\n\"-}}\n),\n\n{# Creating Ghost Record for error case, based on datatype #}\nerror_values AS (\n\n    SELECT\n\n    {{ datavault4dbt.string_to_timestamp(timestamp_format , end_of_all_times) }} as {{ load_datetime_col_name }},\n    '{{ error_value_rsrc }}' as {{ record_source_col_name }}\n\n    {%- if columns_without_excluded_columns is defined and columns_without_excluded_columns| length > 0 -%},\n    {# Generating Ghost Records for Source Columns #}\n      {%- for column in columns_without_excluded_columns %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=column.name, datatype=column.dtype, ghost_record_type='error') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(missing_columns) -%},\n    {# Additionally generating ghost record for Missing columns #}\n      {%- for col, dtype in missing_columns.items() %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=col, datatype=dtype, ghost_record_type='error') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(prejoined_columns) -%},\n    {# Additionally generating ghost records for the prejoined attributes #}\n      {%- for col, vals in prejoined_columns.items() %}\n\n        {%- if 'src_name' in vals.keys() or 'src_table' in vals.keys() -%}\n          {%- set relation = source(vals['src_name']|string, vals['src_table']) -%}\n        {%- elif 'ref_model' in vals.keys() -%}\n          {%- set relation = ref(vals['ref_model']) -%}\n        {%- endif -%}\n\n        {%- set pj_relation_columns = adapter.get_columns_in_relation( relation ) -%}\n\n        {% for column in pj_relation_columns -%}\n          {% if column.name|lower == vals['bk']|lower -%}\n            {{ datavault4dbt.ghost_record_per_datatype(column_name=column.name, datatype=column.dtype, ghost_record_type='error', alias=col) -}}\n          {%- endif -%}\n        {%- endfor -%}\n          {%- if not loop.last -%},{%- endif %}\n      {% endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(derived_columns) %},\n    {# Additionally generating Ghost Records for Derived Columns #}\n      {%- for column_name, properties in derived_columns_with_datatypes_DICT.items() %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=column_name, datatype=properties.datatype, ghost_record_type='error') }}\n        {%- if not loop.last %},{% endif %}\n      {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(processed_hash_columns) -%},\n\n      {%- for hash_column in processed_hash_columns %}\n        CAST({{ datavault4dbt.as_constant(column_str=error_key) }} as {{ hash_dtype }}) as {{ hash_column }}\n        {%- if not loop.last %},{% endif %}\n      {%- endfor -%}\n\n    {%- endif -%}\n    {{- \"\\n\" -}}\n),\n\n{# Combining all previous ghost record calculations to two rows with the same width as regular entries #}\nghost_records AS (\n    SELECT * FROM unknown_values\n    UNION ALL\n    SELECT * FROM error_values\n),\n\n{%- if not include_source_columns -%}\n  {% set final_columns_to_select = datavault4dbt.process_columns_to_select(columns_list=final_columns_to_select, exclude_columns_list=source_columns_to_select) %}\n{%- endif -%}\n\n{# Combining the two ghost records with the regular data #}\ncolumns_to_select AS (\n\n    SELECT\n\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }}\n\n    FROM {{ last_cte }}\n\n    UNION ALL\n    \n    SELECT\n\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }}\n\n    FROM ghost_records\n)\n\nSELECT * FROM columns_to_select\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.source_columns", "macro.datavault4dbt.is_attribute", "macro.datavault4dbt.is_something", "macro.datavault4dbt.as_constant", "macro.datavault4dbt.extract_column_names", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.extract_input_columns", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.is_list", "macro.datavault4dbt.derived_columns_datatypes", "macro.datavault4dbt.hash_method", "macro.datavault4dbt.hash_default_values", "macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.print_list", "macro.datavault4dbt.escape_column_names", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.prefix", "macro.datavault4dbt.multikey", "macro.datavault4dbt.derive_columns", "macro.datavault4dbt.process_hash_column_excludes", "macro.datavault4dbt.hash_columns", "macro.datavault4dbt.alias_all", "macro.datavault4dbt.ghost_record_per_datatype"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.2916522, "supported_languages": null}, "macro.datavault4dbt.postgres__stage": {"name": "postgres__stage", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/staging/postgres/stage.sql", "original_file_path": "macros/staging/postgres/stage.sql", "unique_id": "macro.datavault4dbt.postgres__stage", "macro_sql": "\n\n{%- macro postgres__stage(include_source_columns,\n                ldts,\n                rsrc,\n                source_model,\n                hashed_columns,\n                derived_columns,\n                sequence,\n                prejoined_columns,\n                missing_columns,\n                multi_active_config) -%}\n\n{% if (source_model is none) and execute %}\n\n    {%- set error_message -%}\n    Staging error: Missing source_model configuration. A source model name must be provided.\n    e.g.\n    [REF STYLE]\n    source_model: model_name\n    OR\n    [SOURCES STYLE]\n    source_model:\n        source_name: source_table_name\n    {%- endset -%}\n\n    {{- exceptions.raise_compiler_error(error_message) -}}\n{%- endif -%}\n\n{{ log('source_model: ' ~ source_model, false )}}\n\n{#- Check for source format or ref format and create relation object from source_model -#}\n{% if source_model is mapping and source_model is not none -%}\n\n    {%- set source_name = source_model | first -%}\n    {%- set source_table_name = source_model[source_name] -%}\n\n    {%- set source_relation = source(source_name, source_table_name) -%}\n    {%- set all_source_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n\n{%- elif source_model is not mapping and source_model is not none -%}\n\n    {{ log('source_model is not mapping and not none: ' ~ source_model, false) }}\n\n    {%- set source_relation = ref(source_model) -%}\n    {%- set all_source_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n{%- else -%}\n    {%- set all_source_columns = [] -%}\n{%- endif -%}\n\n{{ log('source_relation: ' ~ source_relation, false) }}\n\n{# Setting the column name for load date timestamp and record source to the alias coming from the attributes #}\n{%- set ldts_alias = var('datavault4dbt.ldts_alias', 'ldts') -%}\n{%- set rsrc_alias = var('datavault4dbt.rsrc_alias', 'rsrc') -%}\n{%- set copy_input_columns = var('datavault4dbt.copy_rsrc_ldts_input_columns', false) -%}\n{%- set load_datetime_col_name = ldts_alias -%}\n{%- set record_source_col_name = rsrc_alias -%}\n\n{%- set ldts_rsrc_input_column_names = [] -%}\n{%- if datavault4dbt.is_attribute(ldts) -%}\n  {%- if not copy_input_columns -%}\n      {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [ldts]  -%}\n  {%- else -%}\n    \n    {%- if ldts|lower == ldts_alias|lower -%}\n      {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [ldts]  -%}\n    {%- endif -%}\n\n  {%- endif %}\n\n{%- endif -%}\n\n{%- if datavault4dbt.is_attribute(rsrc) -%}\n\n  {%- if not copy_input_columns -%}\n    {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [rsrc] -%}\n  {%- else -%}\n  \n    {%- if rsrc|lower == rsrc_alias|lower -%}\n      {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [rsrc] -%}\n    {%- endif -%}\n\n  {%- endif -%}\n\n{%- endif %}\n\n{%- if datavault4dbt.is_something(sequence) -%}\n  {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [sequence] -%}\n{%- endif -%}\n\n{%- set ldts = datavault4dbt.as_constant(ldts) -%}\n{%- set rsrc = datavault4dbt.as_constant(rsrc) -%}\n\n{# Getting the column names for all additional columns #}\n{%- set derived_column_names = datavault4dbt.extract_column_names(derived_columns) -%}\n{%- set hashed_column_names = datavault4dbt.extract_column_names(hashed_columns) -%}\n{%- set prejoined_column_names = datavault4dbt.extract_column_names(prejoined_columns) -%}\n{%- set missing_column_names = datavault4dbt.extract_column_names(missing_columns) -%}\n{%- set exclude_column_names = hashed_column_names + prejoined_column_names + missing_column_names + ldts_rsrc_input_column_names %}\n{%- set source_and_derived_column_names = (all_source_columns + derived_column_names) | unique | list -%}\n{%- set all_columns = adapter.get_columns_in_relation( source_relation ) -%}\n\n{%- set columns_without_excluded_columns = [] -%}\n{%- set final_columns_to_select = [] -%}\n\n\n{%- if include_source_columns -%}\n  {%- set source_columns_to_select = datavault4dbt.process_columns_to_select(all_source_columns, exclude_column_names) | list -%}\n\n  {%- for column in all_columns -%}\n\n    {%- if column.name|lower not in exclude_column_names|map('lower') %}\n      {%- do columns_without_excluded_columns.append(column) -%}\n    {%- endif -%}\n\n  {%- endfor -%}\n{%- else -%}\n  \n  {# Include from the source only the input columns needed #}\n  {# Getting the input columns for the additional columns #}\n  {%- set derived_input_columns = datavault4dbt.extract_input_columns(derived_columns) -%}\n  {%- set hashed_input_columns = datavault4dbt.expand_column_list(datavault4dbt.extract_input_columns(hashed_columns)) -%}\n  {%- set hashed_input_columns = datavault4dbt.process_columns_to_select(hashed_input_columns, derived_column_names) -%}    {# Excluding the names of the derived columns. #}\n  {%- set hashed_input_columns = datavault4dbt.process_columns_to_select(hashed_input_columns, prejoined_column_names) -%}  {# Excluding the names of the prejoined columns. #}\n  {%- set hashed_input_columns = datavault4dbt.process_columns_to_select(hashed_input_columns, missing_column_names) -%}  {# Excluding the names of the missing columns. #}\n  {%- set prejoined_input_columns = datavault4dbt.extract_input_columns(prejoined_columns) -%}\n\n  {% if datavault4dbt.is_something(multi_active_config) %}\n\n    {%- if datavault4dbt.is_list(multi_active_config['multi_active_key']) -%}\n\n      {%- set ma_keys = multi_active_config['multi_active_key'] -%}\n\n    {%- else -%}\n\n      {%- set ma_keys = [multi_active_config['multi_active_key']] -%}\n\n    {%- endif -%}\n\n    {%- set only_include_from_source = (derived_input_columns + hashed_input_columns + prejoined_input_columns + ma_keys) | unique | list -%}\n\n  {%- else -%}\n\n    {%- set only_include_from_source = (derived_input_columns + hashed_input_columns + prejoined_input_columns) | unique | list -%}\n\n  {%- endif -%}\n\n  {%- set source_columns_to_select = only_include_from_source -%}\n\n{%- endif-%}\n\n{%- set final_columns_to_select = final_columns_to_select + source_columns_to_select -%}\n{%- set derived_columns_to_select = datavault4dbt.process_columns_to_select(source_and_derived_column_names, hashed_column_names) | unique | list -%}\n\n{%- if datavault4dbt.is_something(derived_columns) %}\n  {#- Getting Data types for derived columns with detection from source relation -#}\n  {%- set derived_columns_with_datatypes = datavault4dbt.derived_columns_datatypes(derived_columns, source_relation) -%}\n  {%- set derived_columns_with_datatypes_DICT = fromjson(derived_columns_with_datatypes) -%}\n{%- endif -%}\n{#- Select hashing algorithm -#}\n\n{#- Setting unknown and error keys with default values for the selected hash algorithm -#}\n{%- set hash = datavault4dbt.hash_method() -%}\n{%- set hash_dtype = var('datavault4dbt.hash_datatype', 'STRING') -%}\n{%- set hash_default_values = fromjson(datavault4dbt.hash_default_values(hash_function=hash,hash_datatype=hash_dtype)) -%}\n{%- set hash_alg = hash_default_values['hash_alg'] -%}\n{%- set unknown_key = hash_default_values['unknown_key'] -%}\n{%- set error_key = hash_default_values['error_key'] -%}\n\n{# Select timestamp and format variables #}\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{# Setting the error/unknown value for the record source  for the ghost records#}\n{% set error_value_rsrc = var('datavault4dbt.default_error_rsrc', 'ERROR') %}\n{% set unknown_value_rsrc = var('datavault4dbt.default_unknown_rsrc', 'SYSTEM') %}\n\n{# Setting the rsrc default datatype and length #}\n{% set rsrc_default_dtype = var('datavault4dbt.rsrc_default_dtype', 'STRING') %}\n\nWITH\n\n{# Selecting everything that we need from the source relation. #}\nsource_data AS (\n    SELECT\n\n    {{- \"\\n\\n    \" ~ datavault4dbt.print_list(datavault4dbt.escape_column_names(all_source_columns)) if all_source_columns else \" *\" }}\n\n  FROM {{ source_relation }}\n\n  {% if is_incremental() %}\n  WHERE {{ ldts }} > (SELECT max({{ load_datetime_col_name}}) \n                      FROM {{ this }} \n                      WHERE {{ load_datetime_col_name}} != {{ datavault4dbt.string_to_timestamp(timestamp_format , end_of_all_times) }} )\n  {%- endif -%}\n\n  {% set last_cte = \"source_data\" -%}\n),\n\n\n{% set alias_columns = [load_datetime_col_name, record_source_col_name] %}\n\n{# Selecting all columns from the source data, renaming load date and record source to global aliases #}\nldts_rsrc_data AS (\n\n  SELECT\n    {{ ldts }} AS {{ load_datetime_col_name}},\n    CAST( {{ rsrc }} as {{ rsrc_default_dtype }} ) AS {{ record_source_col_name }}\n    {%- if datavault4dbt.is_something(sequence) %},\n      {{ sequence }} AS edwSequence\n      {%- set alias_columns = alias_columns + ['edwSequence'] -%}\n    {% endif -%}\n\n    {%- if source_columns_to_select is not none and source_columns_to_select | length > 0 %},\n      {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(source_columns_to_select)) }}\n    {% endif -%}\n    {{\"\\n\"}}\n  FROM {{ last_cte }}\n\n  {%- set last_cte = \"ldts_rsrc_data\" -%}\n  {%- set final_columns_to_select = alias_columns + final_columns_to_select  %}\n  {%- set final_columns_to_select = datavault4dbt.process_columns_to_select(final_columns_to_select, derived_column_names) | list -%}\n  \n  {%- set columns_without_excluded_columns_tmp = [] -%}\n  {%- for column in columns_without_excluded_columns -%}\n    {%- if column.name not in derived_column_names -%}\n      {%- do columns_without_excluded_columns_tmp.append(column) -%}\n    {%- endif -%}\n  {%- endfor -%}\n  {%- set columns_without_excluded_columns = columns_without_excluded_columns_tmp |list -%}\n),\n\n{%- if datavault4dbt.is_something(missing_columns) %}\n\n{# Filling missing columns with NULL values for schema changes #}\nmissing_columns AS (\n\n  SELECT\n\n  {% if final_columns_to_select | length > 0 -%}\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},\n  {%- endif %}\n  {%- for col, dtype in missing_columns.items() %}\n    CAST(NULL as {{ dtype }}) as {{ col }}{% if not loop.last %},{% endif -%}\n\n  {% endfor %}\n\n  FROM {{ last_cte }}\n  {%- set last_cte = \"missing_columns\" -%}\n  {%- set final_columns_to_select = final_columns_to_select + missing_column_names %}\n),\n{%- endif -%}\n\n{%- if datavault4dbt.is_something(prejoined_columns) %}\n{# Prejoining Business Keys of other source objects for Link purposes #}\nprejoined_columns AS (\n\n  SELECT\n  {% if final_columns_to_select | length > 0 -%}\n    {{ datavault4dbt.print_list(datavault4dbt.prefix(columns=datavault4dbt.escape_column_names(final_columns_to_select), prefix_str='lcte').split(',')) }}\n  {% endif %}\n  {%- for col, vals in prejoined_columns.items() -%}\n    ,pj_{{loop.index}}.{{ vals['bk'] }} AS {{ col }}\n  {% endfor -%}\n\n  FROM {{ last_cte }} lcte\n\n  {% for col, vals in prejoined_columns.items() %}\n\n    {%- if 'src_name' in vals.keys() or 'src_table' in vals.keys() -%}\n      {%- set relation = source(vals['src_name']|string, vals['src_table']) -%}\n    {%- elif 'ref_model' in vals.keys() -%}\n      {%- set relation = ref(vals['ref_model']) -%}\n    {%- else -%}\n      {%- set error_message -%}\n      Prejoin error: Invalid target entity definition. Allowed are: \n      e.g.\n      [REF STYLE]\n      extracted_column_alias:\n        ref_model: model_name\n        bk: extracted_column_name\n        this_column_name: join_columns_in_this_model\n        ref_column_name: join_columns_in_ref_model\n      OR\n      [SOURCES STYLE]\n      extracted_column_alias:\n        src_name: name_of_ref_source\n        src_table: name_of_ref_table\n        bk: extracted_column_name\n        this_column_name: join_columns_in_this_model\n        ref_column_name: join_columns_in_ref_model\n\n      Got: \n      {{ col }}: {{ vals }}\n      {%- endset -%}\n\n    {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n\n{# This sets a default value for the operator that connects multiple joining conditions. Only when it is not set by user. #}\n    {%- if 'operator' not in vals.keys() -%}\n      {%- set operator = 'AND' -%}\n    {%- else -%}\n      {%- set operator = vals['operator'] -%}\n    {%- endif -%}\n\n    {%- set prejoin_alias = 'pj_' + loop.index|string -%}\n\n    left join {{ relation }} as {{ prejoin_alias }} \n      on {{ datavault4dbt.multikey(columns=vals['this_column_name'], prefix=['lcte', prejoin_alias], condition='=', operator=operator, right_columns=vals['ref_column_name']) }}\n\n  {% endfor %}\n\n  {% set last_cte = \"prejoined_columns\" -%}\n  {%- set final_columns_to_select = final_columns_to_select + prejoined_column_names %}\n),\n{%- endif -%}\n\n\n{%- if datavault4dbt.is_something(derived_columns) %}\n{# Adding derived columns to the selection #}\nderived_columns AS (\n\n  {%- set final_columns_to_select = datavault4dbt.process_columns_to_select(final_columns_to_select, derived_column_names) -%}\n\n  SELECT\n  {% if final_columns_to_select | length > 0 -%}\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},\n  {% endif %}\n  {{ datavault4dbt.derive_columns(columns=derived_columns) | indent(4) }}\n\n  FROM {{ last_cte }}\n  {%- set last_cte = \"derived_columns\" -%}\n  {%- set final_columns_to_select = final_columns_to_select + derived_column_names %}\n),\n{%- endif -%}\n\n{%- if datavault4dbt.is_something(hashed_columns) and hashed_columns is mapping %}\n{# Generating Hashed Columns (hashkeys and hashdiffs for Hubs/Links/Satellites) #}\n{% if datavault4dbt.is_something(multi_active_config) %}\n\n{%- set tmp_ns = namespace(main_hashkey_dict={}, remaining_hashed_columns={}, hashdiff_names=[]) -%}\n\n{%- for column in hashed_columns.keys() -%}\n  {%- if column == multi_active_config['main_hashkey_column'] and not hashed_columns[column].is_hashdiff -%}\n    {%- do tmp_ns.main_hashkey_dict.update({column: hashed_columns[column]}) -%}\n  {% elif column != multi_active_config['main_hashkey_column'] and not hashed_columns[column].is_hashdiff -%}\n    {%- do tmp_ns.remaining_hashed_columns.update({column: hashed_columns[column]}) -%}\n  {%- elif hashed_columns[column].is_hashdiff -%}\n    {%- do tmp_ns.hashdiff_names.append(column) -%}\n  {%- endif -%}\n{%- endfor -%}\n\nmain_hashkey_generation AS (\n\n  SELECT \n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},\n    {% set processed_hash_columns = datavault4dbt.process_hash_column_excludes(tmp_ns.main_hashkey_dict) -%}\n      {{- datavault4dbt.hash_columns(columns=processed_hash_columns) | indent(4) }}\n  FROM {{ last_cte }}\n\n),\n\n{# Hash calculation for multi-active source data. #}\nma_hashdiff_prep AS (\n\n    SELECT\n      \n      {% set processed_hash_columns = datavault4dbt.process_hash_column_excludes(hashed_columns) -%}\n      \n      {# Generates only all hashdiffs. #}\n      {{- datavault4dbt.hash_columns(columns=processed_hash_columns, multi_active_key=multi_active_config['multi_active_key'], main_hashkey_column=multi_active_config['main_hashkey_column']) | indent(4) }},\n      {{ ldts_alias }}\n\n    FROM {{ last_cte }}\n    GROUP BY {{ multi_active_config['main_hashkey_column'] }}, {{ ldts_alias }}\n\n),\n\nhashed_columns AS (\n\n    SELECT \n\n      {{ datavault4dbt.alias_all(columns=final_columns_to_select, prefix='main_hashkey_generation') }},                             {# Everything from last_cte before hashed_columns. #}\n      {% set processed_remaining_hash_columns = datavault4dbt.process_hash_column_excludes(tmp_ns.remaining_hashed_columns) -%}   \n      {# Generates only all remaining hashkeys, that are no hashdiffs #}\n      \n      {%- if datavault4dbt.is_something(processed_remaining_hash_columns) %}\n      {{- datavault4dbt.hash_columns(columns=processed_remaining_hash_columns) | indent(4) }},                                {# All remaining hashed_columns get calculated. #}\n      {% endif -%}\n\n      {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(tmp_ns.hashdiff_names)) }},                                   {# All MA Hashdiffs are selected. #}\n      main_hashkey_generation.{{ multi_active_config['main_hashkey_column'] }}                                                                       {# Main Hashkey selected. #}\n\n    FROM main_hashkey_generation\n    LEFT JOIN ma_hashdiff_prep \n      ON main_hashkey_generation.{{ multi_active_config['main_hashkey_column'] }} = ma_hashdiff_prep.{{ multi_active_config['main_hashkey_column'] }} \n      AND main_hashkey_generation.{{ ldts_alias }} = ma_hashdiff_prep.{{ ldts_alias }}\n\n    {%- set last_cte = \"hashed_columns\" -%}\n    {%- set final_columns_to_select = final_columns_to_select + hashed_column_names %}\n\n),\n\n{% else %}\n\n{# Hash calculation for single-active source data. #}\nhashed_columns AS (\n\n    SELECT\n\n    {% if final_columns_to_select | length > 0 -%}\n      {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},\n    {% endif %}\n\n    {%- set processed_hash_columns = datavault4dbt.process_hash_column_excludes(hashed_columns) -%}\n    {{ datavault4dbt.hash_columns(columns=processed_hash_columns) | indent(4) }}\n\n    FROM {{ last_cte }}\n    {%- set last_cte = \"hashed_columns\" -%}\n    {%- set final_columns_to_select = final_columns_to_select + hashed_column_names %}\n  \n),\n\n{%- endif -%}\n{%- endif -%}\n\n{# Creating Ghost Record for unknown case, based on datatype #}\nunknown_values AS (\n\n    SELECT\n\n    {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }} as {{ load_datetime_col_name }},\n    '{{ unknown_value_rsrc }}' as {{ record_source_col_name }}\n\n    {%- if columns_without_excluded_columns is defined and columns_without_excluded_columns| length > 0 -%},\n    {# Generating Ghost Records for all source columns, except the ldts, rsrc & edwSequence column #}\n      {%- for column in columns_without_excluded_columns %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=column.name, datatype=column.dtype, ghost_record_type='unknown') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(missing_columns) -%},\n    {# Additionally generating ghost record for missing columns #}\n      {%- for col, dtype in missing_columns.items() %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=col, datatype=dtype, ghost_record_type='unknown') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(prejoined_columns) -%},\n    {# Additionally generating ghost records for the prejoined attributes#}\n      {% for col, vals in prejoined_columns.items() %}\n\n        {%- if 'src_name' in vals.keys() or 'src_table' in vals.keys() -%}\n          {%- set relation = source(vals['src_name']|string, vals['src_table']) -%}\n        {%- elif 'ref_model' in vals.keys() -%}\n          {%- set relation = ref(vals['ref_model']) -%}\n        {%- endif -%}\n\n        {%- set pj_relation_columns = adapter.get_columns_in_relation( relation ) -%}\n        {{ log('pj_relation_columns: ' ~ pj_relation_columns, false ) }}\n\n          {% for column in pj_relation_columns -%}\n\n            {% if column.name|lower == vals['bk']|lower -%}\n              {{ log('column found? yes, for column :' ~ column.name , false) }}\n              {{ datavault4dbt.ghost_record_per_datatype(column_name=column.name, datatype=column.dtype, ghost_record_type='unknown', alias=col) }}\n            {%- endif -%}\n\n          {%- endfor -%}\n          {%- if not loop.last %},{% endif %}\n        {% endfor -%}\n    {%- endif %}\n\n    {%- if datavault4dbt.is_something(derived_columns) -%},\n    {# Additionally generating Ghost Records for Derived Columns #}\n      {%- for column_name, properties in derived_columns_with_datatypes_DICT.items() %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=column_name, datatype=properties.datatype, ghost_record_type='unknown') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(processed_hash_columns) -%},\n\n      {%- for hash_column in processed_hash_columns %}\n        CAST({{ datavault4dbt.as_constant(column_str=unknown_key) }} as {{ hash_dtype }}) as {{ hash_column }}\n        {%- if not loop.last %},{% endif %}\n      {%- endfor -%}\n\n    {%- endif -%}\n    {{-\"\\n\"-}}\n),\n\n{# Creating Ghost Record for error case, based on datatype #}\nerror_values AS (\n\n    SELECT\n\n    {{ datavault4dbt.string_to_timestamp(timestamp_format , end_of_all_times) }} as {{ load_datetime_col_name }},\n    '{{ error_value_rsrc }}' as {{ record_source_col_name }}\n\n    {%- if columns_without_excluded_columns is defined and columns_without_excluded_columns| length > 0 -%},\n    {# Generating Ghost Records for Source Columns #}\n      {%- for column in columns_without_excluded_columns %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=column.name, datatype=column.dtype, ghost_record_type='error') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(missing_columns) -%},\n    {# Additionally generating ghost record for Missing columns #}\n      {%- for col, dtype in missing_columns.items() %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=col, datatype=dtype, ghost_record_type='error') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(prejoined_columns) -%},\n    {# Additionally generating ghost records for the prejoined attributes #}\n      {%- for col, vals in prejoined_columns.items() %}\n\n        {%- if 'src_name' in vals.keys() or 'src_table' in vals.keys() -%}\n          {%- set relation = source(vals['src_name']|string, vals['src_table']) -%}\n        {%- elif 'ref_model' in vals.keys() -%}\n          {%- set relation = ref(vals['ref_model']) -%}\n        {%- endif -%}\n\n        {%- set pj_relation_columns = adapter.get_columns_in_relation( relation ) -%}\n\n        {% for column in pj_relation_columns -%}\n          {% if column.name|lower == vals['bk']|lower -%}\n            {{ datavault4dbt.ghost_record_per_datatype(column_name=column.name, datatype=column.dtype, ghost_record_type='error', alias=col) -}}\n          {%- endif -%}\n        {%- endfor -%}\n          {%- if not loop.last -%},{%- endif %}\n      {% endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(derived_columns) %},\n    {# Additionally generating Ghost Records for Derived Columns #}\n      {%- for column_name, properties in derived_columns_with_datatypes_DICT.items() %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=column_name, datatype=properties.datatype, ghost_record_type='error') }}\n        {%- if not loop.last %},{% endif %}\n      {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(processed_hash_columns) -%},\n\n      {%- for hash_column in processed_hash_columns %}\n        CAST({{ datavault4dbt.as_constant(column_str=error_key) }} as {{ hash_dtype }}) as {{ hash_column }}\n        {%- if not loop.last %},{% endif %}\n      {%- endfor -%}\n\n    {%- endif -%}\n    {{- \"\\n\" -}}\n),\n\n{# Combining all previous ghost record calculations to two rows with the same width as regular entries #}\nghost_records AS (\n    SELECT * FROM unknown_values\n    UNION ALL\n    SELECT * FROM error_values\n),\n\n{%- if not include_source_columns -%}\n  {% set final_columns_to_select = datavault4dbt.process_columns_to_select(columns_list=final_columns_to_select, exclude_columns_list=source_columns_to_select) %}\n{%- endif -%}\n\n{# Combining the two ghost records with the regular data #}\ncolumns_to_select AS (\n\n    SELECT\n\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }}\n\n    FROM {{ last_cte }}\n\n    UNION ALL\n    \n    SELECT\n\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }}\n\n    FROM ghost_records\n)\n\nSELECT * FROM columns_to_select\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.source_columns", "macro.datavault4dbt.is_attribute", "macro.datavault4dbt.is_something", "macro.datavault4dbt.as_constant", "macro.datavault4dbt.extract_column_names", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.extract_input_columns", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.is_list", "macro.datavault4dbt.derived_columns_datatypes", "macro.datavault4dbt.hash_method", "macro.datavault4dbt.hash_default_values", "macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.print_list", "macro.datavault4dbt.escape_column_names", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.prefix", "macro.datavault4dbt.multikey", "macro.datavault4dbt.derive_columns", "macro.datavault4dbt.process_hash_column_excludes", "macro.datavault4dbt.hash_columns", "macro.datavault4dbt.alias_all", "macro.datavault4dbt.ghost_record_per_datatype"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.30549, "supported_languages": null}, "macro.datavault4dbt.synapse__stage": {"name": "synapse__stage", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/staging/synapse/stage.sql", "original_file_path": "macros/staging/synapse/stage.sql", "unique_id": "macro.datavault4dbt.synapse__stage", "macro_sql": "{%- macro synapse__stage(include_source_columns,\n                ldts,\n                rsrc,\n                source_model,\n                hashed_columns,\n                derived_columns,\n                sequence,\n                prejoined_columns,\n                missing_columns,\n                multi_active_config) -%}\n\n{% if (source_model is none) and execute %}\n\n    {%- set error_message -%}\n    Staging error: Missing source_model configuration. A source model name must be provided.\n    e.g.\n    [REF STYLE]\n    source_model: model_name\n    OR\n    [SOURCES STYLE]\n    source_model:\n        source_name: source_table_name\n    {%- endset -%}\n\n    {{- exceptions.raise_compiler_error(error_message) -}}\n{%- endif -%}\n\n{#- Check for source format or ref format and create relation object from source_model -#}\n{% if source_model is mapping and source_model is not none -%}\n\n    {%- set source_name = source_model | first -%}\n    {%- set source_table_name = source_model[source_name] -%}\n\n    {%- set source_relation = source(source_name, source_table_name) -%}\n    {%- set all_source_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n\n{%- elif source_model is not mapping and source_model is not none -%}\n\n    {%- set source_relation = ref(source_model) -%}\n    {%- set all_source_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n{%- else -%}\n    {%- set all_source_columns = [] -%}\n{%- endif -%}\n\n\n{# Setting the column name for load date timestamp and record source to the alias coming from the attributes #}\n{%- set ldts_alias = var('datavault4dbt.ldts_alias', 'ldts') -%}\n{%- set rsrc_alias = var('datavault4dbt.rsrc_alias', 'rsrc') -%}\n{%- set copy_input_columns = var('datavault4dbt.copy_rsrc_ldts_input_columns', false) -%}\n{%- set load_datetime_col_name = ldts_alias -%}\n{%- set record_source_col_name = rsrc_alias -%}\n\n{%- set ldts_rsrc_input_column_names = [] -%}\n{%- if datavault4dbt.is_attribute(ldts) -%}\n  {%- if not copy_input_columns -%}\n      {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [ldts]  -%}\n  {%- else -%}\n    \n    {%- if ldts|lower == ldts_alias|lower -%}\n      {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [ldts]  -%}\n    {%- endif -%}\n\n  {%- endif %}\n\n{%- endif -%}\n\n{%- if datavault4dbt.is_attribute(rsrc) -%}\n\n  {%- if not copy_input_columns -%}\n    {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [rsrc] -%}\n  {%- else -%}\n  \n    {%- if rsrc|lower == rsrc_alias|lower -%}\n      {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [rsrc] -%}\n    {%- endif -%}\n\n  {%- endif -%}\n\n{%- endif %}\n\n{%- if datavault4dbt.is_something(sequence) -%}\n  {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [sequence] -%}\n{%- endif -%}\n\n{%- set ldts = datavault4dbt.as_constant(ldts) -%}\n{%- set rsrc = datavault4dbt.as_constant(rsrc) -%}\n\n{# Getting the column names for all additional columns #}\n{%- set derived_column_names = datavault4dbt.extract_column_names(derived_columns) -%}\n{%- set hashed_column_names = datavault4dbt.extract_column_names(hashed_columns) -%}\n{%- set prejoined_column_names = datavault4dbt.extract_column_names(prejoined_columns) -%}\n{%- set missing_column_names = datavault4dbt.extract_column_names(missing_columns) -%}\n{%- set exclude_column_names = derived_column_names + hashed_column_names + prejoined_column_names + missing_column_names + ldts_rsrc_input_column_names %}\n{%- set source_and_derived_column_names = (all_source_columns + derived_column_names) | unique | list -%}\n{%- set all_columns = adapter.get_columns_in_relation( source_relation ) -%}\n\n{%- set columns_without_excluded_columns = [] -%}\n{%- set final_columns_to_select = [] -%}\n\n{%- set derived_input_columns = datavault4dbt.extract_input_columns(derived_columns) -%}\n\n{%- if include_source_columns -%}\n  {%- set source_columns_to_select = datavault4dbt.process_columns_to_select(all_source_columns, exclude_column_names) | list -%}\n  {%- set source_columns_to_select = (source_columns_to_select + derived_input_columns) | unique | list -%}\n\n  {%- for column in all_columns -%}\n\n    {%- if column.name|lower not in exclude_column_names|map('lower') %}\n      {%- do columns_without_excluded_columns.append(column) -%}\n    {%- endif -%}\n\n  {%- endfor -%}\n{%- else -%}\n  \n  {# Include from the source only the input columns needed #}\n  {# Getting the input columns for the additional columns #}\n  {%- set hashed_input_columns = datavault4dbt.expand_column_list(datavault4dbt.extract_input_columns(hashed_columns)) -%}\n  {%- set hashed_input_columns = datavault4dbt.process_columns_to_select(hashed_input_columns, derived_column_names) -%}\n  {%- set hashed_input_columns = datavault4dbt.process_columns_to_select(hashed_input_columns, prejoined_column_names) -%}\n  {%- set hashed_input_columns = datavault4dbt.process_columns_to_select(hashed_input_columns, missing_column_names) -%}  {# Excluding the names of the missing columns. #}\n  {%- set prejoined_input_columns = datavault4dbt.extract_input_columns(prejoined_columns) -%}\n   {% if datavault4dbt.is_something(multi_active_config) %}\n\n    {%- if datavault4dbt.is_list(multi_active_config['multi_active_key']) -%}\n\n      {%- set ma_keys = multi_active_config['multi_active_key'] -%}\n\n    {%- else -%}\n\n      {%- set ma_keys = [multi_active_config['multi_active_key']] -%}\n\n    {%- endif -%}\n\n    {%- set only_include_from_source = (derived_input_columns + hashed_input_columns + prejoined_input_columns + ma_keys) | unique | list -%}\n\n  {%- else -%}\n  {%- set only_include_from_source = (derived_input_columns + hashed_input_columns + prejoined_input_columns) | unique | list -%}\n  {%- endif -%}\n  {%- set source_columns_to_select = only_include_from_source -%}\n\n{%- endif-%}\n\n{%- if not var('datavault4dbt.include_derived_column_input_columns', true) -%}\n  {%- set exclude_column_names = exclude_column_names + derived_input_columns -%}\n{%- endif -%}\n\n{%- set final_columns_to_select = final_columns_to_select + source_columns_to_select -%}\n{%- set derived_columns_to_select = datavault4dbt.process_columns_to_select(source_and_derived_column_names, hashed_column_names) | unique | list -%}\n\n{%- if datavault4dbt.is_something(derived_columns) %}\n  {#- Getting Data types for derived columns with detection from source relation -#}\n  {%- set derived_columns_with_datatypes = datavault4dbt.derived_columns_datatypes(derived_columns, source_relation) -%}\n  {%- set derived_columns_with_datatypes_DICT = fromjson(derived_columns_with_datatypes) -%}\n{%- endif -%}\n{#- Select hashing algorithm -#}\n\n{#- Setting unknown and error keys with default values for the selected hash algorithm -#}\n{%- set hash = datavault4dbt.hash_method() -%}\n{{ log('hash_function: ' ~ hash, false)}}\n{%- set hash_dtype = var('datavault4dbt.hash_datatype', 'STRING') -%}\n{%- set hash_default_values = fromjson(datavault4dbt.hash_default_values(hash_function=hash,hash_datatype=hash_dtype)) -%}\n{%- set hash_alg = hash_default_values['hash_alg'] -%}\n{%- set unknown_key = hash_default_values['unknown_key'] -%}\n{%- set error_key = hash_default_values['error_key'] -%}\n\n{# Select timestamp and format variables #}\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{# Setting the error/unknown value for the record source  for the ghost records#}\n{% set error_value_rsrc = var('datavault4dbt.default_error_rsrc', 'ERROR') %}\n{% set unknown_value_rsrc = var('datavault4dbt.default_unknown_rsrc', 'SYSTEM') %}\n\n{# Setting the rsrc default datatype and length #}\n{% set rsrc_default_dtype = var('datavault4dbt.rsrc_default_dtype', 'STRING') %}\n\nWITH\n\n{# Selecting everything that we need from the source relation. #}\nsource_data AS (\n    SELECT \n    {% if var('datavault4dbt.limit_rows', false) %}\n    {{ datavault4dbt.limit_rows() }}\n    {% endif -%}\n\n    {{- \"\\n\\n    \" ~ datavault4dbt.print_list(datavault4dbt.escape_column_names(all_source_columns)) if all_source_columns else \" *\" }}\n\n  FROM {{ source_relation }}\n\n  {% if is_incremental() %}\n  WHERE {{ ldts }} > (SELECT max({{ load_datetime_col_name}}) \n                      FROM {{ this }} \n                      WHERE {{ load_datetime_col_name}} <> {{ datavault4dbt.string_to_timestamp(timestamp_format , end_of_all_times) }} )\n  {%- endif -%}\n\n  {% set last_cte = \"source_data\" -%}\n),\n\n\n{% set alias_columns = [load_datetime_col_name, record_source_col_name] %}\n\n{# Selecting all columns from the source data, renaming load date and record source to global aliases #}\nldts_rsrc_data AS (\n\n  SELECT\n    {{ ldts }} AS {{ load_datetime_col_name}},\n    CAST( {{ rsrc }} as {{ rsrc_default_dtype }} ) AS {{ record_source_col_name }}\n    {%- if datavault4dbt.is_something(sequence) %},\n      {{ sequence }} AS edwSequence\n      {%- set alias_columns = alias_columns + ['edwSequence'] -%}\n    {% endif -%}\n\n    {%- if source_columns_to_select is not none and source_columns_to_select | length > 0 %},\n      {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(source_columns_to_select)) }}\n    {% endif -%}\n    {{\"\\n\"}}\n  FROM {{ last_cte }}\n\n  {%- set last_cte = \"ldts_rsrc_data\" -%}\n  {%- set final_columns_to_select = alias_columns + final_columns_to_select  %}\n  {%- set final_columns_to_select = datavault4dbt.process_columns_to_select(final_columns_to_select, derived_column_names) | list -%}\n  \n  {%- set columns_without_excluded_columns_tmp = [] -%}\n  {%- for column in columns_without_excluded_columns -%}\n    {%- if column.name not in exclude_column_names -%}\n      {%- do columns_without_excluded_columns_tmp.append(column) -%}\n    {%- endif -%}\n  {%- endfor -%}\n  {%- set columns_without_excluded_columns = columns_without_excluded_columns_tmp |list -%}\n),\n\n{%- if datavault4dbt.is_something(missing_columns) %}\n\n{# Filling missing columns with NULL values for schema changes #}\nmissing_columns AS (\n\n  SELECT\n\n  {% if final_columns_to_select | length > 0 -%}\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},\n  {%- endif %}\n  {%- for col, dtype in missing_columns.items() %}\n    CAST(NULL as {{ dtype }}) as {{ col }}{% if not loop.last %},{% endif -%}\n\n  {% endfor %}\n\n  FROM {{ last_cte }}\n  {%- set last_cte = \"missing_columns\" -%}\n  {%- set final_columns_to_select = final_columns_to_select + missing_column_names %}\n),\n{%- endif -%}\n\n{%- if datavault4dbt.is_something(prejoined_columns) %}\n\n{%- set final_columns_to_select = (final_columns_to_select + derived_input_columns) | unique | list -%}\n{# Prejoining Business Keys of other source objects for Link purposes #}\nprejoined_columns AS (\n\n  SELECT\n  {% if final_columns_to_select | length > 0 -%}\n    {{ datavault4dbt.print_list(datavault4dbt.prefix(columns=datavault4dbt.escape_column_names(final_columns_to_select), prefix_str='lcte').split(',')) }}\n  {% endif %}\n  {%- for col, vals in prejoined_columns.items() -%}\n    ,pj_{{loop.index}}.{{ vals['bk'] }} AS {{ col }}\n  {% endfor -%}\n\n  FROM {{ last_cte }} lcte\n\n  {% for col, vals in prejoined_columns.items() %}\n\n    {%- if 'src_name' in vals.keys() or 'src_table' in vals.keys() -%}\n      {%- set relation = source(vals['src_name']|string, vals['src_table']) -%}\n    {%- elif 'ref_model' in vals.keys() -%}\n      {%- set relation = ref(vals['ref_model']) -%}\n    {%- else -%}\n      {%- set error_message -%}\n      Prejoin error: Invalid target entity definition. Allowed are: \n      e.g.\n      [REF STYLE]\n      extracted_column_alias:\n        ref_model: model_name\n        bk: extracted_column_name\n        this_column_name: join_columns_in_this_model\n        ref_column_name: join_columns_in_ref_model\n      OR\n      [SOURCES STYLE]\n      extracted_column_alias:\n        src_name: name_of_ref_source\n        src_table: name_of_ref_table\n        bk: extracted_column_name\n        this_column_name: join_columns_in_this_model\n        ref_column_name: join_columns_in_ref_model\n\n      Got: \n      {{ col }}: {{ vals }}\n      {%- endset -%}\n\n    {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n\n{# This sets a default value for the operator that connects multiple joining conditions. Only when it is not set by user. #}\n    {%- if 'operator' not in vals.keys() -%}\n      {%- set operator = 'AND' -%}\n    {%- else -%}\n      {%- set operator = vals['operator'] -%}\n    {%- endif -%}\n\n    {%- set prejoin_alias = 'pj_' + loop.index|string -%}\n\n    left join {{ relation }} as {{ prejoin_alias }} \n      on {{ datavault4dbt.multikey(columns=vals['this_column_name'], prefix=['lcte', prejoin_alias], condition='=', operator=operator, right_columns=vals['ref_column_name']) }}\n\n  {% endfor %}\n\n  {% set last_cte = \"prejoined_columns\" -%}\n  {%- set final_columns_to_select = final_columns_to_select + prejoined_column_names %}\n),\n{%- endif -%}\n\n\n{%- if datavault4dbt.is_something(derived_columns) %}\n{# Adding derived columns to the selection #}\nderived_columns AS (\n\n  {%- if var('datavault4dbt.include_derived_column_input_columns', true) -%}\n    {%- set exluded_derived_columns = derived_column_names -%}\n  {%- else -%}\n    {%- set exluded_derived_columns = derived_input_columns + derived_column_names -%}\n  {%- endif -%}\n\n  {%- set final_columns_to_select = datavault4dbt.process_columns_to_select(final_columns_to_select, exluded_derived_columns) -%}\n\n  SELECT\n  {% if final_columns_to_select | length > 0 -%}\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},\n  {% endif %}\n  {{ datavault4dbt.derive_columns(columns=derived_columns) | indent(4) }}\n\n  FROM {{ last_cte }}\n  {%- set last_cte = \"derived_columns\" -%}\n  {%- set final_columns_to_select = final_columns_to_select + derived_column_names %}\n),\n{%- endif -%}\n\n{%- if datavault4dbt.is_something(hashed_columns) and hashed_columns is mapping %}\n{# Generating Hashed Columns (hashkeys and hashdiffs for Hubs/Links/Satellites) #}\n{% if datavault4dbt.is_something(multi_active_config) %}\n{%- set tmp_ns = namespace(main_hashkey_dict={}, remaining_hashed_columns={}, hashdiffs={}, hashdiff_names=[]) -%}\n\n  {%- for column in hashed_columns.keys() -%}\n    {%- if column == multi_active_config['main_hashkey_column'] and not hashed_columns[column].is_hashdiff -%}\n      {%- do tmp_ns.main_hashkey_dict.update({column: hashed_columns[column]}) -%}\n    {% elif column != multi_active_config['main_hashkey_column'] and not hashed_columns[column].is_hashdiff -%}\n      {%- do tmp_ns.remaining_hashed_columns.update({column: hashed_columns[column]}) -%}\n    {%- elif hashed_columns[column].is_hashdiff -%}\n      {%- do tmp_ns.hashdiffs.update({column: hashed_columns[column]}) -%}\n      {%- do tmp_ns.hashdiff_names.append(column) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\nmain_hashkey_generation AS (\n\n  SELECT \n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},\n    {% set processed_hash_columns = datavault4dbt.process_hash_column_excludes(tmp_ns.main_hashkey_dict) -%}\n      {{- datavault4dbt.hash_columns(columns=processed_hash_columns) | indent(4) }}\n  FROM {{ last_cte }}\n  {%- set last_cte = \"main_hashkey_generation\" -%}\n\n),\n\n{# Hash calculation for multi-active source data. #}\nma_hashdiff_prep AS (\n\n    SELECT\n      \n      {% set processed_hash_columns = datavault4dbt.process_hash_column_excludes(tmp_ns.hashdiffs) -%}\n      \n      {# Generates only all hashdiffs. #}\n      {{- datavault4dbt.hash_columns(columns=processed_hash_columns, multi_active_key=multi_active_config['multi_active_key'], main_hashkey_column=multi_active_config['main_hashkey_column']) | indent(4) }},\n      {{ multi_active_config['main_hashkey_column'] }},\n      {{ ldts_alias }}\n\n    FROM {{ last_cte }}\n    GROUP BY {{ multi_active_config['main_hashkey_column'] }}, {{ ldts_alias }}\n\n),\nhashed_columns AS (\n\n    SELECT\n\n      {{ datavault4dbt.alias_all(columns=final_columns_to_select, prefix='main_hashkey_generation') }},                             {# Everything from last_cte before hashed_columns. #}\n      {% set processed_remaining_hash_columns = datavault4dbt.process_hash_column_excludes(tmp_ns.remaining_hashed_columns) -%}   \n      {# Generates only all remaining hashkeys, that are no hashdiffs #}\n      \n      {%- if datavault4dbt.is_something(processed_remaining_hash_columns) %}\n      {{- datavault4dbt.hash_columns(columns=processed_remaining_hash_columns) | indent(4) }},                                {# All remaining hashed_columns get calculated. #}\n      {% endif -%}\n\n     {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(tmp_ns.hashdiff_names)) }},                                   {# All MA Hashdiffs are selected. #}\n      main_hashkey_generation.{{ multi_active_config['main_hashkey_column'] }}                                                                       {# Main Hashkey selected. #}\n\n    FROM main_hashkey_generation\n    LEFT JOIN ma_hashdiff_prep \n      ON main_hashkey_generation.{{ multi_active_config['main_hashkey_column'] }} = ma_hashdiff_prep.{{ multi_active_config['main_hashkey_column'] }} \n      AND main_hashkey_generation.{{ ldts_alias }} = ma_hashdiff_prep.{{ ldts_alias }}\n\n    {%- set last_cte = \"hashed_columns\" -%}\n    {%- set final_columns_to_select = final_columns_to_select + hashed_column_names %}\n\n),\n\n{% else %}\n\n{# Hash calculation for single-active source data. #}\nhashed_columns AS (\n\n    SELECT\n\n    {% if final_columns_to_select | length > 0 -%}\n      {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},\n    {% endif %}\n\n    {%- set processed_hash_columns = datavault4dbt.process_hash_column_excludes(hashed_columns) -%}\n    {{ datavault4dbt.hash_columns(columns=processed_hash_columns) | indent(4) }}\n\n    FROM {{ last_cte }}\n    {%- set last_cte = \"hashed_columns\" -%}\n    {%- set final_columns_to_select = final_columns_to_select + hashed_column_names %}\n  \n),\n\n{%- endif -%}\n{% set processed_hash_columns = datavault4dbt.process_hash_column_excludes(hashed_columns) -%}\n{%- endif -%}\n\n{% if not is_incremental() %}\n{# Creating Ghost Record for unknown case, based on datatype #}\nunknown_values AS (\n  \n    SELECT\n\n    {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }} as {{ load_datetime_col_name }},\n    '{{ unknown_value_rsrc }}' as {{ record_source_col_name }}\n\n    {%- if columns_without_excluded_columns is defined and columns_without_excluded_columns| length > 0 -%},\n    {# Generating Ghost Records for all source columns, except the ldts, rsrc & edwSequence column #}\n      {%- for column in columns_without_excluded_columns %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=column.name, datatype=column.dtype, ghost_record_type='unknown', col_size=column.char_size) }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(missing_columns) -%},\n    {# Additionally generating ghost record for missing columns #}\n      {%- for col, dtype in missing_columns.items() %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=col, datatype=dtype, ghost_record_type='unknown') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(prejoined_columns) -%},\n    {# Additionally generating ghost records for the prejoined attributes#}\n      {% for col, vals in prejoined_columns.items() %}\n\n        {%- if 'src_name' in vals.keys() or 'src_table' in vals.keys() -%}\n          {%- set relation = source(vals['src_name']|string, vals['src_table']) -%}\n        {%- elif 'ref_model' in vals.keys() -%}\n          {%- set relation = ref(vals['ref_model']) -%}\n        {%- endif -%}\n\n        {%- set pj_relation_columns = adapter.get_columns_in_relation( relation ) -%}\n        {{ log('pj_relation_columns: ' ~ pj_relation_columns, false ) }}\n\n          {% for column in pj_relation_columns -%}\n\n            {% if column.name|lower == vals['bk']|lower -%}\n              {{ log('column found? yes, for column :' ~ column.name , false) }}\n              {{ datavault4dbt.ghost_record_per_datatype(column_name=column.name, datatype=column.dtype, ghost_record_type='unknown', alias=col) }}\n            {%- endif -%}\n\n          {%- endfor -%}\n          {%- if not loop.last %},{% endif %}\n        {% endfor -%}\n    {%- endif %}\n\n    {%- if datavault4dbt.is_something(derived_columns) -%},\n    {# Additionally generating Ghost Records for Derived Columns #}\n      {%- for column_name, properties in derived_columns_with_datatypes_DICT.items() %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=column_name, datatype=properties.datatype, col_size=properties.col_size, ghost_record_type='unknown') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(processed_hash_columns) -%},\n\n      {%- for hash_column in processed_hash_columns %}\n        CAST({{ datavault4dbt.as_constant(column_str=unknown_key) }} as {{ hash_dtype }}) as {{ hash_column }}\n        {%- if not loop.last %},{% endif %}\n      {%- endfor -%}\n\n    {%- endif -%}\n    {{-\"\\n\"-}}\n),\n\n{# Creating Ghost Record for error case, based on datatype #}\nerror_values AS (\n\n    SELECT\n\n    {{ datavault4dbt.string_to_timestamp(timestamp_format , end_of_all_times) }} as {{ load_datetime_col_name }},\n    '{{ error_value_rsrc }}' as {{ record_source_col_name }}\n\n    {%- if columns_without_excluded_columns is defined and columns_without_excluded_columns| length > 0 -%},\n    {# Generating Ghost Records for Source Columns #}\n      {%- for column in columns_without_excluded_columns %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=column.name, datatype=column.dtype, ghost_record_type='error', col_size=column.char_size) }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(missing_columns) -%},\n    {# Additionally generating ghost record for Missing columns #}\n      {%- for col, dtype in missing_columns.items() %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=col, datatype=dtype, ghost_record_type='error') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(prejoined_columns) -%},\n    {# Additionally generating ghost records for the prejoined attributes #}\n      {%- for col, vals in prejoined_columns.items() %}\n\n        {%- if 'src_name' in vals.keys() or 'src_table' in vals.keys() -%}\n          {%- set relation = source(vals['src_name']|string, vals['src_table']) -%}\n        {%- elif 'ref_model' in vals.keys() -%}\n          {%- set relation = ref(vals['ref_model']) -%}\n        {%- endif -%}\n\n        {%- set pj_relation_columns = adapter.get_columns_in_relation( relation ) -%}\n\n        {% for column in pj_relation_columns -%}\n          {% if column.name|lower == vals['bk']|lower -%}\n            {{ datavault4dbt.ghost_record_per_datatype(column_name=column.name, datatype=column.dtype, ghost_record_type='error', alias=col) -}}\n          {%- endif -%}\n        {%- endfor -%}\n          {%- if not loop.last -%},{%- endif %}\n      {% endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(derived_columns) %},\n    {# Additionally generating Ghost Records for Derived Columns #}\n      {%- for column_name, properties in derived_columns_with_datatypes_DICT.items() %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=column_name, datatype=properties.datatype, col_size=properties.col_size, ghost_record_type='error') }}\n        {%- if not loop.last %},{% endif %}\n      {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(processed_hash_columns) -%},\n\n      {%- for hash_column in processed_hash_columns %}\n        CAST({{ datavault4dbt.as_constant(column_str=error_key) }} as {{ hash_dtype }}) as {{ hash_column }}\n        {%- if not loop.last %},{% endif %}\n      {%- endfor -%}\n\n    {%- endif -%}\n    {{- \"\\n\" -}}\n),\n\n{# Combining all previous ghost record calculations to two rows with the same width as regular entries #}\nghost_records AS (\n    SELECT * FROM unknown_values\n    UNION ALL\n    SELECT * FROM error_values\n),\n{%- endif %}\n\n{%- if not include_source_columns -%}\n  {% set final_columns_to_select = datavault4dbt.process_columns_to_select(columns_list=final_columns_to_select, exclude_columns_list=source_columns_to_select) %}\n{%- endif -%}\n\n{# Combining the two ghost records with the regular data #}\ncolumns_to_select AS (\n\n    SELECT\n\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }}\n\n    FROM {{ last_cte }}\n\n  {% if not is_incremental() %}\n    UNION ALL\n    \n    SELECT\n\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }}\n\n    FROM ghost_records\n  {% endif %}\n)\n\nSELECT * FROM columns_to_select\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.source_columns", "macro.datavault4dbt.is_attribute", "macro.datavault4dbt.is_something", "macro.datavault4dbt.as_constant", "macro.datavault4dbt.extract_column_names", "macro.datavault4dbt.extract_input_columns", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.is_list", "macro.datavault4dbt.derived_columns_datatypes", "macro.datavault4dbt.hash_method", "macro.datavault4dbt.hash_default_values", "macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.limit_rows", "macro.datavault4dbt.print_list", "macro.datavault4dbt.escape_column_names", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.prefix", "macro.datavault4dbt.multikey", "macro.datavault4dbt.derive_columns", "macro.datavault4dbt.process_hash_column_excludes", "macro.datavault4dbt.hash_columns", "macro.datavault4dbt.alias_all", "macro.datavault4dbt.ghost_record_per_datatype"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.320124, "supported_languages": null}, "macro.datavault4dbt.as_constant": {"name": "as_constant", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/internal/metadata_processing/as_constant.sql", "original_file_path": "macros/internal/metadata_processing/as_constant.sql", "unique_id": "macro.datavault4dbt.as_constant", "macro_sql": "{%- macro as_constant(column_str=none) -%}\n\n    {{- adapter.dispatch('as_constant', 'datavault4dbt')(column_str=column_str) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.datavault4dbt.default__as_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3204732, "supported_languages": null}, "macro.datavault4dbt.default__as_constant": {"name": "default__as_constant", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/internal/metadata_processing/as_constant.sql", "original_file_path": "macros/internal/metadata_processing/as_constant.sql", "unique_id": "macro.datavault4dbt.default__as_constant", "macro_sql": "\n\n{%- macro default__as_constant(column_str) -%}\n\n    {%- if column_str is not none and column_str is string and column_str -%}\n\n        {%- if column_str | first == \"!\" -%}\n        \n            {{- return(\"'\" ~ column_str[1:] ~ \"'\") -}}\n        \n        {%- else -%}\n        \n            {%- if datavault4dbt.is_expression(column_str) -%}\n\n                {{- return(column_str) -}}\n\n            {%- else -%}\n\n                {{- return(datavault4dbt.escape_column_names(column_str)) -}}\n\n            {%- endif -%}\n\n        {%- endif -%}\n    {%- else -%}\n        {%- if execute -%}\n            {{ exceptions.raise_compiler_error(\"Invalid columns_str object provided. Must be a string and not null.\") }}\n        {%- endif %}\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.is_expression", "macro.datavault4dbt.escape_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3209002, "supported_languages": null}, "macro.datavault4dbt.escape_column_names": {"name": "escape_column_names", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/internal/metadata_processing/escape_column_names.sql", "original_file_path": "macros/internal/metadata_processing/escape_column_names.sql", "unique_id": "macro.datavault4dbt.escape_column_names", "macro_sql": "{%- macro escape_column_names(columns=none) -%}\n\n{# Different platforms use different escape characters, the default below is for Snowflake which uses double quotes #}\n\n    {%- if datavault4dbt.is_something(columns) -%}\n\n        {%- set col_string = '' -%}\n        {%- set col_list = [] -%}\n        {%- set col_mapping = {} -%}\n\n        {%- if columns is string -%}\n\n            {%- set col_string = datavault4dbt.escape_column_name(columns) -%}\n\n        {%- elif datavault4dbt.is_list(columns) -%}\n\n            {%- for col in columns -%}\n\n                {%- if col is string -%}\n\n                    {%- set escaped_col = datavault4dbt.escape_column_name(col) -%}\n\n                    {%- do col_list.append(escaped_col) -%}\n\n                {%- else -%}\n\n                    {%- if execute -%}\n                        {{- exceptions.raise_compiler_error(\"Invalid column name(s) provided. Must be a string.\") -}}\n                    {%- endif -%}\n\n                {%- endif -%}\n\n            {%- endfor -%}\n\n        {%- elif columns is mapping -%}\n\n            {%- if columns['source_column'] and columns['alias'] -%}\n\n                {%- set escaped_source_col = datavault4dbt.escape_column_name(columns['source_column']) -%}\n                {%- set escaped_alias_col = datavault4dbt.escape_column_name(columns['alias']) -%}\n                {%- set col_mapping = {\"source_column\": escaped_source_col, \"alias\": escaped_alias_col} -%}\n\n            {%- else -%}\n\n                {%- if execute -%}\n                    {{- exceptions.raise_compiler_error(\"Invalid column name(s) provided. Must be a string, a list of strings, or a dictionary of hashdiff metadata.\") -}}\n                {%- endif %}\n\n            {%- endif -%}\n\n        {%- else -%}\n\n            {%- if execute -%}\n                {{- exceptions.raise_compiler_error(\"Invalid column name(s) provided. Must be a string, a list of strings, or a dictionary of hashdiff metadata.\") -}}\n            {%- endif %}\n\n        {%- endif -%}\n\n    {%- elif columns == '' -%}\n\n        {%- if execute -%}\n            {{- exceptions.raise_compiler_error(\"Expected a column name or a list of column names, got an empty string\") -}}\n        {%- endif -%}\n\n    {%- endif -%}\n\n{%- if columns is none -%}\n\n    {%- do return(none) -%}\n\n{%- elif columns == [] -%}\n\n    {%- do return([]) -%}\n\n{%- elif columns == {} -%}\n\n    {%- do return({}) -%}\n\n{%- elif columns is string -%}\n\n    {%- do return(col_string) -%}\n\n{%- elif datavault4dbt.is_list(columns) -%}\n\n    {%- do return(col_list) -%}\n\n{%- elif columns is mapping -%}\n\n    {%- do return(col_mapping) -%}\n\n{%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.is_something", "macro.datavault4dbt.escape_column_name", "macro.datavault4dbt.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.322749, "supported_languages": null}, "macro.datavault4dbt.escape_column_name": {"name": "escape_column_name", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/internal/metadata_processing/escape_column_names.sql", "original_file_path": "macros/internal/metadata_processing/escape_column_names.sql", "unique_id": "macro.datavault4dbt.escape_column_name", "macro_sql": "{%- macro escape_column_name(column) -%}\n\n    {{- adapter.dispatch('escape_column_name', 'datavault4dbt')(column=column) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.datavault4dbt.default__escape_column_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3228889, "supported_languages": null}, "macro.datavault4dbt.default__escape_column_name": {"name": "default__escape_column_name", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/internal/metadata_processing/escape_column_names.sql", "original_file_path": "macros/internal/metadata_processing/escape_column_names.sql", "unique_id": "macro.datavault4dbt.default__escape_column_name", "macro_sql": "\n\n\n{%- macro default__escape_column_name(column) -%}\n\n    {%- set escape_char_left  = var('escape_char_left',  '\"') -%}\n    {%- set escape_char_right = var('escape_char_right', '\"') -%}\n\n    {%- set escaped_column_name = escape_char_left ~ column | upper | replace(escape_char_left, '') | replace(escape_char_right, '') | trim ~ escape_char_right | indent(4) -%}\n\n    {%- do return(escaped_column_name) -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.32321, "supported_languages": null}, "macro.datavault4dbt.synapse__escape_column_name": {"name": "synapse__escape_column_name", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/internal/metadata_processing/escape_column_names.sql", "original_file_path": "macros/internal/metadata_processing/escape_column_names.sql", "unique_id": "macro.datavault4dbt.synapse__escape_column_name", "macro_sql": "{%- macro synapse__escape_column_name(column) -%}\n\n    {%- set escape_char_left  = var('escape_char_left',  '\"') -%}\n    {%- set escape_char_right = var('escape_char_right', '\"') -%}\n\n    {%- set escaped_column_name = escape_char_left ~ column | replace(escape_char_left, '') | replace(escape_char_right, '') | trim ~ escape_char_right -%}\n\n    {%- do return(escaped_column_name) -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.323497, "supported_languages": null}, "macro.datavault4dbt.bigquery__escape_column_name": {"name": "bigquery__escape_column_name", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/internal/metadata_processing/escape_column_names.sql", "original_file_path": "macros/internal/metadata_processing/escape_column_names.sql", "unique_id": "macro.datavault4dbt.bigquery__escape_column_name", "macro_sql": "{%- macro bigquery__escape_column_name(column) -%}\n\n    {%- set escape_char_left  = var('escape_char_left',  '`') -%}\n    {%- set escape_char_right = var('escape_char_right', '`') -%}\n\n    {%- set escaped_column_name = escape_char_left ~ column | replace(escape_char_left, '') | replace(escape_char_right, '') | trim ~ escape_char_right -%}\n\n    {%- do return(escaped_column_name) -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.32377, "supported_languages": null}, "macro.datavault4dbt.postgres__escape_column_name": {"name": "postgres__escape_column_name", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/internal/metadata_processing/escape_column_names.sql", "original_file_path": "macros/internal/metadata_processing/escape_column_names.sql", "unique_id": "macro.datavault4dbt.postgres__escape_column_name", "macro_sql": "{%- macro postgres__escape_column_name(column) -%}\n\n    {%- set escape_char_left  = var('escape_char_left',  \"\") -%}\n    {%- set escape_char_right = var('escape_char_right', \"\") -%}\n\n    {%- set escaped_column_name = escape_char_left ~ column | upper | replace(escape_char_left, '') | replace(escape_char_right, '') | trim ~ escape_char_right | indent(4) -%}\n\n    {%- do return(escaped_column_name) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.324071, "supported_languages": null}, "macro.datavault4dbt.alias": {"name": "alias", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/internal/metadata_processing/alias.sql", "original_file_path": "macros/internal/metadata_processing/alias.sql", "unique_id": "macro.datavault4dbt.alias", "macro_sql": "{%- macro alias(alias_config=none, prefix=none) -%}\n\n    {{- adapter.dispatch('alias', 'datavault4dbt')(alias_config=alias_config, prefix=prefix) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.datavault4dbt.default__alias"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3244328, "supported_languages": null}, "macro.datavault4dbt.default__alias": {"name": "default__alias", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/internal/metadata_processing/alias.sql", "original_file_path": "macros/internal/metadata_processing/alias.sql", "unique_id": "macro.datavault4dbt.default__alias", "macro_sql": "\n\n{%- macro default__alias(alias_config=none, prefix=none) -%}\n\n{%- if alias_config is defined and alias_config is not none and alias_config -%}\n\n    {%- if alias_config is mapping -%}\n\n        {%- if alias_config['source_column'] and alias_config['alias'] -%}\n\n            {%- if prefix -%}\n                {{prefix}}.{{ alias_config['source_column'] }} AS {{ alias_config['alias'] }}\n            {%- else -%}\n                {{ alias_config['source_column'] }} AS {{ alias_config['alias'] }}\n            {%- endif -%}\n\n        {%- endif -%}\n\n    {%- else -%}\n\n        {%- if prefix -%}\n\n        {{- datavault4dbt.prefix([alias_config], prefix) -}}\n\n        {%- else -%}\n\n        {{ alias_config }}\n\n        {%- endif -%}\n\n    {%- endif -%}\n\n{%- else -%}\n\n    {%- if execute -%}\n\n        {{ exceptions.raise_compiler_error(\"Invalid alias configuration:\\nexpected format: {source_column: 'column', alias: 'column_alias'}\\ngot: \" ~ alias_config) }}\n\n    {%- endif -%}\n\n{%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.324972, "supported_languages": null}, "macro.datavault4dbt.concat_ws": {"name": "concat_ws", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/internal/metadata_processing/concat_ws.sql", "original_file_path": "macros/internal/metadata_processing/concat_ws.sql", "unique_id": "macro.datavault4dbt.concat_ws", "macro_sql": "{%- macro concat_ws(string_list, separator=\"||\") -%}\n\n    {{- adapter.dispatch('concat_ws', 'datavault4dbt')(string_list=string_list, separator=separator) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.datavault4dbt.default__concat_ws"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3253329, "supported_languages": null}, "macro.datavault4dbt.default__concat_ws": {"name": "default__concat_ws", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/internal/metadata_processing/concat_ws.sql", "original_file_path": "macros/internal/metadata_processing/concat_ws.sql", "unique_id": "macro.datavault4dbt.default__concat_ws", "macro_sql": "\n\n{%- macro default__concat_ws(string_list, separator=\"||\") -%}\n\n    {{- 'CONCAT(' -}}\n    {%- for str in string_list -%}\n        {{- \"{}\".format(str) -}}\n        {{- \",'{}',\".format(separator) if not loop.last -}}\n    {%- endfor -%}\n    {{- '\\n)' -}}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.325551, "supported_languages": null}, "macro.datavault4dbt.exasol__concat_ws": {"name": "exasol__concat_ws", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/internal/metadata_processing/concat_ws.sql", "original_file_path": "macros/internal/metadata_processing/concat_ws.sql", "unique_id": "macro.datavault4dbt.exasol__concat_ws", "macro_sql": "{%- macro exasol__concat_ws(string_list, separator=\"||\") -%}\n\n    {{- 'CONCAT(' -}}\n    {%- for str in string_list -%}\n        {{- \"{}\".format(str) -}}\n        {{- \",'{}',\".format(separator) if not loop.last -}}\n    {%- endfor -%}\n    {{- ')' -}}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3257651, "supported_languages": null}, "macro.datavault4dbt.redshift__concat_ws": {"name": "redshift__concat_ws", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/internal/metadata_processing/concat_ws.sql", "original_file_path": "macros/internal/metadata_processing/concat_ws.sql", "unique_id": "macro.datavault4dbt.redshift__concat_ws", "macro_sql": "{%- macro redshift__concat_ws(string_list, separator=\"|\") -%}\n\n    {%- for str in string_list -%}\n        {{- \"{}\".format(str) -}}\n        {{- \"|| '{}' ||\".format(separator) if not loop.last -}}\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.325952, "supported_languages": null}, "macro.datavault4dbt.multikey": {"name": "multikey", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/internal/metadata_processing/multikey.sql", "original_file_path": "macros/internal/metadata_processing/multikey.sql", "unique_id": "macro.datavault4dbt.multikey", "macro_sql": "{%- macro multikey(columns, prefix=none, condition=none, operator='AND', right_columns=none) -%}\n\n    {{- adapter.dispatch('multikey', 'datavault4dbt')(columns=columns, prefix=prefix, condition=condition, operator=operator, right_columns=right_columns) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.datavault4dbt.default__multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3265018, "supported_languages": null}, "macro.datavault4dbt.default__multikey": {"name": "default__multikey", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/internal/metadata_processing/multikey.sql", "original_file_path": "macros/internal/metadata_processing/multikey.sql", "unique_id": "macro.datavault4dbt.default__multikey", "macro_sql": "\n\n{%- macro default__multikey(columns, prefix=none, condition=none, operator='AND', right_columns=none) -%}\n\n    {%- if prefix is string -%}\n        {%- set prefix = [prefix] -%}\n    {%- endif -%}\n\n    {%- if columns is string -%}\n        {%- set columns = [columns] -%}\n    {%- endif -%}\n\n    {%- if right_columns is none -%}\n        {%- set right_columns = columns -%}\n    {%- elif right_columns is string -%}\n        {%- set right_columns = [right_columns] -%}\n    {%- elif right_columns|length != columns|length -%}\n        {%- set error_message -%}\n      Multikey Error: If right_columns are defined, it must be the same length as columns. \n      Got: \n        Columns: {{ columns }} with length {{ columns|length }}\n        right_columns: {{ right_columns }} with length {{ right_columns|length }}\n        {%- endset -%}\n\n        {{- exceptions.raise_compiler_error(error_message) -}}\n    {%- endif -%}\n\n    {%- if condition in ['<>', '!=', '='] -%}\n        {%- for col in columns -%}\n            {%- if prefix -%}\n                {{- datavault4dbt.prefix([col], prefix[0], alias_target='target') }} {{ condition }} {{ datavault4dbt.prefix([right_columns[loop.index0]], prefix[1]) -}}\n            {%- endif %}\n            {%- if not loop.last %} {{ operator }} {% endif -%}\n        {% endfor -%}\n    {%- else -%}\n        {%- if datavault4dbt.is_list(columns) -%}\n            {%- for col in columns -%}\n                {{ (prefix[0] ~ '.') if prefix }}{{ col }} {{ condition if condition else '' }}\n                {%- if not loop.last -%} {{ \"\\n    \" ~ operator }} {% endif -%}\n            {%- endfor -%}\n        {%- else -%}\n            {{ prefix[0] ~ '.' if prefix }}{{ columns }} {{ condition if condition else '' }}\n        {%- endif -%}\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.prefix", "macro.datavault4dbt.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.327732, "supported_languages": null}, "macro.datavault4dbt.expand_column_list": {"name": "expand_column_list", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/internal/metadata_processing/expand_column_list.sql", "original_file_path": "macros/internal/metadata_processing/expand_column_list.sql", "unique_id": "macro.datavault4dbt.expand_column_list", "macro_sql": "{%- macro expand_column_list(columns=none) -%}\n\n{%- if not columns -%}\n    {%- if execute -%}\n         {{- exceptions.raise_compiler_error(\"Expected a list of columns, got: \" ~ columns) -}}\n    {%- endif -%}\n{%- endif -%}\n\n{%- set col_list = [] -%}\n\n{%- if datavault4dbt.is_list(columns) -%}\n\n    {%- set columns = columns | reject(\"none\") %}\n\n    {%- for col in columns -%}\n\n        {%- if col is string -%}\n\n            {%- do col_list.append(col) -%}\n\n        {#- If list of lists -#}\n        {%- elif datavault4dbt.is_list(col) -%}\n\n            {%- for cols in col -%}\n\n                {%- do col_list.append(cols) -%}\n\n            {%- endfor -%}\n        {%- elif col is mapping -%}\n\n            {%- do col_list.append(col) -%}\n\n        {%- else -%}\n\n            {%- if execute -%}\n                {{- exceptions.raise_compiler_error(\"Invalid columns object provided. Must be a list of lists, dictionaries or strings.\") -}}\n            {%- endif %}\n\n        {%- endif -%}\n\n    {%- endfor -%}\n{%- else -%}\n\n    {%- if execute -%}\n        {{- exceptions.raise_compiler_error(\"Invalid columns object provided. Must be a list.\") -}}\n    {%- endif %}\n\n{%- endif -%}\n\n{%- do return(col_list) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3286378, "supported_languages": null}, "macro.datavault4dbt.check_required_parameters": {"name": "check_required_parameters", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/internal/metadata_processing/check_required_parameters.sql", "original_file_path": "macros/internal/metadata_processing/check_required_parameters.sql", "unique_id": "macro.datavault4dbt.check_required_parameters", "macro_sql": "{%- macro check_required_parameters() -%}\n\n    {%- set ns = namespace(missing_parameters=[]) -%}\n\n    {%- if kwargs is not none -%}\n\n        {%- for k, v in kwargs.items() %}\n            {%- do ns.missing_parameters.append(k) if v is none -%}\n        {%- endfor -%}\n\n        {%- if ns.missing_parameters -%}\n            {{- exceptions.raise_compiler_error(\"Required parameter(s) missing or none in '{}': {}\".format(this, ns.missing_parameters | join(\", \"))) -}}\n        {%- endif -%}\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.329071, "supported_languages": null}, "macro.datavault4dbt.alias_all": {"name": "alias_all", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/internal/metadata_processing/alias_all.sql", "original_file_path": "macros/internal/metadata_processing/alias_all.sql", "unique_id": "macro.datavault4dbt.alias_all", "macro_sql": "{%- macro alias_all(columns=none, prefix=none) -%}\n\n    {{- adapter.dispatch('alias_all', 'datavault4dbt')(columns=columns, prefix=prefix) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.datavault4dbt.default__alias_all"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.329364, "supported_languages": null}, "macro.datavault4dbt.default__alias_all": {"name": "default__alias_all", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/internal/metadata_processing/alias_all.sql", "original_file_path": "macros/internal/metadata_processing/alias_all.sql", "unique_id": "macro.datavault4dbt.default__alias_all", "macro_sql": "\n\n{%- macro default__alias_all(columns, prefix) -%}\n\n{%- if datavault4dbt.is_list(columns) -%}\n\n    {%- for column in columns -%}\n        {{ datavault4dbt.alias(alias_config=column, prefix=prefix) }}\n        {% if not loop.last -%} , {% endif -%}\n    {%- endfor -%}\n\n{%- elif columns is string -%}\n\n{{ datavault4dbt.alias(alias_config=columns, prefix=prefix) }}\n\n{%- else -%}\n\n    {%- if execute -%}\n        {{ exceptions.raise_compiler_error(\"Invalid columns object provided. Must be a list or a string.\") }}\n    {%- endif %}\n\n{%- endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.is_list", "macro.datavault4dbt.alias"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.32972, "supported_languages": null}, "macro.datavault4dbt.prepend_generated_by": {"name": "prepend_generated_by", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/internal/helpers/prepend_generated_by.sql", "original_file_path": "macros/internal/helpers/prepend_generated_by.sql", "unique_id": "macro.datavault4dbt.prepend_generated_by", "macro_sql": "{% macro prepend_generated_by() %}\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.329988, "supported_languages": null}, "macro.datavault4dbt.replace_standard": {"name": "replace_standard", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/internal/helpers/replace_standard.sql", "original_file_path": "macros/internal/helpers/replace_standard.sql", "unique_id": "macro.datavault4dbt.replace_standard", "macro_sql": "{%- macro replace_standard(input_variable, global_variable, default_value) -%}\n\n{%- if input_variable is none or input_variable == \"\" -%}\n\n    {%- set input_variable = var(global_variable, default_value) -%}\n\n{%- endif -%}\n\n{{ return(input_variable) }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3302689, "supported_languages": null}, "macro.datavault4dbt.is_list": {"name": "is_list", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/internal/helpers/is_checks.sql", "original_file_path": "macros/internal/helpers/is_checks.sql", "unique_id": "macro.datavault4dbt.is_list", "macro_sql": "{%- macro is_list(obj, empty_is_false=false) -%}\n\n    {%- if obj is iterable and obj is not string and obj is not mapping -%}\n        {%- if obj is none and obj is undefined and not obj and empty_is_false -%}\n            {%- do return(false) -%}\n        {%- endif -%}\n\n        {%- do return(true) -%}\n    {%- else -%}\n        {%- do return(false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3308642, "supported_languages": null}, "macro.datavault4dbt.is_nothing": {"name": "is_nothing", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/internal/helpers/is_checks.sql", "original_file_path": "macros/internal/helpers/is_checks.sql", "unique_id": "macro.datavault4dbt.is_nothing", "macro_sql": "{%- macro is_nothing(obj) -%}\n\n    {%- if obj is none or obj is undefined or not obj -%}\n        {%- do return(true) -%}\n    {%- else -%}\n        {%- do return(false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.331053, "supported_languages": null}, "macro.datavault4dbt.is_something": {"name": "is_something", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/internal/helpers/is_checks.sql", "original_file_path": "macros/internal/helpers/is_checks.sql", "unique_id": "macro.datavault4dbt.is_something", "macro_sql": "{%- macro is_something(obj) -%}\n\n    {%- if obj is not none and obj is defined and obj -%}\n        {%- do return(true) -%}\n    {%- else -%}\n        {%- do return(false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.33125, "supported_languages": null}, "macro.datavault4dbt.is_expression": {"name": "is_expression", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/internal/helpers/is_checks.sql", "original_file_path": "macros/internal/helpers/is_checks.sql", "unique_id": "macro.datavault4dbt.is_expression", "macro_sql": "{%- macro is_expression(obj) -%}\n\n    {%- if obj is string -%}\n        {%- if (obj | first == \"'\" and obj | last == \"'\") or (\"(\" in obj and \")\" in obj) or \"::\" in obj or \"||\" in obj -%}\n            {%- do return(true) -%}\n        {%- else -%}\n            {%- do return(false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do return(false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3315961, "supported_languages": null}, "macro.datavault4dbt.is_attribute": {"name": "is_attribute", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/internal/helpers/is_checks.sql", "original_file_path": "macros/internal/helpers/is_checks.sql", "unique_id": "macro.datavault4dbt.is_attribute", "macro_sql": "{%- macro is_attribute(obj) -%}\n\n{%- if obj is not none and obj is string and obj -%}\n\n        {%- if obj | first == \"!\" -%}\n        \n            {{- return(false) -}}\n        \n        {%- else -%}\n        \n            {%- if datavault4dbt.is_expression(obj) -%}\n            \n                {{- return(false) -}}\n\n            {%- else -%}\n\n                {{- return(true) -}}\n\n            {%- endif -%}\n\n        {%- endif -%}\n    {%- else -%}\n        {%- if execute -%}\n            {{ exceptions.raise_compiler_error(\"Invalid 'obj' object provided to 'is_attribute' check. Must be a string and not null.\") }}\n        {%- endif %}\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.is_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3319511, "supported_languages": null}, "macro.datavault4dbt.process_columns_to_select": {"name": "process_columns_to_select", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/internal/helpers/stage_processing_macros.sql", "original_file_path": "macros/internal/helpers/stage_processing_macros.sql", "unique_id": "macro.datavault4dbt.process_columns_to_select", "macro_sql": "{%- macro process_columns_to_select(columns_list=none, exclude_columns_list=none) -%}\n    {# {% set exclude_columns_list = exclude_columns_list | map('upper') | list %} #}\n    {% set columns_to_select = [] %}\n\n    {% if not datavault4dbt.is_list(columns_list) or not datavault4dbt.is_list(exclude_columns_list)  %}\n\n        {{- exceptions.raise_compiler_error(\"One or both arguments are not of list type.\") -}}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(columns_list) and datavault4dbt.is_something(exclude_columns_list) -%}\n        {%- for col in columns_list -%}\n\n            {%- if col not in exclude_columns_list -%}\n                {%- do columns_to_select.append(col) -%}\n            {%- endif -%}\n\n        {%- endfor -%}\n    {%- elif datavault4dbt.is_something(columns_list) and not datavault4dbt.is_something(exclude_columns_list) %}\n        {% set columns_to_select = columns_list %}\n    {%- endif -%}\n\n    {%- do return(columns_to_select) -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.is_list", "macro.datavault4dbt.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3330402, "supported_languages": null}, "macro.datavault4dbt.extract_column_names": {"name": "extract_column_names", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/internal/helpers/stage_processing_macros.sql", "original_file_path": "macros/internal/helpers/stage_processing_macros.sql", "unique_id": "macro.datavault4dbt.extract_column_names", "macro_sql": "{%- macro extract_column_names(columns_dict=none) -%}\n\n    {%- set extracted_column_names = [] -%}\n\n    {%- if columns_dict is mapping -%}\n        {%- for key, value in columns_dict.items() -%}\n            {%- do extracted_column_names.append(key) -%}\n        {%- endfor -%}\n\n        {%- do return(extracted_column_names) -%}\n    {%- else -%}\n        {%- do return([]) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.333341, "supported_languages": null}, "macro.datavault4dbt.extract_input_columns": {"name": "extract_input_columns", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/internal/helpers/stage_processing_macros.sql", "original_file_path": "macros/internal/helpers/stage_processing_macros.sql", "unique_id": "macro.datavault4dbt.extract_input_columns", "macro_sql": "{%- macro extract_input_columns(columns_dict=none) -%}\n\n    {%- set extracted_input_columns = [] -%}\n\n    {%- if columns_dict is mapping -%}\n        {%- for key, value in columns_dict.items() -%}\n            {%- if value is mapping and 'src_cols_required' in value.keys() -%}\n                {%- do extracted_input_columns.append(value['src_cols_required']) -%}\n            {%- elif value is mapping and 'value' in value.keys() and 'src_cols_required' not in value.keys() -%}\n                {# Do nothing. No source column required. #}    \n            {%- elif value is mapping and value.is_hashdiff -%}\n                {%- do extracted_input_columns.append(value['columns']) -%}\n            {%- elif value is mapping and 'this_column_name' in value.keys() -%}\n                {%- if datavault4dbt.is_list(value['this_column_name'])-%}\n                    {%- for column in value['this_column_name'] -%}\n                        {%- do extracted_input_columns.append(column) -%}\n                    {%- endfor -%}\n                {%- else -%}\n                    {%- do extracted_input_columns.append(value['this_column_name']) -%}\n                {%- endif -%}\n            {%- else -%}\n                {%- do extracted_input_columns.append(value) -%}\n            {%- endif -%}\n        {%- endfor -%}\n\n        {%- do return(extracted_input_columns) -%}\n    {%- else -%}\n        {%- do return([]) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.334207, "supported_languages": null}, "macro.datavault4dbt.process_hash_column_excludes": {"name": "process_hash_column_excludes", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/internal/helpers/stage_processing_macros.sql", "original_file_path": "macros/internal/helpers/stage_processing_macros.sql", "unique_id": "macro.datavault4dbt.process_hash_column_excludes", "macro_sql": "{%- macro process_hash_column_excludes(hash_columns=none, source_columns=none) -%}\n\n    {%- set processed_hash_columns = {} -%}\n\n    {%- for col, col_mapping in hash_columns.items() -%}\n        \n        {%- if col_mapping is mapping -%}\n            {%- if col_mapping.exclude_columns -%}\n\n                {%- if col_mapping.columns -%}\n\n                    {%- set columns_to_hash = datavault4dbt.process_columns_to_select(source_columns, col_mapping.columns) -%}\n\n                    {%- do hash_columns[col].pop('exclude_columns') -%}\n                    {%- do hash_columns[col].update({'columns': columns_to_hash}) -%}\n\n                    {%- do processed_hash_columns.update({col: hash_columns[col]}) -%}\n                {%- else -%}\n\n                    {%- do hash_columns[col].pop('exclude_columns') -%}\n                    {%- do hash_columns[col].update({'columns': source_columns}) -%}\n\n                    {%- do processed_hash_columns.update({col: hash_columns[col]}) -%}\n                {%- endif -%}\n            {%- else -%}\n                {%- do processed_hash_columns.update({col: col_mapping}) -%}\n            {%- endif -%}\n        {%- else -%}\n            {%- do processed_hash_columns.update({col: col_mapping}) -%}\n        {%- endif -%}\n\n    {%- endfor -%}\n\n    {%- do return(processed_hash_columns) -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.process_columns_to_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.335018, "supported_languages": null}, "macro.datavault4dbt.print_list": {"name": "print_list", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/internal/helpers/stage_processing_macros.sql", "original_file_path": "macros/internal/helpers/stage_processing_macros.sql", "unique_id": "macro.datavault4dbt.print_list", "macro_sql": "{%- macro print_list(list_to_print=none, indent=4, src_alias=none) -%}\n\n    {%- for col_name in list_to_print -%}\n        {%- if src_alias %}\n        {{ (src_alias ~ '.' ~ col_name) | indent(indent) }}{{ \",\" if not loop.last }}\n        {%- else %}\n        {{ col_name | indent(indent) }}{{ \",\" if not loop.last }}\n        {%- endif %}\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.33533, "supported_languages": null}, "macro.datavault4dbt.clean_up_pit": {"name": "clean_up_pit", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/hooks/clean_up_pits.sql", "original_file_path": "macros/hooks/clean_up_pits.sql", "unique_id": "macro.datavault4dbt.clean_up_pit", "macro_sql": "\n\n\n{%- macro clean_up_pit(snapshot_relation, snapshot_trigger_column=none, sdts=none) -%}\n\n{%- if not datavault4dbt.is_something(sdts) -%}\n    {%- set sdts = var('datavault4dbt.sdts_alias', 'sdts') -%}\n{%- endif -%}\n{%- if not datavault4dbt.is_something(snapshot_trigger_column) -%}\n    {%- set snapshot_trigger_column = var('datavault4dbt.snapshot_trigger_column', 'is_active') -%}\n{%- endif -%}\n\n{{ return(adapter.dispatch('clean_up_pit', 'datavault4dbt')(snapshot_relation=snapshot_relation, snapshot_trigger_column=snapshot_trigger_column, sdts=sdts)) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.datavault4dbt.is_something", "macro.datavault4dbt.snowflake__clean_up_pit"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.336202, "supported_languages": null}, "macro.datavault4dbt.default__clean_up_pit": {"name": "default__clean_up_pit", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/hooks/clean_up_pits.sql", "original_file_path": "macros/hooks/clean_up_pits.sql", "unique_id": "macro.datavault4dbt.default__clean_up_pit", "macro_sql": "{%- macro default__clean_up_pit(snapshot_relation, snapshot_trigger_column, sdts) -%}\n\nDELETE {{ this }} pit\nWHERE pit.{{ sdts }} not in (SELECT {{ sdts }} FROM {{ ref(snapshot_relation) }} snap WHERE {{ snapshot_trigger_column }}=TRUE)\n\n{%- if execute -%}\n{{ log(\"PIT \" ~ this ~ \" successfully cleaned!\", True) }}\n{%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.336434, "supported_languages": null}, "macro.datavault4dbt.snowflake__clean_up_pit": {"name": "snowflake__clean_up_pit", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/hooks/clean_up_pits.sql", "original_file_path": "macros/hooks/clean_up_pits.sql", "unique_id": "macro.datavault4dbt.snowflake__clean_up_pit", "macro_sql": "{%- macro snowflake__clean_up_pit(snapshot_relation, snapshot_trigger_column, sdts) -%}\n\nDELETE FROM {{ this }} pit\nWHERE pit.{{ sdts }} NOT IN (SELECT {{ sdts }} FROM {{ ref(snapshot_relation) }} snap WHERE {{ snapshot_trigger_column }}=TRUE)\n\n{%- if execute -%}\n{{ log(\"PIT \" ~ this ~ \" successfully cleaned!\", True) }}\n{%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.336679, "supported_languages": null}, "macro.datavault4dbt.exasol__clean_up_pit": {"name": "exasol__clean_up_pit", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/hooks/clean_up_pits.sql", "original_file_path": "macros/hooks/clean_up_pits.sql", "unique_id": "macro.datavault4dbt.exasol__clean_up_pit", "macro_sql": "{%- macro exasol__clean_up_pit(snapshot_relation, snapshot_trigger_column, sdts) -%}\n\nDELETE FROM {{ this }} pit\nWHERE pit.{{ sdts }} NOT IN (SELECT {{ sdts }} FROM {{ ref(snapshot_relation) }} snap WHERE {{ snapshot_trigger_column }}=TRUE)\n\n{%- if execute -%}\n{{ log(\"PIT \" ~ this ~ \" successfully cleaned!\", True) }}\n{%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.336926, "supported_languages": null}, "macro.datavault4dbt.synapse__clean_up_pit": {"name": "synapse__clean_up_pit", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/hooks/clean_up_pits.sql", "original_file_path": "macros/hooks/clean_up_pits.sql", "unique_id": "macro.datavault4dbt.synapse__clean_up_pit", "macro_sql": "{%- macro synapse__clean_up_pit(snapshot_relation, snapshot_trigger_column, sdts) -%}\n\nDELETE pit\nFROM {{ this }} AS pit \nLEFT JOIN {{ ref(snapshot_relation) }} AS snap\nON pit.{{ sdts }} = snap.{{ sdts }} AND {{ snapshot_trigger_column }}=1\nWHERE snap.{{ sdts }} IS NULL\n\n{%- if execute -%}\n{{ log(\"PIT \" ~ this ~ \" successfully cleaned!\", True) }}\n{%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.337166, "supported_languages": null}, "macro.datavault4dbt.postgres__clean_up_pit": {"name": "postgres__clean_up_pit", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/hooks/clean_up_pits.sql", "original_file_path": "macros/hooks/clean_up_pits.sql", "unique_id": "macro.datavault4dbt.postgres__clean_up_pit", "macro_sql": "{%- macro postgres__clean_up_pit(snapshot_relation, snapshot_trigger_column, sdts) -%}\n\nDELETE FROM {{ this }} pit\nWHERE NOT EXISTS (SELECT 1 FROM {{ ref(snapshot_relation) }} snap WHERE pit.{{ sdts }} = snap.{{ sdts }} AND snap.{{ snapshot_trigger_column }}=TRUE)\n\n{%- if execute -%}\n{{ log(\"PIT \" ~ this ~ \" successfully cleaned!\", True) }}\n{%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3373928, "supported_languages": null}, "macro.datavault4dbt.redshift__clean_up_pit": {"name": "redshift__clean_up_pit", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/hooks/clean_up_pits.sql", "original_file_path": "macros/hooks/clean_up_pits.sql", "unique_id": "macro.datavault4dbt.redshift__clean_up_pit", "macro_sql": "{%- macro redshift__clean_up_pit(snapshot_relation, snapshot_trigger_column, sdts) -%}\n\nDELETE FROM {{ this }}\nWHERE NOT EXISTS (SELECT 1 FROM {{ ref(snapshot_relation) }} WHERE {{ this }}.{{ sdts }} = {{ ref(snapshot_relation) }}.{{ sdts }} AND {{ ref(snapshot_relation) }}.{{ snapshot_trigger_column }}=TRUE)\n\n\n{%- if execute -%}\n{{ log(\"PIT \" ~ this ~ \" successfully cleaned!\", True) }}\n{%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.337701, "supported_languages": null}, "macro.datavault4dbt.string_to_timestamp": {"name": "string_to_timestamp", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/string_to_timestamp.sql", "original_file_path": "macros/supporting/string_to_timestamp.sql", "unique_id": "macro.datavault4dbt.string_to_timestamp", "macro_sql": "{% macro string_to_timestamp(format, timestamp) %}\n{{return(adapter.dispatch('string_to_timestamp', 'datavault4dbt')(format=format,\n                                                                        timestamp= timestamp)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.datavault4dbt.snowflake__string_to_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.338044, "supported_languages": null}, "macro.datavault4dbt.default__string_to_timestamp": {"name": "default__string_to_timestamp", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/string_to_timestamp.sql", "original_file_path": "macros/supporting/string_to_timestamp.sql", "unique_id": "macro.datavault4dbt.default__string_to_timestamp", "macro_sql": "{%- macro default__string_to_timestamp(format, timestamp) -%}\n    PARSE_TIMESTAMP('{{ format }}', '{{ timestamp }}')\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3381429, "supported_languages": null}, "macro.datavault4dbt.exasol__string_to_timestamp": {"name": "exasol__string_to_timestamp", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/string_to_timestamp.sql", "original_file_path": "macros/supporting/string_to_timestamp.sql", "unique_id": "macro.datavault4dbt.exasol__string_to_timestamp", "macro_sql": "{%- macro exasol__string_to_timestamp(format, timestamp) -%}\n    TO_TIMESTAMP('{{ timestamp }}', '{{ format }}')\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3382359, "supported_languages": null}, "macro.datavault4dbt.snowflake__string_to_timestamp": {"name": "snowflake__string_to_timestamp", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/string_to_timestamp.sql", "original_file_path": "macros/supporting/string_to_timestamp.sql", "unique_id": "macro.datavault4dbt.snowflake__string_to_timestamp", "macro_sql": "{%- macro snowflake__string_to_timestamp(format, timestamp) -%}\n    TO_TIMESTAMP('{{ timestamp }}', '{{ format }}')\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.338327, "supported_languages": null}, "macro.datavault4dbt.synapse__string_to_timestamp": {"name": "synapse__string_to_timestamp", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/string_to_timestamp.sql", "original_file_path": "macros/supporting/string_to_timestamp.sql", "unique_id": "macro.datavault4dbt.synapse__string_to_timestamp", "macro_sql": "{%- macro synapse__string_to_timestamp(format, timestamp) -%}\n    CONVERT(datetime2, '{{ timestamp }}', {{ format }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.338419, "supported_languages": null}, "macro.datavault4dbt.postgres__string_to_timestamp": {"name": "postgres__string_to_timestamp", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/string_to_timestamp.sql", "original_file_path": "macros/supporting/string_to_timestamp.sql", "unique_id": "macro.datavault4dbt.postgres__string_to_timestamp", "macro_sql": "{%- macro postgres__string_to_timestamp(format, timestamp) -%}\n    TO_TIMESTAMP('{{ timestamp }}', '{{ format }}')\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.338512, "supported_languages": null}, "macro.datavault4dbt.redshift__string_to_timestamp": {"name": "redshift__string_to_timestamp", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/string_to_timestamp.sql", "original_file_path": "macros/supporting/string_to_timestamp.sql", "unique_id": "macro.datavault4dbt.redshift__string_to_timestamp", "macro_sql": "{%- macro redshift__string_to_timestamp(format, timestamp) -%}\n    TO_TIMESTAMP('{{ timestamp }}', '{{ format }}')\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.338614, "supported_languages": null}, "macro.datavault4dbt.hash_method": {"name": "hash_method", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/hash_method.sql", "original_file_path": "macros/supporting/hash_method.sql", "unique_id": "macro.datavault4dbt.hash_method", "macro_sql": "{%- macro hash_method() %}\n\n    {{ return( adapter.dispatch('hash_method', 'datavault4dbt')() ) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.snowflake__hash_method"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3391201, "supported_languages": null}, "macro.datavault4dbt.default__hash_method": {"name": "default__hash_method", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/hash_method.sql", "original_file_path": "macros/supporting/hash_method.sql", "unique_id": "macro.datavault4dbt.default__hash_method", "macro_sql": "{%- macro default__hash_method() %}\n\n{%- set global_var = var('datavault4dbt.hash', none) -%}\n{%- set hash_method = '' -%}\n\n{%- if global_var is mapping -%}\n    {%- if 'bigquery' in global_var.keys()|map('lower') -%}\n        {% set hash_method = global_var['bigquery'] %}\n    {%- else -%}\n        {%- if execute -%}\n            {%- do exceptions.warn(\"Warning: You have set the global variable 'datavault4dbt.hash' to a dictionary, but have not included the adapter you use (bigquery) as a key. Applying the default value.\") -%}\n        {% endif %}\n        {%- set hash_method = 'MD5' -%}\n    {% endif %}\n{%- elif global_var is not mapping and datavault4dbt.is_something(global_var) -%}\n    {%- set hash_method = global_var -%}\n{%- else -%}\n    {%- set hash_method = 'MD5' -%}\n{%- endif -%}\n\n{{ return(hash_method) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3396108, "supported_languages": null}, "macro.datavault4dbt.snowflake__hash_method": {"name": "snowflake__hash_method", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/hash_method.sql", "original_file_path": "macros/supporting/hash_method.sql", "unique_id": "macro.datavault4dbt.snowflake__hash_method", "macro_sql": "{%- macro snowflake__hash_method() %}\n\n{%- set global_var = var('datavault4dbt.hash', none) -%}\n{%- set hash_method = '' -%}\n\n{%- if global_var is mapping -%}\n    {%- if 'snowflake' in global_var.keys()|map('lower') -%}\n        {% set hash_method = global_var['snowflake'] %}\n    {%- else -%}\n        {%- if execute -%}\n            {%- do exceptions.warn(\"Warning: You have set the global variable 'datavault4dbt.hash' to a dictionary, but have not included the adapter you use (snowflake) as a key. Applying the default value.\") -%}\n        {% endif %}\n        {%- set hash_method = 'MD5' -%}\n    {% endif %}\n{%- elif global_var is not mapping and datavault4dbt.is_something(global_var) -%}\n    {%- set hash_method = global_var -%}\n{%- else -%}\n    {%- set hash_method = 'MD5' -%}\n{%- endif -%}\n\n{{ return(hash_method) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.340169, "supported_languages": null}, "macro.datavault4dbt.exasol__hash_method": {"name": "exasol__hash_method", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/hash_method.sql", "original_file_path": "macros/supporting/hash_method.sql", "unique_id": "macro.datavault4dbt.exasol__hash_method", "macro_sql": "{%- macro exasol__hash_method() %}\n\n{%- set global_var = var('datavault4dbt.hash', none) -%}\n{%- set hash_method = '' -%}\n\n{%- if global_var is mapping -%}\n    {%- if 'exasol' in global_var.keys()|map('lower') -%}\n        {% set hash_method = global_var['exasol'] %}\n    {%- else -%}\n        {%- if execute -%}\n            {%- do exceptions.warn(\"Warning: You have set the global variable 'datavault4dbt.hash' to a dictionary, but have not included the adapter you use (exasol) as a key. Applying the default value.\") -%}\n        {% endif %}\n        {%- set hash_method = 'MD5' -%}\n    {% endif %}\n{%- elif global_var is not mapping and datavault4dbt.is_something(global_var) -%}\n    {%- set hash_method = global_var -%}\n{%- else -%}\n    {%- set hash_method = 'MD5' -%}\n{%- endif -%}\n\n{{ return(hash_method) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3406668, "supported_languages": null}, "macro.datavault4dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/datatypes.sql", "original_file_path": "macros/supporting/datatypes.sql", "unique_id": "macro.datavault4dbt.type_timestamp", "macro_sql": "{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'datavault4dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.datavault4dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3408608, "supported_languages": null}, "macro.datavault4dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/datatypes.sql", "original_file_path": "macros/supporting/datatypes.sql", "unique_id": "macro.datavault4dbt.default__type_timestamp", "macro_sql": "{%- macro default__type_timestamp() -%}\n    {{ type_timestamp() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.datavault4dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.340933, "supported_languages": null}, "macro.datavault4dbt.synapse__type_timestamp": {"name": "synapse__type_timestamp", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/datatypes.sql", "original_file_path": "macros/supporting/datatypes.sql", "unique_id": "macro.datavault4dbt.synapse__type_timestamp", "macro_sql": "{%- macro synapse__type_timestamp() -%}\n    datetime2\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.340986, "supported_languages": null}, "macro.datavault4dbt.parse_iso8601": {"name": "parse_iso8601", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/parse_iso8601.sql", "original_file_path": "macros/supporting/parse_iso8601.sql", "unique_id": "macro.datavault4dbt.parse_iso8601", "macro_sql": "{%- macro parse_iso8601(column_name) -%}\n    PARSE_TIMESTAMP('%Y-%m-%dT%H-%M-%S', {{ column_name }})\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.34109, "supported_languages": null}, "macro.datavault4dbt.get_distinct_value": {"name": "get_distinct_value", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/get_distinct_value.sql", "original_file_path": "macros/supporting/get_distinct_value.sql", "unique_id": "macro.datavault4dbt.get_distinct_value", "macro_sql": "{% macro get_distinct_value(source_relation, column_name, exclude_values=none) %}\n\n{{return(adapter.dispatch('get_distinct_value', 'datavault4dbt')(source_relation= source_relation, \n                                                            column_name= column_name,\n                                                            exclude_values=exclude_values) )}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.datavault4dbt.default__get_distinct_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3414578, "supported_languages": null}, "macro.datavault4dbt.default__get_distinct_value": {"name": "default__get_distinct_value", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/get_distinct_value.sql", "original_file_path": "macros/supporting/get_distinct_value.sql", "unique_id": "macro.datavault4dbt.default__get_distinct_value", "macro_sql": "\n{%- macro default__get_distinct_value(source_relation, column_name, exclude_values) -%}\n\n{% set query %}\n    SELECT DISTINCT {{ column_name }}\n    from {{ source_relation }}\n    {% if exclude_values is not none %}\n        where {{ column_name }} not in ( {%- for value in exclude_values -%} \n                                            '{{ value }}'\n                                            {%- if not loop.last -%}, {%- endif -%}\n                                        {%- endfor -%} )\n    {% endif %}\n    LIMIT 1\n{% endset %}\n\n{% set results = run_query(query) %}\n\n{% if execute %}\n\n    {% set result_value = results.columns[0].values()[0] %}\n{% else %}\n    {% set result_value = \"\" %}\n{% endif %}\n\n{{ return(result_value) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.341963, "supported_languages": null}, "macro.datavault4dbt.max_datetime": {"name": "max_datetime", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/max_datetime.sql", "original_file_path": "macros/supporting/max_datetime.sql", "unique_id": "macro.datavault4dbt.max_datetime", "macro_sql": "{%- macro max_datetime() -%}\n\n    {{- return(adapter.dispatch('max_datetime', 'datavault4dbt')()) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.datavault4dbt.default__max_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.342168, "supported_languages": null}, "macro.datavault4dbt.default__max_datetime": {"name": "default__max_datetime", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/max_datetime.sql", "original_file_path": "macros/supporting/max_datetime.sql", "unique_id": "macro.datavault4dbt.default__max_datetime", "macro_sql": "\n\n{%- macro default__max_datetime() %}\n\n    {% do return('9999-12-31 23:59:59.999999') %}\n\n{% endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.342258, "supported_languages": null}, "macro.datavault4dbt.synapse__max_datetime": {"name": "synapse__max_datetime", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/max_datetime.sql", "original_file_path": "macros/supporting/max_datetime.sql", "unique_id": "macro.datavault4dbt.synapse__max_datetime", "macro_sql": "{%- macro synapse__max_datetime() %}\n\n    {% do return('9999-12-31 23:59:59.9999999') %}\n\n{% endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.342348, "supported_languages": null}, "macro.datavault4dbt.bigquery__max_datetime": {"name": "bigquery__max_datetime", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/max_datetime.sql", "original_file_path": "macros/supporting/max_datetime.sql", "unique_id": "macro.datavault4dbt.bigquery__max_datetime", "macro_sql": "{%- macro bigquery__max_datetime() %}\n\n    {% do return('9999-12-31 23:59:59.999999') %}\n\n{% endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.342437, "supported_languages": null}, "macro.datavault4dbt.limit_rows": {"name": "limit_rows", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/limit_rows.sql", "original_file_path": "macros/supporting/limit_rows.sql", "unique_id": "macro.datavault4dbt.limit_rows", "macro_sql": "{%- macro limit_rows() %}\n\n{{- adapter.dispatch('limit_rows', 'datavault4dbt')() -}}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.default__limit_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3426402, "supported_languages": null}, "macro.datavault4dbt.default__limit_rows": {"name": "default__limit_rows", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/limit_rows.sql", "original_file_path": "macros/supporting/limit_rows.sql", "unique_id": "macro.datavault4dbt.default__limit_rows", "macro_sql": "{%- macro default__limit_rows() %}\n\n    {{ return('TOP 100') }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.34273, "supported_languages": null}, "macro.datavault4dbt.synapse__limit_rows": {"name": "synapse__limit_rows", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/limit_rows.sql", "original_file_path": "macros/supporting/limit_rows.sql", "unique_id": "macro.datavault4dbt.synapse__limit_rows", "macro_sql": "{%- macro synapse__limit_rows() %}\n\n{%- if target.schema == 'prod' %}\n    {{ return('') }}\n{%- else -%}\n    {{ return('TOP 100') }}\n{%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.342894, "supported_languages": null}, "macro.datavault4dbt.timestamp_format": {"name": "timestamp_format", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/timestamp_format.sql", "original_file_path": "macros/supporting/timestamp_format.sql", "unique_id": "macro.datavault4dbt.timestamp_format", "macro_sql": "{%- macro timestamp_format() %}\n\n    {{ return(adapter.dispatch('timestamp_format', 'datavault4dbt')()) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.snowflake__timestamp_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.343742, "supported_languages": null}, "macro.datavault4dbt.default__timestamp_format": {"name": "default__timestamp_format", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/timestamp_format.sql", "original_file_path": "macros/supporting/timestamp_format.sql", "unique_id": "macro.datavault4dbt.default__timestamp_format", "macro_sql": "{%- macro default__timestamp_format() %}\n\n{%- set global_var = var('datavault4dbt.timestamp_format', none) -%}\n{%- set timestamp_format = '' -%}\n\n{%- if global_var is mapping -%}\n    {%- if 'bigquery' in global_var.keys()|map('lower') -%}\n        {% set timestamp_format = global_var['bigquery'] %}\n    {%- else -%}\n        {%- if execute -%}\n            {%- do exceptions.warn(\"Warning: You have set the global variable 'datavault4dbt.timestamp_format' to a dictionary, but have not included the adapter you use (bigquery) as a key. Applying the default value.\") -%}\n        {% endif %}\n        {%- set timestamp_format = \"%Y-%m-%dT%H-%M-%S\" -%}\n    {% endif %}\n{%- elif global_var is not mapping and datavault4dbt.is_something(global_var) -%}\n    {%- set timestamp_format = global_var -%}\n{%- else -%}\n    {%- set timestamp_format = \"%Y-%m-%dT%H-%M-%S\" -%}\n{%- endif -%}\n\n{{ return(timestamp_format) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.344234, "supported_languages": null}, "macro.datavault4dbt.snowflake__timestamp_format": {"name": "snowflake__timestamp_format", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/timestamp_format.sql", "original_file_path": "macros/supporting/timestamp_format.sql", "unique_id": "macro.datavault4dbt.snowflake__timestamp_format", "macro_sql": "{%- macro snowflake__timestamp_format() %}\n\n{%- set global_var = var('datavault4dbt.timestamp_format', none) -%}\n{%- set timestamp_format = '' -%}\n\n{%- if global_var is mapping -%}\n    {%- if 'snowflake' in global_var.keys()|map('lower') -%}\n        {% set timestamp_format = global_var['snowflake'] %}\n    {%- else -%}\n        {%- if execute -%}\n            {%- do exceptions.warn(\"Warning: You have set the global variable 'datavault4dbt.timestamp_format' to a dictionary, but have not included the adapter you use (snowflake) as a key. Applying the default value.\") -%}\n        {% endif %}\n        {%- set timestamp_format = \"YYYY-MM-DDTHH24:MI:SS\" -%}\n    {% endif %}\n{%- elif global_var is not mapping and datavault4dbt.is_something(global_var) -%}\n    {%- set timestamp_format = global_var -%}\n{%- else -%}\n    {%- set timestamp_format = \"YYYY-MM-DDTHH24:MI:SS\" -%}\n{%- endif -%}\n\n{{ return(timestamp_format) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.344793, "supported_languages": null}, "macro.datavault4dbt.exasol__timestamp_format": {"name": "exasol__timestamp_format", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/timestamp_format.sql", "original_file_path": "macros/supporting/timestamp_format.sql", "unique_id": "macro.datavault4dbt.exasol__timestamp_format", "macro_sql": "{%- macro exasol__timestamp_format() %}\n\n{%- set global_var = var('datavault4dbt.timestamp_format', none) -%}\n{%- set timestamp_format = '' -%}\n\n{%- if global_var is mapping -%}\n    {%- if 'exasol' in global_var.keys()|map('lower') -%}\n        {% set timestamp_format = global_var['exasol'] %}\n    {%- else -%}\n        {%- if execute -%}\n            {%- do exceptions.warn(\"Warning: You have set the global variable 'datavault4dbt.timestamp_format' to a dictionary, but have not included the adapter you use (exasol) as a key. Applying the default value.\") -%}\n        {% endif %}\n        {%- set timestamp_format = \"YYYY-mm-dd HH:MI:SS\" -%}\n    {% endif %}\n{%- elif global_var is not mapping and datavault4dbt.is_something(global_var) -%}\n    {%- set timestamp_format = global_var -%}\n{%- else -%}\n    {%- set timestamp_format = \"YYYY-mm-dd HH:MI:SS\" -%}\n{%- endif -%}\n\n{{ return(timestamp_format) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3452759, "supported_languages": null}, "macro.datavault4dbt.synapse__timestamp_format": {"name": "synapse__timestamp_format", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/timestamp_format.sql", "original_file_path": "macros/supporting/timestamp_format.sql", "unique_id": "macro.datavault4dbt.synapse__timestamp_format", "macro_sql": "{%- macro synapse__timestamp_format() %}\n\n{%- set global_var = var('datavault4dbt.timestamp_format', none) -%}\n{%- set timestamp_format = '' -%}\n\n{%- if global_var is mapping -%}\n    {%- if 'synapse' in global_var.keys()|map('lower') -%}\n        {% set timestamp_format = global_var['synapse'] %}\n    {%- else -%}\n        {%- if execute -%}\n            {%- do exceptions.warn(\"Warning: You have set the global variable 'datavault4dbt.timestamp_format' to a dictionary, but have not included the adapter you use (synapse) as a key. Applying the default value.\") -%}\n        {% endif %}\n        {%- set timestamp_format = 127 -%}\n    {% endif %}\n{%- elif global_var is not mapping and datavault4dbt.is_something(global_var) -%}\n    {%- set timestamp_format = global_var -%}\n{%- else -%}  \n    {%- set timestamp_format = 126 -%}\n{%- endif -%}\n\n{{ return(timestamp_format) }} \n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.345792, "supported_languages": null}, "macro.datavault4dbt.postgres__timestamp_format": {"name": "postgres__timestamp_format", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/timestamp_format.sql", "original_file_path": "macros/supporting/timestamp_format.sql", "unique_id": "macro.datavault4dbt.postgres__timestamp_format", "macro_sql": "{%- macro postgres__timestamp_format() %}\n\n{%- set global_var = var('datavault4dbt.timestamp_format', none) -%}\n{%- set timestamp_format = '' -%}\n\n{%- if global_var is mapping -%}\n    {%- if 'postgres' in global_var.keys()|map('lower') -%}\n        {% set timestamp_format = global_var['postgres'] %}\n    {%- else -%}\n        {%- if execute -%}\n            {%- do exceptions.warn(\"Warning: You have set the global variable 'datavault4dbt.timestamp_format' to a dictionary, but have not included the adapter you use (postgres) as a key. Applying the default value.\") -%}\n        {% endif %}\n        {%- set timestamp_format = \"%Y-%m-%dT%H-%M-%S\" -%}\n    {% endif %}\n{%- elif global_var is not mapping and datavault4dbt.is_something(global_var) -%}\n    {%- set timestamp_format = global_var -%}\n{%- else -%}\n    {%- set timestamp_format = \"%Y-%m-%dT%H-%M-%S\" -%}\n{%- endif -%}\n\n{{ return(timestamp_format) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.datavault4dbt.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.346282, "supported_languages": null}, "macro.datavault4dbt.redshift__timestamp_format": {"name": "redshift__timestamp_format", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/timestamp_format.sql", "original_file_path": "macros/supporting/timestamp_format.sql", "unique_id": "macro.datavault4dbt.redshift__timestamp_format", "macro_sql": "{%- macro redshift__timestamp_format() %}\n\n{%- set global_var = var('datavault4dbt.timestamp_format', none) -%}\n{%- set timestamp_format = '' -%}\n\n{%- if global_var is mapping -%}\n    {%- if 'redshift' in global_var.keys()|map('lower') -%}\n        {% set timestamp_format = global_var['redshift'] %}\n    {%- else -%}\n        {%- if execute -%}\n            {%- do exceptions.warn(\"Warning: You have set the global variable 'datavault4dbt.timestamp_format' to a dictionary, but have not included the adapter you use (redshift) as a key. Applying the default value.\") -%}\n        {% endif %}\n        {%- set timestamp_format = \"YYYY-MM-DD HH24:MI:SS\" -%}\n    {% endif %}\n{%- elif global_var is not mapping and datavault4dbt.is_something(global_var) -%}\n    {%- set timestamp_format = global_var -%}\n{%- else -%}\n    {%- set timestamp_format = \"YYYY-MM-DD HH24:MI:SS\" -%}\n{%- endif -%}\n\n{{ return(timestamp_format) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.346793, "supported_languages": null}, "macro.datavault4dbt.beginning_of_all_times": {"name": "beginning_of_all_times", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/beginning_of_all_times.sql", "original_file_path": "macros/supporting/beginning_of_all_times.sql", "unique_id": "macro.datavault4dbt.beginning_of_all_times", "macro_sql": "{%- macro beginning_of_all_times() %}\n\n    {{ return( adapter.dispatch('beginning_of_all_times', 'datavault4dbt')() ) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.snowflake__beginning_of_all_times"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.34764, "supported_languages": null}, "macro.datavault4dbt.default__beginning_of_all_times": {"name": "default__beginning_of_all_times", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/beginning_of_all_times.sql", "original_file_path": "macros/supporting/beginning_of_all_times.sql", "unique_id": "macro.datavault4dbt.default__beginning_of_all_times", "macro_sql": "{%- macro default__beginning_of_all_times() %}\n\n{%- set global_var = var('datavault4dbt.beginning_of_all_times', none) -%}\n{%- set beginning_of_all_times = '' -%}\n\n{%- if global_var is mapping -%}\n    {%- if 'bigquery' in global_var.keys()|map('lower') -%}\n        {% set beginning_of_all_times = global_var['bigquery'] %}\n    {%- else -%}\n        {%- if execute -%}\n            {%- do exceptions.warn(\"Warning: You have set the global variable 'datavault4dbt.beginning_of_all_times' to a dictionary, but have not included the adapter you use (bigquery) as a key. Applying the default value.\") -%}\n        {% endif %}\n        {%- set beginning_of_all_times = \"0001-01-01T00-00-01\" -%}\n    {% endif %}\n{%- elif global_var is not mapping and datavault4dbt.is_something(global_var) -%}\n    {%- set beginning_of_all_times = global_var -%}\n{%- else -%}\n    {%- set beginning_of_all_times = \"0001-01-01T00-00-01\" -%}\n{%- endif -%}\n\n{{ return(beginning_of_all_times) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.348138, "supported_languages": null}, "macro.datavault4dbt.snowflake__beginning_of_all_times": {"name": "snowflake__beginning_of_all_times", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/beginning_of_all_times.sql", "original_file_path": "macros/supporting/beginning_of_all_times.sql", "unique_id": "macro.datavault4dbt.snowflake__beginning_of_all_times", "macro_sql": "{%- macro snowflake__beginning_of_all_times() %}\n\n{%- set global_var = var('datavault4dbt.beginning_of_all_times', none) -%}\n{%- set beginning_of_all_times = '' -%}\n\n{%- if global_var is mapping -%}\n    {%- if 'snowflake' in global_var.keys()|map('lower') -%}\n        {% set beginning_of_all_times = global_var['snowflake'] %}\n    {%- else -%}\n        {%- if execute -%}\n            {%- do exceptions.warn(\"Warning: You have set the global variable 'datavault4dbt.beginning_of_all_times' to a dictionary, but have not included the adapter you use (snowflake) as a key. Applying the default value.\") -%}\n        {% endif %}\n        {%- set beginning_of_all_times = \"0001-01-01T00:00:01\" -%}\n    {% endif %}\n{%- elif global_var is not mapping and datavault4dbt.is_something(global_var) -%}\n    {%- set beginning_of_all_times = global_var -%}\n{%- else -%}\n    {%- set beginning_of_all_times = \"0001-01-01T00:00:01\" -%}\n{%- endif -%}\n\n{{ return(beginning_of_all_times) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.348633, "supported_languages": null}, "macro.datavault4dbt.exasol__beginning_of_all_times": {"name": "exasol__beginning_of_all_times", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/beginning_of_all_times.sql", "original_file_path": "macros/supporting/beginning_of_all_times.sql", "unique_id": "macro.datavault4dbt.exasol__beginning_of_all_times", "macro_sql": "{%- macro exasol__beginning_of_all_times() %}\n\n{%- set global_var = var('datavault4dbt.beginning_of_all_times', none) -%}\n{%- set beginning_of_all_times = '' -%}\n\n{%- if global_var is mapping -%}\n    {%- if 'exasol' in global_var.keys()|map('lower') -%}\n        {% set beginning_of_all_times = global_var['exasol'] %}\n    {%- else -%}\n        {%- if execute -%}\n            {%- do exceptions.warn(\"Warning: You have set the global variable 'datavault4dbt.beginning_of_all_times' to a dictionary, but have not included the adapter you use (exasol) as a key. Applying the default value.\") -%}\n        {% endif %}\n        {%- set beginning_of_all_times = \"0001-01-01 00:00:01\" -%}\n    {% endif %}\n{%- elif global_var is not mapping and datavault4dbt.is_something(global_var) -%}\n    {%- set beginning_of_all_times = global_var -%}\n{%- else -%}\n    {%- set beginning_of_all_times = \"0001-01-01 00:00:01\" -%}\n{%- endif -%}\n\n{{ return(beginning_of_all_times) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.349131, "supported_languages": null}, "macro.datavault4dbt.synapse__beginning_of_all_times": {"name": "synapse__beginning_of_all_times", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/beginning_of_all_times.sql", "original_file_path": "macros/supporting/beginning_of_all_times.sql", "unique_id": "macro.datavault4dbt.synapse__beginning_of_all_times", "macro_sql": "{%- macro synapse__beginning_of_all_times() %}\n\n{%- set global_var = var('datavault4dbt.beginning_of_all_times', none) -%}\n{%- set beginning_of_all_times = '' -%}\n\n{%- if global_var is mapping -%}    \n    {%- if 'synapse' in global_var.keys()|map('lower') -%}\n        {% set beginning_of_all_times = global_var['synapse'] %}\n    {%- else -%}\n        {%- if execute -%}\n            {%- do exceptions.warn(\"Warning: You have set the global variable 'datavault4dbt.beginning_of_all_times' to a dictionary, but have not included the adapter you use (synapse) as a key. Applying the default value.\") -%}\n        {% endif %}\n        {%- set beginning_of_all_times = \"1901-01-01T00:00:01\" -%}\n    {% endif %}\n{%- elif global_var is not mapping and datavault4dbt.is_something(global_var) -%}\n    {%- set beginning_of_all_times = global_var -%}\n{%- else -%}        \n    {%- set beginning_of_all_times = \"1901-01-01T00:00:01\" -%}\n{%- endif -%}\n\n{{ return(beginning_of_all_times) }}\n\n{%- endmacro -%}  \n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.349622, "supported_languages": null}, "macro.datavault4dbt.postgres__beginning_of_all_times": {"name": "postgres__beginning_of_all_times", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/beginning_of_all_times.sql", "original_file_path": "macros/supporting/beginning_of_all_times.sql", "unique_id": "macro.datavault4dbt.postgres__beginning_of_all_times", "macro_sql": "{%- macro postgres__beginning_of_all_times() %}\n\n{%- set global_var = var('datavault4dbt.beginning_of_all_times', none) -%}\n{%- set beginning_of_all_times = '' -%}\n\n{%- if global_var is mapping -%}\n    {%- if 'postgres' in global_var.keys()|map('lower') -%}\n        {% set beginning_of_all_times = global_var['postgres'] %}\n    {%- else -%}\n        {%- if execute -%}\n            {%- do exceptions.warn(\"Warning: You have set the global variable 'datavault4dbt.beginning_of_all_times' to a dictionary, but have not included the adapter you use (postgres) as a key. Applying the default value.\") -%}\n        {% endif %}\n        {%- set beginning_of_all_times = \"0001-01-01 00:00:01\" -%}\n    {% endif %}\n{%- elif global_var is not mapping and datavault4dbt.is_something(global_var) -%}\n    {%- set beginning_of_all_times = global_var -%}\n{%- else -%}\n    {%- set beginning_of_all_times = \"0001-01-01 00:00:01\" -%}\n{%- endif -%}\n\n{{ return(beginning_of_all_times) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3501282, "supported_languages": null}, "macro.datavault4dbt.redshift__beginning_of_all_times": {"name": "redshift__beginning_of_all_times", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/beginning_of_all_times.sql", "original_file_path": "macros/supporting/beginning_of_all_times.sql", "unique_id": "macro.datavault4dbt.redshift__beginning_of_all_times", "macro_sql": "{%- macro redshift__beginning_of_all_times() %}\n\n{%- set global_var = var('datavault4dbt.beginning_of_all_times', none) -%}\n{%- set beginning_of_all_times = '' -%}\n\n{%- if global_var is mapping -%}\n    {%- if 'redshift' in global_var.keys()|map('lower') -%}\n        {% set beginning_of_all_times = global_var['redshift'] %}\n    {%- else -%}\n        {%- if execute -%}\n            {%- do exceptions.warn(\"Warning: You have set the global variable 'datavault4dbt.beginning_of_all_times' to a dictionary, but have not included the adapter you use (redshift) as a key. Applying the default value.\") -%}\n        {% endif %}\n        {%- set beginning_of_all_times = \"0001-01-01 00:00:01\" -%}\n    {% endif %}\n{%- elif global_var is not mapping and datavault4dbt.is_something(global_var) -%}\n    {%- set beginning_of_all_times = global_var -%}\n{%- else -%}\n    {%- set beginning_of_all_times = \"0001-01-01 00:00:01\" -%}\n{%- endif -%}\n\n{{ return(beginning_of_all_times) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.350625, "supported_languages": null}, "macro.datavault4dbt.hash_default_values": {"name": "hash_default_values", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/hash_default_values.sql", "original_file_path": "macros/supporting/hash_default_values.sql", "unique_id": "macro.datavault4dbt.hash_default_values", "macro_sql": "{%- macro hash_default_values(hash_function, hash_datatype=none) -%}\n\n    {{ return(adapter.dispatch('hash_default_values', 'datavault4dbt')(hash_function=hash_function,hash_datatype=hash_datatype)) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.datavault4dbt.snowflake__hash_default_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.351777, "supported_languages": null}, "macro.datavault4dbt.default__hash_default_values": {"name": "default__hash_default_values", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/hash_default_values.sql", "original_file_path": "macros/supporting/hash_default_values.sql", "unique_id": "macro.datavault4dbt.default__hash_default_values", "macro_sql": "{%- macro default__hash_default_values(hash_function, hash_datatype) -%}\n\n    {%- set dict_result = {} -%}\n    {%- set hash_alg = '' -%}\n    {%- set unknown_key = '' -%}\n    {%- set error_key = '' -%}\n\n    {%- if hash_function == 'MD5' -%}\n        {%- set hash_alg = 'MD5' -%}\n        {%- set unknown_key = '!00000000000000000000000000000000' -%}\n        {%- set error_key = '!ffffffffffffffffffffffffffffffff' -%}\n    {%- elif hash_function == 'SHA' or hash_function == 'SHA1' -%}\n        {%- set hash_alg = 'SHA1' -%}\n        {%- set unknown_key = '!0000000000000000000000000000000000000000' -%}\n        {%- set error_key = '!ffffffffffffffffffffffffffffffffffffffff' -%}\n    {%- elif hash_function == 'SHA2' or hash_function == 'SHA256' -%}\n        {%- set hash_alg = 'SHA256' -%}\n        {%- set unknown_key = '!0000000000000000000000000000000000000000000000000000000000000000' -%}\n        {%- set error_key = '!ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' -%}\n    {%- endif -%}\n\n    {%- do dict_result.update({\"hash_alg\": hash_alg, \"unknown_key\": unknown_key, \"error_key\": error_key }) -%}\n\n    {{ return(dict_result | tojson ) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.352396, "supported_languages": null}, "macro.datavault4dbt.snowflake__hash_default_values": {"name": "snowflake__hash_default_values", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/hash_default_values.sql", "original_file_path": "macros/supporting/hash_default_values.sql", "unique_id": "macro.datavault4dbt.snowflake__hash_default_values", "macro_sql": "{%- macro snowflake__hash_default_values(hash_function, hash_datatype) -%}\n\n    {%- set dict_result = {} -%}\n    {%- set hash_alg = '' -%}\n    {%- set unknown_key = '' -%}\n    {%- set error_key = '' -%}\n\n\n    {{ log('hash datatype: ' ~ hash_datatype, false) }}\n\n    {%- if hash_function == 'MD5' and hash_datatype == 'STRING' -%}\n        {%- set hash_alg = 'MD5' -%}\n        {%- set unknown_key = '!00000000000000000000000000000000' -%}\n        {%- set error_key = '!ffffffffffffffffffffffffffffffff' -%}\n    {%- elif hash_function == 'SHA1' or hash_function == 'SHA1_HEX' or hash_function == 'SHA' -%} \n        {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}\n            {%- set hash_alg = 'SHA1' -%}\n            {%- set unknown_key = '!0000000000000000000000000000000000000000' -%}\n            {%- set error_key = '!ffffffffffffffffffffffffffffffffffffffff' -%}\n        {%- elif 'BINARY' in hash_datatype -%}\n            {%- set hash_alg = 'SHA1_BINARY' -%}\n            {%- set unknown_key = \"TO_BINARY('0000000000000000000000000000000000000000')\" -%}\n            {%- set error_key = \"TO_BINARY('ffffffffffffffffffffffffffffffffffffffff')\" -%}        \n        {%- endif -%}\n    {%- elif hash_function == 'SHA2' or hash_function == 'SHA2_HEX' -%}\n        {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}\n            {%- set hash_alg = 'SHA2' -%}\n            {%- set unknown_key = '!0000000000000000000000000000000000000000000000000000000000000000' -%}\n            {%- set error_key = '!ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' -%}\n        {%- elif 'BINARY' in hash_datatype -%}\n            {%- set hash_alg = 'SHA2_BINARY' -%}\n            {%- set unknown_key = \"TO_BINARY('0000000000000000000000000000000000000000000000000000000000000000')\" -%}\n            {%- set error_key = \"TO_BINARY('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\" -%}        \n        {%- endif -%}   \n    {%- endif -%}\n\n    {%- do dict_result.update({\"hash_alg\": hash_alg, \"unknown_key\": unknown_key, \"error_key\": error_key }) -%}\n\n    {{ return(dict_result | tojson ) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.353562, "supported_languages": null}, "macro.datavault4dbt.exasol__hash_default_values": {"name": "exasol__hash_default_values", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/hash_default_values.sql", "original_file_path": "macros/supporting/hash_default_values.sql", "unique_id": "macro.datavault4dbt.exasol__hash_default_values", "macro_sql": "{%- macro exasol__hash_default_values(hash_function, hash_datatype=none) -%}\n\n    {%- set dict_result = {} -%}\n    {%- set hash_alg = '' -%}\n    {%- set unknown_key = '' -%}\n    {%- set error_key = '' -%}\n\n    {%- if hash_function == 'MD5' -%}\n        {%- set hash_alg = 'HASHTYPE_MD5' -%}\n        {%- set unknown_key = '!00000000000000000000000000000000' -%}\n        {%- set error_key = '!ffffffffffffffffffffffffffffffff' -%}\n    {%- elif (hash_function == 'SHA' or hash_function == 'SHA1') -%}\n        {%- set hash_alg = 'HASHTYPE_SHA1' -%}\n        {%- set unknown_key = '!0000000000000000000000000000000000000000' -%}\n        {%- set error_key = '!ffffffffffffffffffffffffffffffffffffffff' -%}\n    {%- elif (hash_function == 'SHA2' or hash_function == 'SHA256') -%}\n        {%- set hash_alg = 'HASHTYPE_SHA256' -%}\n        {%- set unknown_key = '!0000000000000000000000000000000000000000000000000000000000000000' -%}\n        {%- set error_key = '!ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' -%}\n    {%- endif -%}\n\n    {%- do dict_result.update({\"hash_alg\": hash_alg, \"unknown_key\": unknown_key, \"error_key\": error_key }) -%}\n\n    {{ return(dict_result | tojson ) }}\n\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.354246, "supported_languages": null}, "macro.datavault4dbt.synapse__hash_default_values": {"name": "synapse__hash_default_values", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/hash_default_values.sql", "original_file_path": "macros/supporting/hash_default_values.sql", "unique_id": "macro.datavault4dbt.synapse__hash_default_values", "macro_sql": "{%- macro synapse__hash_default_values(hash_function, hash_datatype) -%}\n\n    {%- set dict_result = {} -%}\n    {%- set hash_alg = '' -%}\n    {%- set unknown_key = '' -%}\n    {%- set error_key = '' -%}\n\n\n    {{ log('hash datatype: ' ~ hash_datatype, false) }}\n\n    {%- if hash_function == 'MD5' -%}\n        {%- if 'VARCHAR' in hash_datatype|upper or 'CHAR' in hash_datatype|upper or 'STRING' in hash_datatype|upper or 'TEXT' in hash_datatype|upper %}\n            {%- set hash_alg = 'MD5' -%}\n            {%- set unknown_key = \"CONVERT(varchar(34), '00000000000000000000000000000000')\" -%}\n            {%- set error_key = \"CONVERT(varchar(34), 'ffffffffffffffffffffffffffffffff')\" -%}\n        {%- elif 'BINARY' in hash_datatype|upper %}\n            {%- set hash_alg = 'MD5' -%}\n            {%- set unknown_key = \"CONVERT(binary(16), '00000000000000000000000000000000')\" -%}\n            {%- set error_key = \"CONVERT(binary(16), 'ffffffffffffffffffffffffffffffff')\" -%}           \n        {%- endif -%} \n    {%- elif hash_function == 'SHA1' or hash_function == 'SHA1_HEX' or hash_function == 'SHA' -%} \n        {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}\n            {%- set hash_alg = 'SHA1' -%}\n            {%- set unknown_key = '!0000000000000000000000000000000000000000' -%}\n            {%- set error_key = '!ffffffffffffffffffffffffffffffffffffffff' -%}\n        {%- elif 'BINARY' in hash_datatype -%}\n            {%- set hash_alg = 'SHA1_BINARY' -%}\n            {%- set unknown_key = \"TO_BINARY('0000000000000000000000000000000000000000')\" -%}\n            {%- set error_key = \"TO_BINARY('ffffffffffffffffffffffffffffffffffffffff')\" -%}        \n        {%- endif -%}\n    {%- elif hash_function == 'SHA2' or hash_function == 'SHA2_HEX' -%}\n        {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}\n            {%- set hash_alg = 'SHA2' -%}\n            {%- set unknown_key = '!0000000000000000000000000000000000000000000000000000000000000000' -%}\n            {%- set error_key = '!ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' -%}\n        {%- elif 'BINARY' in hash_datatype -%}\n            {%- set hash_alg = 'SHA2_BINARY' -%}\n            {%- set unknown_key = \"TO_BINARY('0000000000000000000000000000000000000000000000000000000000000000')\" -%}\n            {%- set error_key = \"TO_BINARY('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\" -%}        \n        {%- endif -%}   \n    {%- endif -%}\n\n    {%- do dict_result.update({\"hash_alg\": hash_alg, \"unknown_key\": unknown_key, \"error_key\": error_key }) -%}\n\n    {{ return(dict_result | tojson ) }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.355537, "supported_languages": null}, "macro.datavault4dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/hash.sql", "original_file_path": "macros/supporting/hash.sql", "unique_id": "macro.datavault4dbt.hash", "macro_sql": "{%- macro hash(columns=none, alias=none, is_hashdiff=false, multi_active_key=none, main_hashkey_column=none) -%}\n\n    {%- if is_hashdiff is none -%}\n        {%- set is_hashdiff = false -%}\n    {%- endif -%}\n\n    {{- adapter.dispatch('hash', 'datavault4dbt')(columns=columns,\n                                             alias=alias,\n                                             is_hashdiff=is_hashdiff,\n                                             multi_active_key=multi_active_key,\n                                             main_hashkey_column=main_hashkey_column) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.datavault4dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.357547, "supported_languages": null}, "macro.datavault4dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/hash.sql", "original_file_path": "macros/supporting/hash.sql", "unique_id": "macro.datavault4dbt.default__hash", "macro_sql": "\n\n\n{%- macro default__hash(columns, alias, is_hashdiff, multi_active_key, main_hashkey_column) -%}\n\n{%- set hash = datavault4dbt.hash_method() -%}\n{%- set concat_string = var('concat_string', '||') -%}\n{%- set quote = var('quote', '\"') -%}\n{%- set null_placeholder_string = var('null_placeholder_string', '^^') -%}\n\n{%- set hashkey_input_case_sensitive = var('datavault4dbt.hashkey_input_case_sensitive', FALSE) -%}\n{%- set hashdiff_input_case_sensitive = var('datavault4dbt.hashdiff_input_case_sensitive', TRUE) -%}\n\n{#- Select hashing algorithm -#}\n{%- set hash_dtype = var('datavault4dbt.hash_datatype', 'STRING') -%}\n{{ log('hash type in hash macro: ' ~ hash_dtype, false) }}\n{%- set hash_default_values = fromjson(datavault4dbt.hash_default_values(hash_function=hash,hash_datatype=hash_dtype)) -%}\n{%- set hash_alg = hash_default_values['hash_alg'] -%}\n{%- set unknown_key = hash_default_values['unknown_key'] -%}\n{%- set error_key = hash_default_values['error_key'] -%}\n\n{%- set attribute_standardise = datavault4dbt.attribute_standardise() %}\n\n\n{#- If single column to hash -#}\n{%- if columns is string -%}\n    {%- set columns = [columns] -%}\n{%- endif -%}\n\n{%- set all_null = [] -%}\n\n{%- if is_hashdiff  and datavault4dbt.is_something(multi_active_key) -%}\n    {%- set std_dict = fromjson(datavault4dbt.multi_active_concattenated_standardise(case_sensitive=hashdiff_input_case_sensitive, hash_alg=hash_alg, datatype=hash_dtype, alias=alias, zero_key=unknown_key, multi_active_key=multi_active_key, main_hashkey_column=main_hashkey_column)) -%}\n{%- elif is_hashdiff -%}\n    {%- set std_dict = fromjson(datavault4dbt.concattenated_standardise(case_sensitive=hashdiff_input_case_sensitive, hash_alg=hash_alg, datatype=hash_dtype, alias=alias, zero_key=unknown_key)) -%}\n{%- else -%}\n    {%- set std_dict = fromjson(datavault4dbt.concattenated_standardise(case_sensitive=hashkey_input_case_sensitive, hash_alg=hash_alg, datatype=hash_dtype, alias=alias, zero_key=unknown_key)) -%}\n{%- endif -%}\n\n    {%- set standardise_prefix = std_dict['standardise_prefix'] -%}\n    {%- set standardise_suffix = std_dict['standardise_suffix'] -%}\n\n{{ standardise_prefix }}\n\n{%- for column in columns -%}\n\n    {%- do all_null.append(null_placeholder_string) -%}\n\n    {%- if '.' in column %}\n        {% set column_str = column -%}\n    {%- else -%}\n        {%- set column_str = datavault4dbt.as_constant(column) -%}\n    {%- endif -%}\n\n    {{- \"\\nIFNULL(({}), '{}')\".format(attribute_standardise | replace('[EXPRESSION]', column_str) | replace('[QUOTE]', quote) | replace('[NULL_PLACEHOLDER_STRING]', null_placeholder_string), null_placeholder_string) | indent(4) -}}\n    {{- \",'{}',\".format(concat_string) if not loop.last -}}\n\n    {%- if loop.last -%}\n\n        {{ standardise_suffix | replace('[ALL_NULL]', all_null | join(\"\")) | indent(4) }}\n\n    {%- else -%}\n\n        {%- do all_null.append(concat_string) -%}\n\n    {%- endif -%}\n\n{%- endfor -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.datavault4dbt.hash_method", "macro.datavault4dbt.hash_default_values", "macro.datavault4dbt.attribute_standardise", "macro.datavault4dbt.is_something", "macro.datavault4dbt.multi_active_concattenated_standardise", "macro.datavault4dbt.concattenated_standardise", "macro.datavault4dbt.as_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.359346, "supported_languages": null}, "macro.datavault4dbt.exasol__hash": {"name": "exasol__hash", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/hash.sql", "original_file_path": "macros/supporting/hash.sql", "unique_id": "macro.datavault4dbt.exasol__hash", "macro_sql": "{%- macro exasol__hash(columns, alias, is_hashdiff, multi_active_key, main_hashkey_column) -%}\n\n    {%- set hash = datavault4dbt.hash_method() -%}\n    {%- set concat_string = var('concat_string', '||') -%}\n    {%- set quote = var('quote', '\"') -%}\n    {%- set null_placeholder_string = var('null_placeholder_string', '^^') -%}\n\n    {%- set hashkey_input_case_sensitive = var('datavault4dbt.hashkey_input_case_sensitive', FALSE) -%}\n    {%- set hashdiff_input_case_sensitive = var('datavault4dbt.hashdiff_input_case_sensitive', TRUE) -%}\n\n    {#- Select hashing algorithm -#}\n    {%- set hash_dtype = var('datavault4dbt.hash_datatype', 'HASHTYPE') -%}\n    {%- set hash_default_values = fromjson(datavault4dbt.hash_default_values(hash_function=hash,hash_datatype=hash_dtype)) -%}\n    {%- set hash_alg = hash_default_values['hash_alg'] -%}\n    {%- set unknown_key = hash_default_values['unknown_key'] -%}\n    {%- set error_key = hash_default_values['error_key'] -%}\n\n    {%- set attribute_standardise = datavault4dbt.attribute_standardise() %}\n\n    {#- If single column to hash -#}\n    {%- if columns is string -%}\n        {%- set columns = [columns] -%}\n    {%- endif -%}\n\n    {%- set all_null = [] -%}\n\n    {%- if is_hashdiff  and datavault4dbt.is_something(multi_active_key) -%}\n        {%- set std_dict = fromjson(datavault4dbt.multi_active_concattenated_standardise(case_sensitive=hashdiff_input_case_sensitive, hash_alg=hash_alg, datatype=hash_dtype, alias=alias, zero_key=unknown_key, multi_active_key=multi_active_key, main_hashkey_column=main_hashkey_column)) -%}\n    {%- elif is_hashdiff -%}\n        {%- set std_dict = fromjson(datavault4dbt.concattenated_standardise(case_sensitive=hashdiff_input_case_sensitive, hash_alg=hash_alg, datatype=hash_dtype, alias=alias, zero_key=unknown_key)) -%}\n    {%- else -%}\n        {%- set std_dict = fromjson(datavault4dbt.concattenated_standardise(case_sensitive=hashkey_input_case_sensitive, hash_alg=hash_alg, datatype=hash_dtype, alias=alias, zero_key=unknown_key)) -%}\n\n    {%- endif -%}\n\n    {%- set standardise_prefix = std_dict['standardise_prefix'] -%}\n    {%- set standardise_suffix = std_dict['standardise_suffix'] -%}\n\n    {{\" \"~ standardise_prefix }}\n\n    {%- for column in columns -%}\n\n        {%- do all_null.append(null_placeholder_string) -%}\n\n        {%- if '.' in column %}\n            {% set column_str = column -%}\n        {%- else -%}\n            {%- set column_str = datavault4dbt.as_constant(column) -%}\n        {%- endif -%}\n\n        {{- \"\\n NULLIF(({}), '{}')\".format(attribute_standardise | replace('[EXPRESSION]', column_str) | replace('[QUOTE]', quote) | replace('[NULL_PLACEHOLDER_STRING]', null_placeholder_string), null_placeholder_string) | indent(4) -}}\n        {{- \",'{}',\".format(concat_string) if not loop.last -}}\n\n        {%- if loop.last -%}\n\n            {{ standardise_suffix | replace('[ALL_NULL]', all_null | join(\"\")) | indent(4) }}\n\n        {%- else -%}\n\n            {%- do all_null.append(concat_string) -%}\n\n        {%- endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.hash_method", "macro.datavault4dbt.hash_default_values", "macro.datavault4dbt.attribute_standardise", "macro.datavault4dbt.is_something", "macro.datavault4dbt.multi_active_concattenated_standardise", "macro.datavault4dbt.concattenated_standardise", "macro.datavault4dbt.as_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.361175, "supported_languages": null}, "macro.datavault4dbt.synapse__hash": {"name": "synapse__hash", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/hash.sql", "original_file_path": "macros/supporting/hash.sql", "unique_id": "macro.datavault4dbt.synapse__hash", "macro_sql": "{%- macro synapse__hash(columns, alias, is_hashdiff, multi_active_key, main_hashkey_column) -%}\n\n{%- set hash = var('datavault4dbt.hash', 'MD5') -%}\n{%- set concat_string = var('concat_string', '||') -%}\n{%- set quote = var('quote', '\"') -%}\n{%- set null_placeholder_string = var('null_placeholder_string', '^^') -%}\n\n{%- set hashkey_input_case_sensitive = var('datavault4dbt.hashkey_input_case_sensitive', FALSE) -%}\n{%- set hashdiff_input_case_sensitive = var('datavault4dbt.hashdiff_input_case_sensitive', TRUE) -%}\n\n{#- Select hashing algorithm -#}\n{%- set hash_dtype = var('datavault4dbt.hash_datatype', 'STRING') -%}\n{{ log('hash type in hash macro: ' ~ hash_dtype, false) }}\n{%- set hash_default_values = fromjson(datavault4dbt.hash_default_values(hash_function=hash,hash_datatype=hash_dtype)) -%}\n{%- set hash_alg = hash_default_values['hash_alg'] -%}\n{%- set unknown_key = hash_default_values['unknown_key'] -%}\n{%- set error_key = hash_default_values['error_key'] -%}\n\n{%- if is_hashdiff -%}\n    {%- set attribute_standardise = datavault4dbt.attribute_standardise(hash_type='hashdiff') %}\n{%- else -%}\n    {%- set attribute_standardise = datavault4dbt.attribute_standardise(hash_type='hashkey') %}\n{%- endif -%}\n\n{#- If single column to hash -#}\n{%- if columns is string -%}\n    {%- set columns = [columns] -%}\n{%- endif -%}\n\n{%- set all_null = [] -%}\n\n{%- if is_hashdiff  and datavault4dbt.is_something(multi_active_key) -%}\n    {%- set std_dict = fromjson(datavault4dbt.multi_active_concattenated_standardise(case_sensitive=hashdiff_input_case_sensitive, hash_alg=hash_alg, datatype=hash_dtype, alias=alias, zero_key=unknown_key, multi_active_key=multi_active_key, main_hashkey_column=main_hashkey_column)) -%}\n{%- elif is_hashdiff -%}\n    {%- set std_dict = fromjson(datavault4dbt.concattenated_standardise(case_sensitive=hashdiff_input_case_sensitive, hash_alg=hash_alg, datatype=hash_dtype, alias=alias, zero_key=unknown_key)) -%}\n{%- else -%}\n    {%- set std_dict = fromjson(datavault4dbt.concattenated_standardise(case_sensitive=hashkey_input_case_sensitive, hash_alg=hash_alg, datatype=hash_dtype, alias=alias, zero_key=unknown_key)) -%}\n{%- endif -%}\n\n    {%- set standardise_prefix = std_dict['standardise_prefix'] -%}\n    {%- set standardise_suffix = std_dict['standardise_suffix'] -%}\n\n{{ standardise_prefix }}\n\n{%- for column in columns -%}\n\n    {%- do all_null.append(null_placeholder_string) -%}\n\n    {%- if '.' in column %}\n        {% set column_str = column -%}\n    {%- else -%}\n        {%- set column_str = datavault4dbt.as_constant(column) -%}\n    {%- endif -%}\n    {{ log('attribute_standardise: '~attribute_standardise, false)}}\n\n    {{- \"\\nISNULL(({}), '{}')\".format(attribute_standardise | replace('[EXPRESSION]', column_str) | replace('[QUOTE]', quote) | replace('[NULL_PLACEHOLDER_STRING]', null_placeholder_string), null_placeholder_string) | indent(4) -}}\n    {{- \",'{}',\".format(concat_string) if not loop.last -}}\n    {{- \", ''\" if columns|length == 1 -}}\n\n    {%- if loop.last -%}\n\n        {{ standardise_suffix | replace('[ALL_NULL]', all_null | join(\"\")) | indent(4) }}\n\n    {%- else -%}\n\n        {%- do all_null.append(concat_string) -%}\n\n    {%- endif -%}\n\n{%- endfor -%}\n\n{%- endmacro -%}    \n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.hash_default_values", "macro.datavault4dbt.attribute_standardise", "macro.datavault4dbt.is_something", "macro.datavault4dbt.multi_active_concattenated_standardise", "macro.datavault4dbt.concattenated_standardise", "macro.datavault4dbt.as_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.363169, "supported_languages": null}, "macro.datavault4dbt.postgres__hash": {"name": "postgres__hash", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/hash.sql", "original_file_path": "macros/supporting/hash.sql", "unique_id": "macro.datavault4dbt.postgres__hash", "macro_sql": "{%- macro postgres__hash(columns, alias, is_hashdiff, multi_active_key, main_hashkey_column, rtrim_hashdiff) -%}\n\n\n{%- set hash = var('datavault4dbt.hash', 'MD5') -%}\n{%- set concat_string = var('concat_string', '||') -%}\n{%- set quote = var('quote', '\"') -%}\n{%- set null_placeholder_string = var('null_placeholder_string', '^^') -%}\n\n{%- set hashkey_input_case_sensitive = var('datavault4dbt.hashkey_input_case_sensitive', FALSE) -%}\n{%- set hashdiff_input_case_sensitive = var('datavault4dbt.hashdiff_input_case_sensitive', TRUE) -%}\n\n{#- Select hashing algorithm -#}\n\n{%- set hash_dtype = var('datavault4dbt.hash_datatype', 'VARCHAR') -%}\n\n{{ log('hash type in hash macro: ' ~ hash_dtype, false) }}\n{%- set hash_default_values = fromjson(datavault4dbt.hash_default_values(hash_function=hash,hash_datatype=hash_dtype)) -%}\n{%- set hash_alg = hash_default_values['hash_alg'] -%}\n{%- set unknown_key = hash_default_values['unknown_key'] -%}\n{%- set error_key = hash_default_values['error_key'] -%}\n\n{%- set attribute_standardise = datavault4dbt.attribute_standardise() %}\n\n\n{#- If single column to hash -#}\n{%- if columns is string -%}\n    {%- set columns = [columns] -%}\n{%- endif -%}\n\n{%- set all_null = [] -%}\n\n{%- if is_hashdiff  and datavault4dbt.is_something(multi_active_key) -%}\n    {%- set std_dict = fromjson(datavault4dbt.multi_active_concattenated_standardise(case_sensitive=hashdiff_input_case_sensitive, hash_alg=hash_alg, datatype=hash_dtype, alias=alias, zero_key=unknown_key, multi_active_key=multi_active_key, main_hashkey_column=main_hashkey_column)) -%}\n{%- elif is_hashdiff -%}\n    {%- set std_dict = fromjson(datavault4dbt.concattenated_standardise(case_sensitive=hashdiff_input_case_sensitive, hash_alg=hash_alg, datatype=hash_dtype, alias=alias, zero_key=unknown_key,is_hashdiff=is_hashdiff, rtrim_hashdiff=rtrim_hashdiff)) -%}\n{%- else -%}\n    {%- set std_dict = fromjson(datavault4dbt.concattenated_standardise(case_sensitive=hashkey_input_case_sensitive, hash_alg=hash_alg, datatype=hash_dtype, alias=alias, zero_key=unknown_key,is_hashdiff=is_hashdiff, rtrim_hashdiff=rtrim_hashdiff)) -%}\n{%- endif -%}\n\n    {%- set standardise_prefix = std_dict['standardise_prefix'] -%}\n    {%- set standardise_suffix = std_dict['standardise_suffix'] -%}\n\n{{ standardise_prefix }}\n\n{%- for column in columns -%}\n\n    {%- do all_null.append(null_placeholder_string) -%}\n\n    {%- if '.' in column %}\n        {% set column_str = column -%}\n    {%- else -%}\n        {%- set column_str = datavault4dbt.as_constant(column) -%}\n    {%- endif -%}\n\n    {{- \"\\nCOALESCE(({}), '{}')\".format(attribute_standardise | replace('[EXPRESSION]', column_str) | replace('[QUOTE]', quote) | replace('[NULL_PLACEHOLDER_STRING]', null_placeholder_string), null_placeholder_string) | indent(4) -}}\n    {{- \",'{}',\".format(concat_string) if not loop.last -}}\n\n    {%- if loop.last -%}\n\n        {{ standardise_suffix | replace('[ALL_NULL]', all_null | join(\"\")) | indent(4) }}\n\n    {%- else -%}\n\n        {%- do all_null.append(concat_string) -%}\n\n    {%- endif -%}\n\n{%- endfor -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.hash_default_values", "macro.datavault4dbt.attribute_standardise", "macro.datavault4dbt.is_something", "macro.datavault4dbt.multi_active_concattenated_standardise", "macro.datavault4dbt.concattenated_standardise", "macro.datavault4dbt.as_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3650382, "supported_languages": null}, "macro.datavault4dbt.redshift__hash": {"name": "redshift__hash", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/hash.sql", "original_file_path": "macros/supporting/hash.sql", "unique_id": "macro.datavault4dbt.redshift__hash", "macro_sql": "{%- macro redshift__hash(columns, alias, is_hashdiff, multi_active_key, main_hashkey_column, rtrim_hashdiff) -%}\n\n{%- set hash = var('datavault4dbt.hash', 'MD5') -%}\n{%- set concat_string = var('concat_string', '|') -%}\n{%- set quote = var('quote', '\"') -%}\n{%- set null_placeholder_string = var('null_placeholder_string', '^^') -%}\n\n{%- set hashkey_input_case_sensitive = var('datavault4dbt.hashkey_input_case_sensitive', FALSE) -%}\n{%- set hashdiff_input_case_sensitive = var('datavault4dbt.hashdiff_input_case_sensitive', TRUE) -%}\n\n{#- Select hashing algorithm -#}\n{%- set hash_dtype = var('datavault4dbt.hash_datatype', 'VARCHAR') -%}\n{{ log('hash type in hash macro: ' ~ hash_dtype, false) }}\n{%- set hash_default_values = fromjson(datavault4dbt.hash_default_values(hash_function=hash,hash_datatype=hash_dtype)) -%}\n{%- set hash_alg = hash_default_values['hash_alg'] -%}\n{%- set unknown_key = hash_default_values['unknown_key'] -%}\n{%- set error_key = hash_default_values['error_key'] -%}\n\n{%- set attribute_standardise = datavault4dbt.attribute_standardise() %}\n\n{#- If single column to hash -#}\n{%- if columns is string -%}\n    {%- set columns = [columns] -%}\n{%- endif -%}\n\n{%- set all_null = [] -%}\n\n{%- if is_hashdiff  and datavault4dbt.is_something(multi_active_key) -%}\n    {%- set std_dict = fromjson(datavault4dbt.multi_active_concattenated_standardise(case_sensitive=hashdiff_input_case_sensitive, hash_alg=hash_alg, datatype=hash_dtype, alias=alias, zero_key=unknown_key, multi_active_key=multi_active_key, main_hashkey_column=main_hashkey_column)) -%}\n{%- elif is_hashdiff -%}\n    {%- set std_dict = fromjson(datavault4dbt.concattenated_standardise(case_sensitive=hashdiff_input_case_sensitive, hash_alg=hash_alg, datatype=hash_dtype, alias=alias, zero_key=unknown_key,is_hashdiff=is_hashdiff, rtrim_hashdiff=rtrim_hashdiff)) -%}\n{%- else -%}\n    {%- set std_dict = fromjson(datavault4dbt.concattenated_standardise(case_sensitive=hashkey_input_case_sensitive, hash_alg=hash_alg, datatype=hash_dtype, alias=alias, zero_key=unknown_key,is_hashdiff=is_hashdiff, rtrim_hashdiff=rtrim_hashdiff)) -%}\n{%- endif -%}\n\n    {%- set standardise_prefix = std_dict['standardise_prefix'] -%}\n    {%- set standardise_suffix = std_dict['standardise_suffix'] -%}\n\n{{ standardise_prefix }}\n\n{%- for column in columns -%}\n\n    {%- do all_null.append(null_placeholder_string) -%}\n\n    {%- if '.' in column %}\n        {% set column_str = column -%}\n    {%- else -%}\n        {%- set column_str = datavault4dbt.as_constant(column) -%}\n    {%- endif -%}\n\n    {{- \"\\nCOALESCE({}, '{}')\".format(attribute_standardise | replace('[EXPRESSION]', column_str) | replace('[QUOTE]', quote) | replace('[NULL_PLACEHOLDER_STRING]', null_placeholder_string), null_placeholder_string) | indent(4) -}}\n    {{- \"|| '{}' ||\".format(concat_string) if not loop.last -}}\n\n\n    {%- if loop.last -%}\n\n        {{ standardise_suffix | replace('[ALL_NULL]', all_null | join(\"\")) | indent(4) }}\n\n    {%- else -%}\n\n        {%- do all_null.append(concat_string) -%}\n\n    {%- endif -%}\n\n{%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.hash_default_values", "macro.datavault4dbt.attribute_standardise", "macro.datavault4dbt.is_something", "macro.datavault4dbt.multi_active_concattenated_standardise", "macro.datavault4dbt.concattenated_standardise", "macro.datavault4dbt.as_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.366915, "supported_languages": null}, "macro.datavault4dbt.prefix": {"name": "prefix", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/prefix.sql", "original_file_path": "macros/supporting/prefix.sql", "unique_id": "macro.datavault4dbt.prefix", "macro_sql": "{%- macro prefix(columns, prefix_str, alias_target) -%}\n\n    {{- adapter.dispatch('prefix', 'datavault4dbt')(columns=columns,\n                                               prefix_str=prefix_str,\n                                               alias_target=alias_target) -}}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.datavault4dbt.default__prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3673909, "supported_languages": null}, "macro.datavault4dbt.default__prefix": {"name": "default__prefix", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/prefix.sql", "original_file_path": "macros/supporting/prefix.sql", "unique_id": "macro.datavault4dbt.default__prefix", "macro_sql": "{%- macro default__prefix(columns=none, prefix_str=none, alias_target='source') -%}\n\n    {%- if columns and prefix_str -%}\n\n        {%- for col in columns -%}\n\n            {%- if col is mapping -%}\n\n                {%- if alias_target == 'source' -%}\n\n                    {{- datavault4dbt.prefix([col['source_column']], prefix_str) -}}\n\n                {%- elif alias_target == 'target' -%}\n\n                    {{- datavault4dbt.prefix([col['alias']], prefix_str) -}}\n\n                {%- else -%}\n\n                    {{- datavault4dbt.prefix([col['source_column']], prefix_str) -}}\n\n                {%- endif -%}\n\n                {%- if not loop.last -%} , {% endif %}\n\n            {%- else -%}\n\n                {%- if col is iterable and col is not string -%}\n\n                    {{- datavault4dbt.prefix(col, prefix_str) -}}\n\n                {%- elif col is not none -%}\n\n                    {{- prefix_str}}.{{col.strip() -}}\n                {% else %}\n\n                    {%- if execute -%}\n                        {{- exceptions.raise_compiler_error(\"Unexpected or missing configuration for '\" ~ this ~ \"' Unable to prefix columns.\") -}}\n                    {%- endif -%}\n                {%- endif -%}\n\n                {{- ', ' if not loop.last -}}\n\n            {%- endif -%}\n\n        {%- endfor -%}\n\n    {%- else -%}\n\n        {%- if execute -%}\n            {{- exceptions.raise_compiler_error(\"Invalid parameters provided to prefix macro. Expected: (columns [list/string], prefix_str [string]) got: (\" ~ columns ~ \", \" ~ prefix_str ~ \")\") -}}\n        {%- endif -%}\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3682282, "supported_languages": null}, "macro.datavault4dbt.source_model_processing": {"name": "source_model_processing", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/source_models.sql", "original_file_path": "macros/supporting/source_models.sql", "unique_id": "macro.datavault4dbt.source_model_processing", "macro_sql": "{%- macro source_model_processing(source_models, set_rsrc_static=true, parameters={}, business_keys=none, reference_keys=none, foreign_hashkeys=none, payload=none) -%}\n\n    {%- set ns_source_models = namespace(source_model_list = [], source_model_list_tmp=[], source_model_dict = {}, source_model_input = [], has_rsrc_static_defined=true, source_models_rsrc_dict = {}) -%}\n\n    {%- set dict_result = {} -%}\n\n    {{ log('ref_keys: '~reference_keys, false)}}\n\n    {%- if source_models is mapping -%}\n\n        {%- for source_model in source_models.keys() -%}\n\n            {%- set source_model_dict = source_models[source_model] -%}\n            {%- do source_model_dict.update({'name': source_model}) -%}\n\n            {%- do ns_source_models.source_model_list.append(source_model_dict) -%}\n\n        {%- endfor -%}\n\n    {%- elif not datavault4dbt.is_list(source_models) -%}\n\n        {%- if parameters.keys()|length > 0 -%}\n\n            {%- for parameter, input in parameters.items() -%}\n                {% do ns_source_models.source_model_dict.update({parameter: input}) %}\n            {%- endfor -%}\n\n        {%- endif -%}\n\n        {%- do ns_source_models.source_model_list.append(ns_source_models.source_model_dict) -%}\n\n    {%- elif datavault4dbt.is_list(source_models) -%}\n\n        {%- set ns_source_models.source_model_list = source_models -%}\n\n    {%- endif -%}\n\n    {%- for source_model in ns_source_models.source_model_list -%}\n\n        {%- do source_model.update({'id': loop.index}) -%}\n\n        {%- if parameters.keys()|length > 0 -%}\n            \n            {%- for parameter, input in parameters.items() -%}\n\n                {%- if parameter not in source_model.keys() -%}\n                    {%- do source_model.update({parameter: input}) -%}\n                {%- endif -%}\n\n            {%- endfor -%}\n\n        {%- endif -%}\n\n        {%- if set_rsrc_static -%}\n\n            {%- if 'rsrc_static' not in source_model.keys() -%}\n                {%- set ns_source_models.has_rsrc_static_defined = false -%}\n            {%- else -%}\n\n                {%- if not (source_model['rsrc_static'] is iterable and source_model['rsrc_static'] is not string) -%}\n\n                    {%- if source_model['rsrc_static']  == '' or source_model['rsrc_static'] is none -%}\n                        {%- if execute -%}\n                            {{ exceptions_source_models.raise_compiler_error(\"If rsrc_static is defined -> it must not be an empty string \") }}\n                        {%- endif %}\n                    {%- else -%}\n                        {%- do ns_source_models.source_models_rsrc_dict.update({loop.index : [source_model['rsrc_static']] } ) -%}\n                    {%- endif -%}\n\n                {%- elif source_model['rsrc_static']  is iterable -%}\n                    {%- do ns_source_models.source_models_rsrc_dict.update({loop.index : source_model['rsrc_static']  } ) -%}\n                {%- endif -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- if business_keys is not none -%}\n            {%- set bk_column_input = business_keys -%}\n\n            {%- if 'bk_columns' in source_model.keys() -%}\n                {%- set bk_column_input = source_model['bk_columns'] -%}\n\n                {%- if not (bk_column_input is iterable and bk_column_input is not string) -%}\n                    {%- set bk_column_input = [bk_column_input] -%}\n                {%- endif -%}\n\n                {%- do source_model.update({'bk_columns': bk_column_input}) -%}\n            {%- elif not datavault4dbt.is_list(bk_column_input) -%}\n                {%- set bk_list = datavault4dbt.expand_column_list(columns=[bk_column_input]) -%}\n                {%- do source_model.update({'bk_columns': bk_list}) -%}\n            {%- else -%}{%- do source_model.update({'bk_columns': business_keys}) -%}\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- if reference_keys is not none -%}\n            {%- set ref_column_input = reference_keys -%}\n\n            {%- if 'ref_keys' in source_model.keys() -%}\n                {%- set ref_column_input = source_model['ref_keys'] -%}\n\n                {%- if not (ref_column_input is iterable and ref_column_input is not string) -%}\n                    {%- set ref_column_input = [ref_column_input] -%}\n                {%- endif -%}\n\n                {%- do source_model.update({'ref_keys': ref_column_input}) -%}\n            {%- elif not datavault4dbt.is_list(ref_column_input) -%}\n                {%- set rk_list = datavault4dbt.expand_column_list(columns=[ref_column_input]) -%}\n                {%- do source_model.update({'ref_keys': rk_list}) -%}\n            {%- else -%}{%- do source_model.update({'ref_keys': ref_column_input}) -%}\n            {%- endif -%}\n\n        {%- endif -%}       \n\n        {%- if foreign_hashkeys is not none -%}\n            {%- set foreign_hashkeys_input = foreign_hashkeys -%}\n\n            {%- if 'fk_columns' in source_model.keys() -%}\n                {%- set foreign_hashkeys_input = source_model['fk_columns'] -%}\n\n                {%- if not (foreign_hashkeys_input is iterable and foreign_hashkeys_input is not string) -%}\n                    {%- set foreign_hashkeys_input = [foreign_hashkeys_input] -%}\n                {%- endif -%}\n\n                {%- do source_model.update({'fk_columns': foreign_hashkeys_input}) -%}\n            {%- elif not datavault4dbt.is_list(foreign_hashkeys_input) -%}\n                {%- set fk_list = datavault4dbt.expand_column_list(columns=[foreign_hashkeys_input]) -%}\n                {%- do source_model.update({'fk_columns': fk_list}) -%}\n            {%- else -%}{%- do source_model.update({'fk_columns': foreign_hashkeys_input}) -%}\n            {%- endif -%}\n\n        {%- endif -%}     \n\n        {%- if payload is not none -%}\n            {%- set payload_input = payload -%}\n\n            {%- if 'payload' in source_model.keys() -%}\n                {%- set payload_input = source_model['payload'] -%}\n\n                {%- if not (payload_input is iterable and payload_input is not string) -%}\n                    {%- set payload_input = [payload_input] -%}\n                {%- endif -%}\n\n                {%- do source_model.update({'payload': payload_input}) -%}\n            {%- elif not datavault4dbt.is_list(payload_input) -%}\n                {%- set payload_list = datavault4dbt.expand_column_list(columns=[payload_input]) -%}\n                {%- do source_model.update({'payload': payload_list}) -%}\n            {%- else -%}{%- do source_model.update({'payload': payload_input}) -%}\n            {%- endif -%}\n\n        {%- endif -%}                  \n\n        {%- do ns_source_models.source_model_list_tmp.append(source_model) -%}\n\n    {%- endfor -%}\n\n    {%- do dict_result.update({\"source_model_list\": ns_source_models.source_model_list_tmp ,\"has_rsrc_static_defined\": ns_source_models.has_rsrc_static_defined, \"source_models_rsrc_dict\": ns_source_models.source_models_rsrc_dict}) -%}\n     \n     {{log('dict_result: '~ dict_result, false)}}\n\n    {{ return(dict_result | tojson) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.is_list", "macro.datavault4dbt.expand_column_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.372881, "supported_languages": null}, "macro.datavault4dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/current_timestamp.sql", "original_file_path": "macros/supporting/current_timestamp.sql", "unique_id": "macro.datavault4dbt.current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'datavault4dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.datavault4dbt.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.373129, "supported_languages": null}, "macro.datavault4dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/current_timestamp.sql", "original_file_path": "macros/supporting/current_timestamp.sql", "unique_id": "macro.datavault4dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    {{ dbt_utils.current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.datavault4dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3732128, "supported_languages": null}, "macro.datavault4dbt.synapse__current_timestamp": {"name": "synapse__current_timestamp", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/current_timestamp.sql", "original_file_path": "macros/supporting/current_timestamp.sql", "unique_id": "macro.datavault4dbt.synapse__current_timestamp", "macro_sql": "{% macro synapse__current_timestamp() %}\n    sysdatetime()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3732722, "supported_languages": null}, "macro.datavault4dbt.current_timestamp_in_utc": {"name": "current_timestamp_in_utc", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/current_timestamp.sql", "original_file_path": "macros/supporting/current_timestamp.sql", "unique_id": "macro.datavault4dbt.current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'datavault4dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.datavault4dbt.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3733928, "supported_languages": null}, "macro.datavault4dbt.default__current_timestamp_in_utc": {"name": "default__current_timestamp_in_utc", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/current_timestamp.sql", "original_file_path": "macros/supporting/current_timestamp.sql", "unique_id": "macro.datavault4dbt.default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp_in_utc()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.datavault4dbt.current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.37347, "supported_languages": null}, "macro.datavault4dbt.synapse__current_timestamp_in_utc": {"name": "synapse__current_timestamp_in_utc", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/current_timestamp.sql", "original_file_path": "macros/supporting/current_timestamp.sql", "unique_id": "macro.datavault4dbt.synapse__current_timestamp_in_utc", "macro_sql": "{% macro synapse__current_timestamp_in_utc() %}\n    sysutcdatetime()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.373523, "supported_languages": null}, "macro.datavault4dbt.get_standard_string": {"name": "get_standard_string", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/get_standard_string.sql", "original_file_path": "macros/supporting/get_standard_string.sql", "unique_id": "macro.datavault4dbt.get_standard_string", "macro_sql": "{%- macro get_standard_string(string_list) -%}\n\nRTRIM(CONCAT(\n    {%- for column in string_list -%}\n        IFNULL(TRIM(CAST({{ column }} AS STRING)), '^^'), '||'\n        {%- if not loop.last -%}, {% endif %}\n    {% endfor %}\n))\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3737311, "supported_languages": null}, "macro.datavault4dbt.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/get_query_results_as_dict.sql", "original_file_path": "macros/supporting/get_query_results_as_dict.sql", "unique_id": "macro.datavault4dbt.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'datavault4dbt')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.datavault4dbt.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3739982, "supported_languages": null}, "macro.datavault4dbt.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/get_query_results_as_dict.sql", "original_file_path": "macros/supporting/get_query_results_as_dict.sql", "unique_id": "macro.datavault4dbt.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n    {{ return(dbt_utils.get_query_results_as_dict(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.374102, "supported_languages": null}, "macro.datavault4dbt.synapse__get_query_results_as_dict": {"name": "synapse__get_query_results_as_dict", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/get_query_results_as_dict.sql", "original_file_path": "macros/supporting/get_query_results_as_dict.sql", "unique_id": "macro.datavault4dbt.synapse__get_query_results_as_dict", "macro_sql": "{% macro synapse__get_query_results_as_dict(query) %}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {# Column names in upper case for consistency #}\n            {% do sql_results.update({column_name.upper(): column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.374519, "supported_languages": null}, "macro.datavault4dbt.parse_iso8601_date": {"name": "parse_iso8601_date", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/parse_iso8601_date.sql", "original_file_path": "macros/supporting/parse_iso8601_date.sql", "unique_id": "macro.datavault4dbt.parse_iso8601_date", "macro_sql": "{%- macro parse_iso8601_date(column_name) -%}\n    PARSE_DATE('%Y-%m-%d', {{ column_name }})\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3746262, "supported_languages": null}, "macro.datavault4dbt.end_of_all_times": {"name": "end_of_all_times", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/end_of_all_times.sql", "original_file_path": "macros/supporting/end_of_all_times.sql", "unique_id": "macro.datavault4dbt.end_of_all_times", "macro_sql": "{%- macro end_of_all_times() %}\n\n    {{ return(adapter.dispatch('end_of_all_times', 'datavault4dbt')()) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.snowflake__end_of_all_times"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3753679, "supported_languages": null}, "macro.datavault4dbt.default__end_of_all_times": {"name": "default__end_of_all_times", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/end_of_all_times.sql", "original_file_path": "macros/supporting/end_of_all_times.sql", "unique_id": "macro.datavault4dbt.default__end_of_all_times", "macro_sql": "{%- macro default__end_of_all_times() %}\n\n{%- set global_var = var('datavault4dbt.end_of_all_times', none) -%}\n{%- set end_of_all_times = '' -%}\n\n{%- if global_var is mapping -%}\n    {%- if 'bigquery' in global_var.keys()|map('lower') -%}\n        {% set end_of_all_times = global_var['bigquery'] %}\n    {%- else -%}\n        {%- if execute -%}\n            {%- do exceptions.warn(\"Warning: You have set the global variable 'datavault4dbt.end_of_all_times' to a dictionary, but have not included the adapter you use (bigquery) as a key. Applying the default value.\") -%}\n        {% endif %}\n        {%- set end_of_all_times = \"8888-12-31T23-59-59\" -%}\n    {% endif %}\n{%- elif global_var is not mapping and datavault4dbt.is_something(global_var) -%}\n    {%- set end_of_all_times = global_var -%}\n{%- else -%}\n    {%- set end_of_all_times = \"8888-12-31T23-59-59\" -%}\n{%- endif -%}\n\n{{ return(end_of_all_times) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3758469, "supported_languages": null}, "macro.datavault4dbt.snowflake__end_of_all_times": {"name": "snowflake__end_of_all_times", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/end_of_all_times.sql", "original_file_path": "macros/supporting/end_of_all_times.sql", "unique_id": "macro.datavault4dbt.snowflake__end_of_all_times", "macro_sql": "{%- macro snowflake__end_of_all_times() %}\n\n{%- set global_var = var('datavault4dbt.end_of_all_times', none) -%}\n{%- set end_of_all_times = '' -%}\n\n{%- if global_var is mapping -%}\n    {%- if 'snowflake' in global_var.keys()|map('lower') -%}\n        {% set end_of_all_times = global_var['snowflake'] %}\n    {%- else -%}\n        {%- if execute -%}\n            {%- do exceptions.warn(\"Warning: You have set the global variable 'datavault4dbt.end_of_all_times' to a dictionary, but have not included the adapter you use (snowflake) as a key. Applying the default value.\") -%}\n        {% endif %}\n        {%- set end_of_all_times = \"8888-12-31T23:59:59\" -%}\n    {% endif %}\n{%- elif global_var is not mapping and datavault4dbt.is_something(global_var) -%}\n    {%- set end_of_all_times = global_var -%}\n{%- else -%}\n    {%- set end_of_all_times = \"8888-12-31T23:59:59\" -%}\n{%- endif -%}\n\n{{ return(end_of_all_times) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.376406, "supported_languages": null}, "macro.datavault4dbt.exasol__end_of_all_times": {"name": "exasol__end_of_all_times", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/end_of_all_times.sql", "original_file_path": "macros/supporting/end_of_all_times.sql", "unique_id": "macro.datavault4dbt.exasol__end_of_all_times", "macro_sql": "{%- macro exasol__end_of_all_times() %}\n\n{%- set global_var = var('datavault4dbt.end_of_all_times', none) -%}\n{%- set end_of_all_times = '' -%}\n\n{%- if global_var is mapping -%}\n    {%- if 'exasol' in global_var.keys()|map('lower') -%}\n        {% set end_of_all_times = global_var['exasol'] %}\n    {%- else -%}\n        {%- if execute -%}\n            {%- do exceptions.warn(\"Warning: You have set the global variable 'datavault4dbt.end_of_all_times' to a dictionary, but have not included the adapter you use (exasol) as a key. Applying the default value.\") -%}\n        {% endif %}\n        {%- set end_of_all_times = \"8888-12-31 23:59:59\" -%}\n    {% endif %}\n{%- elif global_var is not mapping and datavault4dbt.is_something(global_var) -%}\n    {%- set end_of_all_times = global_var -%}\n{%- else -%}\n    {%- set end_of_all_times = \"8888-12-31 23:59:59\" -%}\n{%- endif -%}\n\n{{ return(end_of_all_times) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3768861, "supported_languages": null}, "macro.datavault4dbt.synapse__end_of_all_times": {"name": "synapse__end_of_all_times", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/end_of_all_times.sql", "original_file_path": "macros/supporting/end_of_all_times.sql", "unique_id": "macro.datavault4dbt.synapse__end_of_all_times", "macro_sql": "{%- macro synapse__end_of_all_times() %}\n    \n{%- set global_var = var('datavault4dbt.end_of_all_times', none) -%}\n{%- set end_of_all_times = '' -%}\n\n{%- if global_var is mapping -%}\n    {%- if 'synapse' in global_var.keys()|map('lower') -%}\n        {% set end_of_all_times = global_var['synapse'] %}\n    {%- else -%}\n        {%- if execute -%}\n            {%- do exceptions.warn(\"Warning: You have set the global variable 'datavault4dbt.end_of_all_times' to a dictionary, but have not included the adapter you use (synapse) as a key. Applying the default value.\") -%}\n        {% endif %}\n        {%- set end_of_all_times = \"8888-12-31T23:59:59\" -%}\n    {% endif %}\n{%- elif global_var is not mapping and datavault4dbt.is_something(global_var) -%}\n    {%- set end_of_all_times = global_var -%}\n{%- else -%}        \n    {%- set end_of_all_times = \"8888-12-31T23:59:59\" -%}\n{%- endif -%}\n\n{{ return(end_of_all_times) }}    \n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.377405, "supported_languages": null}, "macro.datavault4dbt.redshift__end_of_all_times": {"name": "redshift__end_of_all_times", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/end_of_all_times.sql", "original_file_path": "macros/supporting/end_of_all_times.sql", "unique_id": "macro.datavault4dbt.redshift__end_of_all_times", "macro_sql": "{%- macro redshift__end_of_all_times() %}\n\n{%- set global_var = var('datavault4dbt.end_of_all_times', none) -%}\n{%- set end_of_all_times = '' -%}\n\n{%- if global_var is mapping -%}\n    {%- if 'redshift' in global_var.keys()|map('lower') -%}\n        {% set end_of_all_times = global_var['redshift'] %}\n    {%- else -%}\n        {%- if execute -%}\n            {%- do exceptions.warn(\"Warning: You have set the global variable 'datavault4dbt.end_of_all_times' to a dictionary, but have not included the adapter you use (redshift) as a key. Applying the default value.\") -%}\n        {% endif %}\n        {%- set end_of_all_times = \"8888-12-31 23:59:59\" -%}\n    {% endif %}\n{%- elif global_var is not mapping and datavault4dbt.is_something(global_var) -%}\n    {%- set end_of_all_times = global_var -%}\n{%- else -%}\n    {%- set end_of_all_times = \"8888-12-31 23:59:59\" -%}\n{%- endif -%}\n\n{{ return(end_of_all_times) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.377887, "supported_languages": null}, "macro.datavault4dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/generate_schema_name.sql", "original_file_path": "macros/supporting/generate_schema_name.sql", "unique_id": "macro.datavault4dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.37812, "supported_languages": null}, "macro.datavault4dbt.ghost_record_per_datatype": {"name": "ghost_record_per_datatype", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/ghost_record_per_datatype.sql", "original_file_path": "macros/supporting/ghost_record_per_datatype.sql", "unique_id": "macro.datavault4dbt.ghost_record_per_datatype", "macro_sql": "{%- macro ghost_record_per_datatype(column_name, datatype, ghost_record_type, col_size=none, alias=none) -%}\n\n{%- if not datavault4dbt.is_something(alias) -%}\n    {%- set alias = column_name -%}\n{%- endif -%}\n\n{{ return(adapter.dispatch('ghost_record_per_datatype', 'datavault4dbt')(column_name=column_name,\n                                                                            datatype=datatype,\n                                                                            ghost_record_type=ghost_record_type,\n                                                                            col_size=col_size,\n                                                                            alias=alias)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.is_something", "macro.datavault4dbt.snowflake__ghost_record_per_datatype"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.381759, "supported_languages": null}, "macro.datavault4dbt.default__ghost_record_per_datatype": {"name": "default__ghost_record_per_datatype", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/ghost_record_per_datatype.sql", "original_file_path": "macros/supporting/ghost_record_per_datatype.sql", "unique_id": "macro.datavault4dbt.default__ghost_record_per_datatype", "macro_sql": "{%- macro default__ghost_record_per_datatype(column_name, datatype, ghost_record_type, col_size, alias) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set beginning_of_all_times_date = var('datavault4dbt.beginning_of_all_times_date', '0001-01-01') -%}\n{%- set end_of_all_times_date = var('datavault4dbt.end_of_all_times_date', '8888-12-31') -%}\n{%- set date_format = var('datavault4dbt.date_format', '%Y-%m-%d') -%}\n\n{%- set datatype = datatype | string | upper | trim -%}\n\n{%- set unknown_value__STRING = var('datavault4dbt.unknown_value__STRING', '(unknown)') -%}\n{%- set error_value__STRING = var('datavault4dbt.error_value__STRING', '(error)') -%}\n{%- if ghost_record_type == 'unknown' -%}\n        {%- if datatype == 'TIMESTAMP' %} {{ datavault4dbt.string_to_timestamp( timestamp_format , beginning_of_all_times) }} as {{ alias }}\n        {%- elif datatype == 'DATE'-%} PARSE_DATE('{{date_format}}','{{ beginning_of_all_times_date }}') as {{ alias }}\n        {%- elif datatype == 'STRING' %} '{{unknown_value__STRING}}' as {{ alias }}\n        {%- elif datatype == 'INT64' %} CAST('0' as INT64) as {{ alias }}\n        {%- elif datatype == 'FLOAT64' %} CAST('0' as FLOAT64) as {{ alias }}\n        {%- elif datatype == 'BOOLEAN' %} CAST('FALSE' as BOOLEAN) as {{ alias }}\n        {%- else %} CAST(NULL as {{ datatype }}) as {{ alias }}\n        {% endif %}\n{%- elif ghost_record_type == 'error' -%}\n        {%- if datatype == 'TIMESTAMP' %} {{ datavault4dbt.string_to_timestamp( timestamp_format , end_of_all_times) }} as {{ alias }}\n        {%- elif datatype == 'DATE'-%} PARSE_DATE('{{date_format}}', '{{ end_of_all_times_date }}') as {{ alias }}\n        {%- elif datatype == 'STRING' %} '{{error_value__STRING}}' as {{ alias }}\n        {%- elif datatype == 'INT64' %} CAST('-1' as INT64) as {{ alias }}\n        {%- elif datatype == 'FLOAT64' %} CAST('-1' as FLOAT64) as {{ alias }}\n        {%- elif datatype == 'BOOLEAN' %} CAST('FALSE' as BOOLEAN) as {{ alias }}\n        {%- else %} CAST(NULL as {{ datatype }}) as {{ alias }}\n        {% endif %}\n{%- else -%}\n    {%- if execute -%}\n        {{ exceptions.raise_compiler_error(\"Invalid Ghost Record Type. Accepted are 'unknown' and 'error'.\") }}\n    {%- endif %}\n{%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.string_to_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.38308, "supported_languages": null}, "macro.datavault4dbt.exasol__ghost_record_per_datatype": {"name": "exasol__ghost_record_per_datatype", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/ghost_record_per_datatype.sql", "original_file_path": "macros/supporting/ghost_record_per_datatype.sql", "unique_id": "macro.datavault4dbt.exasol__ghost_record_per_datatype", "macro_sql": "{%- macro exasol__ghost_record_per_datatype(column_name, datatype, ghost_record_type, col_size, alias) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set beginning_of_all_times_date = var('datavault4dbt.beginning_of_all_times_date', '0001-01-01') -%}\n{%- set end_of_all_times_date = var('datavault4dbt.end_of_all_times_date', '8888-12-31') -%}\n{%- set date_format = var('datavault4dbt.date_format', 'YYYY-mm-dd') -%}\n\n{%- set unknown_value__STRING = var('datavault4dbt.unknown_value__STRING', '(unknown)') -%}\n{%- set error_value__STRING = var('datavault4dbt.error_value__STRING', '(error)') -%}\n{%- set unknown_value_alt__STRING = var('datavault4dbt.unknown_value_alt__STRING', 'u')  -%}\n{%- set error_value_alt__STRING = var('datavault4dbt.error_value_alt__STRING', 'e')  -%}\n{%- set hash = datavault4dbt.hash_method() -%}\n{%- set hash_default_values =  datavault4dbt.hash_default_values(hash_function=hash) -%}\n{%- set hash_alg= hash_default_values['hash_alg'] -%}\n{%- set unknown_value__HASHTYPE = hash_default_values['unknown_key'] -%}\n{%- set  error_value__HASHTYPE = hash_default_values['error_key'] -%}\n{%- set datatype = datatype | string | upper | trim -%}\n\n{%- if ghost_record_type == 'unknown' -%}\n\n        {%- if datatype == 'TIMESTAMP' or datatype == 'TIMESTAMP WITH LOCAL TIMEZONE' %} {{- datavault4dbt.string_to_timestamp( timestamp_format , beginning_of_all_times) }} as \"{{ column_name }}\"\n        {%- elif datatype == 'DATE'-%} TO_DATE('{{ beginning_of_all_times_date }}', '{{ date_format }}' ) as \"{{ alias }}\"\n        {%- elif datatype.upper().startswith('VARCHAR') -%}\n            {%- if col_size is not none -%}\n                {%- set unknown_dtype_length = col_size | int -%}\n                {%- if '(' not in datatype -%}\n                    {%- set datatype = datatype ~ \"(\" ~ (unknown_dtype_length|string) ~ \") UTF8\" -%}\n                {%- endif -%}\n            {%- else -%}\n                {%- set inside_parenthesis =  datatype.split(\")\")[0] |string -%}\n                {%- set inside_parenthesis = inside_parenthesis.split(\"(\")[1]-%}\n                {%- set unknown_dtype_length = inside_parenthesis | int -%}\n            {%- endif -%}\n            {%- if unknown_dtype_length < unknown_value__STRING|length -%}\n                CAST('{{ unknown_value_alt__STRING }}' as {{ datatype }} ) as \"{{ alias }}\"\n            {%- else -%}\n                CAST('{{ unknown_value__STRING }}' as {{ datatype }} ) as \"{{ alias }}\"\n            {%- endif -%}\n        {%- elif datatype.upper().startswith('CHAR') -%} CAST('{{ unknown_value_alt__STRING }}' as {{ datatype }}) as \"{{ alias }}\"\n        {%- elif datatype.upper().startswith('DECIMAL') -%} CAST('0' as {{ datatype }}) as \"{{ alias }}\"\n        {%- elif datatype == 'DOUBLE PRECISION' %} CAST('0' as DOUBLE PRECISION) as \"{{ alias }}\"\n        {%- elif datatype == 'BOOLEAN' %} FALSE as \"{{ alias }}\"\n        {%- elif datatype.upper().startswith('HASHTYPE') -%} CAST('{{ unknown_value__HASHTYPE }}' as {{ datatype }}) as \"{{ alias }}\"\n        {%- else %} CAST(NULL as {{ datatype }}) as \"{{ alias }}\"\n        {% endif %}\n\n{%- elif ghost_record_type == 'error' -%}\n\n        {%- if datatype == 'TIMESTAMP' or datatype == 'TIMESTAMP WITH LOCAL TIME ZONE' %} {{- datavault4dbt.string_to_timestamp( timestamp_format , end_of_all_times) }} as \"{{ column_name }}\"\n        {%- elif datatype == 'DATE'-%} TO_DATE('{{ end_of_all_times_date }}', '{{ date_format }}' ) as \"{{ alias }}\"\n        {%- elif datatype.upper().startswith('VARCHAR') -%}\n            {%- if col_size is not none -%}\n                {%- set error_dtype_length = col_size | int -%}\n                {%- if '(' not in datatype -%}\n                    {%- set datatype = datatype ~ \"(\" ~ (error_dtype_length|string) ~ \") UTF8\" -%}\n                {%- endif -%}\n            {%- else -%}\n                {%- set inside_parenthesis =  datatype.split(\")\")[0] |string -%}\n                {%- set inside_parenthesis = inside_parenthesis.split(\"(\")[1]-%}\n                {%- set error_dtype_length = inside_parenthesis | int -%}\n            {%- endif -%}\n            {%- if error_dtype_length < error_value__STRING|length  -%}\n                CAST('{{ error_value_alt__STRING }}' as {{ datatype }} ) as \"{{ alias }}\"\n            {%- else -%}\n                CAST('{{ error_value__STRING }}' as {{ datatype }} ) as \"{{ alias }}\"\n            {%- endif -%}\n        {%- elif datatype.upper().startswith('CHAR') -%} CAST('{{ error_value_alt__STRING }}' as {{ datatype }}) as \"{{ alias }}\"\n        {%- elif datatype.upper().startswith('DECIMAL') -%} CAST('-1' as {{ datatype }}) as \"{{ alias }}\"\n        {%- elif datatype == 'DOUBLE PRECISION' %} CAST('-1' as DOUBLE PRECISION) as \"{{ alias }}\"\n        {%- elif datatype == 'BOOLEAN' %} FALSE as \"{{ alias }}\"\n        {%- elif datatype.upper().startswith('HASHTYPE') -%} CAST('{{ error_value__HASHTYPE }}' as {{ datatype }}) as \"{{ alias }}\"\n        {%- else %} CAST(NULL as {{ datatype }}) as \"{{ alias }}\"\n        {% endif %}\n\n{%- else -%}\n\n    {%- if execute -%}\n        {{ exceptions.raise_compiler_error(\"Invalid Ghost Record Type. Accepted are 'unknown' and 'error'.\") }}\n    {%- endif %}\n\n{%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.hash_method", "macro.datavault4dbt.hash_default_values", "macro.datavault4dbt.string_to_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.386213, "supported_languages": null}, "macro.datavault4dbt.snowflake__ghost_record_per_datatype": {"name": "snowflake__ghost_record_per_datatype", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/ghost_record_per_datatype.sql", "original_file_path": "macros/supporting/ghost_record_per_datatype.sql", "unique_id": "macro.datavault4dbt.snowflake__ghost_record_per_datatype", "macro_sql": "{%- macro snowflake__ghost_record_per_datatype(column_name, datatype, ghost_record_type, col_size, alias) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set beginning_of_all_times_date = var('datavault4dbt.beginning_of_all_times_date', '0001-01-01') -%}\n{%- set end_of_all_times_date = var('datavault4dbt.end_of_all_times_date', '8888-12-31') -%}\n{%- set date_format = var('datavault4dbt.date_format', 'YYYY-mm-dd') -%}\n\n{%- set unknown_value__STRING = var('datavault4dbt.unknown_value__STRING', '(unknown)') -%}\n{%- set error_value__STRING = var('datavault4dbt.error_value__STRING', '(error)') -%}\n{%- set unknown_value_alt__STRING = var('datavault4dbt.unknown_value_alt__STRING', 'u')  -%}\n{%- set error_value_alt__STRING = var('datavault4dbt.error_value_alt__STRING', 'e')  -%}\n{%- set datatype = datatype | string | upper | trim -%}\n\n{%- if ghost_record_type == 'unknown' -%}\n     {%- if datatype in ['TIMESTAMP_NTZ','TIMESTAMP'] %}{{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }} AS {{ alias }}\n     {%- elif datatype == 'DATE'-%} TO_DATE('{{ beginning_of_all_times_date }}', '{{ date_format }}' ) as \"{{ alias }}\"\n     {%- elif datatype in ['STRING', 'VARCHAR'] %}'{{ unknown_value__STRING }}' AS {{ alias }}\n     {%- elif datatype == 'CHAR' %}CAST('{{ unknown_value_alt__STRING }}' as {{ datatype }} ) as \"{{ alias }}\"\n     {%- elif datatype.upper().startswith('VARCHAR(') or datatype.upper().startswith('CHAR(') -%}\n            {%- if col_size is not none -%}\n                {%- set unknown_dtype_length = col_size | int -%}\n                {%- if '(' not in datatype -%}\n                    {%- set datatype = datatype ~ \"(\" ~ (unknown_dtype_length|string) ~ \")\" -%}\n                {%- endif -%}\n            {%- else -%}\n                {%- set inside_parenthesis =  datatype.split(\")\")[0] |string -%}\n                {%- set inside_parenthesis = inside_parenthesis.split(\"(\")[1]-%}\n                {%- set unknown_dtype_length = inside_parenthesis | int -%}\n            {%- endif -%}\n            {%- if unknown_dtype_length < unknown_value__STRING|length -%}\n                CAST('{{ unknown_value_alt__STRING }}' as {{ datatype }} ) as \"{{ alias }}\"\n            {%- else -%}\n                CAST('{{ unknown_value__STRING }}' as {{ datatype }} ) as \"{{ alias }}\"\n            {%- endif -%}\n     {%- elif datatype in ['NUMBER','INT','FLOAT','DECIMAL'] %}0 AS {{ alias }}\n     {%- elif datatype == 'BOOLEAN' %}CAST('FALSE' AS BOOLEAN) AS {{ alias }}\n     {%- else %}NULL AS {{ alias }}\n     {% endif %}\n{%- elif ghost_record_type == 'error' -%}\n     {%- if datatype in ['TIMESTAMP_NTZ','TIMESTAMP'] %}{{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }} AS {{ alias }}\n     {%- elif datatype == 'DATE'-%} TO_DATE('{{ end_of_all_times_date }}', '{{ date_format }}' ) as \"{{ alias }}\"\n     {%- elif datatype in ['STRING','VARCHAR'] %}'{{ error_value__STRING }}' AS {{ alias }}\n     {%- elif datatype == 'CHAR' %}CAST('{{ error_value_alt__STRING }}' as {{ datatype }} ) as \"{{ alias }}\"\n     {%- elif datatype.upper().startswith('VARCHAR(')  or datatype.upper().startswith('CHAR(') -%}\n            {%- if col_size is not none -%}\n                {%- set error_dtype_length = col_size | int -%}\n                {%- if '(' not in datatype -%}\n                    {%- set datatype = datatype ~ \"(\" ~ (error_dtype_length|string) ~ \")\" -%}\n                {%- endif -%}\n            {%- else -%}\n                {%- set inside_parenthesis =  datatype.split(\")\")[0] |string -%}\n                {%- set inside_parenthesis = inside_parenthesis.split(\"(\")[1]-%}\n                {%- set error_dtype_length = inside_parenthesis | int -%}\n            {%- endif -%}\n            {%- if error_dtype_length < error_value__STRING|length  -%}\n                CAST('{{ error_value_alt__STRING }}' as {{ datatype }} ) as \"{{ alias }}\"\n            {%- else -%}\n                CAST('{{ error_value__STRING }}' as {{ datatype }} ) as \"{{ alias }}\"\n            {%- endif -%}\n     {% elif datatype in ['NUMBER','INT','FLOAT','DECIMAL'] %}-1 AS {{ alias }}\n     {% elif datatype == 'BOOLEAN' %}CAST('FALSE' AS BOOLEAN) AS {{ alias }}\n     {% else %}NULL AS {{ alias }}\n      {% endif %}\n{%- else -%}\n    {%- if execute -%}\n     {{ exceptions.raise_compiler_error(\"Invalid Ghost Record Type. Accepted are 'unknown' and 'error'.\") }}\n    {%- endif %}\n{%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.string_to_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.388936, "supported_languages": null}, "macro.datavault4dbt.synapse__ghost_record_per_datatype": {"name": "synapse__ghost_record_per_datatype", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/ghost_record_per_datatype.sql", "original_file_path": "macros/supporting/ghost_record_per_datatype.sql", "unique_id": "macro.datavault4dbt.synapse__ghost_record_per_datatype", "macro_sql": "{%- macro synapse__ghost_record_per_datatype(column_name, datatype, ghost_record_type, col_size, alias) -%}\n\n\n{%- set unknown_value__STRING = var('datavault4dbt.unknown_value__STRING', '(unknown)') -%}\n{%- set error_value__STRING = var('datavault4dbt.error_value__STRING', '(error)') -%}\n{%- set unknown_value_alt__STRING = var('datavault4dbt.unknown_value_alt__STRING', 'u')  -%}\n{%- set error_value_alt__STRING = var('datavault4dbt.error_value_alt__STRING', 'e')  -%}\n{%- set format_date = var('datavault4dbt.format_date', 'YYYY-mm-dd') -%}\n{%- set hash = datavault4dbt.hash_method() -%}\n{%- set hash_default_values =  datavault4dbt.hash_default_values(hash_function=hash) -%}\n{%- set hash_alg= hash_default_values['hash_alg'] -%}\n{%- set unknown_value__HASHTYPE = hash_default_values['unknown_key'] -%}\n{%- set  error_value__HASHTYPE = hash_default_values['error_key'] -%}\n{%- set datatype = datatype | string | upper | trim -%}\n\n{%- if ghost_record_type == 'unknown' -%}\n\n        {%- if datatype == 'DATETIME' or datatype == 'DATETIME2' %} {{- datavault4dbt.string_to_timestamp( timestamp_format , beginning_of_all_times) }} as \"{{ column_name }}\"\n        {%- elif 'CHAR' in datatype -%}\n            {%- if col_size is not none -%}\n                {%- if (col_size | int) == -1 -%}\n                    {%- set unknown_dtype_length = 1 -%}\n                {%- else -%}\n                    {%- set unknown_dtype_length = col_size | int -%}\n                {%- endif -%}\n                {%- if '(' not in datatype -%}\n                    {%- set datatype = datatype ~ \"(\" ~ (unknown_dtype_length|string) ~ \")\" -%}\n                {%- endif -%}\n            {%- else -%}\n                {%- set unknown_dtype_length = 1 -%}\n            {%- endif -%}\n            {%- if unknown_dtype_length < unknown_value__STRING|length -%}\n                CAST('{{ unknown_value_alt__STRING }}' as {{ datatype }} ) as \"{{ alias }}\"\n            {%- else -%}\n                CAST('{{ unknown_value__STRING }}' as {{ datatype }} ) as \"{{ alias }}\"\n            {%- endif -%}\n        {%- elif datatype == 'TINYINT' -%} CAST('254' as {{ datatype }}) as \"{{ alias }}\"\n        {%- elif 'INT' in datatype or datatype == 'DECIMAL' or datatype == 'NUMERIC' or 'MONEY' in datatype or datatype == 'BIT'%} CAST('-1' as {{ datatype }}) as \"{{ alias }}\"\n        {%- elif datatype == 'DATE'-%} CONVERT(DATE, '{{ beginning_of_all_times_date }}') as \"{{ alias }}\"\n        {%- elif 'BINARY' in datatype -%}\n           CAST('{{ unknown_value__HASHTYPE }}' as {{ datatype }}) as \"{{ alias }}\"\n        {%- else %} CAST(NULL as {{ datatype }}) as \"{{ alias }}\"\n        {% endif %}\n\n{%- elif ghost_record_type == 'error' -%}\n\n        {%- if datatype == 'DATETIME' or datatype == 'DATETIME2' %} {{- datavault4dbt.string_to_timestamp( timestamp_format , end_of_all_times) }} as \"{{ column_name }}\"\n        {%- elif 'CHAR' in datatype -%}\n            {%- if col_size is not none -%}\n                {%- if (col_size | int) == -1 -%}\n                    {%- set unknown_dtype_length = 1 -%}\n                {%- else -%}\n                    {%- set unknown_dtype_length = col_size | int -%}\n                {%- endif -%}\n                {%- if '(' not in datatype -%}\n                    {%- set datatype = datatype ~ \"(\" ~ (unknown_dtype_length|string) ~ \")\" -%}\n                {%- endif -%}\n            {%- else -%}\n                {%- set unknown_dtype_length = 1 -%}\n            {%- endif -%}\n            {%- if unknown_dtype_length < unknown_value__STRING|length -%}\n                CAST('{{ error_value_alt__STRING }}' as {{ datatype }} ) as \"{{ alias }}\"\n            {%- else -%}\n                CAST('{{ error_value__STRING }}' as {{ datatype }} ) as \"{{ alias }}\"\n            {%- endif -%}\n        {%- elif datatype == 'TINYINT' -%} CAST('255' as {{ datatype }}) as \"{{ alias }}\"\n        {%- elif 'INT' in datatype or datatype == 'DECIMAL' or datatype == 'NUMERIC' or 'MONEY' in datatype %} CAST('-2' as {{ datatype }}) as \"{{ alias }}\"\n        {%- elif datatype == 'BIT' -%} CAST(0 as {{ datatype }}) as \"{{ alias }}\"\n        {%- elif datatype == 'DATE'-%} CONVERT(DATE, '{{ end_of_all_times_date }}') as \"{{ alias }}\"\n        {%- elif 'BINARY' in datatype -%}\n           CAST('{{ error_value__HASHTYPE }}' as {{ datatype }}) as \"{{ alias }}\"\n        {%- else %} CAST(NULL as {{ datatype }}) as \"{{ alias }}\"\n        {% endif %}\n\n{%- else -%}\n\n    {%- if execute -%}\n        {{ exceptions.raise_compiler_error(\"Invalid Ghost Record Type. Accepted are 'unknown' and 'error'.\") }}\n    {%- endif %}\n\n{%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.hash_method", "macro.datavault4dbt.hash_default_values", "macro.datavault4dbt.string_to_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.391488, "supported_languages": null}, "macro.datavault4dbt.postgres__ghost_record_per_datatype": {"name": "postgres__ghost_record_per_datatype", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/ghost_record_per_datatype.sql", "original_file_path": "macros/supporting/ghost_record_per_datatype.sql", "unique_id": "macro.datavault4dbt.postgres__ghost_record_per_datatype", "macro_sql": "{%- macro postgres__ghost_record_per_datatype(column_name, datatype, ghost_record_type, col_size, alias) -%}\n\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set beginning_of_all_times_date = var('datavault4dbt.beginning_of_all_times_date', '0001-01-01') -%}\n{%- set end_of_all_times_date = var('datavault4dbt.end_of_all_times_date', '8888-12-31') -%}\n\n{%- set date_format = var('datavault4dbt.date_format', 'YYYY-mm-dd') -%}\n\n{%- set unknown_value__STRING = var('datavault4dbt.unknown_value__STRING', '(unknown)') -%}\n{%- set error_value__STRING = var('datavault4dbt.error_value__STRING', '(error)') -%}\n{%- set datatype = datatype | string | upper | trim -%}\n\n{%- if ghost_record_type == 'unknown' -%}\n        {%- if datatype == 'TIMESTAMP' %} {{ datavault4dbt.string_to_timestamp( timestamp_format , beginning_of_all_times) }} as {{ alias }}\n        {%- elif datatype == 'DATE'-%} TO_DATE('{{ beginning_of_all_times_date }}', '{{ date_format }}' ) as \"{{ alias }}\"\n        {%- elif datatype == 'STRING' %} '{{unknown_value__STRING}}' as {{ alias }}\n        {%- elif datatype == 'INT64' %} CAST('0' as INT64) as {{ alias }}\n        {%- elif datatype == 'FLOAT64' %} CAST('0' as FLOAT64) as {{ alias }}\n        {%- elif datatype == 'BOOLEAN' %} CAST('FALSE' as BOOLEAN) as {{ alias }}\n        {%- else %} CAST(NULL as {{ datatype }}) as {{ alias }}\n        {% endif %}\n{%- elif ghost_record_type == 'error' -%}\n        {%- if datatype == 'TIMESTAMP' %} {{ datavault4dbt.string_to_timestamp( timestamp_format , end_of_all_times) }} as {{ alias }}\n        {%- elif datatype == 'DATE'-%} TO_DATE('{{ end_of_all_times_date }}', '{{ date_format }}' ) as \"{{ alias }}\"\n        {%- elif datatype == 'STRING' %} '{{error_value__STRING}}' as {{ alias }}\n        {%- elif datatype == 'INT64' %} CAST('-1' as INT64) as {{ alias }}\n        {%- elif datatype == 'FLOAT64' %} CAST('-1' as FLOAT64) as {{ alias }}\n        {%- elif datatype == 'BOOLEAN' %} CAST('FALSE' as BOOLEAN) as {{ alias }}\n        {%- else %} CAST(NULL as {{ datatype }}) as {{ alias }}\n        {% endif %}\n{%- else -%}\n    {%- if execute -%}\n        {{ exceptions.raise_compiler_error(\"Invalid Ghost Record Type. Accepted are 'unknown' and 'error'.\") }}\n    {%- endif %}\n{%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.string_to_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.392855, "supported_languages": null}, "macro.datavault4dbt.redshift__ghost_record_per_datatype": {"name": "redshift__ghost_record_per_datatype", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/ghost_record_per_datatype.sql", "original_file_path": "macros/supporting/ghost_record_per_datatype.sql", "unique_id": "macro.datavault4dbt.redshift__ghost_record_per_datatype", "macro_sql": "{%- macro redshift__ghost_record_per_datatype(column_name, datatype, ghost_record_type, col_size, alias) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set beginning_of_all_times_date = var('datavault4dbt.beginning_of_all_times_date', '0001-01-01') -%}\n{%- set end_of_all_times_date = var('datavault4dbt.end_of_all_times_date', '8888-12-31') -%}\n{%- set date_format = var('datavault4dbt.date_format', 'YYYY-mm-dd') -%}\n\n{%- set unknown_value__STRING = var('datavault4dbt.unknown_value__STRING', '(unknown)') -%}\n{%- set error_value__STRING = var('datavault4dbt.error_value__STRING', '(error)') -%}\n{%- set datatype = datatype | string | upper | trim -%}\n\n{%- if ghost_record_type == 'unknown' -%}\n        {%- if datatype == 'TIMESTAMP' %} {{ datavault4dbt.string_to_timestamp( timestamp_format , beginning_of_all_times) }} as {{ alias }}\n        {%- elif datatype == 'DATE'-%} TO_DATE('{{ beginning_of_all_times_date }}', '{{ date_format }}' ) as \"{{ alias }}\"\n        {%- elif datatype == 'VARCHAR' %} '{{unknown_value__STRING}}' as {{ alias }}\n        {%- elif datatype == 'CHARACTER' %} '{{unknown_value__STRING}}' as {{ alias }}\n        {%- elif datatype == 'INT' %} CAST('0' as INT) as {{ alias }}\n        {%- elif datatype == 'INT2' %} CAST('0' as INT2) as {{ alias }}\n        {%- elif datatype == 'INT8' %} CAST('0' as INT8) as {{ alias }}\n        {%- elif datatype == 'NUMERIC' %} CAST('0' as NUMERIC) as {{ alias }}\n        {%- elif datatype == 'FLOAT4' %} CAST('0' as FLOAT4) as {{ alias }}\n        {%- elif datatype == 'FLOAT' %} CAST('0' as FLOAT) as {{ alias }}\n        {%- elif datatype == 'BOOLEAN' %} CAST('FALSE' as BOOLEAN) as {{ alias }}\n        {%- elif datatype == 'VARBINARY' %} 'NULL'::varbyte as {{ alias }}\n        {%- else %} CAST(NULL as {{ datatype }}) as {{ alias }}\n        {% endif %}\n{%- elif ghost_record_type == 'error' -%}\n        {%- if datatype == 'TIMESTAMP' %} {{ datavault4dbt.string_to_timestamp( timestamp_format , end_of_all_times) }} as {{ alias }}\n        {%- elif datatype == 'DATE'-%} TO_DATE('{{ end_of_all_times_date }}', '{{ date_format }}' ) as \"{{ alias }}\"\n        {%- elif datatype == 'VARCHAR' %} '{{error_value__STRING}}' as {{ alias }}\n        {%- elif datatype == 'CHARACTER' %} '{{error_value__STRING}}' as {{ alias }}\n        {%- elif datatype == 'INT' %} CAST('-1' as INT) as {{ alias }}\n        {%- elif datatype == 'INT2' %} CAST('-1' as INT2) as {{ alias }}\n        {%- elif datatype == 'INT8' %} CAST('-1' as INT8) as {{ alias }}\n        {%- elif datatype == 'NUMERIC' %} CAST('-1' as NUMERIC) as {{ alias }}\n        {%- elif datatype == 'FLOAT4' %} CAST('-1' as FLOAT4) as {{ alias }}\n        {%- elif datatype == 'FLOAT' %} CAST('-1' as FLOAT) as {{ alias }}\n        {%- elif datatype == 'BOOLEAN' %} CAST('FALSE' as BOOLEAN) as {{ alias }}\n        {%- elif datatype == 'VARBINARY' %} 'NULL'::varbyte as {{ alias }}\n        {%- else %} CAST(NULL as {{ datatype }}) as {{ alias }}\n        {% endif %}\n{%- else -%}\n    {%- if execute -%}\n        {{ exceptions.raise_compiler_error(\"Invalid Ghost Record Type. Accepted are 'unknown' and 'error'.\") }}\n    {%- endif %}\n{%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.string_to_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.394745, "supported_languages": null}, "macro.datavault4dbt.attribute_standardise": {"name": "attribute_standardise", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/hash_standardization.sql", "original_file_path": "macros/supporting/hash_standardization.sql", "unique_id": "macro.datavault4dbt.attribute_standardise", "macro_sql": "{% macro attribute_standardise(hash_type=none) %}\n        {{- adapter.dispatch('attribute_standardise', 'datavault4dbt')(hash_type) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.datavault4dbt.snowflake__attribute_standardise"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3983748, "supported_languages": null}, "macro.datavault4dbt.default__attribute_standardise": {"name": "default__attribute_standardise", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/hash_standardization.sql", "original_file_path": "macros/supporting/hash_standardization.sql", "unique_id": "macro.datavault4dbt.default__attribute_standardise", "macro_sql": "\n\n{%- macro default__attribute_standardise(hash_type) -%}\n\nCONCAT('\\\"', REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(TRIM(CAST([EXPRESSION] AS STRING)), r'\\\\', r'\\\\\\\\'), '[QUOTE]', '\\\"'), '[NULL_PLACEHOLDER_STRING]', '--'), '\\\"')\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.398443, "supported_languages": null}, "macro.datavault4dbt.exasol__attribute_standardise": {"name": "exasol__attribute_standardise", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/hash_standardization.sql", "original_file_path": "macros/supporting/hash_standardization.sql", "unique_id": "macro.datavault4dbt.exasol__attribute_standardise", "macro_sql": "{%- macro exasol__attribute_standardise(hash_type) -%}\n\n{%- set concat_string = var('concat_string', '||') -%}\n{%- set quote = var('quote', '\"') -%}\n{%- set null_placeholder_string = var('null_placeholder_string', '^^') -%}\n\nCONCAT('\"', REPLACE(REPLACE(REPLACE(TRIM(CAST([EXPRESSION] AS VARCHAR(20000) UTF8 )), '\\\\\\', '\\\\\\\\\\'), '[QUOTE]', '\"'), '[NULL_PLACEHOLDER_STRING]', '--'), '\\\"')\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.398645, "supported_languages": null}, "macro.datavault4dbt.snowflake__attribute_standardise": {"name": "snowflake__attribute_standardise", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/hash_standardization.sql", "original_file_path": "macros/supporting/hash_standardization.sql", "unique_id": "macro.datavault4dbt.snowflake__attribute_standardise", "macro_sql": "{%- macro snowflake__attribute_standardise(hash_type) -%}\n\nCONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST([EXPRESSION] AS STRING)), '\\\\', '\\\\\\\\'), '[QUOTE]', '\\\"'), '[NULL_PLACEHOLDER_STRING]', '--'), '\\\"')\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3987122, "supported_languages": null}, "macro.datavault4dbt.synapse__attribute_standardise": {"name": "synapse__attribute_standardise", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/hash_standardization.sql", "original_file_path": "macros/supporting/hash_standardization.sql", "unique_id": "macro.datavault4dbt.synapse__attribute_standardise", "macro_sql": "{%- macro synapse__attribute_standardise(hash_type) -%}\n                                    \n{%- if hash_type == 'hashkey' -%}\n\n    CONCAT('\"', REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(CAST([EXPRESSION] AS NVARCHAR(4000)))), '\\\\', '\\\\\\\\'), '[QUOTE]', '\\\"'), '[NULL_PLACEHOLDER_STRING]', '--'), '\"')\n\n{%- else -%}\n\n    CONCAT('\"', REPLACE(REPLACE(REPLACE(LTRIM(RTRIM([EXPRESSION])), '\\\\', '\\\\\\\\'), '[QUOTE]', '\\\"'), '[NULL_PLACEHOLDER_STRING]', '--'), '\"')\n\n{%- endif -%}\n\n{%- endmacro -%}  \n\n                                    \n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.398832, "supported_languages": null}, "macro.datavault4dbt.postgres__attribute_standardise": {"name": "postgres__attribute_standardise", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/hash_standardization.sql", "original_file_path": "macros/supporting/hash_standardization.sql", "unique_id": "macro.datavault4dbt.postgres__attribute_standardise", "macro_sql": "{%- macro postgres__attribute_standardise() -%}\n\nCONCAT('\"', REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(TRIM(BOTH ' ' FROM CAST([EXPRESSION] AS VARCHAR)), '\\\\', '\\\\\\\\'), '[QUOTE]', '\\\"'), '[NULL_PLACEHOLDER_STRING]', '--'), '\"')\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.398894, "supported_languages": null}, "macro.datavault4dbt.redshift__attribute_standardise": {"name": "redshift__attribute_standardise", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/hash_standardization.sql", "original_file_path": "macros/supporting/hash_standardization.sql", "unique_id": "macro.datavault4dbt.redshift__attribute_standardise", "macro_sql": "{%- macro redshift__attribute_standardise() -%}\n\n'\"' ||  REPLACE(REPLACE(REPLACE(TRIM(BOTH ' ' FROM [EXPRESSION]), '\\\\', '\\\\\\\\'), '[QUOTE]', '\\\\\"'), '[NULL_PLACEHOLDER_STRING]', '--') || '\"'\n\n{%- endmacro -%}\n\n\n                                    \n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.3989508, "supported_languages": null}, "macro.datavault4dbt.concattenated_standardise": {"name": "concattenated_standardise", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/hash_standardization.sql", "original_file_path": "macros/supporting/hash_standardization.sql", "unique_id": "macro.datavault4dbt.concattenated_standardise", "macro_sql": "{%- macro concattenated_standardise(case_sensitive, hash_alg, datatype, zero_key, alias) -%}\n\n{{ return(adapter.dispatch('concattenated_standardise', 'datavault4dbt')(case_sensitive=case_sensitive,\n                                                                              hash_alg=hash_alg,\n                                                                              datatype=datatype, \n                                                                              zero_key=zero_key,\n                                                                              alias=alias) )}}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.datavault4dbt.snowflake__concattenated_standardise"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.399176, "supported_languages": null}, "macro.datavault4dbt.default__concattenated_standardise": {"name": "default__concattenated_standardise", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/hash_standardization.sql", "original_file_path": "macros/supporting/hash_standardization.sql", "unique_id": "macro.datavault4dbt.default__concattenated_standardise", "macro_sql": "{%- macro default__concattenated_standardise(case_sensitive, hash_alg, datatype, zero_key, alias) -%}\n\n{%- set dict_result = {} -%}\n\n{%- set zero_key = datavault4dbt.as_constant(column_str=zero_key) -%}\n\n{%- if datatype == 'STRING' -%}\n\n    {%- if case_sensitive -%}\n        {%- set standardise_prefix = \"IFNULL(TO_HEX(LOWER({}(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(CONCAT(\".format(hash_alg)-%}\n        {%- if alias is not none -%}\n            {%- set standardise_suffix = \"\\n)), r'\\\\n', '') \\n, r'\\\\t', '') \\n, r'\\\\v', '') \\n, r'\\\\r', '') AS STRING), '[ALL_NULL]')))), {}) AS {}\".format(zero_key, alias)-%}\n        {%- else -%}\n            {%- set standardise_suffix = \"\\n)), r'\\\\n', '') \\n, r'\\\\t', '') \\n, r'\\\\v', '') \\n, r'\\\\r', '') AS STRING), '[ALL_NULL]')))), {})\".format(zero_key)-%}\n        {%- endif -%}\n    {%- else -%}\n        {%- set standardise_prefix = \"IFNULL(TO_HEX(LOWER({}(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\".format(hash_alg)-%}\n        {%- set standardise_suffix = \"\\n), r'\\\\n', '') \\n, r'\\\\t', '') \\n, r'\\\\v', '') \\n, r'\\\\r', '') AS STRING), '[ALL_NULL]')))), {}) AS {}\".format(zero_key, alias)-%}\n    {%- endif -%}\n\n{%- else -%}\n\n    {%- if case_sensitive -%}\n        {%- set standardise_prefix = \"IFNULL({}(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(CONCAT(\".format(hash_alg)-%}\n        {%- if alias is not none -%}\n            {%- set standardise_suffix = \"\\n)), r'\\\\n', '') \\n, r'\\\\t', '') \\n, r'\\\\v', '') \\n, r'\\\\r', '') AS STRING), '[ALL_NULL]')), CAST({} AS {})) AS {}\".format(zero_key, datatype, alias)-%}\n        {%- else -%}\n            {%- set standardise_suffix = \"\\n)), r'\\\\n', '') \\n, r'\\\\t', '') \\n, r'\\\\v', '') \\n, r'\\\\r', '') AS STRING), '[ALL_NULL]')), CAST({} AS {}))\".format(zero_key, datatype)-%}\n        {%- endif -%}\n    {%- else -%}\n        {%- set standardise_prefix = \"IFNULL({}(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\".format(hash_alg)-%}\n        {%- set standardise_suffix = \"\\n), r'\\\\n', '') \\n, r'\\\\t', '') \\n, r'\\\\v', '') \\n, r'\\\\r', '') AS STRING), '[ALL_NULL]')), CAST({} AS {})) AS {}\".format(zero_key, datatype, alias)-%}\n    {%- endif -%}\n\n{%- endif -%}\n\n{%- do dict_result.update({\"standardise_suffix\": standardise_suffix, \"standardise_prefix\": standardise_prefix }) -%}\n\n{{ return(dict_result | tojson ) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.as_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.4001138, "supported_languages": null}, "macro.datavault4dbt.snowflake__concattenated_standardise": {"name": "snowflake__concattenated_standardise", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/hash_standardization.sql", "original_file_path": "macros/supporting/hash_standardization.sql", "unique_id": "macro.datavault4dbt.snowflake__concattenated_standardise", "macro_sql": "{%- macro snowflake__concattenated_standardise(case_sensitive, hash_alg, datatype, zero_key, alias) -%}\n\n{%- set dict_result = {} -%}\n\n{%- set zero_key = datavault4dbt.as_constant(column_str=zero_key) -%}\n\n{{ log('datatype: ' ~ datatype, false)}}\n\n{%- if 'VARCHAR' in datatype or 'CHAR' in datatype or 'STRING' in datatype or 'TEXT' in datatype %}\n\n    {%- if case_sensitive -%}\n        {%- set standardise_prefix = \"IFNULL(LOWER({}(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(CONCAT(\".format(hash_alg)-%}\n\n        {%- if alias is not none -%}\n            {%- set standardise_suffix = \"\\n)), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS STRING), '[ALL_NULL]'))), {}) AS {}\".format(zero_key, alias)-%}\n        {%- else -%}\n            {%- set standardise_suffix = \"\\n)), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS STRING), '[ALL_NULL]'))), {})\".format(zero_key)-%}\n        {%- endif -%}\n    {%- else -%}\n        {%- set standardise_prefix = \"IFNULL(LOWER({}(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\".format(hash_alg)-%}\n\n        {%- if alias is not none -%}\n            {%- set standardise_suffix = \"\\n), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS STRING), '[ALL_NULL]'))), {}) AS {}\".format(zero_key, alias)-%}\n        {%- else -%}\n            {%- set standardise_suffix = \"\\n), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS STRING), '[ALL_NULL]'))), {})\".format(zero_key)-%}\n        {%- endif -%}\n    {%- endif -%}\n\n{%- else -%}\n\n    {%- if case_sensitive -%}\n        {%- set standardise_prefix = \"IFNULL({}(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(CONCAT(\".format(hash_alg)-%}\n\n        {%- if alias is not none -%}\n            {%- set standardise_suffix = \"\\n)), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS STRING), '[ALL_NULL]')), {}) AS {}\".format(zero_key, alias)-%}\n        {%- else -%}\n            {%- set standardise_suffix = \"\\n)), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS STRING), '[ALL_NULL]')), {})\".format(zero_key)-%}\n        {%- endif -%}\n    {%- else -%}\n        {%- set standardise_prefix = \"IFNULL({}(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\".format(hash_alg)-%}\n\n        {%- if alias is not none -%}\n            {%- set standardise_suffix = \"\\n), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS STRING), '[ALL_NULL]')), {}) AS {}\".format(zero_key, alias)-%}\n        {%- else -%}\n            {%- set standardise_suffix = \"\\n), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS STRING), '[ALL_NULL]')), {})\".format(zero_key)-%}\n        {%- endif -%}\n    {%- endif -%}\n\n{%- endif -%}\n\n{%- do dict_result.update({\"standardise_suffix\": standardise_suffix, \"standardise_prefix\": standardise_prefix }) -%}\n\n{{ return(dict_result | tojson ) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.as_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.401372, "supported_languages": null}, "macro.datavault4dbt.exasol__concattenated_standardise": {"name": "exasol__concattenated_standardise", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/hash_standardization.sql", "original_file_path": "macros/supporting/hash_standardization.sql", "unique_id": "macro.datavault4dbt.exasol__concattenated_standardise", "macro_sql": "{%- macro exasol__concattenated_standardise(case_sensitive, hash_alg, datatype, zero_key, alias) -%}\n\n{%- set dict_result = {} -%}\n\n{%- set zero_key = datavault4dbt.as_constant(column_str=zero_key) -%}\n\n{%- if case_sensitive -%}\n    {%- set standardise_prefix = \"NULLIF({}(NULLIF(CAST(REPLACE(REPLACE(REPLACE(REPLACE(UPPER(CONCAT(\".format(hash_alg)-%}\n\n    {%- if alias is not none -%}\n        {%- set standardise_suffix = \")), char(10), '') , char(9), ''), char(11), '') , char(13), '') AS VARCHAR(2000000) UTF8),'[ALL_NULL]')), {}) AS {} \".format(zero_key, alias) -%}\n    {%- else -%}\n        {%- set standardise_suffix = \")), char(10), '') , char(9), ''), char(11), '') , char(13), '') AS VARCHAR(2000000) UTF8),'[ALL_NULL]')), {})\".format(zero_key, alias) -%}\n    {%- endif -%}\n\n{%- else -%}\n    {%- set standardise_prefix = \"NULLIF({}(NULLIF(CAST(REPLACE(REPLACE(REPLACE(REPLACE(CONCAT(\".format(hash_alg) -%}\n\n    {%- if alias is not none -%}\n        {%- set standardise_suffix = \"), char(10), '') , char(9), '') , char(11), '') , char(13), '') AS VARCHAR(2000000) UTF8), '[ALL_NULL]')), {}) AS {} \".format(zero_key, alias) -%}\n    {%- else %}\n        {%- set standardise_suffix = \"), char(10), '') , char(9), '') , char(11), '') , char(13), '') AS VARCHAR(2000000) UTF8), '[ALL_NULL]')), {})\".format(zero_key) -%}\n    {%- endif -%}\n\n{%- endif -%}\n\n{%- do dict_result.update({\"standardise_suffix\": standardise_suffix, \"standardise_prefix\": standardise_prefix }) -%}\n\n{{ return(dict_result | tojson ) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.datavault4dbt.as_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.402025, "supported_languages": null}, "macro.datavault4dbt.postgres__concattenated_standardise": {"name": "postgres__concattenated_standardise", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/hash_standardization.sql", "original_file_path": "macros/supporting/hash_standardization.sql", "unique_id": "macro.datavault4dbt.postgres__concattenated_standardise", "macro_sql": "{%- macro postgres__concattenated_standardise(case_sensitive, hash_alg, datatype, zero_key, alias,is_hashdiff, rtrim_hashdiff) -%}\n\n{%- set dict_result = {} -%}\n\n{%- set zero_key = datavault4dbt.as_constant(column_str=zero_key) -%}\n\n{%- if datatype == 'VARCHAR' -%}\n\n    {%- if case_sensitive -%}\n        {%- set standardise_prefix = \"COALESCE(LOWER({}(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(CONCAT(\".format(hash_alg)-%}\n        {%- if alias is not none -%}\n            {%- set standardise_suffix = \"\\n)), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS VARCHAR), '[ALL_NULL]'))), {}) AS {}\".format(zero_key, alias)-%}\n        {%- else -%}\n            {%- set standardise_suffix = \"\\n)), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS VARCHAR), '[ALL_NULL]'))), {})\".format(zero_key)-%}\n        {%- endif -%}\n    {%- else -%}\n        {%- set standardise_prefix = \"COALESCE(LOWER({}(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\".format(hash_alg)-%}\n        {%- set standardise_suffix = \"\\n), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS VARCHAR), '[ALL_NULL]'))), {}) AS {}\".format(zero_key, alias)-%}\n    {%- endif -%}\n\n{%- else -%}\n\n    {%- if case_sensitive -%}\n        {%- set standardise_prefix = \"COALESCE({}(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(CONCAT(\".format(hash_alg)-%}\n        {%- if alias is not none -%}\n            {%- set standardise_suffix = \"\\n)), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS VARCHAR), '[ALL_NULL]')), CAST({} AS {})) AS {}\".format(zero_key, datatype, alias)-%}\n        {%- else -%}\n            {%- set standardise_suffix = \"\\n)), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS VARCHAR), '[ALL_NULL]')), CAST({} AS {}))\".format(zero_key, datatype)-%}\n        {%- endif -%}\n    {%- else -%}\n        {%- set standardise_prefix = \"COALESCE({}(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\".format(hash_alg)-%}\n        {%- set standardise_suffix = \"\\n), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS VARCHAR), '[ALL_NULL]')), CAST({} AS {})) AS {}\".format(zero_key, datatype, alias)-%}\n    {%- endif -%}\n\n{%- endif -%}\n\n{%- do dict_result.update({\"standardise_suffix\": standardise_suffix, \"standardise_prefix\": standardise_prefix }) -%}\n\n{{ return(dict_result | tojson ) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.datavault4dbt.as_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.402992, "supported_languages": null}, "macro.datavault4dbt.redshift__concattenated_standardise": {"name": "redshift__concattenated_standardise", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/hash_standardization.sql", "original_file_path": "macros/supporting/hash_standardization.sql", "unique_id": "macro.datavault4dbt.redshift__concattenated_standardise", "macro_sql": "{%- macro redshift__concattenated_standardise(case_sensitive, hash_alg, datatype, zero_key, alias,is_hashdiff, rtrim_hashdiff) -%}\n\n{%- set dict_result = {} -%}\n\n{%- set zero_key = datavault4dbt.as_constant(column_str=zero_key) -%}\n\n{%- if datatype == 'VARCHAR' -%}\n\n    {%- if case_sensitive -%}\n        {%- set standardise_prefix = \"COALESCE(LOWER({}(NULLIF(CAST(REPLACE(REPLACE(REPLACE(REPLACE(UPPER(\".format(hash_alg)-%}\n        {%- if alias is not none -%}\n            {%- set standardise_suffix = \"\\n), '\\\\\\\\n', '') \\n, '\\\\\\\\t', '') \\n, '\\\\\\\\v', '') \\n, '\\\\\\\\r', '') AS VARCHAR), '[ALL_NULL]'))), {}) AS {}\".format(zero_key, alias)-%}\n        {%- else -%}\n            {%- set standardise_suffix = \"\\n), '\\\\\\\\n', '') \\n, '\\\\\\\\t', '') \\n, '\\\\\\\\v', '') \\n, '\\\\\\\\r', '') AS VARCHAR), '[ALL_NULL]'))), {})\".format(zero_key)-%}\n        {%- endif -%}\n    {%- else -%}\n        {%- set standardise_prefix = \"COALESCE(LOWER({}(NULLIF(CAST(REPLACE(REPLACE(REPLACE(REPLACE(\".format(hash_alg)-%}\n        {%- set standardise_suffix = \"\\n, '\\\\\\\\n', '') \\n, '\\\\\\\\t', '') \\n, '\\\\\\\\v', '') \\n, '\\\\\\\\r', '') AS VARCHAR), '[ALL_NULL]'))), {}) AS {}\".format(zero_key, alias)-%}\n    {%- endif -%}\n\n{%- else -%}\n\n    {%- if case_sensitive -%}\n        {%- set standardise_prefix = \"COALESCE({}(NULLIF(CAST(REPLACE(REPLACE(REPLACE(REPLACE(UPPER(\".format(hash_alg)-%}\n        {%- if alias is not none -%}\n            {%- set standardise_suffix = \"\\n), '\\\\\\\\n', '') \\n, '\\\\\\\\t', '') \\n, '\\\\\\\\v', '') \\n, '\\\\\\\\r', '') AS VARCHAR), '[ALL_NULL]'))), CAST({} AS {})) AS {}\".format(zero_key, datatype, alias)-%}\n        {%- else -%}\n            {%- set standardise_suffix = \"\\n), '\\\\\\\\n', '') \\n, '\\\\\\\\t', '') \\n, '\\\\\\\\v', '') \\n, '\\\\\\\\r', '') AS VARCHAR), '[ALL_NULL]'))), CAST({} AS {}))\".format(zero_key, datatype)-%}\n        {%- endif -%}\n    {%- else -%}\n        {%- set standardise_prefix = \"COALESCE({}(NULLIF(CAST(REPLACE(REPLACE(REPLACE(REPLACE(\".format(hash_alg)-%}\n        {%- set standardise_suffix = \"\\n, '\\\\\\\\n', '') \\n, '\\\\\\\\t', '') \\n, '\\\\\\\\v', '') \\n, '\\\\\\\\r', '') AS VARCHAR), '[ALL_NULL]'))), CAST({} AS {})) AS {}\".format(zero_key, datatype, alias)-%}\n    {%- endif -%}\n\n{%- endif -%}\n\n{%- do dict_result.update({\"standardise_suffix\": standardise_suffix, \"standardise_prefix\": standardise_prefix }) -%}\n\n{{ return(dict_result | tojson ) }}\n\n{%- endmacro -%}\n\n                                    \n", "depends_on": {"macros": ["macro.datavault4dbt.as_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.403957, "supported_languages": null}, "macro.datavault4dbt.synapse__concattenated_standardise": {"name": "synapse__concattenated_standardise", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/hash_standardization.sql", "original_file_path": "macros/supporting/hash_standardization.sql", "unique_id": "macro.datavault4dbt.synapse__concattenated_standardise", "macro_sql": "{%- macro synapse__concattenated_standardise(case_sensitive, hash_alg, datatype, zero_key, alias) -%}\n\n{%- set dict_result = {} -%}\n\n{%- set zero_key = datavault4dbt.as_constant(column_str=zero_key) -%}\n\n{%- if 'VARCHAR' in datatype or 'CHAR' in datatype or 'NVARCHAR' in datatype or 'NCHAR' in datatype %}\n\n    {%- if case_sensitive -%}\n    \n        {%- set standardise_prefix = \"ISNULL(LOWER(HASHBYTES('{}', (NULLIF(CAST(REPLACE(REPLACE(REPLACE(REPLACE(CONCAT(\".format(hash_alg)-%} \n        {%- if alias is not none -%}    \n                    {%- set standardise_suffix = \"), CHAR(10), ''), CHAR(9), ''), CHAR(11), ''), CHAR(13), '') AS NVARCHAR(4000))), '[ALL_NULL]'))), {}) AS {}\".format(zero_key, alias)-%} \n        {%- else -%}\n            {%- set standardise_suffix = \"), CHAR(10), ''), CHAR(9), ''), CHAR(11), ''), CHAR(13), '') AS NVARCHAR(4000))), '[ALL_NULL]'))), {})\".format(zero_key)-%}\n        {%- endif -%}    \n    {%- else -%}\n\n\n        {%- set standardise_prefix = \"ISNULL(LOWER(HASHBYTES('{}', (NULLIF(CAST(REPLACE(REPLACE(REPLACE(REPLACE(UPPER(CONCAT(\".format(hash_alg)-%} \n        {%- if alias is not none -%} \n            {%- set standardise_suffix = \")), CHAR(10), ''), CHAR(9), ''), CHAR(11), ''), CHAR(13), '') AS NVARCHAR(4000))), '[ALL_NULL]'))), {}) AS {}\".format(zero_key, alias)-%} \n        {%- else -%}\n            {%- set standardise_suffix = \")), CHAR(10), ''), CHAR(9), ''), CHAR(11), ''), CHAR(13), '') AS NVARCHAR(4000))), '[ALL_NULL]'))), {})\".format(zero_key)-%}\n        {%- endif -%}\n    {%- endif -%}\n{%- else -%}\n        {%- if case_sensitive -%} \n    \n        {%- set standardise_prefix = \"ISNULL(CONVERT({}, HASHBYTES('{}', (NULLIF(CAST(REPLACE(REPLACE(REPLACE(REPLACE(CONCAT(\".format(datatype, hash_alg)-%}\n        {%- if alias is not none -%}    \n                    {%- set standardise_suffix = \"), CHAR(10), ''), CHAR(9), ''), CHAR(11), ''), CHAR(13), '') AS NVARCHAR(4000)), '[ALL_NULL]')))), CAST({} as {})) AS {}\".format(zero_key, datatype, alias)-%}\n        {%- else -%}\n            {%- set standardise_suffix = \"), CHAR(10), ''), CHAR(9), ''), CHAR(11), ''), CHAR(13), '') AS NVARCHAR(4000)), '[ALL_NULL]')))), CAST({} as {}))\".format(zero_key, datatype)-%}\n        {%- endif -%}    \n    {%- else -%}\n\n\n        {%- set standardise_prefix = \"ISNULL(CONVERT({}, HASHBYTES('{}', (NULLIF(CAST(REPLACE(REPLACE(REPLACE(REPLACE(UPPER(CONCAT(\".format(datatype, hash_alg)-%}\n        {%- if alias is not none -%}\n            {%- set standardise_suffix = \")), CHAR(10), ''), CHAR(9), ''), CHAR(11), ''), CHAR(13), '') AS NVARCHAR(4000)), '[ALL_NULL]')))), CAST({} as {})) AS {}\".format(zero_key, datatype, alias)-%}\n\n        {%- else -%}            \n            {%- set standardise_suffix = \")), CHAR(10), ''), CHAR(9), ''), CHAR(11), ''), CHAR(13), '') AS NVARCHAR(4000)), '[ALL_NULL]')))), CAST({} as {}))\".format(zero_key, datatype)-%}\n        {%- endif -%}\n    {%- endif -%}\n{%- endif -%}\n\n{%- do dict_result.update({\"standardise_suffix\": standardise_suffix, \"standardise_prefix\": standardise_prefix }) -%}\n\n{{ return(dict_result | tojson ) }}\n\n{%- endmacro -%}  \n\n\n\n\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.as_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.405177, "supported_languages": null}, "macro.datavault4dbt.multi_active_concattenated_standardise": {"name": "multi_active_concattenated_standardise", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/hash_standardization.sql", "original_file_path": "macros/supporting/hash_standardization.sql", "unique_id": "macro.datavault4dbt.multi_active_concattenated_standardise", "macro_sql": "{%- macro multi_active_concattenated_standardise(case_sensitive, hash_alg, datatype, zero_key, alias, multi_active_key, main_hashkey_column) -%}\n\n{{ adapter.dispatch('multi_active_concattenated_standardise', 'datavault4dbt')(case_sensitive=case_sensitive,\n                                                                              hash_alg=hash_alg,\n                                                                              datatype=datatype, \n                                                                              zero_key=zero_key,\n                                                                              alias=alias,\n                                                                              multi_active_key=multi_active_key,\n                                                                              main_hashkey_column=main_hashkey_column) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.datavault4dbt.snowflake__multi_active_concattenated_standardise"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.405437, "supported_languages": null}, "macro.datavault4dbt.default__multi_active_concattenated_standardise": {"name": "default__multi_active_concattenated_standardise", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/hash_standardization.sql", "original_file_path": "macros/supporting/hash_standardization.sql", "unique_id": "macro.datavault4dbt.default__multi_active_concattenated_standardise", "macro_sql": "{%- macro default__multi_active_concattenated_standardise(case_sensitive, hash_alg, datatype, zero_key, alias, multi_active_key, main_hashkey_column) -%}\n{%- set dict_result = {} -%}\n\n{%- set zero_key = datavault4dbt.as_constant(column_str=zero_key) -%}\n\n{%- if datavault4dbt.is_list(multi_active_key) -%}\n    {%- set multi_active_key = multi_active_key|join(\", \") -%}\n{%- endif -%}\n\n{%- if datatype == 'STRING' -%}\n\n    {%- if case_sensitive -%}\n        {%- set standardise_prefix = \"IFNULL(TO_HEX(LOWER({}(STRING_AGG(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(CONCAT(\".format(hash_alg)-%}\n\n        {%- if alias is not none -%}\n            {%- set standardise_suffix = \"\\n)), r'\\\\n', '') \\n, r'\\\\t', '') \\n, r'\\\\v', '') \\n, r'\\\\r', '') AS STRING), '[ALL_NULL]') ORDER BY {})))), {}) AS {}\".format(multi_active_key,zero_key, alias)-%}\n        {%- else -%}\n            {%- set standardise_suffix = \"\\n)), r'\\\\n', '') \\n, r'\\\\t', '') \\n, r'\\\\v', '') \\n, r'\\\\r', '') AS STRING), '[ALL_NULL]') ORDER BY {})))), {})\".format(multi_active_key,zero_key)-%}\n        {%- endif -%}\n    {%- else -%}\n        {%- set standardise_prefix = \"IFNULL(TO_HEX(LOWER({}(STRING_AGG(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\".format(hash_alg)-%}\n\n        {%- if alias is not none -%}\n            {%- set standardise_suffix = \"\\n), r'\\\\n', '') \\n, r'\\\\t', '') \\n, r'\\\\v', '') \\n, r'\\\\r', '') AS STRING), '[ALL_NULL]') ORDER BY {})))), {}) AS {}\".format(multi_active_key,zero_key, alias)-%}\n        {%- else -%}\n            {%- set standardise_suffix = \"\\n), r'\\\\n', '') \\n, r'\\\\t', '') \\n, r'\\\\v', '') \\n, r'\\\\r', '') AS STRING), '[ALL_NULL]') ORDER BY {})))), {})\".format(multi_active_key,zero_key)-%}\n        {%- endif -%}\n    {%- endif -%}\n\n{%- else -%}\n\n    {%- if case_sensitive -%}\n        {%- set standardise_prefix = \"IFNULL(TO_HEX({}(STRING_AGG(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(CONCAT(\".format(hash_alg)-%}\n\n        {%- if alias is not none -%}\n            {%- set standardise_suffix = \"\\n)), r'\\\\n', '') \\n, r'\\\\t', '') \\n, r'\\\\v', '') \\n, r'\\\\r', '') AS STRING), '[ALL_NULL]') ORDER BY {}))), {}) AS {}\".format(multi_active_key,zero_key, alias)-%}\n        {%- else -%}\n            {%- set standardise_suffix = \"\\n)), r'\\\\n', '') \\n, r'\\\\t', '') \\n, r'\\\\v', '') \\n, r'\\\\r', '') AS STRING), '[ALL_NULL]') ORDER BY {}))), {})\".format(multi_active_key,zero_key)-%}\n        {%- endif -%}\n    {%- else -%}\n        {%- set standardise_prefix = \"IFNULL(TO_HEX({}(STRING_AGG(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\".format(hash_alg)-%}\n\n        {%- if alias is not none -%}\n            {%- set standardise_suffix = \"\\n), r'\\\\n', '') \\n, r'\\\\t', '') \\n, r'\\\\v', '') \\n, r'\\\\r', '') AS STRING), '[ALL_NULL]') ORDER BY {}))), {}) AS {}\".format(multi_active_key,zero_key, alias)-%}\n        {%- else -%}\n            {%- set standardise_suffix = \"\\n), r'\\\\n', '') \\n, r'\\\\t', '') \\n, r'\\\\v', '') \\n, r'\\\\r', '') AS STRING), '[ALL_NULL]') ORDER BY {}))), {})\".format(multi_active_key,zero_key)-%}\n        {%- endif -%}\n    {%- endif -%}\n\n{%- endif -%}\n\n{%- do dict_result.update({\"standardise_suffix\": standardise_suffix, \"standardise_prefix\": standardise_prefix }) -%}\n\n{{ return(dict_result | tojson ) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.as_constant", "macro.datavault4dbt.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.4066792, "supported_languages": null}, "macro.datavault4dbt.exasol__multi_active_concattenated_standardise": {"name": "exasol__multi_active_concattenated_standardise", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/hash_standardization.sql", "original_file_path": "macros/supporting/hash_standardization.sql", "unique_id": "macro.datavault4dbt.exasol__multi_active_concattenated_standardise", "macro_sql": "{%- macro exasol__multi_active_concattenated_standardise(case_sensitive, hash_alg, datatype, zero_key, alias, multi_active_key, main_hashkey_column) -%}\n\n    {%- set dict_result = {} -%}\n    \n    {%- set zero_key = datavault4dbt.as_constant(column_str=zero_key) -%}\n\n    {%- if multi_active_key is not string and multi_active_key is iterable -%}\n        {%- set multi_active_key = multi_active_key|join(\", \") -%}\n    {%- endif -%}\n    {%- if case_sensitive -%}\n        {%- set standardise_prefix = \"NULLIF({}(LISTAGG(NULLIF(CAST(REPLACE(REPLACE(REPLACE(REPLACE(UPPER(CONCAT(\".format(hash_alg)-%}\n\n        {%- if alias is not none -%}\n            {%- set standardise_suffix = \")), char(10), '') , char(9), ''), char(11), '') , char(13), '') AS VARCHAR(2000000) UTF8),'[ALL_NULL]')) WITHIN GROUP (ORDER BY {})), {}) AS {} \".format(multi_active_key, zero_key, alias) -%}\n        {%- else -%}\n            {%- set standardise_suffix = \")), char(10), '') , char(9), ''), char(11), '') , char(13), '') AS VARCHAR(2000000) UTF8),'[ALL_NULL]')) WITHIN GROUP (ORDER BY {})), {})\".format(multi_active_key, zero_key) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- set standardise_prefix = \"NULLIF({}(LISTAGG(NULLIF(CAST(REPLACE(REPLACE(REPLACE(REPLACE(CONCAT(\".format(hash_alg) -%}\n\n        {%- if alias is not none -%}\n            {%- set standardise_suffix = \"), char(10), '') , char(9), '') , char(11), '') , char(13), '') AS VARCHAR(2000000) UTF8), '[ALL_NULL]')) WITHIN GROUP (ORDER BY {})), {}) AS {} \".format(multi_active_key, zero_key , alias) -%}\n        {%- else %}\n            {%- set standardise_suffix = \"), char(10), '') , char(9), '') , char(11), '') , char(13), '') AS VARCHAR(2000000) UTF8), '[ALL_NULL]')) WITHIN GROUP (ORDER BY {})), {})\".format(multi_active_key, zero_key) -%}\n        {%- endif -%}\n\n    {%- endif -%}\n    {%- do dict_result.update({\"standardise_suffix\": standardise_suffix, \"standardise_prefix\": standardise_prefix }) -%}\n\n    {{ return(dict_result | tojson ) }}\n    \n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.as_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.4075031, "supported_languages": null}, "macro.datavault4dbt.snowflake__multi_active_concattenated_standardise": {"name": "snowflake__multi_active_concattenated_standardise", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/hash_standardization.sql", "original_file_path": "macros/supporting/hash_standardization.sql", "unique_id": "macro.datavault4dbt.snowflake__multi_active_concattenated_standardise", "macro_sql": "{%- macro snowflake__multi_active_concattenated_standardise(case_sensitive, hash_alg, datatype, zero_key, alias, multi_active_key, main_hashkey_column) -%}\n\n{%- set ldts_alias = var('datavault4dbt.ldts_alias', 'ldts') -%}\n\n{%- set dict_result = {} -%}\n\n{%- set zero_key = datavault4dbt.as_constant(column_str=zero_key) -%}\n\n{%- if datavault4dbt.is_list(multi_active_key) -%}\n    {%- set multi_active_key = multi_active_key|join(\", \") -%}\n{%- endif -%}\n\n\n{%- if 'VARCHAR' in datatype or 'CHAR' in datatype or 'STRING' in datatype or 'TEXT' in datatype %}\n\n    {%- if case_sensitive -%}\n        {%- set standardise_prefix = \"IFNULL(LOWER({}(LISTAGG(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(CONCAT(\".format(hash_alg)-%}\n\n        {%- if alias is not none -%}\n            {%- set standardise_suffix = \"\\n)), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS STRING), '[ALL_NULL]')) WITHIN GROUP (ORDER BY {}) OVER (PARTITION BY {}, {}))), {}) AS {}\".format(multi_active_key, main_hashkey_column, ldts_alias, zero_key, alias)-%}\n        {%- else -%}\n            {%- set standardise_suffix = \"\\n)), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS STRING), '[ALL_NULL]')) WITHIN GROUP (ORDER BY {}) OVER (PARTITION BY {}, {}))), {})\".format(multi_active_key, main_hashkey_column, ldts_alias, zero_key)-%}\n        {%- endif -%}\n    {%- else -%}\n        {%- set standardise_prefix = \"IFNULL(LOWER({}(LISTAGG(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\".format(hash_alg)-%}\n\n        {%- if alias is not none -%}\n            {%- set standardise_suffix = \"\\n), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS STRING), '[ALL_NULL]')) WITHIN GROUP (ORDER BY {}) OVER (PARTITION BY {}, {}))), {}) AS {}\".format(multi_active_key, main_hashkey_column, ldts_alias, zero_key, alias)-%}\n        {%- else -%}\n            {%- set standardise_suffix = \"\\n), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS STRING), '[ALL_NULL]')) WITHIN GROUP (ORDER BY {}) OVER (PARTITION BY {}, {}))), {})\".format(multi_active_key, main_hashkey_column, ldts_alias, zero_key)-%}\n        {%- endif -%}\n    {%- endif -%}\n\n{%- else -%}\n\n    {%- if case_sensitive -%}\n        {%- set standardise_prefix = \"IFNULL({}(LISTAGG(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(CONCAT(\".format(hash_alg)-%}\n\n        {%- if alias is not none -%}\n            {%- set standardise_suffix = \"\\n)), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS STRING), '[ALL_NULL]')) WITHIN GROUP (ORDER BY {}) OVER (PARTITION BY {}, {})), {}) AS {}\".format(multi_active_key, main_hashkey_column, ldts_alias, zero_key, alias)-%}\n        {%- else -%}\n            {%- set standardise_suffix = \"\\n)), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS STRING), '[ALL_NULL]')) WITHIN GROUP (ORDER BY {}) OVER (PARTITION BY {}, {})), {})\".format(multi_active_key, main_hashkey_column, ldts_alias, zero_key)-%}\n        {%- endif -%}\n    {%- else -%}\n        {%- set standardise_prefix = \"IFNULL({}(LISTAGG(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\".format(hash_alg)-%}\n\n        {%- if alias is not none -%}\n            {%- set standardise_suffix = \"\\n), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS STRING), '[ALL_NULL]')) WITHIN GROUP (ORDER BY {}) OVER (PARTITION BY {}, {})), {}) AS {}\".format(multi_active_key, main_hashkey_column, ldts_alias, zero_key, alias)-%}\n        {%- else -%}\n            {%- set standardise_suffix = \"\\n), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS STRING), '[ALL_NULL]')) WITHIN GROUP (ORDER BY {}) OVER (PARTITION BY {}, {})), {})\".format(multi_active_key, main_hashkey_column, ldts_alias, zero_key)-%}\n        {%- endif -%}\n    {%- endif -%}\n\n{%- endif -%}\n\n{%- do dict_result.update({\"standardise_suffix\": standardise_suffix, \"standardise_prefix\": standardise_prefix }) -%}\n\n{{ return(dict_result | tojson ) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.datavault4dbt.as_constant", "macro.datavault4dbt.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.4090009, "supported_languages": null}, "macro.datavault4dbt.synapse__multi_active_concattenated_standardise": {"name": "synapse__multi_active_concattenated_standardise", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/hash_standardization.sql", "original_file_path": "macros/supporting/hash_standardization.sql", "unique_id": "macro.datavault4dbt.synapse__multi_active_concattenated_standardise", "macro_sql": "{%- macro synapse__multi_active_concattenated_standardise(case_sensitive, hash_alg, datatype, zero_key, alias, multi_active_key, main_hashkey_column) -%}\n\n{%- set dict_result = {} -%}\n\n{%- set zero_key = datavault4dbt.as_constant(column_str=zero_key) -%}\n\n{%- if datavault4dbt.is_list(multi_active_key) -%}\n    {%- set multi_active_key = multi_active_key|join(\", \") -%}\n{%- endif -%}\n{%- if 'VARCHAR' in datatype or 'CHAR' in datatype or 'NVARCHAR' in datatype or 'NCHAR' in datatype %}\n\n    {%- if case_sensitive -%}\n        {%- set standardise_prefix = \"ISNULL(LOWER(HASHBYTES('{}', (STRING_AGG(NULLIF(CAST(REPLACE(REPLACE(REPLACE(REPLACE(CONCAT(\".format(hash_alg)-%}\n        {%- if alias is not none -%}\n            {%- set standardise_suffix = \"), CHAR(10), ''), CHAR(9), ''), CHAR(11), ''), CHAR(13), '') AS NVARCHAR(4000)), '[ALL_NULL]'), '|') WITHIN GROUP (ORDER BY {}) ))), {}) AS {}\".format(multi_active_key, zero_key,  alias)-%}\n        {%- else -%}\n            {%- set standardise_suffix = \"), CHAR(10), ''), CHAR(9), ''), CHAR(11), ''), CHAR(13), '') AS NVARCHAR(4000)), '[ALL_NULL]'), '|') WITHIN GROUP (ORDER BY {}) ))), {})\".format(multi_active_key,zero_key)-%}\n        {%- endif -%}\n\n    {%- else -%}\n\n        {%- set standardise_prefix = \"ISNULL(LOWER(HASHBYTES('{}', (STRING_AGG(NULLIF(CAST(REPLACE(REPLACE(REPLACE(REPLACE(UPPER(CONCAT(\".format(hash_alg)-%}\n\n        {%- if alias is not none -%}\n            {%- set standardise_suffix = \")), CHAR(10), ''), CHAR(9), ''), CHAR(11), ''), CHAR(13), '') AS NVARCHAR(4000)), '[ALL_NULL]'), '|') WITHIN GROUP (ORDER BY {}) ))), {}) AS {}\".format(multi_active_key, zero_key, alias)-%}\n        {%- else -%}\n            {%- set standardise_suffix = \")), CHAR(10), ''), CHAR(9), ''), CHAR(11), ''), CHAR(13), '') AS NVARCHAR(4000)), '[ALL_NULL]'), '|') WITHIN GROUP (ORDER BY {}) ))), {})\".format(multi_active_key,zero_keye)-%}\n        {%- endif -%}    \n    {%- endif -%}\n\n{%- else -%}\n\n    {%- if case_sensitive -%}     \n\n        {%- set standardise_prefix = \"ISNULL(CONVERT({}, HASHBYTES('{}', (STRING_AGG(NULLIF(CAST(REPLACE(REPLACE(REPLACE(REPLACE(CONCAT(\".format(datatype, hash_alg)-%}\n\n        {%- if alias is not none -%}\n            {%- set standardise_suffix = \"), CHAR(10), ''), CHAR(9), ''), CHAR(11), ''), CHAR(13), '') AS NVARCHAR(4000)), '[ALL_NULL]'), '|') WITHIN GROUP (ORDER BY {}) ))), CAST({} as {})) AS {}\".format(multi_active_key,zero_key, datatype, alias)-%}\n        {%- else -%}\n            {%- set standardise_suffix = \"), CHAR(10), ''), CHAR(9), ''), CHAR(11), ''), CHAR(13), '') AS NVARCHAR(4000)), '[ALL_NULL]'), '|') WITHIN GROUP (ORDER BY {}) ))), CAST({} as {}))\".format(multi_active_key,zero_key, datatype)-%}\n        {%- endif -%}\n\n    {%- else -%}\n\n        {%- set standardise_prefix = \"ISNULL(CONVERT({}, HASHBYTES('{}', (STRING_AGG(NULLIF(CAST(REPLACE(REPLACE(REPLACE(REPLACE(UPPER(CONCAT(\".format(datatype, hash_alg)-%}\n\n        {%- if alias is not none -%}\n            {%- set standardise_suffix = \")), CHAR(10), ''), CHAR(9), ''), CHAR(11), ''), CHAR(13), '') AS NVARCHAR(4000)), '[ALL_NULL]'), '|') WITHIN GROUP (ORDER BY {}) ))), CAST({} as {})) AS {}\".format(multi_active_key,zero_key, datatype, alias)-%}\n        {%- else -%}\n            {%- set standardise_suffix = \")), CHAR(10), ''), CHAR(9), ''), CHAR(11), ''), CHAR(13), '') AS NVARCHAR(4000)), '[ALL_NULL]'), '|') WITHIN GROUP (ORDER BY {}) ))), CAST({} as {}))\".format(multi_active_key,zero_ke, datatype)-%}\n        {%- endif -%}    \n    {%- endif -%}\n\n{%- endif -%}\n\n{%- do dict_result.update({\"standardise_suffix\": standardise_suffix, \"standardise_prefix\": standardise_prefix }) -%}\n\n{{ return(dict_result | tojson ) }}                                    \n                                   \n{%- endmacro -%}                                    \n\n                                    \n", "depends_on": {"macros": ["macro.datavault4dbt.as_constant", "macro.datavault4dbt.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.4104488, "supported_languages": null}, "macro.datavault4dbt.postgres__multi_active_concattenated_standardise": {"name": "postgres__multi_active_concattenated_standardise", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/hash_standardization.sql", "original_file_path": "macros/supporting/hash_standardization.sql", "unique_id": "macro.datavault4dbt.postgres__multi_active_concattenated_standardise", "macro_sql": "{%- macro postgres__multi_active_concattenated_standardise(case_sensitive, hash_alg, datatype, zero_key, alias, multi_active_key, main_hashkey_column) -%}\n\n{%- set dict_result = {} -%}\n\n{%- set zero_key = datavault4dbt.as_constant(column_str=zero_key) -%}\n\n{%- if datavault4dbt.is_list(multi_active_key) -%}\n    {%- set multi_active_key = multi_active_key|join(\", \") -%}\n{%- endif -%}\n\n{%- if datatype == 'VARCHAR' -%}\n\n    {%- if case_sensitive -%}\n        {%- set standardise_prefix = \"COALESCE(LOWER({}(STRING_AGG(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(CONCAT(\".format(hash_alg)-%}\n\n        {%- if alias is not none -%}\n            {%- set standardise_suffix = \"\\n)), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS VARCHAR), '[ALL_NULL]'), ',' ORDER BY {}))), {}) AS {}\".format(multi_active_key,zero_key, alias)-%}\n        {%- else -%}\n            {%- set standardise_suffix = \"\\n)), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS VARCHAR), '[ALL_NULL]'), ',' ORDER BY {}))), {})\".format(multi_active_key,zero_key)-%}\n        {%- endif -%}\n    {%- else -%}\n        {%- set standardise_prefix = \"COALESCE(LOWER({}(STRING_AGG(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\".format(hash_alg)-%}\n\n        {%- if alias is not none -%}\n            {%- set standardise_suffix = \"\\n), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS VARCHAR), '[ALL_NULL]'), ',' ORDER BY {}))), {}) AS {}\".format(multi_active_key,zero_key, alias)-%}\n        {%- else -%}\n            {%- set standardise_suffix = \"\\n), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS VARCHAR), '[ALL_NULL]'), ',' ORDER BY {}))), {})\".format(multi_active_key,zero_key)-%}\n        {%- endif -%}\n    {%- endif -%}\n\n{%- else -%}\n\n    {%- if case_sensitive -%}\n        {%- set standardise_prefix = \"COALESCE({}(STRING_AGG(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(CONCAT(\".format(hash_alg)-%}\n\n        {%- if alias is not none -%}\n            {%- set standardise_suffix = \"\\n)), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS VARCHAR), '[ALL_NULL]'), ',' ORDER BY {})), {}) AS {}\".format(multi_active_key,zero_key, alias)-%}\n        {%- else -%}\n            {%- set standardise_suffix = \"\\n)), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS VARCHAR), '[ALL_NULL]'), ',' ORDER BY {})), {})\".format(multi_active_key,zero_key)-%}\n        {%- endif -%}\n    {%- else -%}\n        {%- set standardise_prefix = \"COALESCE({}(STRING_AGG(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\".format(hash_alg)-%}\n\n        {%- if alias is not none -%}\n            {%- set standardise_suffix = \"\\n), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS VARCHAR), '[ALL_NULL]'), ',' ORDER BY {})), {}) AS {}\".format(multi_active_key,zero_key, alias)-%}\n        {%- else -%}\n            {%- set standardise_suffix = \"\\n), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS VARCHAR), '[ALL_NULL]'), ',' ORDER BY {})), {})\".format(multi_active_key,zero_key)-%}\n        {%- endif -%}\n    {%- endif -%}\n\n{%- endif -%}\n\n{%- do dict_result.update({\"standardise_suffix\": standardise_suffix, \"standardise_prefix\": standardise_prefix }) -%}\n\n{{ return(dict_result | tojson ) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.datavault4dbt.as_constant", "macro.datavault4dbt.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.41172, "supported_languages": null}, "macro.datavault4dbt.redshift__multi_active_concattenated_standardise": {"name": "redshift__multi_active_concattenated_standardise", "resource_type": "macro", "package_name": "datavault4dbt", "path": "macros/supporting/hash_standardization.sql", "original_file_path": "macros/supporting/hash_standardization.sql", "unique_id": "macro.datavault4dbt.redshift__multi_active_concattenated_standardise", "macro_sql": "{%- macro redshift__multi_active_concattenated_standardise(case_sensitive, hash_alg, datatype, zero_key, alias, multi_active_key, main_hashkey_column) -%}\n{%- set dict_result = {} -%}\n\n{%- set zero_key = datavault4dbt.as_constant(column_str=zero_key) -%}\n\n{%- if datavault4dbt.is_list(multi_active_key) -%}\n    {%- set multi_active_key = multi_active_key|join(\", \") -%}\n{%- endif -%}\n\n{%- if datatype == 'VARCHAR' -%}\n\n    {%- if case_sensitive -%}\n        {%- set standardise_prefix = \"COALESCE(LOWER({}(LISTAGG(NULLIF(CAST(REPLACE(REPLACE(REPLACE(REPLACE(UPPER(\".format(hash_alg)-%}\n\n        {%- if alias is not none -%}\n            {%- set standardise_suffix = \"\\n), '\\\\\\\\n', '') \\n, '\\\\\\\\t', '') \\n, '\\\\\\\\v', '') \\n, '\\\\\\\\r', '') AS VARCHAR), '[ALL_NULL]')) within group (ORDER BY {}))), {}) AS {}\".format(multi_active_key,zero_key, alias)-%}\n        {%- else -%}\n            {%- set standardise_suffix = \"\\n), '\\\\\\\\n', '') \\n, '\\\\\\\\t', '') \\n, '\\\\\\\\v', '') \\n, '\\\\\\\\r', '') AS VARCHAR), '[ALL_NULL]')) within group (ORDER BY {}))), {})\".format(multi_active_key,zero_key)-%}\n        {%- endif -%}\n    {%- else -%}\n        {%- set standardise_prefix = \"COALESCE(LOWER({}(LISTAGG(NULLIF(CAST(REPLACE(REPLACE(REPLACE(REPLACE(\".format(hash_alg)-%}\n\n        {%- if alias is not none -%}\n            {%- set standardise_suffix = \"\\n), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS VARCHAR), '[ALL_NULL]')) within group (ORDER BY {}))), {}) AS {}\".format(multi_active_key,zero_key, alias)-%}\n        {%- else -%}\n            {%- set standardise_suffix = \"\\n), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS VARCHAR), '[ALL_NULL]')) within group (ORDER BY {}))), {})\".format(multi_active_key,zero_key)-%}\n        {%- endif -%}\n    {%- endif -%}\n\n{%- else -%}\n\n    {%- if case_sensitive -%}\n        {%- set standardise_prefix = \"COALESCE({}(STRING_AGG(NULLIF(CAST(REPLACE(REPLACE(REPLACE(REPLACE(UPPER(\".format(hash_alg)-%}\n\n        {%- if alias is not none -%}\n            {%- set standardise_suffix = \"\\n), '\\\\\\\\n', '') \\n, '\\\\\\\\t', '') \\n, '\\\\\\\\v', '') \\n, '\\\\\\\\r', '') AS VARCHAR), '[ALL_NULL]')) within group (ORDER BY {})), {}) AS {}\".format(multi_active_key,zero_key, alias)-%}\n        {%- else -%}\n            {%- set standardise_suffix = \"\\n)), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS VARCHAR), '[ALL_NULL]')) within group (ORDER BY {})), {})\".format(multi_active_key,zero_key)-%}\n        {%- endif -%}\n    {%- else -%}\n        {%- set standardise_prefix = \"COALESCE({}(STRING_AGG(NULLIF(CAST(REPLACE(REPLACE(REPLACE(REPLACE(\".format(hash_alg)-%}\n\n        {%- if alias is not none -%}\n            {%- set standardise_suffix = \"\\n), '\\\\\\\\n', '') \\n, '\\\\\\\\t', '') \\n, '\\\\\\\\v', '') \\n, '\\\\\\\\r', '') AS VARCHAR), '[ALL_NULL]')) within group (ORDER BY {})), {}) AS {}\".format(multi_active_key,zero_key, alias)-%}\n        {%- else -%}\n            {%- set standardise_suffix = \"\\n), '\\\\\\\\n', '') \\n, '\\\\\\\\t', '') \\n, '\\\\\\\\v', '') \\n, '\\\\\\\\r', '') AS VARCHAR), '[ALL_NULL]')) within group (ORDER BY {})), {})\".format(multi_active_key,zero_key)-%}\n        {%- endif -%}\n    {%- endif -%}\n\n{%- endif -%}\n\n{%- do dict_result.update({\"standardise_suffix\": standardise_suffix, \"standardise_prefix\": standardise_prefix }) -%}\n\n{{ return(dict_result | tojson ) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.datavault4dbt.as_constant", "macro.datavault4dbt.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743626378.4129899, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {"exposure.ddvug_willibald_samen.Willibald_Controlling": {"name": "Willibald_Controlling", "resource_type": "exposure", "package_name": "ddvug_willibald_samen", "path": "willibald_controlling.yml", "original_file_path": "models/willibald_controlling.yml", "unique_id": "exposure.ddvug_willibald_samen.Willibald_Controlling", "fqn": ["ddvug_willibald_samen", "Willibald_Controlling"], "type": "dashboard", "owner": {"email": "jan@binge.de / andreas@haas-erlangen.com", "name": "Jan Binge / Andreas Haas"}, "description": "Linking all entities, the power_bi reporting of Willibald_Controlling is dependend on.\n", "label": "Willibald_Controlling", "maturity": "low", "meta": {}, "tags": [], "config": {"enabled": true}, "unrendered_config": {}, "url": null, "depends_on": {"macros": [], "nodes": ["model.ddvug_willibald_samen.fact_sales", "model.ddvug_willibald_samen.dim_associationpartner", "model.ddvug_willibald_samen.dim_category_deliveryadherence", "model.ddvug_willibald_samen.dim_customer", "model.ddvug_willibald_samen.dim_delivery_date", "model.ddvug_willibald_samen.dim_product_type", "model.ddvug_willibald_samen.dim_product", "model.ddvug_willibald_samen.dim_productcategory", "model.ddvug_willibald_samen.dim_reporting_date", "model.ddvug_willibald_samen.dim_requested_date"]}, "refs": [{"name": "fact_sales", "package": null, "version": null}, {"name": "dim_associationpartner", "package": null, "version": null}, {"name": "dim_category_deliveryadherence", "package": null, "version": null}, {"name": "dim_customer", "package": null, "version": null}, {"name": "dim_delivery_date", "package": null, "version": null}, {"name": "dim_product_type", "package": null, "version": null}, {"name": "dim_product", "package": null, "version": null}, {"name": "dim_productcategory", "package": null, "version": null}, {"name": "dim_reporting_date", "package": null, "version": null}, {"name": "dim_requested_date", "package": null, "version": null}], "sources": [], "metrics": [], "created_at": 1743626380.649416}}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {"test.ddvug_willibald_samen.yedi_roadshow_bestellung": [{"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "yedi_roadshow_bestellung", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "yedi/yedi_roadshow_bestellung.sql", "original_file_path": "tests/yedi/yedi_roadshow_bestellung.sql", "unique_id": "test.ddvug_willibald_samen.yedi_roadshow_bestellung", "fqn": ["ddvug_willibald_samen", "yedi", "yedi_roadshow_bestellung"], "alias": "yedi_roadshow_bestellung", "checksum": {"name": "sha256", "checksum": "d9d7319263e12fd16cabb3ff2bebe5077ce5cc50fa48b2e6a2cb7ca77cf1e77c"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"enabled": false}, "created_at": 1743626380.474061, "relation_name": null, "raw_code": "{{ config( enabled=False) }}\n{%- set yaml_metadata -%}\nsource_model_source: 'load_roadshow_bestellung'\nload_type: partial\nsource_model_target:\n  associationpartner_h:\n    business_object:\n      - associationpartner: vereinspartnerid\n    satellites:\n  customer_h:\n    business_object:\n      - customer: kundeid\n    satellites:\n  order_h:\n    business_object:\n      - order: bestellungid\n    satellites:\n      order_rs_rts:\n  position_h:\n    business_object:\n      - position: bestellungid\n      - position: produktid\n    satellites:\n      position_rs_s:\n        columns:\n          - bestellungid\n          - gueltigbis\n          - kaufdatum\n          - kkfirma\n          - kreditkarte\n          - menge\n          - preis\n          - produktid\n          - rabatt\n      position_rs_sts:\n  product_h:\n    business_object:\n      - product: produktid\n    satellites:\n  order_associationpartner_l:\n    business_object:\n      - order: hk_order_h\n      - associationpartner: hk_associationpartner_h\n    satellites:\n      order_associationpartner_rs_sts:\n  order_customer_l:\n    business_object:\n      - order: hk_order_h\n      - customer: hk_customer_h\n    satellites:\n      order_customer_rs_rts:\n  order_position_l:\n    business_object:\n      - position: hk_position_h\n      - order: hk_order_h\n    satellites:\n      order_position_rs_sts:\n  position_product_l:\n    business_object:\n      - product: hk_product_h\n      - position: hk_position_h\n    satellites:\n      position_product_rs_sts:\nsrc_ldts: ldts_source\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault_extension.yedi_test(source_model_source=metadata_dict['source_model_source'],\n                  source_model_target=metadata_dict['source_model_target'],\n                  load_type=metadata_dict['load_type']\n)\n}}", "language": "sql", "refs": [{"name": "meta_load", "package": null, "version": null}, {"name": "load_roadshow_bestellung", "package": null, "version": null}, {"name": "associationpartner_h", "package": null, "version": null}, {"name": "customer_h", "package": null, "version": null}, {"name": "order_h", "package": null, "version": null}, {"name": "order_rs_rts", "package": null, "version": null}, {"name": "position_h", "package": null, "version": null}, {"name": "position_rs_s", "package": null, "version": null}, {"name": "position_rs_sts", "package": null, "version": null}, {"name": "product_h", "package": null, "version": null}, {"name": "order_associationpartner_l", "package": null, "version": null}, {"name": "order_associationpartner_rs_sts", "package": null, "version": null}, {"name": "order_customer_l", "package": null, "version": null}, {"name": "order_customer_rs_rts", "package": null, "version": null}, {"name": "order_position_l", "package": null, "version": null}, {"name": "order_position_rs_sts", "package": null, "version": null}, {"name": "position_product_l", "package": null, "version": null}, {"name": "position_product_rs_sts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.yedi_test"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.ddvug_willibald_samen.yedi_webshop_produktkategorie": [{"database": "WILLIBALD_DATA_VAULT_WITH_DBT", "schema": "dbt_test__audit", "name": "yedi_webshop_produktkategorie", "resource_type": "test", "package_name": "ddvug_willibald_samen", "path": "yedi/yedi_webshop_produktkategorie.sql", "original_file_path": "tests/yedi/yedi_webshop_produktkategorie.sql", "unique_id": "test.ddvug_willibald_samen.yedi_webshop_produktkategorie", "fqn": ["ddvug_willibald_samen", "yedi", "yedi_webshop_produktkategorie"], "alias": "yedi_webshop_produktkategorie", "checksum": {"name": "sha256", "checksum": "f3e2c125228131eeb0189070283d2df147fed48963fffec64e1c013ee107db9a"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"enabled": true}, "created_at": 1743626380.494555, "relation_name": null, "raw_code": "{{ config( enabled=True) }}\n{%- set yaml_metadata -%}\nsource_model_source: 'load_webshop_produktkategorie'\nload_type: full\nsource_model_target:\n  productcategory_h:\n    business_object:\n      - productcategory: katid\n    satellites:\n      productcategory_ws_s:\n        columns:\n          - name\n          - name\n  productcategory_parent_h:\n    business_object:\n      - productcategory: oberkatid\n    satellites:\n      productcategory_ws_s:\n        columns:\n          - name\n          - name\n  productcategory_hierarchy_l:\n    business_object:\n      - productcategory_parent: hk_productcategory_parent_h\n      - productcategory: hk_productcategory_h\n    satellites:\n      productcategory_hierarchy_ws_sts:\nsrc_ldts: ldts_source\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault_extension.yedi_test(source_model_source=metadata_dict['source_model_source'],\n                  source_model_target=metadata_dict['source_model_target'],\n                  load_type=metadata_dict['load_type']\n                , src_ldts=metadata_dict['src_ldts']\n\n)\n}}", "language": "sql", "refs": [{"name": "meta_load", "package": null, "version": null}, {"name": "load_webshop_produktkategorie", "package": null, "version": null}, {"name": "productcategory_h", "package": null, "version": null}, {"name": "productcategory_ws_s", "package": null, "version": null}, {"name": "productcategory_parent_h", "package": null, "version": null}, {"name": "productcategory_ws_s", "package": null, "version": null}, {"name": "productcategory_hierarchy_l", "package": null, "version": null}, {"name": "productcategory_hierarchy_ws_sts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.datavault_extension.yedi_test"], "nodes": ["model.ddvug_willibald_samen.meta_load", "model.ddvug_willibald_samen.load_webshop_produktkategorie", "model.ddvug_willibald_samen.productcategory_h", "model.ddvug_willibald_samen.productcategory_ws_s", "model.ddvug_willibald_samen.productcategory_hierarchy_l", "model.ddvug_willibald_samen.productcategory_hierarchy_ws_sts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}]}, "parent_map": {"model.ddvug_willibald_samen.pre_stg_error_webshop": ["model.ddvug_willibald_samen.load_webshop_bestellung", "model.ddvug_willibald_samen.load_webshop_kunde", "model.ddvug_willibald_samen.load_webshop_lieferadresse", "model.ddvug_willibald_samen.load_webshop_lieferdienst", "model.ddvug_willibald_samen.load_webshop_lieferung", "model.ddvug_willibald_samen.load_webshop_position", "model.ddvug_willibald_samen.load_webshop_produkt", "model.ddvug_willibald_samen.load_webshop_produktkategorie", "model.ddvug_willibald_samen.load_webshop_ref_produkt_typ", "model.ddvug_willibald_samen.load_webshop_vereinspartner", "model.ddvug_willibald_samen.load_webshop_wohnort"], "model.ddvug_willibald_samen.pre_stg_error_roadshow": ["model.ddvug_willibald_samen.load_roadshow_bestellung"], "model.ddvug_willibald_samen.error_msc_s": ["model.ddvug_willibald_samen.stg_error_misc"], "model.ddvug_willibald_samen.stg_error_webshop": ["model.ddvug_willibald_samen.pre_stg_error_webshop"], "model.ddvug_willibald_samen.error_ws_s": ["model.ddvug_willibald_samen.stg_error_webshop"], "model.ddvug_willibald_samen.error_rs_s": ["model.ddvug_willibald_samen.stg_error_roadshow"], "model.ddvug_willibald_samen.stg_error_misc": ["model.ddvug_willibald_samen.pre_stg_error_misc"], "model.ddvug_willibald_samen.stg_error_roadshow": ["model.ddvug_willibald_samen.pre_stg_error_roadshow"], "model.ddvug_willibald_samen.error_h": ["model.ddvug_willibald_samen.stg_error_misc", "model.ddvug_willibald_samen.stg_error_roadshow", "model.ddvug_willibald_samen.stg_error_webshop"], "model.ddvug_willibald_samen.pre_stg_error_misc": ["model.ddvug_willibald_samen.load_misc_kategorie_termintreue"], "model.ddvug_willibald_samen.order_customer_sns": ["model.ddvug_willibald_samen.order_customer_l", "model.ddvug_willibald_samen.order_customer_rs_es", "model.ddvug_willibald_samen.order_customer_snp", "model.ddvug_willibald_samen.order_customer_ws_es"], "model.ddvug_willibald_samen.order_customer_snp": ["model.ddvug_willibald_samen.control_snap_v1", "model.ddvug_willibald_samen.order_customer_l", "model.ddvug_willibald_samen.order_customer_rs_es", "model.ddvug_willibald_samen.order_customer_rs_sts", "model.ddvug_willibald_samen.order_customer_ws_es", "model.ddvug_willibald_samen.order_customer_ws_sts"], "model.ddvug_willibald_samen.order_sns": ["model.ddvug_willibald_samen.order_h", "model.ddvug_willibald_samen.order_rs_sts", "model.ddvug_willibald_samen.order_snp", "model.ddvug_willibald_samen.order_ws_s", "model.ddvug_willibald_samen.order_ws_sts"], "model.ddvug_willibald_samen.order_position_snp": ["model.ddvug_willibald_samen.control_snap_v1", "model.ddvug_willibald_samen.order_position_l", "model.ddvug_willibald_samen.order_position_rs_sts", "model.ddvug_willibald_samen.order_position_ws_sts"], "model.ddvug_willibald_samen.order_snp": ["model.ddvug_willibald_samen.control_snap_v1", "model.ddvug_willibald_samen.order_h", "model.ddvug_willibald_samen.order_rs_sts", "model.ddvug_willibald_samen.order_ws_s", "model.ddvug_willibald_samen.order_ws_sts"], "model.ddvug_willibald_samen.order_position_sns": ["model.ddvug_willibald_samen.order_position_l", "model.ddvug_willibald_samen.order_position_rs_sts", "model.ddvug_willibald_samen.order_position_snp", "model.ddvug_willibald_samen.order_position_ws_sts"], "model.ddvug_willibald_samen.order_associationpartner_sns": ["model.ddvug_willibald_samen.order_associationpartner_l", "model.ddvug_willibald_samen.order_associationpartner_rs_es", "model.ddvug_willibald_samen.order_associationpartner_snp"], "model.ddvug_willibald_samen.order_associationpartner_snp": ["model.ddvug_willibald_samen.control_snap_v1", "model.ddvug_willibald_samen.order_associationpartner_l", "model.ddvug_willibald_samen.order_associationpartner_rs_es", "model.ddvug_willibald_samen.order_associationpartner_rs_sts"], "model.ddvug_willibald_samen.category_deliveryadherence_r_snp": ["model.ddvug_willibald_samen.category_deliveryadherence_misc_rs", "model.ddvug_willibald_samen.category_deliveryadherence_r", "model.ddvug_willibald_samen.control_snap_v1"], "model.ddvug_willibald_samen.position_snp": ["model.ddvug_willibald_samen.control_snap_v1", "model.ddvug_willibald_samen.position_h", "model.ddvug_willibald_samen.position_rs_s", "model.ddvug_willibald_samen.position_rs_sts", "model.ddvug_willibald_samen.position_ws_s", "model.ddvug_willibald_samen.position_ws_sts"], "model.ddvug_willibald_samen.position_sns": ["model.ddvug_willibald_samen.position_h", "model.ddvug_willibald_samen.position_rs_s", "model.ddvug_willibald_samen.position_rs_sts", "model.ddvug_willibald_samen.position_snp", "model.ddvug_willibald_samen.position_ws_s", "model.ddvug_willibald_samen.position_ws_sts"], "model.ddvug_willibald_samen.position_product_sns": ["model.ddvug_willibald_samen.position_product_l", "model.ddvug_willibald_samen.position_product_rs_es", "model.ddvug_willibald_samen.position_product_snp", "model.ddvug_willibald_samen.position_product_ws_es"], "model.ddvug_willibald_samen.position_product_snp": ["model.ddvug_willibald_samen.control_snap_v1", "model.ddvug_willibald_samen.position_product_l", "model.ddvug_willibald_samen.position_product_rs_es", "model.ddvug_willibald_samen.position_product_rs_sts", "model.ddvug_willibald_samen.position_product_ws_es", "model.ddvug_willibald_samen.position_product_ws_sts"], "model.ddvug_willibald_samen.deliveryservice_sns": ["model.ddvug_willibald_samen.deliveryservice_h", "model.ddvug_willibald_samen.deliveryservice_snp", "model.ddvug_willibald_samen.deliveryservice_ws_s", "model.ddvug_willibald_samen.deliveryservice_ws_sts"], "model.ddvug_willibald_samen.deliveryservice_snp": ["model.ddvug_willibald_samen.control_snap_v1", "model.ddvug_willibald_samen.deliveryservice_h", "model.ddvug_willibald_samen.deliveryservice_ws_s", "model.ddvug_willibald_samen.deliveryservice_ws_sts"], "model.ddvug_willibald_samen.productcategory_snp": ["model.ddvug_willibald_samen.control_snap_v1", "model.ddvug_willibald_samen.productcategory_h", "model.ddvug_willibald_samen.productcategory_ws_s"], "model.ddvug_willibald_samen.productcategory_sns": ["model.ddvug_willibald_samen.productcategory_h", "model.ddvug_willibald_samen.productcategory_snp", "model.ddvug_willibald_samen.productcategory_ws_s"], "model.ddvug_willibald_samen.productcategory_hierarchy_sns": ["model.ddvug_willibald_samen.productcategory_hierarchy_l", "model.ddvug_willibald_samen.productcategory_hierarchy_snp", "model.ddvug_willibald_samen.productcategory_hierarchy_ws_sts"], "model.ddvug_willibald_samen.productcategory_hierarchy_snp": ["model.ddvug_willibald_samen.control_snap_v1", "model.ddvug_willibald_samen.productcategory_hierarchy_l", "model.ddvug_willibald_samen.productcategory_hierarchy_ws_sts"], "model.ddvug_willibald_samen.product_productcategory_sns": ["model.ddvug_willibald_samen.product_productcategory_l", "model.ddvug_willibald_samen.product_productcategory_snp", "model.ddvug_willibald_samen.product_productcategory_ws_es"], "model.ddvug_willibald_samen.product_productcategory_snp": ["model.ddvug_willibald_samen.control_snap_v1", "model.ddvug_willibald_samen.product_productcategory_l", "model.ddvug_willibald_samen.product_productcategory_ws_es", "model.ddvug_willibald_samen.product_productcategory_ws_sts"], "model.ddvug_willibald_samen.product_sns": ["model.ddvug_willibald_samen.product_h", "model.ddvug_willibald_samen.product_snp", "model.ddvug_willibald_samen.product_ws_s", "model.ddvug_willibald_samen.product_ws_sts"], "model.ddvug_willibald_samen.product_snp": ["model.ddvug_willibald_samen.control_snap_v1", "model.ddvug_willibald_samen.product_h", "model.ddvug_willibald_samen.product_ws_s", "model.ddvug_willibald_samen.product_ws_sts"], "model.ddvug_willibald_samen.delivery_sns": ["model.ddvug_willibald_samen.delivery_nhl", "model.ddvug_willibald_samen.relevant_date"], "model.ddvug_willibald_samen.relevant_date": ["model.ddvug_willibald_samen.control_snap_v1"], "model.ddvug_willibald_samen.category_deliveryadherence_snp": ["model.ddvug_willibald_samen.category_deliveryadherence_misc_rs", "model.ddvug_willibald_samen.category_deliveryadherence_misc_sts", "model.ddvug_willibald_samen.category_deliveryadherence_r", "model.ddvug_willibald_samen.control_snap_v1"], "model.ddvug_willibald_samen.category_deliveryadherence_sns": ["model.ddvug_willibald_samen.category_deliveryadherence_misc_rs", "model.ddvug_willibald_samen.category_deliveryadherence_misc_sts", "model.ddvug_willibald_samen.category_deliveryadherence_r", "model.ddvug_willibald_samen.category_deliveryadherence_snp"], "model.ddvug_willibald_samen.product_type_sns": ["model.ddvug_willibald_samen.product_type_ws_rs"], "model.ddvug_willibald_samen.deliveryadress_sns": ["model.ddvug_willibald_samen.deliveryadress_h", "model.ddvug_willibald_samen.deliveryadress_snp", "model.ddvug_willibald_samen.deliveryadress_ws_s"], "model.ddvug_willibald_samen.deliveryadress_snp": ["model.ddvug_willibald_samen.control_snap_v1", "model.ddvug_willibald_samen.deliveryadress_h", "model.ddvug_willibald_samen.deliveryadress_ws_s"], "model.ddvug_willibald_samen.deliveryadress_customer_sns": ["model.ddvug_willibald_samen.deliveryadress_customer_l", "model.ddvug_willibald_samen.deliveryadress_customer_snp", "model.ddvug_willibald_samen.deliveryadress_customer_ws_es"], "model.ddvug_willibald_samen.deliveryadress_customer_snp": ["model.ddvug_willibald_samen.control_snap_v1", "model.ddvug_willibald_samen.deliveryadress_customer_l", "model.ddvug_willibald_samen.deliveryadress_customer_ws_es", "model.ddvug_willibald_samen.deliveryadress_customer_ws_sts"], "model.ddvug_willibald_samen.customer_associationpartner_snp": ["model.ddvug_willibald_samen.control_snap_v1", "model.ddvug_willibald_samen.customer_associationpartner_l", "model.ddvug_willibald_samen.customer_associationpartner_ws_es", "model.ddvug_willibald_samen.customer_associationpartner_ws_sts"], "model.ddvug_willibald_samen.customer_associationpartner_sns": ["model.ddvug_willibald_samen.customer_associationpartner_l", "model.ddvug_willibald_samen.customer_associationpartner_snp", "model.ddvug_willibald_samen.customer_associationpartner_ws_es"], "model.ddvug_willibald_samen.customer_sns": ["model.ddvug_willibald_samen.customer_h", "model.ddvug_willibald_samen.customer_snp", "model.ddvug_willibald_samen.customer_ws_s", "model.ddvug_willibald_samen.customer_ws_sts"], "model.ddvug_willibald_samen.customer_snp": ["model.ddvug_willibald_samen.control_snap_v1", "model.ddvug_willibald_samen.customer_h", "model.ddvug_willibald_samen.customer_ws_la_ms", "model.ddvug_willibald_samen.customer_ws_s", "model.ddvug_willibald_samen.customer_ws_sts"], "model.ddvug_willibald_samen.associationpartner_customer_sns": ["model.ddvug_willibald_samen.associationpartner_customer_l", "model.ddvug_willibald_samen.associationpartner_customer_snp", "model.ddvug_willibald_samen.associationpartner_customer_ws_es"], "model.ddvug_willibald_samen.associationpartner_customer_snp": ["model.ddvug_willibald_samen.associationpartner_customer_l", "model.ddvug_willibald_samen.associationpartner_customer_ws_es", "model.ddvug_willibald_samen.associationpartner_customer_ws_sts", "model.ddvug_willibald_samen.control_snap_v1"], "model.ddvug_willibald_samen.associationpartner_sns": ["model.ddvug_willibald_samen.associationpartner_h", "model.ddvug_willibald_samen.associationpartner_snp", "model.ddvug_willibald_samen.associationpartner_ws_s", "model.ddvug_willibald_samen.associationpartner_ws_sts"], "model.ddvug_willibald_samen.associationpartner_snp": ["model.ddvug_willibald_samen.associationpartner_h", "model.ddvug_willibald_samen.associationpartner_ws_s", "model.ddvug_willibald_samen.associationpartner_ws_sts", "model.ddvug_willibald_samen.control_snap_v1"], "model.ddvug_willibald_samen.stg_misc_kategorie_termintreue": ["model.ddvug_willibald_samen.load_misc_kategorie_termintreue"], "model.ddvug_willibald_samen.stg_webshop_position": ["model.ddvug_willibald_samen.load_webshop_position"], "model.ddvug_willibald_samen.stg_webshop_wohnort": ["model.ddvug_willibald_samen.load_webshop_wohnort"], "model.ddvug_willibald_samen.stg_webshop_lieferadresse": ["model.ddvug_willibald_samen.load_webshop_lieferadresse"], "model.ddvug_willibald_samen.stg_webshop_produkt": ["model.ddvug_willibald_samen.load_webshop_produkt"], "model.ddvug_willibald_samen.stg_webshop_kunde": ["model.ddvug_willibald_samen.load_webshop_kunde"], "model.ddvug_willibald_samen.stg_webshop_ref_produkt_typ": ["model.ddvug_willibald_samen.load_webshop_ref_produkt_typ"], "model.ddvug_willibald_samen.stg_webshop_lieferung": ["model.ddvug_willibald_samen.load_webshop_lieferung"], "model.ddvug_willibald_samen.stg_webshop_produktkategorie": ["model.ddvug_willibald_samen.load_webshop_produktkategorie"], "model.ddvug_willibald_samen.stg_webshop_lieferdienst": ["model.ddvug_willibald_samen.load_webshop_lieferdienst"], "model.ddvug_willibald_samen.control_snap_v0": [], "model.ddvug_willibald_samen.control_snap_v1": ["model.ddvug_willibald_samen.control_snap_v0", "model.ddvug_willibald_samen.load_sdts"], "model.ddvug_willibald_samen.stg_roadshow_bestellung": ["model.ddvug_willibald_samen.load_roadshow_bestellung"], "model.ddvug_willibald_samen.stg_webshop_bestellung": ["model.ddvug_willibald_samen.load_webshop_bestellung"], "model.ddvug_willibald_samen.stg_webshop_vereinspartner": ["model.ddvug_willibald_samen.load_webshop_vereinspartner"], "model.ddvug_willibald_samen.load_misc_kategorie_termintreue": ["source.ddvug_willibald_samen.LOAD_EXT.EXT_MISC_KATEGORIE_TERMINTREUE", "source.ddvug_willibald_samen.LOAD_EXT_META.META_HWM"], "model.ddvug_willibald_samen.load_webshop_position": ["source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_POSITION", "source.ddvug_willibald_samen.LOAD_EXT_META.META_HWM"], "model.ddvug_willibald_samen.load_sdts": ["model.ddvug_willibald_samen.load_misc_kategorie_termintreue", "model.ddvug_willibald_samen.load_roadshow_bestellung", "model.ddvug_willibald_samen.load_webshop_bestellung", "model.ddvug_willibald_samen.load_webshop_kunde", "model.ddvug_willibald_samen.load_webshop_lieferadresse", "model.ddvug_willibald_samen.load_webshop_lieferdienst", "model.ddvug_willibald_samen.load_webshop_lieferung", "model.ddvug_willibald_samen.load_webshop_position", "model.ddvug_willibald_samen.load_webshop_produkt", "model.ddvug_willibald_samen.load_webshop_produktkategorie", "model.ddvug_willibald_samen.load_webshop_ref_produkt_typ", "model.ddvug_willibald_samen.load_webshop_vereinspartner", "model.ddvug_willibald_samen.load_webshop_wohnort"], "model.ddvug_willibald_samen.load_roadshow_bestellung": ["source.ddvug_willibald_samen.LOAD_EXT.EXT_ROADSHOW_BESTELLUNG", "source.ddvug_willibald_samen.LOAD_EXT_META.META_HWM"], "model.ddvug_willibald_samen.load_webshop_produktkategorie": ["source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_PRODUKTKATEGORIE", "source.ddvug_willibald_samen.LOAD_EXT_META.META_HWM"], "model.ddvug_willibald_samen.load_webshop_produkt": ["source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_PRODUKT", "source.ddvug_willibald_samen.LOAD_EXT_META.META_HWM"], "model.ddvug_willibald_samen.load_webshop_lieferadresse": ["source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_LIEFERADRESSE", "source.ddvug_willibald_samen.LOAD_EXT_META.META_HWM"], "model.ddvug_willibald_samen.load_webshop_vereinspartner": ["source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_VEREINSPARTNER", "source.ddvug_willibald_samen.LOAD_EXT_META.META_HWM"], "model.ddvug_willibald_samen.load_webshop_bestellung": ["source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_BESTELLUNG", "source.ddvug_willibald_samen.LOAD_EXT_META.META_HWM"], "model.ddvug_willibald_samen.load_webshop_lieferung": ["source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_LIEFERUNG", "source.ddvug_willibald_samen.LOAD_EXT_META.META_HWM"], "model.ddvug_willibald_samen.load_webshop_kunde": ["source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_KUNDE", "source.ddvug_willibald_samen.LOAD_EXT_META.META_HWM"], "model.ddvug_willibald_samen.load_webshop_lieferdienst": ["source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_LIEFERDIENST", "source.ddvug_willibald_samen.LOAD_EXT_META.META_HWM"], "model.ddvug_willibald_samen.load_webshop_wohnort": ["source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_WOHNORT", "source.ddvug_willibald_samen.LOAD_EXT_META.META_HWM"], "model.ddvug_willibald_samen.load_webshop_ref_produkt_typ": ["source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_REF_PRODUKT_TYP", "source.ddvug_willibald_samen.LOAD_EXT_META.META_HWM"], "model.ddvug_willibald_samen.order_position_ws_sts": ["model.ddvug_willibald_samen.stg_webshop_position"], "model.ddvug_willibald_samen.order_associationpartner_rs_es": ["model.ddvug_willibald_samen.order_associationpartner_l", "model.ddvug_willibald_samen.order_associationpartner_rs_sts"], "model.ddvug_willibald_samen.order_customer_rs_sts": ["model.ddvug_willibald_samen.stg_roadshow_bestellung"], "model.ddvug_willibald_samen.order_ws_s": ["model.ddvug_willibald_samen.stg_webshop_bestellung"], "model.ddvug_willibald_samen.order_customer_l": ["model.ddvug_willibald_samen.stg_roadshow_bestellung", "model.ddvug_willibald_samen.stg_webshop_bestellung"], "model.ddvug_willibald_samen.order_ws_sts": ["model.ddvug_willibald_samen.stg_webshop_bestellung"], "model.ddvug_willibald_samen.order_customer_rs_es": ["model.ddvug_willibald_samen.order_customer_l", "model.ddvug_willibald_samen.order_customer_rs_sts"], "model.ddvug_willibald_samen.order_customer_ws_es": ["model.ddvug_willibald_samen.order_customer_l", "model.ddvug_willibald_samen.order_customer_ws_sts"], "model.ddvug_willibald_samen.order_rs_sts": ["model.ddvug_willibald_samen.stg_roadshow_bestellung"], "model.ddvug_willibald_samen.order_h": ["model.ddvug_willibald_samen.stg_roadshow_bestellung", "model.ddvug_willibald_samen.stg_webshop_bestellung", "model.ddvug_willibald_samen.stg_webshop_lieferung", "model.ddvug_willibald_samen.stg_webshop_position"], "model.ddvug_willibald_samen.order_position_rs_sts": ["model.ddvug_willibald_samen.stg_roadshow_bestellung"], "model.ddvug_willibald_samen.order_associationpartner_rs_sts": ["model.ddvug_willibald_samen.stg_roadshow_bestellung"], "model.ddvug_willibald_samen.order_position_l": ["model.ddvug_willibald_samen.stg_roadshow_bestellung", "model.ddvug_willibald_samen.stg_webshop_lieferung", "model.ddvug_willibald_samen.stg_webshop_position"], "model.ddvug_willibald_samen.order_customer_ws_sts": ["model.ddvug_willibald_samen.stg_webshop_bestellung"], "model.ddvug_willibald_samen.order_associationpartner_l": ["model.ddvug_willibald_samen.stg_roadshow_bestellung"], "model.ddvug_willibald_samen.position_product_ws_es": ["model.ddvug_willibald_samen.position_product_l", "model.ddvug_willibald_samen.position_product_ws_sts"], "model.ddvug_willibald_samen.position_h": ["model.ddvug_willibald_samen.stg_roadshow_bestellung", "model.ddvug_willibald_samen.stg_webshop_lieferung", "model.ddvug_willibald_samen.stg_webshop_position"], "model.ddvug_willibald_samen.position_ws_s": ["model.ddvug_willibald_samen.stg_webshop_position"], "model.ddvug_willibald_samen.position_ws_sts": ["model.ddvug_willibald_samen.stg_webshop_position"], "model.ddvug_willibald_samen.position_product_ws_sts": ["model.ddvug_willibald_samen.stg_webshop_position"], "model.ddvug_willibald_samen.position_rs_sts": ["model.ddvug_willibald_samen.stg_roadshow_bestellung"], "model.ddvug_willibald_samen.position_product_rs_sts": ["model.ddvug_willibald_samen.stg_roadshow_bestellung"], "model.ddvug_willibald_samen.position_product_l": ["model.ddvug_willibald_samen.stg_roadshow_bestellung", "model.ddvug_willibald_samen.stg_webshop_position"], "model.ddvug_willibald_samen.position_product_rs_es": ["model.ddvug_willibald_samen.position_product_l", "model.ddvug_willibald_samen.position_product_rs_sts"], "model.ddvug_willibald_samen.position_rs_s": ["model.ddvug_willibald_samen.stg_roadshow_bestellung"], "model.ddvug_willibald_samen.deliveryservice_h": ["model.ddvug_willibald_samen.stg_webshop_lieferdienst", "model.ddvug_willibald_samen.stg_webshop_lieferung"], "model.ddvug_willibald_samen.deliveryservice_ws_s": ["model.ddvug_willibald_samen.stg_webshop_lieferdienst"], "model.ddvug_willibald_samen.deliveryservice_ws_sts": ["model.ddvug_willibald_samen.stg_webshop_lieferdienst"], "model.ddvug_willibald_samen.productcategory_hierarchy_l": ["model.ddvug_willibald_samen.stg_webshop_produktkategorie"], "model.ddvug_willibald_samen.productcategory_h": ["model.ddvug_willibald_samen.stg_webshop_produkt", "model.ddvug_willibald_samen.stg_webshop_produktkategorie"], "model.ddvug_willibald_samen.productcategory_hierarchy_ws_sts": ["model.ddvug_willibald_samen.stg_webshop_produktkategorie"], "model.ddvug_willibald_samen.productcategory_ws_s": ["model.ddvug_willibald_samen.stg_webshop_produktkategorie"], "model.ddvug_willibald_samen.product_ws_s": ["model.ddvug_willibald_samen.stg_webshop_produkt"], "model.ddvug_willibald_samen.product_h": ["model.ddvug_willibald_samen.stg_roadshow_bestellung", "model.ddvug_willibald_samen.stg_webshop_position", "model.ddvug_willibald_samen.stg_webshop_produkt"], "model.ddvug_willibald_samen.product_productcategory_l": ["model.ddvug_willibald_samen.stg_webshop_produkt"], "model.ddvug_willibald_samen.product_productcategory_ws_es": ["model.ddvug_willibald_samen.product_productcategory_l", "model.ddvug_willibald_samen.product_productcategory_ws_sts"], "model.ddvug_willibald_samen.product_productcategory_ws_sts": ["model.ddvug_willibald_samen.stg_webshop_produkt"], "model.ddvug_willibald_samen.product_ws_sts": ["model.ddvug_willibald_samen.stg_webshop_produkt"], "model.ddvug_willibald_samen.order_customer_rs_rts": ["model.ddvug_willibald_samen.stg_roadshow_bestellung"], "model.ddvug_willibald_samen.order_rs_rts": ["model.ddvug_willibald_samen.stg_roadshow_bestellung"], "model.ddvug_willibald_samen.category_deliveryadherence_misc_sts": ["model.ddvug_willibald_samen.stg_misc_kategorie_termintreue"], "model.ddvug_willibald_samen.product_type_ws_rs": ["model.ddvug_willibald_samen.stg_webshop_ref_produkt_typ"], "model.ddvug_willibald_samen.delivery_nhl": ["model.ddvug_willibald_samen.stg_webshop_lieferung"], "model.ddvug_willibald_samen.deliveryadress_customer_l": ["model.ddvug_willibald_samen.stg_webshop_lieferadresse"], "model.ddvug_willibald_samen.deliveryadress_h": ["model.ddvug_willibald_samen.stg_webshop_lieferadresse", "model.ddvug_willibald_samen.stg_webshop_lieferung"], "model.ddvug_willibald_samen.deliveryadress_customer_ws_es": ["model.ddvug_willibald_samen.deliveryadress_customer_l", "model.ddvug_willibald_samen.deliveryadress_customer_ws_sts"], "model.ddvug_willibald_samen.deliveryadress_ws_s": ["model.ddvug_willibald_samen.stg_webshop_lieferadresse"], "model.ddvug_willibald_samen.deliveryadress_customer_ws_sts": ["model.ddvug_willibald_samen.stg_webshop_lieferadresse"], "model.ddvug_willibald_samen.category_deliveryadherence_misc_rs": ["model.ddvug_willibald_samen.stg_misc_kategorie_termintreue"], "model.ddvug_willibald_samen.category_deliveryadherence_r": ["model.ddvug_willibald_samen.stg_misc_kategorie_termintreue"], "model.ddvug_willibald_samen.customer_ws_la_ms": ["model.ddvug_willibald_samen.stg_webshop_wohnort"], "model.ddvug_willibald_samen.customer_associationpartner_ws_es": ["model.ddvug_willibald_samen.customer_associationpartner_l", "model.ddvug_willibald_samen.customer_associationpartner_ws_sts"], "model.ddvug_willibald_samen.customer_associationpartner_l": ["model.ddvug_willibald_samen.stg_webshop_kunde"], "model.ddvug_willibald_samen.customer_ws_sts": ["model.ddvug_willibald_samen.stg_webshop_kunde"], "model.ddvug_willibald_samen.customer_h": ["model.ddvug_willibald_samen.stg_roadshow_bestellung", "model.ddvug_willibald_samen.stg_webshop_bestellung", "model.ddvug_willibald_samen.stg_webshop_kunde", "model.ddvug_willibald_samen.stg_webshop_lieferadresse", "model.ddvug_willibald_samen.stg_webshop_vereinspartner", "model.ddvug_willibald_samen.stg_webshop_wohnort"], "model.ddvug_willibald_samen.customer_associationpartner_ws_sts": ["model.ddvug_willibald_samen.stg_webshop_kunde"], "model.ddvug_willibald_samen.customer_ws_s": ["model.ddvug_willibald_samen.stg_webshop_kunde"], "model.ddvug_willibald_samen.associationpartner_h": ["model.ddvug_willibald_samen.stg_roadshow_bestellung", "model.ddvug_willibald_samen.stg_webshop_kunde", "model.ddvug_willibald_samen.stg_webshop_vereinspartner"], "model.ddvug_willibald_samen.associationpartner_ws_s": ["model.ddvug_willibald_samen.stg_webshop_vereinspartner"], "model.ddvug_willibald_samen.associationpartner_customer_ws_sts": ["model.ddvug_willibald_samen.stg_webshop_vereinspartner"], "model.ddvug_willibald_samen.associationpartner_customer_l": ["model.ddvug_willibald_samen.stg_webshop_vereinspartner"], "model.ddvug_willibald_samen.associationpartner_customer_ws_es": ["model.ddvug_willibald_samen.associationpartner_customer_l", "model.ddvug_willibald_samen.associationpartner_customer_ws_sts"], "model.ddvug_willibald_samen.associationpartner_ws_sts": ["model.ddvug_willibald_samen.stg_webshop_vereinspartner"], "model.ddvug_willibald_samen.customer_bs": ["model.ddvug_willibald_samen.customer_sns", "model.ddvug_willibald_samen.relevant_date"], "model.ddvug_willibald_samen.date_bs": [], "model.ddvug_willibald_samen.productcategory_bs": ["model.ddvug_willibald_samen.productcategory_hierarchy_sns", "model.ddvug_willibald_samen.productcategory_sns", "model.ddvug_willibald_samen.relevant_date"], "model.ddvug_willibald_samen.order_customer_bb": ["model.ddvug_willibald_samen.customer_sns", "model.ddvug_willibald_samen.order_customer_sns", "model.ddvug_willibald_samen.order_position_sns", "model.ddvug_willibald_samen.position_sns", "model.ddvug_willibald_samen.relevant_date"], "model.ddvug_willibald_samen.sales_bb": ["model.ddvug_willibald_samen.associationpartner_snp", "model.ddvug_willibald_samen.category_deliveryadherence_bs", "model.ddvug_willibald_samen.customer_associationpartner_sns", "model.ddvug_willibald_samen.delivery_sns", "model.ddvug_willibald_samen.order_associationpartner_sns", "model.ddvug_willibald_samen.order_customer_bb", "model.ddvug_willibald_samen.order_customer_sns", "model.ddvug_willibald_samen.order_position_sns", "model.ddvug_willibald_samen.order_sns", "model.ddvug_willibald_samen.position_product_sns", "model.ddvug_willibald_samen.position_sns", "model.ddvug_willibald_samen.product_productcategory_sns", "model.ddvug_willibald_samen.product_sns", "model.ddvug_willibald_samen.product_type_sns", "model.ddvug_willibald_samen.productcategory_hierarchy_sns", "model.ddvug_willibald_samen.productcategory_sns", "model.ddvug_willibald_samen.relevant_date"], "model.ddvug_willibald_samen.category_deliveryadherence_bs": ["model.ddvug_willibald_samen.category_deliveryadherence_sns"], "model.ddvug_willibald_samen.dim_reporting_date": ["model.ddvug_willibald_samen.date_bs"], "model.ddvug_willibald_samen.dim_product": ["model.ddvug_willibald_samen.product_sns"], "model.ddvug_willibald_samen.dim_delivery_date": ["model.ddvug_willibald_samen.date_bs"], "model.ddvug_willibald_samen.fact_sales": ["model.ddvug_willibald_samen.sales_bb"], "model.ddvug_willibald_samen.dim_productcategory": ["model.ddvug_willibald_samen.productcategory_bs"], "model.ddvug_willibald_samen.dim_customer": ["model.ddvug_willibald_samen.customer_bs"], "model.ddvug_willibald_samen.fact_error": ["model.ddvug_willibald_samen.error_h", "model.ddvug_willibald_samen.error_msc_s", "model.ddvug_willibald_samen.error_rs_s", "model.ddvug_willibald_samen.error_ws_s"], "model.ddvug_willibald_samen.dim_sales_date": ["model.ddvug_willibald_samen.date_bs"], "model.ddvug_willibald_samen.dim_category_deliveryadherence": ["model.ddvug_willibald_samen.category_deliveryadherence_bs"], "model.ddvug_willibald_samen.dim_requested_date": ["model.ddvug_willibald_samen.date_bs"], "model.ddvug_willibald_samen.dim_associationpartner": ["model.ddvug_willibald_samen.associationpartner_sns"], "model.ddvug_willibald_samen.dim_product_type": ["model.ddvug_willibald_samen.product_type_sns"], "test.ddvug_willibald_samen.yedi_webshop_produkt": ["model.ddvug_willibald_samen.load_webshop_produkt", "model.ddvug_willibald_samen.meta_load", "model.ddvug_willibald_samen.product_h", "model.ddvug_willibald_samen.product_productcategory_l", "model.ddvug_willibald_samen.product_productcategory_ws_sts", "model.ddvug_willibald_samen.product_ws_s", "model.ddvug_willibald_samen.product_ws_sts", "model.ddvug_willibald_samen.productcategory_h"], "test.ddvug_willibald_samen.yedi_webshop_position": ["model.ddvug_willibald_samen.load_webshop_position", "model.ddvug_willibald_samen.meta_load", "model.ddvug_willibald_samen.order_h", "model.ddvug_willibald_samen.order_position_l", "model.ddvug_willibald_samen.order_position_ws_sts", "model.ddvug_willibald_samen.position_h", "model.ddvug_willibald_samen.position_product_l", "model.ddvug_willibald_samen.position_product_ws_sts", "model.ddvug_willibald_samen.position_ws_s", "model.ddvug_willibald_samen.position_ws_sts", "model.ddvug_willibald_samen.product_h"], "test.ddvug_willibald_samen.yedi_webshop_vereinspartner": ["model.ddvug_willibald_samen.associationpartner_customer_l", "model.ddvug_willibald_samen.associationpartner_customer_ws_sts", "model.ddvug_willibald_samen.associationpartner_h", "model.ddvug_willibald_samen.associationpartner_ws_s", "model.ddvug_willibald_samen.associationpartner_ws_sts", "model.ddvug_willibald_samen.customer_h", "model.ddvug_willibald_samen.load_webshop_vereinspartner", "model.ddvug_willibald_samen.meta_load"], "test.ddvug_willibald_samen.yedi_webshop_lieferdienst": ["model.ddvug_willibald_samen.deliveryservice_h", "model.ddvug_willibald_samen.deliveryservice_ws_s", "model.ddvug_willibald_samen.deliveryservice_ws_sts", "model.ddvug_willibald_samen.load_webshop_lieferdienst", "model.ddvug_willibald_samen.meta_load"], "test.ddvug_willibald_samen.yedi_webshop_bestellung": ["model.ddvug_willibald_samen.customer_h", "model.ddvug_willibald_samen.load_webshop_bestellung", "model.ddvug_willibald_samen.meta_load", "model.ddvug_willibald_samen.order_customer_l", "model.ddvug_willibald_samen.order_customer_ws_sts", "model.ddvug_willibald_samen.order_h", "model.ddvug_willibald_samen.order_ws_s", "model.ddvug_willibald_samen.order_ws_sts"], "test.ddvug_willibald_samen.yedi_webshop_kunde": ["model.ddvug_willibald_samen.associationpartner_h", "model.ddvug_willibald_samen.customer_associationpartner_l", "model.ddvug_willibald_samen.customer_associationpartner_ws_sts", "model.ddvug_willibald_samen.customer_h", "model.ddvug_willibald_samen.customer_ws_s", "model.ddvug_willibald_samen.customer_ws_sts", "model.ddvug_willibald_samen.load_webshop_kunde", "model.ddvug_willibald_samen.meta_load"], "test.ddvug_willibald_samen.yedi_webshop_wohnort": ["model.ddvug_willibald_samen.customer_h", "model.ddvug_willibald_samen.customer_ws_la_ms", "model.ddvug_willibald_samen.load_webshop_wohnort", "model.ddvug_willibald_samen.meta_load"], "test.ddvug_willibald_samen.yedi_webshop_lieferadresse": ["model.ddvug_willibald_samen.customer_h", "model.ddvug_willibald_samen.deliveryadress_customer_l", "model.ddvug_willibald_samen.deliveryadress_customer_ws_sts", "model.ddvug_willibald_samen.deliveryadress_h", "model.ddvug_willibald_samen.deliveryadress_ws_s", "model.ddvug_willibald_samen.load_webshop_lieferadresse", "model.ddvug_willibald_samen.meta_load"], "test.ddvug_willibald_samen.yedi_webshop_lieferung": ["model.ddvug_willibald_samen.delivery_nhl", "model.ddvug_willibald_samen.deliveryadress_h", "model.ddvug_willibald_samen.deliveryservice_h", "model.ddvug_willibald_samen.load_webshop_lieferung", "model.ddvug_willibald_samen.meta_load", "model.ddvug_willibald_samen.order_h", "model.ddvug_willibald_samen.position_h", "model.ddvug_willibald_samen.position_ws_s"], "test.ddvug_willibald_samen.singular_test_category_deliveryadherence": ["model.ddvug_willibald_samen.category_deliveryadherence_sns"], "test.ddvug_willibald_samen.fact_sales_compare": ["model.ddvug_willibald_samen.fact_sales"], "operation.ddvug_willibald_samen.ddvug_willibald_samen-on-run-start-0": ["source.ddvug_willibald_samen.LOAD_EXT_META.META_HWM"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_position_sns_hk_order_h__hk_position_h__sdts.a973ee998f": ["model.ddvug_willibald_samen.order_position_sns"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_position_snp_hk_order_position_l__sdts.946abbd85d": ["model.ddvug_willibald_samen.order_position_snp"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_sns_hk_order_h__sdts.346d963092": ["model.ddvug_willibald_samen.order_sns"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_customer_sns_hk_order_h__hk_customer_h__sdts.a6ed0eb6ee": ["model.ddvug_willibald_samen.order_customer_sns"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_customer_snp_hk_order_customer_l__sdts.da0cbcd307": ["model.ddvug_willibald_samen.order_customer_snp"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_associationpartner_sns_hk_order_h__hk_associationpartner_h__sdts.69c4df1754": ["model.ddvug_willibald_samen.order_associationpartner_sns"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_associationpartner_snp_hk_order_associationpartner_l__sdts.c94c22d391": ["model.ddvug_willibald_samen.order_associationpartner_snp"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_product_sns_hk_position_h__hk_product_h__sdts.680a765177": ["model.ddvug_willibald_samen.position_product_sns"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_product_snp_hk_position_product_l__sdts.ed7b36135d": ["model.ddvug_willibald_samen.position_product_snp"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_sns_hk_position_h__sdts.66bc7528fa": ["model.ddvug_willibald_samen.position_sns"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_snp_hk_position_h__sdts.347dc11ccb": ["model.ddvug_willibald_samen.position_snp"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_product_sns_hk_product_h__sdts.8e2ea33ac6": ["model.ddvug_willibald_samen.product_sns"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_product_snp_hk_product_h__sdts.68256a73c1": ["model.ddvug_willibald_samen.product_snp"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_product_productcategory_sns_hk_productcategory_h__hk_product_h__sdts.baeb025ab0": ["model.ddvug_willibald_samen.product_productcategory_sns"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_product_productcategory_snp_hk_product_productcategory_l__sdts.ae6003500d": ["model.ddvug_willibald_samen.product_productcategory_snp"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_category_deliveryadherence_sns_category_deliveryadherence_nk__sdts.604efb30c8": ["model.ddvug_willibald_samen.category_deliveryadherence_sns"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_customer_associationpartner_sns_hk_customer_h__hk_associationpartner_h__sdts.31f1d2f41b": ["model.ddvug_willibald_samen.customer_associationpartner_sns"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_customer_associationpartner_snp_hk_customer_associationpartner_l__sdts.a460cf2600": ["model.ddvug_willibald_samen.customer_associationpartner_snp"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_customer_sns_hk_customer_h__sdts.6b605109f9": ["model.ddvug_willibald_samen.customer_sns"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_customer_snp_hk_customer_h__sdts.2605db547c": ["model.ddvug_willibald_samen.customer_snp"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_associationpartner_sns_hk_associationpartner_h__sdts.e6512ac6ac": ["model.ddvug_willibald_samen.associationpartner_sns"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_associationpartner_snp_hk_associationpartner_h__sdts.0054471477": ["model.ddvug_willibald_samen.associationpartner_snp"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_associationpartner_customer_sns_hk_associationpartner_h__hk_customer_h__sdts.3ea12109b7": ["model.ddvug_willibald_samen.associationpartner_customer_sns"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_associationpartner_customer_snp_hk_associationpartner_customer_l__sdts.ac6b986952": ["model.ddvug_willibald_samen.associationpartner_customer_snp"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_hierarchy_sns_hk_productcategory_h__hk_productcategory_parent_h__sdts.804dbc805f": ["model.ddvug_willibald_samen.productcategory_hierarchy_sns"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_hierarchy_snp_hk_productcategory_hierarchy_l__sdts.e55dbefe34": ["model.ddvug_willibald_samen.productcategory_hierarchy_snp"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_sns_hk_productcategory_h__sdts.5dec387e5c": ["model.ddvug_willibald_samen.productcategory_sns"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_snp_hk_productcategory_h__sdts.84ee3c2375": ["model.ddvug_willibald_samen.productcategory_snp"], "test.ddvug_willibald_samen.not_null_order_customer_l_hk_customer_h.1517b5d93d": ["model.ddvug_willibald_samen.order_customer_l"], "test.ddvug_willibald_samen.relationships_order_customer_l_hk_customer_h__hk_customer_h__ref_customer_h_.3dee3b1fd8": ["model.ddvug_willibald_samen.customer_h", "model.ddvug_willibald_samen.order_customer_l"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_customer_l_hk_order_h__hk_customer_h.130b9b2172": ["model.ddvug_willibald_samen.order_customer_l"], "test.ddvug_willibald_samen.not_null_order_ws_s_hk_order_h.d51941259d": ["model.ddvug_willibald_samen.order_ws_s"], "test.ddvug_willibald_samen.relationships_order_ws_s_hk_order_h__hk_order_h__ref_order_h_.db500d92dc": ["model.ddvug_willibald_samen.order_h", "model.ddvug_willibald_samen.order_ws_s"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_ws_s_hk_order_h__ldts.7e05da4ab2": ["model.ddvug_willibald_samen.order_ws_s"], "test.ddvug_willibald_samen.not_null_order_associationpartner_l_hk_associationpartner_h.0f573fa13c": ["model.ddvug_willibald_samen.order_associationpartner_l"], "test.ddvug_willibald_samen.relationships_order_associationpartner_l_hk_associationpartner_h__hk_associationpartner_h__ref_associationpartner_h_.0e69c0bcba": ["model.ddvug_willibald_samen.associationpartner_h", "model.ddvug_willibald_samen.order_associationpartner_l"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_associationpartner_l_hk_order_h__hk_associationpartner_h.3dd7df03f0": ["model.ddvug_willibald_samen.order_associationpartner_l"], "test.ddvug_willibald_samen.not_null_order_position_l_hk_order_h.de5876fa32": ["model.ddvug_willibald_samen.order_position_l"], "test.ddvug_willibald_samen.relationships_order_position_l_hk_order_h__hk_order_h__ref_order_h_.a424ec45ad": ["model.ddvug_willibald_samen.order_h", "model.ddvug_willibald_samen.order_position_l"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_position_l_hk_position_h__hk_order_h.aa871febee": ["model.ddvug_willibald_samen.order_position_l"], "test.ddvug_willibald_samen.not_null_order_h_hk_order_h.e964883e7d": ["model.ddvug_willibald_samen.order_h"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_h_hk_order_h.9033e9e2ae": ["model.ddvug_willibald_samen.order_h"], "test.ddvug_willibald_samen.not_null_position_rs_s_hk_position_h.2923971ee3": ["model.ddvug_willibald_samen.position_rs_s"], "test.ddvug_willibald_samen.relationships_position_rs_s_hk_position_h__hk_position_h__ref_position_h_.f54d7665c8": ["model.ddvug_willibald_samen.position_h", "model.ddvug_willibald_samen.position_rs_s"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_rs_s_hk_position_h__ldts.6651764ee7": ["model.ddvug_willibald_samen.position_rs_s"], "test.ddvug_willibald_samen.not_null_position_ws_s_hk_position_h.178468e426": ["model.ddvug_willibald_samen.position_ws_s"], "test.ddvug_willibald_samen.relationships_position_ws_s_hk_position_h__hk_position_h__ref_position_h_.2082aaaf41": ["model.ddvug_willibald_samen.position_h", "model.ddvug_willibald_samen.position_ws_s"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_ws_s_hk_position_h__ldts.dd123b21cb": ["model.ddvug_willibald_samen.position_ws_s"], "test.ddvug_willibald_samen.not_null_position_h_hk_position_h.ec4aed46b2": ["model.ddvug_willibald_samen.position_h"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_h_hk_position_h.228a6fbcb6": ["model.ddvug_willibald_samen.position_h"], "test.ddvug_willibald_samen.not_null_position_product_l_hk_position_h.5df8285269": ["model.ddvug_willibald_samen.position_product_l"], "test.ddvug_willibald_samen.relationships_position_product_l_hk_position_h__hk_position_h__ref_position_h_.d95245f4bf": ["model.ddvug_willibald_samen.position_h", "model.ddvug_willibald_samen.position_product_l"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_product_l_hk_product_h__hk_position_h.fa6a818ea6": ["model.ddvug_willibald_samen.position_product_l"], "test.ddvug_willibald_samen.not_null_deliveryservice_ws_s_hk_deliveryservice_h.df945b68b6": ["model.ddvug_willibald_samen.deliveryservice_ws_s"], "test.ddvug_willibald_samen.relationships_deliveryservice_ws_s_hk_deliveryservice_h__hk_deliveryservice_h__ref_deliveryservice_h_.67c5d7dcc0": ["model.ddvug_willibald_samen.deliveryservice_h", "model.ddvug_willibald_samen.deliveryservice_ws_s"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_deliveryservice_ws_s_hk_deliveryservice_h__ldts.098dee5d26": ["model.ddvug_willibald_samen.deliveryservice_ws_s"], "test.ddvug_willibald_samen.not_null_deliveryservice_h_hk_deliveryservice_h.075e1a1c28": ["model.ddvug_willibald_samen.deliveryservice_h"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_deliveryservice_h_hk_deliveryservice_h.ff12c0142c": ["model.ddvug_willibald_samen.deliveryservice_h"], "test.ddvug_willibald_samen.not_null_productcategory_h_hk_productcategory_h.ccee8ead98": ["model.ddvug_willibald_samen.productcategory_h"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_h_hk_productcategory_h.67b2921ad0": ["model.ddvug_willibald_samen.productcategory_h"], "test.ddvug_willibald_samen.not_null_productcategory_ws_s_hk_productcategory_h.68670e8df5": ["model.ddvug_willibald_samen.productcategory_ws_s"], "test.ddvug_willibald_samen.relationships_productcategory_ws_s_hk_productcategory_h__hk_productcategory_h__ref_productcategory_h_.a68485f2fb": ["model.ddvug_willibald_samen.productcategory_h", "model.ddvug_willibald_samen.productcategory_ws_s"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_ws_s_hk_productcategory_h__ldts.ce12857ce0": ["model.ddvug_willibald_samen.productcategory_ws_s"], "test.ddvug_willibald_samen.not_null_productcategory_hierarchy_l_hk_productcategory_h.26323569e0": ["model.ddvug_willibald_samen.productcategory_hierarchy_l"], "test.ddvug_willibald_samen.relationships_productcategory_hierarchy_l_hk_productcategory_h__hk_productcategory_h__ref_productcategory_h_.f403cd2cc0": ["model.ddvug_willibald_samen.productcategory_h", "model.ddvug_willibald_samen.productcategory_hierarchy_l"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_hierarchy_l_hk_productcategory_parent_h__hk_productcategory_h.c3c6bb03a9": ["model.ddvug_willibald_samen.productcategory_hierarchy_l"], "test.ddvug_willibald_samen.not_null_product_productcategory_l_hk_product_h.214089443e": ["model.ddvug_willibald_samen.product_productcategory_l"], "test.ddvug_willibald_samen.relationships_product_productcategory_l_hk_product_h__hk_product_h__ref_product_h_.926290dd2a": ["model.ddvug_willibald_samen.product_h", "model.ddvug_willibald_samen.product_productcategory_l"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_product_productcategory_l_hk_productcategory_h__hk_product_h.f467bff89e": ["model.ddvug_willibald_samen.product_productcategory_l"], "test.ddvug_willibald_samen.not_null_product_ws_s_hk_product_h.4360d19cf9": ["model.ddvug_willibald_samen.product_ws_s"], "test.ddvug_willibald_samen.relationships_product_ws_s_hk_product_h__hk_product_h__ref_product_h_.b4eadf9dea": ["model.ddvug_willibald_samen.product_h", "model.ddvug_willibald_samen.product_ws_s"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_product_ws_s_hk_product_h__ldts.611020bb93": ["model.ddvug_willibald_samen.product_ws_s"], "test.ddvug_willibald_samen.not_null_product_h_hk_product_h.cff0a43270": ["model.ddvug_willibald_samen.product_h"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_product_h_hk_product_h.9352b9fae5": ["model.ddvug_willibald_samen.product_h"], "test.ddvug_willibald_samen.not_null_deliveryadress_h_hk_deliveryadress_h.d769cb37cd": ["model.ddvug_willibald_samen.deliveryadress_h"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_deliveryadress_h_hk_deliveryadress_h.e9471c557c": ["model.ddvug_willibald_samen.deliveryadress_h"], "test.ddvug_willibald_samen.not_null_deliveryadress_customer_l_hk_customer_h.97624d0710": ["model.ddvug_willibald_samen.deliveryadress_customer_l"], "test.ddvug_willibald_samen.relationships_deliveryadress_customer_l_hk_customer_h__hk_customer_h__ref_customer_h_.b757e1bf63": ["model.ddvug_willibald_samen.customer_h", "model.ddvug_willibald_samen.deliveryadress_customer_l"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_deliveryadress_customer_l_hk_deliveryadress_h__hk_customer_h.d6a3ab7e19": ["model.ddvug_willibald_samen.deliveryadress_customer_l"], "test.ddvug_willibald_samen.not_null_deliveryadress_ws_s_hk_deliveryadress_h.2950dd7fef": ["model.ddvug_willibald_samen.deliveryadress_ws_s"], "test.ddvug_willibald_samen.relationships_deliveryadress_ws_s_hk_deliveryadress_h__hk_deliveryadress_h__ref_deliveryadress_h_.d605b4d012": ["model.ddvug_willibald_samen.deliveryadress_h", "model.ddvug_willibald_samen.deliveryadress_ws_s"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_deliveryadress_ws_s_hk_deliveryadress_h__ldts.12841db368": ["model.ddvug_willibald_samen.deliveryadress_ws_s"], "test.ddvug_willibald_samen.not_null_category_deliveryadherence_misc_rs_category_deliveryadherence_nk.c0be686a9b": ["model.ddvug_willibald_samen.category_deliveryadherence_misc_rs"], "test.ddvug_willibald_samen.relationships_category_deliveryadherence_misc_rs_category_deliveryadherence_nk__category_deliveryadherence_nk__ref_category_deliveryadherence_r_.4baedd520e": ["model.ddvug_willibald_samen.category_deliveryadherence_misc_rs", "model.ddvug_willibald_samen.category_deliveryadherence_r"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_category_deliveryadherence_misc_rs_category_deliveryadherence_nk__ldts.9886804350": ["model.ddvug_willibald_samen.category_deliveryadherence_misc_rs"], "test.ddvug_willibald_samen.not_null_category_deliveryadherence_r_category_deliveryadherence_nk.0d56fad547": ["model.ddvug_willibald_samen.category_deliveryadherence_r"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_category_deliveryadherence_r_category_deliveryadherence_nk.c3423938c7": ["model.ddvug_willibald_samen.category_deliveryadherence_r"], "test.ddvug_willibald_samen.not_null_customer_h_hk_customer_h.bfea236786": ["model.ddvug_willibald_samen.customer_h"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_customer_h_hk_customer_h.de39b48d51": ["model.ddvug_willibald_samen.customer_h"], "test.ddvug_willibald_samen.not_null_customer_associationpartner_l_hk_associationpartner_h.18fdca24da": ["model.ddvug_willibald_samen.customer_associationpartner_l"], "test.ddvug_willibald_samen.relationships_customer_associationpartner_l_hk_associationpartner_h__hk_associationpartner_h__ref_associationpartner_h_.7d0b4e5df6": ["model.ddvug_willibald_samen.associationpartner_h", "model.ddvug_willibald_samen.customer_associationpartner_l"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_customer_associationpartner_l_hk_customer_h__hk_associationpartner_h.b6732ac5bd": ["model.ddvug_willibald_samen.customer_associationpartner_l"], "test.ddvug_willibald_samen.not_null_customer_ws_s_hk_customer_h.da7e77833a": ["model.ddvug_willibald_samen.customer_ws_s"], "test.ddvug_willibald_samen.relationships_customer_ws_s_hk_customer_h__hk_customer_h__ref_customer_h_.69e768d7f3": ["model.ddvug_willibald_samen.customer_h", "model.ddvug_willibald_samen.customer_ws_s"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_customer_ws_s_hk_customer_h__ldts.6b4339c301": ["model.ddvug_willibald_samen.customer_ws_s"], "test.ddvug_willibald_samen.not_null_associationpartner_h_hk_associationpartner_h.a5b0b42c47": ["model.ddvug_willibald_samen.associationpartner_h"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_associationpartner_h_hk_associationpartner_h.4b515e4e9a": ["model.ddvug_willibald_samen.associationpartner_h"], "test.ddvug_willibald_samen.not_null_associationpartner_customer_l_hk_associationpartner_h.d195acb39d": ["model.ddvug_willibald_samen.associationpartner_customer_l"], "test.ddvug_willibald_samen.relationships_associationpartner_customer_l_hk_associationpartner_h__hk_associationpartner_h__ref_associationpartner_h_.2c36bb45e4": ["model.ddvug_willibald_samen.associationpartner_customer_l", "model.ddvug_willibald_samen.associationpartner_h"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_associationpartner_customer_l_hk_customer_h__hk_associationpartner_h.567dacd496": ["model.ddvug_willibald_samen.associationpartner_customer_l"], "test.ddvug_willibald_samen.not_null_associationpartner_ws_s_hk_associationpartner_h.0f2d6f252c": ["model.ddvug_willibald_samen.associationpartner_ws_s"], "test.ddvug_willibald_samen.relationships_associationpartner_ws_s_hk_associationpartner_h__hk_associationpartner_h__ref_associationpartner_h_.4ab56b58f4": ["model.ddvug_willibald_samen.associationpartner_h", "model.ddvug_willibald_samen.associationpartner_ws_s"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_associationpartner_ws_s_hk_associationpartner_h__ldts.30637490cd": ["model.ddvug_willibald_samen.associationpartner_ws_s"], "test.ddvug_willibald_samen.not_null_productcategory_bs_hk_productcategory_d.b13ac261f8": ["model.ddvug_willibald_samen.productcategory_bs"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_bs_sdts__hk_productcategory_d.bccb273b4a": ["model.ddvug_willibald_samen.productcategory_bs"], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_sales_bb_reporting_date__hk_order_h__hk_position_h.49f74dd7b6": ["model.ddvug_willibald_samen.sales_bb"], "model.ddvug_willibald_samen.meta_load": ["model.ddvug_willibald_samen.load_misc_kategorie_termintreue", "model.ddvug_willibald_samen.load_roadshow_bestellung", "model.ddvug_willibald_samen.load_webshop_bestellung", "model.ddvug_willibald_samen.load_webshop_kunde", "model.ddvug_willibald_samen.load_webshop_lieferadresse", "model.ddvug_willibald_samen.load_webshop_lieferdienst", "model.ddvug_willibald_samen.load_webshop_lieferung", "model.ddvug_willibald_samen.load_webshop_position", "model.ddvug_willibald_samen.load_webshop_produkt", "model.ddvug_willibald_samen.load_webshop_produktkategorie", "model.ddvug_willibald_samen.load_webshop_ref_produkt_typ", "model.ddvug_willibald_samen.load_webshop_vereinspartner", "model.ddvug_willibald_samen.load_webshop_wohnort"], "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_KUNDE": [], "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_LIEFERADRESSE": [], "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_LIEFERDIENST": [], "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_LIEFERUNG": [], "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_POSITION": [], "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_PRODUKT": [], "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_PRODUKTKATEGORIE": [], "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_VEREINSPARTNER": [], "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_WOHNORT": [], "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_REF_PRODUKT_TYP": [], "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_BESTELLUNG": [], "source.ddvug_willibald_samen.LOAD_EXT.EXT_ROADSHOW_BESTELLUNG": [], "source.ddvug_willibald_samen.LOAD_EXT.EXT_MISC_KATEGORIE_TERMINTREUE": [], "source.ddvug_willibald_samen.LOAD_EXT_META.META_HWM": [], "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_MISC_KATEGORIE_TERMINTREUE": [], "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_ROADSHOW_BESTELLUNG": [], "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_REF_PRODUKT_TYP": [], "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_PRODUKT": [], "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_PRODUKTKATEGORIE": [], "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_LIEFERADRESSE": [], "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_VEREINSPARTNER": [], "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_LIEFERUNG": [], "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_KUNDE": [], "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_POSITION": [], "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_LIEFERDIENST": [], "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_BESTELLUNG": [], "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_WOHNORT": [], "exposure.ddvug_willibald_samen.Willibald_Controlling": ["model.ddvug_willibald_samen.dim_associationpartner", "model.ddvug_willibald_samen.dim_category_deliveryadherence", "model.ddvug_willibald_samen.dim_customer", "model.ddvug_willibald_samen.dim_delivery_date", "model.ddvug_willibald_samen.dim_product", "model.ddvug_willibald_samen.dim_product_type", "model.ddvug_willibald_samen.dim_productcategory", "model.ddvug_willibald_samen.dim_reporting_date", "model.ddvug_willibald_samen.dim_requested_date", "model.ddvug_willibald_samen.fact_sales"]}, "child_map": {"model.ddvug_willibald_samen.pre_stg_error_webshop": ["model.ddvug_willibald_samen.stg_error_webshop"], "model.ddvug_willibald_samen.pre_stg_error_roadshow": ["model.ddvug_willibald_samen.stg_error_roadshow"], "model.ddvug_willibald_samen.error_msc_s": ["model.ddvug_willibald_samen.fact_error"], "model.ddvug_willibald_samen.stg_error_webshop": ["model.ddvug_willibald_samen.error_h", "model.ddvug_willibald_samen.error_ws_s"], "model.ddvug_willibald_samen.error_ws_s": ["model.ddvug_willibald_samen.fact_error"], "model.ddvug_willibald_samen.error_rs_s": ["model.ddvug_willibald_samen.fact_error"], "model.ddvug_willibald_samen.stg_error_misc": ["model.ddvug_willibald_samen.error_h", "model.ddvug_willibald_samen.error_msc_s"], "model.ddvug_willibald_samen.stg_error_roadshow": ["model.ddvug_willibald_samen.error_h", "model.ddvug_willibald_samen.error_rs_s"], "model.ddvug_willibald_samen.error_h": ["model.ddvug_willibald_samen.fact_error"], "model.ddvug_willibald_samen.pre_stg_error_misc": ["model.ddvug_willibald_samen.stg_error_misc"], "model.ddvug_willibald_samen.order_customer_sns": ["model.ddvug_willibald_samen.order_customer_bb", "model.ddvug_willibald_samen.sales_bb", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_customer_sns_hk_order_h__hk_customer_h__sdts.a6ed0eb6ee"], "model.ddvug_willibald_samen.order_customer_snp": ["model.ddvug_willibald_samen.order_customer_sns", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_customer_snp_hk_order_customer_l__sdts.da0cbcd307"], "model.ddvug_willibald_samen.order_sns": ["model.ddvug_willibald_samen.sales_bb", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_sns_hk_order_h__sdts.346d963092"], "model.ddvug_willibald_samen.order_position_snp": ["model.ddvug_willibald_samen.order_position_sns", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_position_snp_hk_order_position_l__sdts.946abbd85d"], "model.ddvug_willibald_samen.order_snp": ["model.ddvug_willibald_samen.order_sns"], "model.ddvug_willibald_samen.order_position_sns": ["model.ddvug_willibald_samen.order_customer_bb", "model.ddvug_willibald_samen.sales_bb", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_position_sns_hk_order_h__hk_position_h__sdts.a973ee998f"], "model.ddvug_willibald_samen.order_associationpartner_sns": ["model.ddvug_willibald_samen.sales_bb", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_associationpartner_sns_hk_order_h__hk_associationpartner_h__sdts.69c4df1754"], "model.ddvug_willibald_samen.order_associationpartner_snp": ["model.ddvug_willibald_samen.order_associationpartner_sns", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_associationpartner_snp_hk_order_associationpartner_l__sdts.c94c22d391"], "model.ddvug_willibald_samen.category_deliveryadherence_r_snp": [], "model.ddvug_willibald_samen.position_snp": ["model.ddvug_willibald_samen.position_sns", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_snp_hk_position_h__sdts.347dc11ccb"], "model.ddvug_willibald_samen.position_sns": ["model.ddvug_willibald_samen.order_customer_bb", "model.ddvug_willibald_samen.sales_bb", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_sns_hk_position_h__sdts.66bc7528fa"], "model.ddvug_willibald_samen.position_product_sns": ["model.ddvug_willibald_samen.sales_bb", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_product_sns_hk_position_h__hk_product_h__sdts.680a765177"], "model.ddvug_willibald_samen.position_product_snp": ["model.ddvug_willibald_samen.position_product_sns", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_product_snp_hk_position_product_l__sdts.ed7b36135d"], "model.ddvug_willibald_samen.deliveryservice_sns": [], "model.ddvug_willibald_samen.deliveryservice_snp": ["model.ddvug_willibald_samen.deliveryservice_sns"], "model.ddvug_willibald_samen.productcategory_snp": ["model.ddvug_willibald_samen.productcategory_sns", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_snp_hk_productcategory_h__sdts.84ee3c2375"], "model.ddvug_willibald_samen.productcategory_sns": ["model.ddvug_willibald_samen.productcategory_bs", "model.ddvug_willibald_samen.sales_bb", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_sns_hk_productcategory_h__sdts.5dec387e5c"], "model.ddvug_willibald_samen.productcategory_hierarchy_sns": ["model.ddvug_willibald_samen.productcategory_bs", "model.ddvug_willibald_samen.sales_bb", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_hierarchy_sns_hk_productcategory_h__hk_productcategory_parent_h__sdts.804dbc805f"], "model.ddvug_willibald_samen.productcategory_hierarchy_snp": ["model.ddvug_willibald_samen.productcategory_hierarchy_sns", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_hierarchy_snp_hk_productcategory_hierarchy_l__sdts.e55dbefe34"], "model.ddvug_willibald_samen.product_productcategory_sns": ["model.ddvug_willibald_samen.sales_bb", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_product_productcategory_sns_hk_productcategory_h__hk_product_h__sdts.baeb025ab0"], "model.ddvug_willibald_samen.product_productcategory_snp": ["model.ddvug_willibald_samen.product_productcategory_sns", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_product_productcategory_snp_hk_product_productcategory_l__sdts.ae6003500d"], "model.ddvug_willibald_samen.product_sns": ["model.ddvug_willibald_samen.dim_product", "model.ddvug_willibald_samen.sales_bb", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_product_sns_hk_product_h__sdts.8e2ea33ac6"], "model.ddvug_willibald_samen.product_snp": ["model.ddvug_willibald_samen.product_sns", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_product_snp_hk_product_h__sdts.68256a73c1"], "model.ddvug_willibald_samen.delivery_sns": ["model.ddvug_willibald_samen.sales_bb"], "model.ddvug_willibald_samen.relevant_date": ["model.ddvug_willibald_samen.customer_bs", "model.ddvug_willibald_samen.delivery_sns", "model.ddvug_willibald_samen.order_customer_bb", "model.ddvug_willibald_samen.productcategory_bs", "model.ddvug_willibald_samen.sales_bb"], "model.ddvug_willibald_samen.category_deliveryadherence_snp": ["model.ddvug_willibald_samen.category_deliveryadherence_sns"], "model.ddvug_willibald_samen.category_deliveryadherence_sns": ["model.ddvug_willibald_samen.category_deliveryadherence_bs", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_category_deliveryadherence_sns_category_deliveryadherence_nk__sdts.604efb30c8", "test.ddvug_willibald_samen.singular_test_category_deliveryadherence"], "model.ddvug_willibald_samen.product_type_sns": ["model.ddvug_willibald_samen.dim_product_type", "model.ddvug_willibald_samen.sales_bb"], "model.ddvug_willibald_samen.deliveryadress_sns": [], "model.ddvug_willibald_samen.deliveryadress_snp": ["model.ddvug_willibald_samen.deliveryadress_sns"], "model.ddvug_willibald_samen.deliveryadress_customer_sns": [], "model.ddvug_willibald_samen.deliveryadress_customer_snp": ["model.ddvug_willibald_samen.deliveryadress_customer_sns"], "model.ddvug_willibald_samen.customer_associationpartner_snp": ["model.ddvug_willibald_samen.customer_associationpartner_sns", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_customer_associationpartner_snp_hk_customer_associationpartner_l__sdts.a460cf2600"], "model.ddvug_willibald_samen.customer_associationpartner_sns": ["model.ddvug_willibald_samen.sales_bb", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_customer_associationpartner_sns_hk_customer_h__hk_associationpartner_h__sdts.31f1d2f41b"], "model.ddvug_willibald_samen.customer_sns": ["model.ddvug_willibald_samen.customer_bs", "model.ddvug_willibald_samen.order_customer_bb", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_customer_sns_hk_customer_h__sdts.6b605109f9"], "model.ddvug_willibald_samen.customer_snp": ["model.ddvug_willibald_samen.customer_sns", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_customer_snp_hk_customer_h__sdts.2605db547c"], "model.ddvug_willibald_samen.associationpartner_customer_sns": ["test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_associationpartner_customer_sns_hk_associationpartner_h__hk_customer_h__sdts.3ea12109b7"], "model.ddvug_willibald_samen.associationpartner_customer_snp": ["model.ddvug_willibald_samen.associationpartner_customer_sns", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_associationpartner_customer_snp_hk_associationpartner_customer_l__sdts.ac6b986952"], "model.ddvug_willibald_samen.associationpartner_sns": ["model.ddvug_willibald_samen.dim_associationpartner", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_associationpartner_sns_hk_associationpartner_h__sdts.e6512ac6ac"], "model.ddvug_willibald_samen.associationpartner_snp": ["model.ddvug_willibald_samen.associationpartner_sns", "model.ddvug_willibald_samen.sales_bb", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_associationpartner_snp_hk_associationpartner_h__sdts.0054471477"], "model.ddvug_willibald_samen.stg_misc_kategorie_termintreue": ["model.ddvug_willibald_samen.category_deliveryadherence_misc_rs", "model.ddvug_willibald_samen.category_deliveryadherence_misc_sts", "model.ddvug_willibald_samen.category_deliveryadherence_r"], "model.ddvug_willibald_samen.stg_webshop_position": ["model.ddvug_willibald_samen.order_h", "model.ddvug_willibald_samen.order_position_l", "model.ddvug_willibald_samen.order_position_ws_sts", "model.ddvug_willibald_samen.position_h", "model.ddvug_willibald_samen.position_product_l", "model.ddvug_willibald_samen.position_product_ws_sts", "model.ddvug_willibald_samen.position_ws_s", "model.ddvug_willibald_samen.position_ws_sts", "model.ddvug_willibald_samen.product_h"], "model.ddvug_willibald_samen.stg_webshop_wohnort": ["model.ddvug_willibald_samen.customer_h", "model.ddvug_willibald_samen.customer_ws_la_ms"], "model.ddvug_willibald_samen.stg_webshop_lieferadresse": ["model.ddvug_willibald_samen.customer_h", "model.ddvug_willibald_samen.deliveryadress_customer_l", "model.ddvug_willibald_samen.deliveryadress_customer_ws_sts", "model.ddvug_willibald_samen.deliveryadress_h", "model.ddvug_willibald_samen.deliveryadress_ws_s"], "model.ddvug_willibald_samen.stg_webshop_produkt": ["model.ddvug_willibald_samen.product_h", "model.ddvug_willibald_samen.product_productcategory_l", "model.ddvug_willibald_samen.product_productcategory_ws_sts", "model.ddvug_willibald_samen.product_ws_s", "model.ddvug_willibald_samen.product_ws_sts", "model.ddvug_willibald_samen.productcategory_h"], "model.ddvug_willibald_samen.stg_webshop_kunde": ["model.ddvug_willibald_samen.associationpartner_h", "model.ddvug_willibald_samen.customer_associationpartner_l", "model.ddvug_willibald_samen.customer_associationpartner_ws_sts", "model.ddvug_willibald_samen.customer_h", "model.ddvug_willibald_samen.customer_ws_s", "model.ddvug_willibald_samen.customer_ws_sts"], "model.ddvug_willibald_samen.stg_webshop_ref_produkt_typ": ["model.ddvug_willibald_samen.product_type_ws_rs"], "model.ddvug_willibald_samen.stg_webshop_lieferung": ["model.ddvug_willibald_samen.delivery_nhl", "model.ddvug_willibald_samen.deliveryadress_h", "model.ddvug_willibald_samen.deliveryservice_h", "model.ddvug_willibald_samen.order_h", "model.ddvug_willibald_samen.order_position_l", "model.ddvug_willibald_samen.position_h"], "model.ddvug_willibald_samen.stg_webshop_produktkategorie": ["model.ddvug_willibald_samen.productcategory_h", "model.ddvug_willibald_samen.productcategory_hierarchy_l", "model.ddvug_willibald_samen.productcategory_hierarchy_ws_sts", "model.ddvug_willibald_samen.productcategory_ws_s"], "model.ddvug_willibald_samen.stg_webshop_lieferdienst": ["model.ddvug_willibald_samen.deliveryservice_h", "model.ddvug_willibald_samen.deliveryservice_ws_s", "model.ddvug_willibald_samen.deliveryservice_ws_sts"], "model.ddvug_willibald_samen.control_snap_v0": ["model.ddvug_willibald_samen.control_snap_v1"], "model.ddvug_willibald_samen.control_snap_v1": ["model.ddvug_willibald_samen.associationpartner_customer_snp", "model.ddvug_willibald_samen.associationpartner_snp", "model.ddvug_willibald_samen.category_deliveryadherence_r_snp", "model.ddvug_willibald_samen.category_deliveryadherence_snp", "model.ddvug_willibald_samen.customer_associationpartner_snp", "model.ddvug_willibald_samen.customer_snp", "model.ddvug_willibald_samen.deliveryadress_customer_snp", "model.ddvug_willibald_samen.deliveryadress_snp", "model.ddvug_willibald_samen.deliveryservice_snp", "model.ddvug_willibald_samen.order_associationpartner_snp", "model.ddvug_willibald_samen.order_customer_snp", "model.ddvug_willibald_samen.order_position_snp", "model.ddvug_willibald_samen.order_snp", "model.ddvug_willibald_samen.position_product_snp", "model.ddvug_willibald_samen.position_snp", "model.ddvug_willibald_samen.product_productcategory_snp", "model.ddvug_willibald_samen.product_snp", "model.ddvug_willibald_samen.productcategory_hierarchy_snp", "model.ddvug_willibald_samen.productcategory_snp", "model.ddvug_willibald_samen.relevant_date"], "model.ddvug_willibald_samen.stg_roadshow_bestellung": ["model.ddvug_willibald_samen.associationpartner_h", "model.ddvug_willibald_samen.customer_h", "model.ddvug_willibald_samen.order_associationpartner_l", "model.ddvug_willibald_samen.order_associationpartner_rs_sts", "model.ddvug_willibald_samen.order_customer_l", "model.ddvug_willibald_samen.order_customer_rs_rts", "model.ddvug_willibald_samen.order_customer_rs_sts", "model.ddvug_willibald_samen.order_h", "model.ddvug_willibald_samen.order_position_l", "model.ddvug_willibald_samen.order_position_rs_sts", "model.ddvug_willibald_samen.order_rs_rts", "model.ddvug_willibald_samen.order_rs_sts", "model.ddvug_willibald_samen.position_h", "model.ddvug_willibald_samen.position_product_l", "model.ddvug_willibald_samen.position_product_rs_sts", "model.ddvug_willibald_samen.position_rs_s", "model.ddvug_willibald_samen.position_rs_sts", "model.ddvug_willibald_samen.product_h"], "model.ddvug_willibald_samen.stg_webshop_bestellung": ["model.ddvug_willibald_samen.customer_h", "model.ddvug_willibald_samen.order_customer_l", "model.ddvug_willibald_samen.order_customer_ws_sts", "model.ddvug_willibald_samen.order_h", "model.ddvug_willibald_samen.order_ws_s", "model.ddvug_willibald_samen.order_ws_sts"], "model.ddvug_willibald_samen.stg_webshop_vereinspartner": ["model.ddvug_willibald_samen.associationpartner_customer_l", "model.ddvug_willibald_samen.associationpartner_customer_ws_sts", "model.ddvug_willibald_samen.associationpartner_h", "model.ddvug_willibald_samen.associationpartner_ws_s", "model.ddvug_willibald_samen.associationpartner_ws_sts", "model.ddvug_willibald_samen.customer_h"], "model.ddvug_willibald_samen.load_misc_kategorie_termintreue": ["model.ddvug_willibald_samen.load_sdts", "model.ddvug_willibald_samen.meta_load", "model.ddvug_willibald_samen.pre_stg_error_misc", "model.ddvug_willibald_samen.stg_misc_kategorie_termintreue"], "model.ddvug_willibald_samen.load_webshop_position": ["model.ddvug_willibald_samen.load_sdts", "model.ddvug_willibald_samen.meta_load", "model.ddvug_willibald_samen.pre_stg_error_webshop", "model.ddvug_willibald_samen.stg_webshop_position", "test.ddvug_willibald_samen.yedi_webshop_position"], "model.ddvug_willibald_samen.load_sdts": ["model.ddvug_willibald_samen.control_snap_v1"], "model.ddvug_willibald_samen.load_roadshow_bestellung": ["model.ddvug_willibald_samen.load_sdts", "model.ddvug_willibald_samen.meta_load", "model.ddvug_willibald_samen.pre_stg_error_roadshow", "model.ddvug_willibald_samen.stg_roadshow_bestellung"], "model.ddvug_willibald_samen.load_webshop_produktkategorie": ["model.ddvug_willibald_samen.load_sdts", "model.ddvug_willibald_samen.meta_load", "model.ddvug_willibald_samen.pre_stg_error_webshop", "model.ddvug_willibald_samen.stg_webshop_produktkategorie"], "model.ddvug_willibald_samen.load_webshop_produkt": ["model.ddvug_willibald_samen.load_sdts", "model.ddvug_willibald_samen.meta_load", "model.ddvug_willibald_samen.pre_stg_error_webshop", "model.ddvug_willibald_samen.stg_webshop_produkt", "test.ddvug_willibald_samen.yedi_webshop_produkt"], "model.ddvug_willibald_samen.load_webshop_lieferadresse": ["model.ddvug_willibald_samen.load_sdts", "model.ddvug_willibald_samen.meta_load", "model.ddvug_willibald_samen.pre_stg_error_webshop", "model.ddvug_willibald_samen.stg_webshop_lieferadresse", "test.ddvug_willibald_samen.yedi_webshop_lieferadresse"], "model.ddvug_willibald_samen.load_webshop_vereinspartner": ["model.ddvug_willibald_samen.load_sdts", "model.ddvug_willibald_samen.meta_load", "model.ddvug_willibald_samen.pre_stg_error_webshop", "model.ddvug_willibald_samen.stg_webshop_vereinspartner", "test.ddvug_willibald_samen.yedi_webshop_vereinspartner"], "model.ddvug_willibald_samen.load_webshop_bestellung": ["model.ddvug_willibald_samen.load_sdts", "model.ddvug_willibald_samen.meta_load", "model.ddvug_willibald_samen.pre_stg_error_webshop", "model.ddvug_willibald_samen.stg_webshop_bestellung", "test.ddvug_willibald_samen.yedi_webshop_bestellung"], "model.ddvug_willibald_samen.load_webshop_lieferung": ["model.ddvug_willibald_samen.load_sdts", "model.ddvug_willibald_samen.meta_load", "model.ddvug_willibald_samen.pre_stg_error_webshop", "model.ddvug_willibald_samen.stg_webshop_lieferung", "test.ddvug_willibald_samen.yedi_webshop_lieferung"], "model.ddvug_willibald_samen.load_webshop_kunde": ["model.ddvug_willibald_samen.load_sdts", "model.ddvug_willibald_samen.meta_load", "model.ddvug_willibald_samen.pre_stg_error_webshop", "model.ddvug_willibald_samen.stg_webshop_kunde", "test.ddvug_willibald_samen.yedi_webshop_kunde"], "model.ddvug_willibald_samen.load_webshop_lieferdienst": ["model.ddvug_willibald_samen.load_sdts", "model.ddvug_willibald_samen.meta_load", "model.ddvug_willibald_samen.pre_stg_error_webshop", "model.ddvug_willibald_samen.stg_webshop_lieferdienst", "test.ddvug_willibald_samen.yedi_webshop_lieferdienst"], "model.ddvug_willibald_samen.load_webshop_wohnort": ["model.ddvug_willibald_samen.load_sdts", "model.ddvug_willibald_samen.meta_load", "model.ddvug_willibald_samen.pre_stg_error_webshop", "model.ddvug_willibald_samen.stg_webshop_wohnort", "test.ddvug_willibald_samen.yedi_webshop_wohnort"], "model.ddvug_willibald_samen.load_webshop_ref_produkt_typ": ["model.ddvug_willibald_samen.load_sdts", "model.ddvug_willibald_samen.meta_load", "model.ddvug_willibald_samen.pre_stg_error_webshop", "model.ddvug_willibald_samen.stg_webshop_ref_produkt_typ"], "model.ddvug_willibald_samen.order_position_ws_sts": ["model.ddvug_willibald_samen.order_position_snp", "model.ddvug_willibald_samen.order_position_sns", "test.ddvug_willibald_samen.yedi_webshop_position"], "model.ddvug_willibald_samen.order_associationpartner_rs_es": ["model.ddvug_willibald_samen.order_associationpartner_snp", "model.ddvug_willibald_samen.order_associationpartner_sns"], "model.ddvug_willibald_samen.order_customer_rs_sts": ["model.ddvug_willibald_samen.order_customer_rs_es", "model.ddvug_willibald_samen.order_customer_snp"], "model.ddvug_willibald_samen.order_ws_s": ["model.ddvug_willibald_samen.order_snp", "model.ddvug_willibald_samen.order_sns", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_ws_s_hk_order_h__ldts.7e05da4ab2", "test.ddvug_willibald_samen.not_null_order_ws_s_hk_order_h.d51941259d", "test.ddvug_willibald_samen.relationships_order_ws_s_hk_order_h__hk_order_h__ref_order_h_.db500d92dc", "test.ddvug_willibald_samen.yedi_webshop_bestellung"], "model.ddvug_willibald_samen.order_customer_l": ["model.ddvug_willibald_samen.order_customer_rs_es", "model.ddvug_willibald_samen.order_customer_snp", "model.ddvug_willibald_samen.order_customer_sns", "model.ddvug_willibald_samen.order_customer_ws_es", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_customer_l_hk_order_h__hk_customer_h.130b9b2172", "test.ddvug_willibald_samen.not_null_order_customer_l_hk_customer_h.1517b5d93d", "test.ddvug_willibald_samen.relationships_order_customer_l_hk_customer_h__hk_customer_h__ref_customer_h_.3dee3b1fd8", "test.ddvug_willibald_samen.yedi_webshop_bestellung"], "model.ddvug_willibald_samen.order_ws_sts": ["model.ddvug_willibald_samen.order_snp", "model.ddvug_willibald_samen.order_sns", "test.ddvug_willibald_samen.yedi_webshop_bestellung"], "model.ddvug_willibald_samen.order_customer_rs_es": ["model.ddvug_willibald_samen.order_customer_snp", "model.ddvug_willibald_samen.order_customer_sns"], "model.ddvug_willibald_samen.order_customer_ws_es": ["model.ddvug_willibald_samen.order_customer_snp", "model.ddvug_willibald_samen.order_customer_sns"], "model.ddvug_willibald_samen.order_rs_sts": ["model.ddvug_willibald_samen.order_snp", "model.ddvug_willibald_samen.order_sns"], "model.ddvug_willibald_samen.order_h": ["model.ddvug_willibald_samen.order_snp", "model.ddvug_willibald_samen.order_sns", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_h_hk_order_h.9033e9e2ae", "test.ddvug_willibald_samen.not_null_order_h_hk_order_h.e964883e7d", "test.ddvug_willibald_samen.relationships_order_position_l_hk_order_h__hk_order_h__ref_order_h_.a424ec45ad", "test.ddvug_willibald_samen.relationships_order_ws_s_hk_order_h__hk_order_h__ref_order_h_.db500d92dc", "test.ddvug_willibald_samen.yedi_webshop_bestellung", "test.ddvug_willibald_samen.yedi_webshop_lieferung", "test.ddvug_willibald_samen.yedi_webshop_position"], "model.ddvug_willibald_samen.order_position_rs_sts": ["model.ddvug_willibald_samen.order_position_snp", "model.ddvug_willibald_samen.order_position_sns"], "model.ddvug_willibald_samen.order_associationpartner_rs_sts": ["model.ddvug_willibald_samen.order_associationpartner_rs_es", "model.ddvug_willibald_samen.order_associationpartner_snp"], "model.ddvug_willibald_samen.order_position_l": ["model.ddvug_willibald_samen.order_position_snp", "model.ddvug_willibald_samen.order_position_sns", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_position_l_hk_position_h__hk_order_h.aa871febee", "test.ddvug_willibald_samen.not_null_order_position_l_hk_order_h.de5876fa32", "test.ddvug_willibald_samen.relationships_order_position_l_hk_order_h__hk_order_h__ref_order_h_.a424ec45ad", "test.ddvug_willibald_samen.yedi_webshop_position"], "model.ddvug_willibald_samen.order_customer_ws_sts": ["model.ddvug_willibald_samen.order_customer_snp", "model.ddvug_willibald_samen.order_customer_ws_es", "test.ddvug_willibald_samen.yedi_webshop_bestellung"], "model.ddvug_willibald_samen.order_associationpartner_l": ["model.ddvug_willibald_samen.order_associationpartner_rs_es", "model.ddvug_willibald_samen.order_associationpartner_snp", "model.ddvug_willibald_samen.order_associationpartner_sns", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_associationpartner_l_hk_order_h__hk_associationpartner_h.3dd7df03f0", "test.ddvug_willibald_samen.not_null_order_associationpartner_l_hk_associationpartner_h.0f573fa13c", "test.ddvug_willibald_samen.relationships_order_associationpartner_l_hk_associationpartner_h__hk_associationpartner_h__ref_associationpartner_h_.0e69c0bcba"], "model.ddvug_willibald_samen.position_product_ws_es": ["model.ddvug_willibald_samen.position_product_snp", "model.ddvug_willibald_samen.position_product_sns"], "model.ddvug_willibald_samen.position_h": ["model.ddvug_willibald_samen.position_snp", "model.ddvug_willibald_samen.position_sns", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_h_hk_position_h.228a6fbcb6", "test.ddvug_willibald_samen.not_null_position_h_hk_position_h.ec4aed46b2", "test.ddvug_willibald_samen.relationships_position_product_l_hk_position_h__hk_position_h__ref_position_h_.d95245f4bf", "test.ddvug_willibald_samen.relationships_position_rs_s_hk_position_h__hk_position_h__ref_position_h_.f54d7665c8", "test.ddvug_willibald_samen.relationships_position_ws_s_hk_position_h__hk_position_h__ref_position_h_.2082aaaf41", "test.ddvug_willibald_samen.yedi_webshop_lieferung", "test.ddvug_willibald_samen.yedi_webshop_position"], "model.ddvug_willibald_samen.position_ws_s": ["model.ddvug_willibald_samen.position_snp", "model.ddvug_willibald_samen.position_sns", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_ws_s_hk_position_h__ldts.dd123b21cb", "test.ddvug_willibald_samen.not_null_position_ws_s_hk_position_h.178468e426", "test.ddvug_willibald_samen.relationships_position_ws_s_hk_position_h__hk_position_h__ref_position_h_.2082aaaf41", "test.ddvug_willibald_samen.yedi_webshop_lieferung", "test.ddvug_willibald_samen.yedi_webshop_position"], "model.ddvug_willibald_samen.position_ws_sts": ["model.ddvug_willibald_samen.position_snp", "model.ddvug_willibald_samen.position_sns", "test.ddvug_willibald_samen.yedi_webshop_position"], "model.ddvug_willibald_samen.position_product_ws_sts": ["model.ddvug_willibald_samen.position_product_snp", "model.ddvug_willibald_samen.position_product_ws_es", "test.ddvug_willibald_samen.yedi_webshop_position"], "model.ddvug_willibald_samen.position_rs_sts": ["model.ddvug_willibald_samen.position_snp", "model.ddvug_willibald_samen.position_sns"], "model.ddvug_willibald_samen.position_product_rs_sts": ["model.ddvug_willibald_samen.position_product_rs_es", "model.ddvug_willibald_samen.position_product_snp"], "model.ddvug_willibald_samen.position_product_l": ["model.ddvug_willibald_samen.position_product_rs_es", "model.ddvug_willibald_samen.position_product_snp", "model.ddvug_willibald_samen.position_product_sns", "model.ddvug_willibald_samen.position_product_ws_es", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_product_l_hk_product_h__hk_position_h.fa6a818ea6", "test.ddvug_willibald_samen.not_null_position_product_l_hk_position_h.5df8285269", "test.ddvug_willibald_samen.relationships_position_product_l_hk_position_h__hk_position_h__ref_position_h_.d95245f4bf", "test.ddvug_willibald_samen.yedi_webshop_position"], "model.ddvug_willibald_samen.position_product_rs_es": ["model.ddvug_willibald_samen.position_product_snp", "model.ddvug_willibald_samen.position_product_sns"], "model.ddvug_willibald_samen.position_rs_s": ["model.ddvug_willibald_samen.position_snp", "model.ddvug_willibald_samen.position_sns", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_rs_s_hk_position_h__ldts.6651764ee7", "test.ddvug_willibald_samen.not_null_position_rs_s_hk_position_h.2923971ee3", "test.ddvug_willibald_samen.relationships_position_rs_s_hk_position_h__hk_position_h__ref_position_h_.f54d7665c8"], "model.ddvug_willibald_samen.deliveryservice_h": ["model.ddvug_willibald_samen.deliveryservice_snp", "model.ddvug_willibald_samen.deliveryservice_sns", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_deliveryservice_h_hk_deliveryservice_h.ff12c0142c", "test.ddvug_willibald_samen.not_null_deliveryservice_h_hk_deliveryservice_h.075e1a1c28", "test.ddvug_willibald_samen.relationships_deliveryservice_ws_s_hk_deliveryservice_h__hk_deliveryservice_h__ref_deliveryservice_h_.67c5d7dcc0", "test.ddvug_willibald_samen.yedi_webshop_lieferdienst", "test.ddvug_willibald_samen.yedi_webshop_lieferung"], "model.ddvug_willibald_samen.deliveryservice_ws_s": ["model.ddvug_willibald_samen.deliveryservice_snp", "model.ddvug_willibald_samen.deliveryservice_sns", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_deliveryservice_ws_s_hk_deliveryservice_h__ldts.098dee5d26", "test.ddvug_willibald_samen.not_null_deliveryservice_ws_s_hk_deliveryservice_h.df945b68b6", "test.ddvug_willibald_samen.relationships_deliveryservice_ws_s_hk_deliveryservice_h__hk_deliveryservice_h__ref_deliveryservice_h_.67c5d7dcc0", "test.ddvug_willibald_samen.yedi_webshop_lieferdienst"], "model.ddvug_willibald_samen.deliveryservice_ws_sts": ["model.ddvug_willibald_samen.deliveryservice_snp", "model.ddvug_willibald_samen.deliveryservice_sns", "test.ddvug_willibald_samen.yedi_webshop_lieferdienst"], "model.ddvug_willibald_samen.productcategory_hierarchy_l": ["model.ddvug_willibald_samen.productcategory_hierarchy_snp", "model.ddvug_willibald_samen.productcategory_hierarchy_sns", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_hierarchy_l_hk_productcategory_parent_h__hk_productcategory_h.c3c6bb03a9", "test.ddvug_willibald_samen.not_null_productcategory_hierarchy_l_hk_productcategory_h.26323569e0", "test.ddvug_willibald_samen.relationships_productcategory_hierarchy_l_hk_productcategory_h__hk_productcategory_h__ref_productcategory_h_.f403cd2cc0"], "model.ddvug_willibald_samen.productcategory_h": ["model.ddvug_willibald_samen.productcategory_snp", "model.ddvug_willibald_samen.productcategory_sns", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_h_hk_productcategory_h.67b2921ad0", "test.ddvug_willibald_samen.not_null_productcategory_h_hk_productcategory_h.ccee8ead98", "test.ddvug_willibald_samen.relationships_productcategory_hierarchy_l_hk_productcategory_h__hk_productcategory_h__ref_productcategory_h_.f403cd2cc0", "test.ddvug_willibald_samen.relationships_productcategory_ws_s_hk_productcategory_h__hk_productcategory_h__ref_productcategory_h_.a68485f2fb", "test.ddvug_willibald_samen.yedi_webshop_produkt"], "model.ddvug_willibald_samen.productcategory_hierarchy_ws_sts": ["model.ddvug_willibald_samen.productcategory_hierarchy_snp", "model.ddvug_willibald_samen.productcategory_hierarchy_sns"], "model.ddvug_willibald_samen.productcategory_ws_s": ["model.ddvug_willibald_samen.productcategory_snp", "model.ddvug_willibald_samen.productcategory_sns", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_ws_s_hk_productcategory_h__ldts.ce12857ce0", "test.ddvug_willibald_samen.not_null_productcategory_ws_s_hk_productcategory_h.68670e8df5", "test.ddvug_willibald_samen.relationships_productcategory_ws_s_hk_productcategory_h__hk_productcategory_h__ref_productcategory_h_.a68485f2fb"], "model.ddvug_willibald_samen.product_ws_s": ["model.ddvug_willibald_samen.product_snp", "model.ddvug_willibald_samen.product_sns", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_product_ws_s_hk_product_h__ldts.611020bb93", "test.ddvug_willibald_samen.not_null_product_ws_s_hk_product_h.4360d19cf9", "test.ddvug_willibald_samen.relationships_product_ws_s_hk_product_h__hk_product_h__ref_product_h_.b4eadf9dea", "test.ddvug_willibald_samen.yedi_webshop_produkt"], "model.ddvug_willibald_samen.product_h": ["model.ddvug_willibald_samen.product_snp", "model.ddvug_willibald_samen.product_sns", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_product_h_hk_product_h.9352b9fae5", "test.ddvug_willibald_samen.not_null_product_h_hk_product_h.cff0a43270", "test.ddvug_willibald_samen.relationships_product_productcategory_l_hk_product_h__hk_product_h__ref_product_h_.926290dd2a", "test.ddvug_willibald_samen.relationships_product_ws_s_hk_product_h__hk_product_h__ref_product_h_.b4eadf9dea", "test.ddvug_willibald_samen.yedi_webshop_position", "test.ddvug_willibald_samen.yedi_webshop_produkt"], "model.ddvug_willibald_samen.product_productcategory_l": ["model.ddvug_willibald_samen.product_productcategory_snp", "model.ddvug_willibald_samen.product_productcategory_sns", "model.ddvug_willibald_samen.product_productcategory_ws_es", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_product_productcategory_l_hk_productcategory_h__hk_product_h.f467bff89e", "test.ddvug_willibald_samen.not_null_product_productcategory_l_hk_product_h.214089443e", "test.ddvug_willibald_samen.relationships_product_productcategory_l_hk_product_h__hk_product_h__ref_product_h_.926290dd2a", "test.ddvug_willibald_samen.yedi_webshop_produkt"], "model.ddvug_willibald_samen.product_productcategory_ws_es": ["model.ddvug_willibald_samen.product_productcategory_snp", "model.ddvug_willibald_samen.product_productcategory_sns"], "model.ddvug_willibald_samen.product_productcategory_ws_sts": ["model.ddvug_willibald_samen.product_productcategory_snp", "model.ddvug_willibald_samen.product_productcategory_ws_es", "test.ddvug_willibald_samen.yedi_webshop_produkt"], "model.ddvug_willibald_samen.product_ws_sts": ["model.ddvug_willibald_samen.product_snp", "model.ddvug_willibald_samen.product_sns", "test.ddvug_willibald_samen.yedi_webshop_produkt"], "model.ddvug_willibald_samen.order_customer_rs_rts": [], "model.ddvug_willibald_samen.order_rs_rts": [], "model.ddvug_willibald_samen.category_deliveryadherence_misc_sts": ["model.ddvug_willibald_samen.category_deliveryadherence_snp", "model.ddvug_willibald_samen.category_deliveryadherence_sns"], "model.ddvug_willibald_samen.product_type_ws_rs": ["model.ddvug_willibald_samen.product_type_sns"], "model.ddvug_willibald_samen.delivery_nhl": ["model.ddvug_willibald_samen.delivery_sns", "test.ddvug_willibald_samen.yedi_webshop_lieferung"], "model.ddvug_willibald_samen.deliveryadress_customer_l": ["model.ddvug_willibald_samen.deliveryadress_customer_snp", "model.ddvug_willibald_samen.deliveryadress_customer_sns", "model.ddvug_willibald_samen.deliveryadress_customer_ws_es", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_deliveryadress_customer_l_hk_deliveryadress_h__hk_customer_h.d6a3ab7e19", "test.ddvug_willibald_samen.not_null_deliveryadress_customer_l_hk_customer_h.97624d0710", "test.ddvug_willibald_samen.relationships_deliveryadress_customer_l_hk_customer_h__hk_customer_h__ref_customer_h_.b757e1bf63", "test.ddvug_willibald_samen.yedi_webshop_lieferadresse"], "model.ddvug_willibald_samen.deliveryadress_h": ["model.ddvug_willibald_samen.deliveryadress_snp", "model.ddvug_willibald_samen.deliveryadress_sns", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_deliveryadress_h_hk_deliveryadress_h.e9471c557c", "test.ddvug_willibald_samen.not_null_deliveryadress_h_hk_deliveryadress_h.d769cb37cd", "test.ddvug_willibald_samen.relationships_deliveryadress_ws_s_hk_deliveryadress_h__hk_deliveryadress_h__ref_deliveryadress_h_.d605b4d012", "test.ddvug_willibald_samen.yedi_webshop_lieferadresse", "test.ddvug_willibald_samen.yedi_webshop_lieferung"], "model.ddvug_willibald_samen.deliveryadress_customer_ws_es": ["model.ddvug_willibald_samen.deliveryadress_customer_snp", "model.ddvug_willibald_samen.deliveryadress_customer_sns"], "model.ddvug_willibald_samen.deliveryadress_ws_s": ["model.ddvug_willibald_samen.deliveryadress_snp", "model.ddvug_willibald_samen.deliveryadress_sns", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_deliveryadress_ws_s_hk_deliveryadress_h__ldts.12841db368", "test.ddvug_willibald_samen.not_null_deliveryadress_ws_s_hk_deliveryadress_h.2950dd7fef", "test.ddvug_willibald_samen.relationships_deliveryadress_ws_s_hk_deliveryadress_h__hk_deliveryadress_h__ref_deliveryadress_h_.d605b4d012", "test.ddvug_willibald_samen.yedi_webshop_lieferadresse"], "model.ddvug_willibald_samen.deliveryadress_customer_ws_sts": ["model.ddvug_willibald_samen.deliveryadress_customer_snp", "model.ddvug_willibald_samen.deliveryadress_customer_ws_es", "test.ddvug_willibald_samen.yedi_webshop_lieferadresse"], "model.ddvug_willibald_samen.category_deliveryadherence_misc_rs": ["model.ddvug_willibald_samen.category_deliveryadherence_r_snp", "model.ddvug_willibald_samen.category_deliveryadherence_snp", "model.ddvug_willibald_samen.category_deliveryadherence_sns", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_category_deliveryadherence_misc_rs_category_deliveryadherence_nk__ldts.9886804350", "test.ddvug_willibald_samen.not_null_category_deliveryadherence_misc_rs_category_deliveryadherence_nk.c0be686a9b", "test.ddvug_willibald_samen.relationships_category_deliveryadherence_misc_rs_category_deliveryadherence_nk__category_deliveryadherence_nk__ref_category_deliveryadherence_r_.4baedd520e"], "model.ddvug_willibald_samen.category_deliveryadherence_r": ["model.ddvug_willibald_samen.category_deliveryadherence_r_snp", "model.ddvug_willibald_samen.category_deliveryadherence_snp", "model.ddvug_willibald_samen.category_deliveryadherence_sns", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_category_deliveryadherence_r_category_deliveryadherence_nk.c3423938c7", "test.ddvug_willibald_samen.not_null_category_deliveryadherence_r_category_deliveryadherence_nk.0d56fad547", "test.ddvug_willibald_samen.relationships_category_deliveryadherence_misc_rs_category_deliveryadherence_nk__category_deliveryadherence_nk__ref_category_deliveryadherence_r_.4baedd520e"], "model.ddvug_willibald_samen.customer_ws_la_ms": ["model.ddvug_willibald_samen.customer_snp", "test.ddvug_willibald_samen.yedi_webshop_wohnort"], "model.ddvug_willibald_samen.customer_associationpartner_ws_es": ["model.ddvug_willibald_samen.customer_associationpartner_snp", "model.ddvug_willibald_samen.customer_associationpartner_sns"], "model.ddvug_willibald_samen.customer_associationpartner_l": ["model.ddvug_willibald_samen.customer_associationpartner_snp", "model.ddvug_willibald_samen.customer_associationpartner_sns", "model.ddvug_willibald_samen.customer_associationpartner_ws_es", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_customer_associationpartner_l_hk_customer_h__hk_associationpartner_h.b6732ac5bd", "test.ddvug_willibald_samen.not_null_customer_associationpartner_l_hk_associationpartner_h.18fdca24da", "test.ddvug_willibald_samen.relationships_customer_associationpartner_l_hk_associationpartner_h__hk_associationpartner_h__ref_associationpartner_h_.7d0b4e5df6", "test.ddvug_willibald_samen.yedi_webshop_kunde"], "model.ddvug_willibald_samen.customer_ws_sts": ["model.ddvug_willibald_samen.customer_snp", "model.ddvug_willibald_samen.customer_sns", "test.ddvug_willibald_samen.yedi_webshop_kunde"], "model.ddvug_willibald_samen.customer_h": ["model.ddvug_willibald_samen.customer_snp", "model.ddvug_willibald_samen.customer_sns", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_customer_h_hk_customer_h.de39b48d51", "test.ddvug_willibald_samen.not_null_customer_h_hk_customer_h.bfea236786", "test.ddvug_willibald_samen.relationships_customer_ws_s_hk_customer_h__hk_customer_h__ref_customer_h_.69e768d7f3", "test.ddvug_willibald_samen.relationships_deliveryadress_customer_l_hk_customer_h__hk_customer_h__ref_customer_h_.b757e1bf63", "test.ddvug_willibald_samen.relationships_order_customer_l_hk_customer_h__hk_customer_h__ref_customer_h_.3dee3b1fd8", "test.ddvug_willibald_samen.yedi_webshop_bestellung", "test.ddvug_willibald_samen.yedi_webshop_kunde", "test.ddvug_willibald_samen.yedi_webshop_lieferadresse", "test.ddvug_willibald_samen.yedi_webshop_vereinspartner", "test.ddvug_willibald_samen.yedi_webshop_wohnort"], "model.ddvug_willibald_samen.customer_associationpartner_ws_sts": ["model.ddvug_willibald_samen.customer_associationpartner_snp", "model.ddvug_willibald_samen.customer_associationpartner_ws_es", "test.ddvug_willibald_samen.yedi_webshop_kunde"], "model.ddvug_willibald_samen.customer_ws_s": ["model.ddvug_willibald_samen.customer_snp", "model.ddvug_willibald_samen.customer_sns", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_customer_ws_s_hk_customer_h__ldts.6b4339c301", "test.ddvug_willibald_samen.not_null_customer_ws_s_hk_customer_h.da7e77833a", "test.ddvug_willibald_samen.relationships_customer_ws_s_hk_customer_h__hk_customer_h__ref_customer_h_.69e768d7f3", "test.ddvug_willibald_samen.yedi_webshop_kunde"], "model.ddvug_willibald_samen.associationpartner_h": ["model.ddvug_willibald_samen.associationpartner_snp", "model.ddvug_willibald_samen.associationpartner_sns", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_associationpartner_h_hk_associationpartner_h.4b515e4e9a", "test.ddvug_willibald_samen.not_null_associationpartner_h_hk_associationpartner_h.a5b0b42c47", "test.ddvug_willibald_samen.relationships_associationpartner_customer_l_hk_associationpartner_h__hk_associationpartner_h__ref_associationpartner_h_.2c36bb45e4", "test.ddvug_willibald_samen.relationships_associationpartner_ws_s_hk_associationpartner_h__hk_associationpartner_h__ref_associationpartner_h_.4ab56b58f4", "test.ddvug_willibald_samen.relationships_customer_associationpartner_l_hk_associationpartner_h__hk_associationpartner_h__ref_associationpartner_h_.7d0b4e5df6", "test.ddvug_willibald_samen.relationships_order_associationpartner_l_hk_associationpartner_h__hk_associationpartner_h__ref_associationpartner_h_.0e69c0bcba", "test.ddvug_willibald_samen.yedi_webshop_kunde", "test.ddvug_willibald_samen.yedi_webshop_vereinspartner"], "model.ddvug_willibald_samen.associationpartner_ws_s": ["model.ddvug_willibald_samen.associationpartner_snp", "model.ddvug_willibald_samen.associationpartner_sns", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_associationpartner_ws_s_hk_associationpartner_h__ldts.30637490cd", "test.ddvug_willibald_samen.not_null_associationpartner_ws_s_hk_associationpartner_h.0f2d6f252c", "test.ddvug_willibald_samen.relationships_associationpartner_ws_s_hk_associationpartner_h__hk_associationpartner_h__ref_associationpartner_h_.4ab56b58f4", "test.ddvug_willibald_samen.yedi_webshop_vereinspartner"], "model.ddvug_willibald_samen.associationpartner_customer_ws_sts": ["model.ddvug_willibald_samen.associationpartner_customer_snp", "model.ddvug_willibald_samen.associationpartner_customer_ws_es", "test.ddvug_willibald_samen.yedi_webshop_vereinspartner"], "model.ddvug_willibald_samen.associationpartner_customer_l": ["model.ddvug_willibald_samen.associationpartner_customer_snp", "model.ddvug_willibald_samen.associationpartner_customer_sns", "model.ddvug_willibald_samen.associationpartner_customer_ws_es", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_associationpartner_customer_l_hk_customer_h__hk_associationpartner_h.567dacd496", "test.ddvug_willibald_samen.not_null_associationpartner_customer_l_hk_associationpartner_h.d195acb39d", "test.ddvug_willibald_samen.relationships_associationpartner_customer_l_hk_associationpartner_h__hk_associationpartner_h__ref_associationpartner_h_.2c36bb45e4", "test.ddvug_willibald_samen.yedi_webshop_vereinspartner"], "model.ddvug_willibald_samen.associationpartner_customer_ws_es": ["model.ddvug_willibald_samen.associationpartner_customer_snp", "model.ddvug_willibald_samen.associationpartner_customer_sns"], "model.ddvug_willibald_samen.associationpartner_ws_sts": ["model.ddvug_willibald_samen.associationpartner_snp", "model.ddvug_willibald_samen.associationpartner_sns", "test.ddvug_willibald_samen.yedi_webshop_vereinspartner"], "model.ddvug_willibald_samen.customer_bs": ["model.ddvug_willibald_samen.dim_customer"], "model.ddvug_willibald_samen.date_bs": ["model.ddvug_willibald_samen.dim_delivery_date", "model.ddvug_willibald_samen.dim_reporting_date", "model.ddvug_willibald_samen.dim_requested_date", "model.ddvug_willibald_samen.dim_sales_date"], "model.ddvug_willibald_samen.productcategory_bs": ["model.ddvug_willibald_samen.dim_productcategory", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_bs_sdts__hk_productcategory_d.bccb273b4a", "test.ddvug_willibald_samen.not_null_productcategory_bs_hk_productcategory_d.b13ac261f8"], "model.ddvug_willibald_samen.order_customer_bb": ["model.ddvug_willibald_samen.sales_bb"], "model.ddvug_willibald_samen.sales_bb": ["model.ddvug_willibald_samen.fact_sales", "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_sales_bb_reporting_date__hk_order_h__hk_position_h.49f74dd7b6"], "model.ddvug_willibald_samen.category_deliveryadherence_bs": ["model.ddvug_willibald_samen.dim_category_deliveryadherence", "model.ddvug_willibald_samen.sales_bb"], "model.ddvug_willibald_samen.dim_reporting_date": ["exposure.ddvug_willibald_samen.Willibald_Controlling"], "model.ddvug_willibald_samen.dim_product": ["exposure.ddvug_willibald_samen.Willibald_Controlling"], "model.ddvug_willibald_samen.dim_delivery_date": ["exposure.ddvug_willibald_samen.Willibald_Controlling"], "model.ddvug_willibald_samen.fact_sales": ["exposure.ddvug_willibald_samen.Willibald_Controlling", "test.ddvug_willibald_samen.fact_sales_compare"], "model.ddvug_willibald_samen.dim_productcategory": ["exposure.ddvug_willibald_samen.Willibald_Controlling"], "model.ddvug_willibald_samen.dim_customer": ["exposure.ddvug_willibald_samen.Willibald_Controlling"], "model.ddvug_willibald_samen.fact_error": [], "model.ddvug_willibald_samen.dim_sales_date": [], "model.ddvug_willibald_samen.dim_category_deliveryadherence": ["exposure.ddvug_willibald_samen.Willibald_Controlling"], "model.ddvug_willibald_samen.dim_requested_date": ["exposure.ddvug_willibald_samen.Willibald_Controlling"], "model.ddvug_willibald_samen.dim_associationpartner": ["exposure.ddvug_willibald_samen.Willibald_Controlling"], "model.ddvug_willibald_samen.dim_product_type": ["exposure.ddvug_willibald_samen.Willibald_Controlling"], "test.ddvug_willibald_samen.yedi_webshop_produkt": [], "test.ddvug_willibald_samen.yedi_webshop_position": [], "test.ddvug_willibald_samen.yedi_webshop_vereinspartner": [], "test.ddvug_willibald_samen.yedi_webshop_lieferdienst": [], "test.ddvug_willibald_samen.yedi_webshop_bestellung": [], "test.ddvug_willibald_samen.yedi_webshop_kunde": [], "test.ddvug_willibald_samen.yedi_webshop_wohnort": [], "test.ddvug_willibald_samen.yedi_webshop_lieferadresse": [], "test.ddvug_willibald_samen.yedi_webshop_lieferung": [], "test.ddvug_willibald_samen.singular_test_category_deliveryadherence": [], "test.ddvug_willibald_samen.fact_sales_compare": [], "operation.ddvug_willibald_samen.ddvug_willibald_samen-on-run-start-0": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_position_sns_hk_order_h__hk_position_h__sdts.a973ee998f": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_position_snp_hk_order_position_l__sdts.946abbd85d": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_sns_hk_order_h__sdts.346d963092": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_customer_sns_hk_order_h__hk_customer_h__sdts.a6ed0eb6ee": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_customer_snp_hk_order_customer_l__sdts.da0cbcd307": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_associationpartner_sns_hk_order_h__hk_associationpartner_h__sdts.69c4df1754": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_associationpartner_snp_hk_order_associationpartner_l__sdts.c94c22d391": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_product_sns_hk_position_h__hk_product_h__sdts.680a765177": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_product_snp_hk_position_product_l__sdts.ed7b36135d": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_sns_hk_position_h__sdts.66bc7528fa": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_snp_hk_position_h__sdts.347dc11ccb": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_product_sns_hk_product_h__sdts.8e2ea33ac6": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_product_snp_hk_product_h__sdts.68256a73c1": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_product_productcategory_sns_hk_productcategory_h__hk_product_h__sdts.baeb025ab0": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_product_productcategory_snp_hk_product_productcategory_l__sdts.ae6003500d": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_category_deliveryadherence_sns_category_deliveryadherence_nk__sdts.604efb30c8": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_customer_associationpartner_sns_hk_customer_h__hk_associationpartner_h__sdts.31f1d2f41b": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_customer_associationpartner_snp_hk_customer_associationpartner_l__sdts.a460cf2600": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_customer_sns_hk_customer_h__sdts.6b605109f9": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_customer_snp_hk_customer_h__sdts.2605db547c": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_associationpartner_sns_hk_associationpartner_h__sdts.e6512ac6ac": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_associationpartner_snp_hk_associationpartner_h__sdts.0054471477": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_associationpartner_customer_sns_hk_associationpartner_h__hk_customer_h__sdts.3ea12109b7": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_associationpartner_customer_snp_hk_associationpartner_customer_l__sdts.ac6b986952": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_hierarchy_sns_hk_productcategory_h__hk_productcategory_parent_h__sdts.804dbc805f": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_hierarchy_snp_hk_productcategory_hierarchy_l__sdts.e55dbefe34": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_sns_hk_productcategory_h__sdts.5dec387e5c": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_snp_hk_productcategory_h__sdts.84ee3c2375": [], "test.ddvug_willibald_samen.not_null_order_customer_l_hk_customer_h.1517b5d93d": [], "test.ddvug_willibald_samen.relationships_order_customer_l_hk_customer_h__hk_customer_h__ref_customer_h_.3dee3b1fd8": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_customer_l_hk_order_h__hk_customer_h.130b9b2172": [], "test.ddvug_willibald_samen.not_null_order_ws_s_hk_order_h.d51941259d": [], "test.ddvug_willibald_samen.relationships_order_ws_s_hk_order_h__hk_order_h__ref_order_h_.db500d92dc": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_ws_s_hk_order_h__ldts.7e05da4ab2": [], "test.ddvug_willibald_samen.not_null_order_associationpartner_l_hk_associationpartner_h.0f573fa13c": [], "test.ddvug_willibald_samen.relationships_order_associationpartner_l_hk_associationpartner_h__hk_associationpartner_h__ref_associationpartner_h_.0e69c0bcba": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_associationpartner_l_hk_order_h__hk_associationpartner_h.3dd7df03f0": [], "test.ddvug_willibald_samen.not_null_order_position_l_hk_order_h.de5876fa32": [], "test.ddvug_willibald_samen.relationships_order_position_l_hk_order_h__hk_order_h__ref_order_h_.a424ec45ad": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_position_l_hk_position_h__hk_order_h.aa871febee": [], "test.ddvug_willibald_samen.not_null_order_h_hk_order_h.e964883e7d": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_order_h_hk_order_h.9033e9e2ae": [], "test.ddvug_willibald_samen.not_null_position_rs_s_hk_position_h.2923971ee3": [], "test.ddvug_willibald_samen.relationships_position_rs_s_hk_position_h__hk_position_h__ref_position_h_.f54d7665c8": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_rs_s_hk_position_h__ldts.6651764ee7": [], "test.ddvug_willibald_samen.not_null_position_ws_s_hk_position_h.178468e426": [], "test.ddvug_willibald_samen.relationships_position_ws_s_hk_position_h__hk_position_h__ref_position_h_.2082aaaf41": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_ws_s_hk_position_h__ldts.dd123b21cb": [], "test.ddvug_willibald_samen.not_null_position_h_hk_position_h.ec4aed46b2": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_h_hk_position_h.228a6fbcb6": [], "test.ddvug_willibald_samen.not_null_position_product_l_hk_position_h.5df8285269": [], "test.ddvug_willibald_samen.relationships_position_product_l_hk_position_h__hk_position_h__ref_position_h_.d95245f4bf": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_position_product_l_hk_product_h__hk_position_h.fa6a818ea6": [], "test.ddvug_willibald_samen.not_null_deliveryservice_ws_s_hk_deliveryservice_h.df945b68b6": [], "test.ddvug_willibald_samen.relationships_deliveryservice_ws_s_hk_deliveryservice_h__hk_deliveryservice_h__ref_deliveryservice_h_.67c5d7dcc0": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_deliveryservice_ws_s_hk_deliveryservice_h__ldts.098dee5d26": [], "test.ddvug_willibald_samen.not_null_deliveryservice_h_hk_deliveryservice_h.075e1a1c28": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_deliveryservice_h_hk_deliveryservice_h.ff12c0142c": [], "test.ddvug_willibald_samen.not_null_productcategory_h_hk_productcategory_h.ccee8ead98": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_h_hk_productcategory_h.67b2921ad0": [], "test.ddvug_willibald_samen.not_null_productcategory_ws_s_hk_productcategory_h.68670e8df5": [], "test.ddvug_willibald_samen.relationships_productcategory_ws_s_hk_productcategory_h__hk_productcategory_h__ref_productcategory_h_.a68485f2fb": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_ws_s_hk_productcategory_h__ldts.ce12857ce0": [], "test.ddvug_willibald_samen.not_null_productcategory_hierarchy_l_hk_productcategory_h.26323569e0": [], "test.ddvug_willibald_samen.relationships_productcategory_hierarchy_l_hk_productcategory_h__hk_productcategory_h__ref_productcategory_h_.f403cd2cc0": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_hierarchy_l_hk_productcategory_parent_h__hk_productcategory_h.c3c6bb03a9": [], "test.ddvug_willibald_samen.not_null_product_productcategory_l_hk_product_h.214089443e": [], "test.ddvug_willibald_samen.relationships_product_productcategory_l_hk_product_h__hk_product_h__ref_product_h_.926290dd2a": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_product_productcategory_l_hk_productcategory_h__hk_product_h.f467bff89e": [], "test.ddvug_willibald_samen.not_null_product_ws_s_hk_product_h.4360d19cf9": [], "test.ddvug_willibald_samen.relationships_product_ws_s_hk_product_h__hk_product_h__ref_product_h_.b4eadf9dea": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_product_ws_s_hk_product_h__ldts.611020bb93": [], "test.ddvug_willibald_samen.not_null_product_h_hk_product_h.cff0a43270": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_product_h_hk_product_h.9352b9fae5": [], "test.ddvug_willibald_samen.not_null_deliveryadress_h_hk_deliveryadress_h.d769cb37cd": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_deliveryadress_h_hk_deliveryadress_h.e9471c557c": [], "test.ddvug_willibald_samen.not_null_deliveryadress_customer_l_hk_customer_h.97624d0710": [], "test.ddvug_willibald_samen.relationships_deliveryadress_customer_l_hk_customer_h__hk_customer_h__ref_customer_h_.b757e1bf63": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_deliveryadress_customer_l_hk_deliveryadress_h__hk_customer_h.d6a3ab7e19": [], "test.ddvug_willibald_samen.not_null_deliveryadress_ws_s_hk_deliveryadress_h.2950dd7fef": [], "test.ddvug_willibald_samen.relationships_deliveryadress_ws_s_hk_deliveryadress_h__hk_deliveryadress_h__ref_deliveryadress_h_.d605b4d012": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_deliveryadress_ws_s_hk_deliveryadress_h__ldts.12841db368": [], "test.ddvug_willibald_samen.not_null_category_deliveryadherence_misc_rs_category_deliveryadherence_nk.c0be686a9b": [], "test.ddvug_willibald_samen.relationships_category_deliveryadherence_misc_rs_category_deliveryadherence_nk__category_deliveryadherence_nk__ref_category_deliveryadherence_r_.4baedd520e": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_category_deliveryadherence_misc_rs_category_deliveryadherence_nk__ldts.9886804350": [], "test.ddvug_willibald_samen.not_null_category_deliveryadherence_r_category_deliveryadherence_nk.0d56fad547": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_category_deliveryadherence_r_category_deliveryadherence_nk.c3423938c7": [], "test.ddvug_willibald_samen.not_null_customer_h_hk_customer_h.bfea236786": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_customer_h_hk_customer_h.de39b48d51": [], "test.ddvug_willibald_samen.not_null_customer_associationpartner_l_hk_associationpartner_h.18fdca24da": [], "test.ddvug_willibald_samen.relationships_customer_associationpartner_l_hk_associationpartner_h__hk_associationpartner_h__ref_associationpartner_h_.7d0b4e5df6": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_customer_associationpartner_l_hk_customer_h__hk_associationpartner_h.b6732ac5bd": [], "test.ddvug_willibald_samen.not_null_customer_ws_s_hk_customer_h.da7e77833a": [], "test.ddvug_willibald_samen.relationships_customer_ws_s_hk_customer_h__hk_customer_h__ref_customer_h_.69e768d7f3": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_customer_ws_s_hk_customer_h__ldts.6b4339c301": [], "test.ddvug_willibald_samen.not_null_associationpartner_h_hk_associationpartner_h.a5b0b42c47": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_associationpartner_h_hk_associationpartner_h.4b515e4e9a": [], "test.ddvug_willibald_samen.not_null_associationpartner_customer_l_hk_associationpartner_h.d195acb39d": [], "test.ddvug_willibald_samen.relationships_associationpartner_customer_l_hk_associationpartner_h__hk_associationpartner_h__ref_associationpartner_h_.2c36bb45e4": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_associationpartner_customer_l_hk_customer_h__hk_associationpartner_h.567dacd496": [], "test.ddvug_willibald_samen.not_null_associationpartner_ws_s_hk_associationpartner_h.0f2d6f252c": [], "test.ddvug_willibald_samen.relationships_associationpartner_ws_s_hk_associationpartner_h__hk_associationpartner_h__ref_associationpartner_h_.4ab56b58f4": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_associationpartner_ws_s_hk_associationpartner_h__ldts.30637490cd": [], "test.ddvug_willibald_samen.not_null_productcategory_bs_hk_productcategory_d.b13ac261f8": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_productcategory_bs_sdts__hk_productcategory_d.bccb273b4a": [], "test.ddvug_willibald_samen.dbt_utils_unique_combination_of_columns_sales_bb_reporting_date__hk_order_h__hk_position_h.49f74dd7b6": [], "model.ddvug_willibald_samen.meta_load": ["test.ddvug_willibald_samen.yedi_webshop_bestellung", "test.ddvug_willibald_samen.yedi_webshop_kunde", "test.ddvug_willibald_samen.yedi_webshop_lieferadresse", "test.ddvug_willibald_samen.yedi_webshop_lieferdienst", "test.ddvug_willibald_samen.yedi_webshop_lieferung", "test.ddvug_willibald_samen.yedi_webshop_position", "test.ddvug_willibald_samen.yedi_webshop_produkt", "test.ddvug_willibald_samen.yedi_webshop_vereinspartner", "test.ddvug_willibald_samen.yedi_webshop_wohnort"], "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_KUNDE": ["model.ddvug_willibald_samen.load_webshop_kunde"], "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_LIEFERADRESSE": ["model.ddvug_willibald_samen.load_webshop_lieferadresse"], "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_LIEFERDIENST": ["model.ddvug_willibald_samen.load_webshop_lieferdienst"], "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_LIEFERUNG": ["model.ddvug_willibald_samen.load_webshop_lieferung"], "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_POSITION": ["model.ddvug_willibald_samen.load_webshop_position"], "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_PRODUKT": ["model.ddvug_willibald_samen.load_webshop_produkt"], "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_PRODUKTKATEGORIE": ["model.ddvug_willibald_samen.load_webshop_produktkategorie"], "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_VEREINSPARTNER": ["model.ddvug_willibald_samen.load_webshop_vereinspartner"], "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_WOHNORT": ["model.ddvug_willibald_samen.load_webshop_wohnort"], "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_REF_PRODUKT_TYP": ["model.ddvug_willibald_samen.load_webshop_ref_produkt_typ"], "source.ddvug_willibald_samen.LOAD_EXT.EXT_WEBSHOP_BESTELLUNG": ["model.ddvug_willibald_samen.load_webshop_bestellung"], "source.ddvug_willibald_samen.LOAD_EXT.EXT_ROADSHOW_BESTELLUNG": ["model.ddvug_willibald_samen.load_roadshow_bestellung"], "source.ddvug_willibald_samen.LOAD_EXT.EXT_MISC_KATEGORIE_TERMINTREUE": ["model.ddvug_willibald_samen.load_misc_kategorie_termintreue"], "source.ddvug_willibald_samen.LOAD_EXT_META.META_HWM": ["model.ddvug_willibald_samen.load_misc_kategorie_termintreue", "model.ddvug_willibald_samen.load_roadshow_bestellung", "model.ddvug_willibald_samen.load_webshop_bestellung", "model.ddvug_willibald_samen.load_webshop_kunde", "model.ddvug_willibald_samen.load_webshop_lieferadresse", "model.ddvug_willibald_samen.load_webshop_lieferdienst", "model.ddvug_willibald_samen.load_webshop_lieferung", "model.ddvug_willibald_samen.load_webshop_position", "model.ddvug_willibald_samen.load_webshop_produkt", "model.ddvug_willibald_samen.load_webshop_produktkategorie", "model.ddvug_willibald_samen.load_webshop_ref_produkt_typ", "model.ddvug_willibald_samen.load_webshop_vereinspartner", "model.ddvug_willibald_samen.load_webshop_wohnort", "operation.ddvug_willibald_samen.ddvug_willibald_samen-on-run-start-0"], "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_MISC_KATEGORIE_TERMINTREUE": [], "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_ROADSHOW_BESTELLUNG": [], "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_REF_PRODUKT_TYP": [], "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_PRODUKT": [], "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_PRODUKTKATEGORIE": [], "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_LIEFERADRESSE": [], "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_VEREINSPARTNER": [], "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_LIEFERUNG": [], "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_KUNDE": [], "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_POSITION": [], "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_LIEFERDIENST": [], "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_BESTELLUNG": [], "source.ddvug_willibald_samen.WILLIBALD_DATA_VAULT_WITH_DBT.EXT_WEBSHOP_WOHNORT": [], "exposure.ddvug_willibald_samen.Willibald_Controlling": []}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}