{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.3", "generated_at": "2025-04-07T20:55:37.566657Z", "invocation_id": "ddb3012f-fe39-4e29-81d5-cf823c4d40a2", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:53:57.959508Z", "completed_at": "2025-04-07T20:53:58.275116Z"}, {"name": "execute", "started_at": "2025-04-07T20:53:58.275771Z", "completed_at": "2025-04-07T20:53:59.080569Z"}], "thread_id": "main", "execution_time": 1.121061, "adapter_response": {}, "message": "ddvug_willibald_samen.on-run-start.0 passed", "failures": 0, "unique_id": "operation.ddvug_willibald_samen.ddvug_willibald_samen-on-run-start-0", "compiled": true, "compiled_code": "\n\n\n\n  \n\n  \n  \n    \n    \n    \n    \n\n\n\n\n\n\n\n\ncreate schema if not exists DWH_00_META;\n\n\ncreate schema if not exists DWH_01_EXT;\n\n \n\n\n\nCREATE or REPLACE FILE FORMAT DWH_01_EXT.FF_SEMICOLON \nCOMPRESSION = 'AUTO' FIELD_DELIMITER = ';' RECORD_DELIMITER = '\\n' SKIP_HEADER = 1 FIELD_OPTIONALLY_ENCLOSED_BY = 'NONE' TRIM_SPACE = FALSE ERROR_ON_COLUMN_COUNT_MISMATCH = TRUE ESCAPE = 'NONE' ESCAPE_UNENCLOSED_FIELD = '\\134' DATE_FORMAT = 'AUTO' TIMESTAMP_FORMAT = 'AUTO' NULL_IF = ('\\\\N');\n\nCREATE or REPLACE STAGE DWH_01_EXT.DWH_01_EXT_STAGE \nURL = 's3://willibald-data/'\nFILE_FORMAT = DWH_01_EXT.FF_SEMICOLON;\n \n\n\n\ncreate table if not exists WILLIBALD_DATA_VAULT_WITH_DBT.DWH_00_META.META_HWM\n(\n    OBJECT_NAME       VARCHAR,\n    HWM_LDTS TIMESTAMPNTZ,\n    LOAD_DATE     TIMESTAMPNTZ\n);\n\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:53:59.146208Z", "completed_at": "2025-04-07T20:53:59.182532Z"}, {"name": "execute", "started_at": "2025-04-07T20:53:59.188311Z", "completed_at": "2025-04-07T20:54:02.185426Z"}], "thread_id": "Thread-4", "execution_time": 3.0851738452911377, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-09a8-0003-ac120002f09a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.load_roadshow_bestellung", "compiled": true, "compiled_code": "with \nhwm as\n    (\n        select max(hwm_ldts) hwm_max_ts from WILLIBALD_DATA_VAULT_WITH_DBT.DWH_00_META.META_HWM where object_name = 'WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_roadshow_bestellung'\n    ),\n    hwm_max AS\n    (\n        select COALESCE(hwm.hwm_max_ts,to_timestamp('01.01.1900','DD.MM.YYYY') ) hwm_max_ts from hwm\n    ),\nraw_data AS \n(\n\tSELECT \n\t\t  TRIM(replace(right(filenamedate,19),'.csv','')::STRING) as \"LDTS_SOURCE_RAW\"\n                , TRIM(filenamedate::STRING) as \"RSRC_SOURCE_RAW\"\n\t\t, TRIM(trim(reverse(substring(reverse(replace(filenamedate,'.csv','')), 17,8))::varchar)::STRING) as \"EDTS_IN_RAW\"\n                , TRIM(value::STRING) as \"RAW_DATA_RAW\"\n                , TRIM(metadata$file_row_number::STRING) as \"ROW_NUMBER_RAW\"\n\t\t, TRIM(value:c1::STRING) as \"BESTELLUNGID_RAW\"\n                , REPLACE(TRIM(value:c10::STRING) , ',', '.') as \"PREIS_RAW\"\n                , REPLACE(TRIM(value:c11::STRING) , ',', '.') as \"RABATT_RAW\"\n                , TRIM(value:c2::STRING) as \"KUNDEID_RAW\"\n                , TRIM(value:c3::STRING) as \"VEREINSPARTNERID_RAW\"\n                , TRIM(value:c4::STRING) as \"KAUFDATUM_RAW\"\n                , TRIM(value:c5::STRING) as \"KREDITKARTE_RAW\"\n                , TRIM(value:c6::STRING) as \"GUELTIGBIS_RAW\"\n                , TRIM(value:c7::STRING) as \"KKFIRMA_RAW\"\n                , TRIM(value:c8::STRING) as \"PRODUKTID_RAW\"\n                , REPLACE(TRIM(value:c9::STRING) , ',', '') as \"MENGE_RAW\"\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_ROADSHOW_BESTELLUNG\n)\nSELECT \n\t\t  TRY_TO_TIMESTAMP(\"LDTS_SOURCE_RAW\", 'YYYYMMDD_HH24MISS') as \"LDTS_SOURCE\"\n                , \"RSRC_SOURCE_RAW\" as \"RSRC_SOURCE\" \n\t\t, TRY_TO_DATE(\"EDTS_IN_RAW\", 'YYYYMMDD') as \"EDTS_IN\"\n                , \"RAW_DATA_RAW\" as \"RAW_DATA\"\n                , TRY_TO_NUMBER(\"ROW_NUMBER_RAW\") as \"ROW_NUMBER\" \n\t\t, \"BESTELLUNGID_RAW\" as \"BESTELLUNGID\"\n                , TRY_TO_NUMBER(\"PREIS_RAW\", 20,8) as \"PREIS\"\n                , TRY_TO_NUMBER(\"RABATT_RAW\", 20,8) as \"RABATT\"\n                , \"KUNDEID_RAW\" as \"KUNDEID\"\n                , \"VEREINSPARTNERID_RAW\" as \"VEREINSPARTNERID\"\n                , TRY_TO_DATE(\"KAUFDATUM_RAW\", 'DD.MM.YYYY') as \"KAUFDATUM\"\n                , \"KREDITKARTE_RAW\" as \"KREDITKARTE\"\n                , \"GUELTIGBIS_RAW\" as \"GUELTIGBIS\"\n                , \"KKFIRMA_RAW\" as \"KKFIRMA\"\n                , \"PRODUKTID_RAW\" as \"PRODUKTID\"\n                , TRY_TO_NUMBER(\"MENGE_RAW\") as \"MENGE\" \n\t\t, TRY_TO_TIMESTAMP(\"LDTS_SOURCE_RAW\", 'YYYYMMDD_HH24MISS') IS NOT NULL OR \"LDTS_SOURCE_RAW\" IS NULL as \"IS_LDTS_SOURCE_TYPE_OK\" \n\t\t, TRY_TO_DATE(\"EDTS_IN_RAW\", 'YYYYMMDD') IS NOT NULL OR \"EDTS_IN_RAW\" IS NULL as \"IS_EDTS_IN_TYPE_OK\"\n                , TRY_TO_NUMBER(\"ROW_NUMBER_RAW\") IS NOT NULL OR \"ROW_NUMBER_RAW\" IS NULL as \"IS_ROW_NUMBER_TYPE_OK\" \n\t\t, TRY_TO_NUMBER(\"PREIS_RAW\", 20,8) IS NOT NULL OR \"PREIS_RAW\" IS NULL as \"IS_PREIS_TYPE_OK\"\n                , TRY_TO_NUMBER(\"RABATT_RAW\", 20,8) IS NOT NULL OR \"RABATT_RAW\" IS NULL as \"IS_RABATT_TYPE_OK\"\n                , TRY_TO_DATE(\"KAUFDATUM_RAW\", 'DD.MM.YYYY') IS NOT NULL OR \"KAUFDATUM_RAW\" IS NULL as \"IS_KAUFDATUM_TYPE_OK\"\n                , TRY_TO_NUMBER(\"MENGE_RAW\") IS NOT NULL OR \"MENGE_RAW\" IS NULL as \"IS_MENGE_TYPE_OK\" \n\t\t, ROW_NUMBER() OVER (PARTITION BY ldts_source,bestellungid,produktid ORDER BY ldts_source,bestellungid,produktid) = 1 AS \"IS_DUB_CHECK_OK\" \n\t\t, COALESCE(\"BESTELLUNGID_RAW\", '') <> '' as \"IS_BESTELLUNGID_KEY_CHECK_OK\"\n                , COALESCE(\"PRODUKTID_RAW\", '') <> '' as \"IS_PRODUKTID_KEY_CHECK_OK\"\n\t\t \n\t\t, \"IS_LDTS_SOURCE_TYPE_OK\" AND \"IS_EDTS_IN_TYPE_OK\" AND \"IS_ROW_NUMBER_TYPE_OK\" AND \"IS_PREIS_TYPE_OK\" AND \"IS_RABATT_TYPE_OK\" AND \"IS_KAUFDATUM_TYPE_OK\" AND \"IS_MENGE_TYPE_OK\" AND \"IS_DUB_CHECK_OK\" AND \"IS_BESTELLUNGID_KEY_CHECK_OK\" AND \"IS_PRODUKTID_KEY_CHECK_OK\" is_check_ok\n\t\t \n\t\t,  TO_VARIANT(ARRAY_EXCEPT([REPLACE(IFF(NOT \"IS_LDTS_SOURCE_TYPE_OK\",'{\"ldts_source\":\"' || COALESCE(TO_VARCHAR(\"LDTS_SOURCE_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_EDTS_IN_TYPE_OK\",'{\"edts_in\":\"' || COALESCE(TO_VARCHAR(\"EDTS_IN_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_ROW_NUMBER_TYPE_OK\",'{\"row_number\":\"' || COALESCE(TO_VARCHAR(\"ROW_NUMBER_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_PREIS_TYPE_OK\",'{\"preis\":\"' || COALESCE(TO_VARCHAR(\"PREIS_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_RABATT_TYPE_OK\",'{\"rabatt\":\"' || COALESCE(TO_VARCHAR(\"RABATT_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_KAUFDATUM_TYPE_OK\",'{\"kaufdatum\":\"' || COALESCE(TO_VARCHAR(\"KAUFDATUM_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_MENGE_TYPE_OK\",'{\"menge\":\"' || COALESCE(TO_VARCHAR(\"MENGE_RAW\") ,'') || '\"}','') || IFF(NOT is_dub_check_ok, '{\"dub_check\": \"ldts_source,bestellungid,produktid\"}','') || IFF(NOT is_bestellungid_key_check_ok, '{\"key_check\": \"bestellungid\"}','') || IFF(NOT is_produktid_key_check_ok, '{\"key_check\": \"produktid\"}',''), '}{','},{')],[''])) chk_all_msg\n\t\tFROM raw_data \n\n\nCROSS JOIN hwm_max \nWHERE ldts_source > hwm_max.hwm_max_ts\n", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_roadshow_bestellung", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:53:59.111999Z", "completed_at": "2025-04-07T20:53:59.170933Z"}, {"name": "execute", "started_at": "2025-04-07T20:53:59.176273Z", "completed_at": "2025-04-07T20:54:02.513315Z"}], "thread_id": "Thread-3", "execution_time": 3.425909996032715, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-09a8-0003-ac120002f096"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.load_misc_kategorie_termintreue", "compiled": true, "compiled_code": "with \nhwm as\n    (\n        select max(hwm_ldts) hwm_max_ts from WILLIBALD_DATA_VAULT_WITH_DBT.DWH_00_META.META_HWM where object_name = 'WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_misc_kategorie_termintreue'\n    ),\n    hwm_max AS\n    (\n        select COALESCE(hwm.hwm_max_ts,to_timestamp('01.01.1900','DD.MM.YYYY') ) hwm_max_ts from hwm\n    ),\nraw_data AS \n(\n\tSELECT \n\t\t  TRIM(replace(right(filenamedate,19),'.csv','')::STRING) as \"LDTS_SOURCE_RAW\"\n                , TRIM(filenamedate::STRING) as \"RSRC_SOURCE_RAW\"\n\t\t, TRIM(trim(reverse(substring(reverse(replace(filenamedate,'.csv','')), 17,8))::varchar)::STRING) as \"EDTS_IN_RAW\"\n                , TRIM(value::STRING) as \"RAW_DATA_RAW\"\n                , TRIM(metadata$file_row_number::STRING) as \"ROW_NUMBER_RAW\"\n\t\t, TRIM(value:c1::STRING) as \"ANZAHL_TAGE_VON_RAW\"\n                , TRIM(value:c2::STRING) as \"ANZAHL_TAGE_BIS_RAW\"\n                , TRIM(value:c3::STRING) as \"BEZEICHNUNG_RAW\"\n                , TRIM(value:c4::STRING) as \"BEWERTUNG_RAW\"\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_MISC_KATEGORIE_TERMINTREUE\n)\nSELECT \n\t\t  TRY_TO_TIMESTAMP(\"LDTS_SOURCE_RAW\", 'YYYYMMDD_HH24MISS') as \"LDTS_SOURCE\"\n                , \"RSRC_SOURCE_RAW\" as \"RSRC_SOURCE\" \n\t\t, TRY_TO_DATE(\"EDTS_IN_RAW\", 'YYYYMMDD') as \"EDTS_IN\"\n                , \"RAW_DATA_RAW\" as \"RAW_DATA\"\n                , TRY_TO_NUMBER(\"ROW_NUMBER_RAW\") as \"ROW_NUMBER\" \n\t\t, \"ANZAHL_TAGE_VON_RAW\" as \"ANZAHL_TAGE_VON\"\n                , \"ANZAHL_TAGE_BIS_RAW\" as \"ANZAHL_TAGE_BIS\"\n                , \"BEZEICHNUNG_RAW\" as \"BEZEICHNUNG\"\n                , \"BEWERTUNG_RAW\" as \"BEWERTUNG\" \n\t\t, TRY_TO_TIMESTAMP(\"LDTS_SOURCE_RAW\", 'YYYYMMDD_HH24MISS') IS NOT NULL OR \"LDTS_SOURCE_RAW\" IS NULL as \"IS_LDTS_SOURCE_TYPE_OK\" \n\t\t, TRY_TO_DATE(\"EDTS_IN_RAW\", 'YYYYMMDD') IS NOT NULL OR \"EDTS_IN_RAW\" IS NULL as \"IS_EDTS_IN_TYPE_OK\"\n                , TRY_TO_NUMBER(\"ROW_NUMBER_RAW\") IS NOT NULL OR \"ROW_NUMBER_RAW\" IS NULL as \"IS_ROW_NUMBER_TYPE_OK\" \n\t\t, ROW_NUMBER() OVER (PARTITION BY ldts_source,bewertung ORDER BY ldts_source,bewertung) = 1 AS \"IS_DUB_CHECK_OK\" \n\t\t, COALESCE(\"BEWERTUNG_RAW\", '') <> '' as \"IS_BEWERTUNG_KEY_CHECK_OK\"\n\t\t \n\t\t, \"IS_LDTS_SOURCE_TYPE_OK\" AND \"IS_EDTS_IN_TYPE_OK\" AND \"IS_ROW_NUMBER_TYPE_OK\" AND \"IS_DUB_CHECK_OK\" AND \"IS_BEWERTUNG_KEY_CHECK_OK\" is_check_ok\n\t\t \n\t\t,  TO_VARIANT(ARRAY_EXCEPT([REPLACE(IFF(NOT \"IS_LDTS_SOURCE_TYPE_OK\",'{\"ldts_source\":\"' || COALESCE(TO_VARCHAR(\"LDTS_SOURCE_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_EDTS_IN_TYPE_OK\",'{\"edts_in\":\"' || COALESCE(TO_VARCHAR(\"EDTS_IN_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_ROW_NUMBER_TYPE_OK\",'{\"row_number\":\"' || COALESCE(TO_VARCHAR(\"ROW_NUMBER_RAW\") ,'') || '\"}','') || IFF(NOT is_dub_check_ok, '{\"dub_check\": \"ldts_source,bewertung\"}','') || IFF(NOT is_bewertung_key_check_ok, '{\"key_check\": \"bewertung\"}',''), '}{','},{')],[''])) chk_all_msg\n\t\tFROM raw_data \n\n\nCROSS JOIN hwm_max \nWHERE ldts_source > hwm_max.hwm_max_ts\n", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_misc_kategorie_termintreue", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:53:59.103510Z", "completed_at": "2025-04-07T20:53:59.319384Z"}, {"name": "execute", "started_at": "2025-04-07T20:53:59.319643Z", "completed_at": "2025-04-07T20:54:02.640954Z"}], "thread_id": "Thread-2", "execution_time": 3.5545780658721924, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8985-0306-0851-0003-ac1200031072"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.date_bs", "compiled": true, "compiled_code": "\nWITH date_spine AS (\n\n  \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1557\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2022', 'mm/dd/yyyy')\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= dateadd(year, 1, current_date)\n\n)\n\nselect * from filtered\n\n\n\n), calculated as (\n\n    SELECT\n      date_day,\n      date_day                                                                                AS date_actual,\n\n      DAYNAME(date_day)                                                                       AS day_name,\n\n      DATE_PART('month', date_day)                                                            AS month_actual,\n      DATE_PART('year', date_day)                                                             AS year_actual,\n      DATE_PART(quarter, date_day)                                                            AS quarter_actual,\n\n      DATE_PART(dayofweek, date_day) + 1                                                      AS day_of_week,\n      CASE WHEN day_name = 'Sun' THEN date_day\n        ELSE DATEADD('day', -1, DATE_TRUNC('week', date_day)) END                             AS first_day_of_week,\n\n      CASE WHEN day_name = 'Sun' THEN WEEK(date_day) + 1\n        ELSE WEEK(date_day) END                                                               AS week_of_year_temp, --remove this column\n\n      CASE WHEN day_name = 'Sun' AND LEAD(week_of_year_temp) OVER (ORDER BY date_day) = '1'\n        THEN '1'\n        ELSE week_of_year_temp END                                                            AS week_of_year,\n\n      DATE_PART('day', date_day)                                                              AS day_of_month,\n\n      ROW_NUMBER() OVER (PARTITION BY year_actual, quarter_actual ORDER BY date_day)          AS day_of_quarter,\n      ROW_NUMBER() OVER (PARTITION BY year_actual ORDER BY date_day)                          AS day_of_year,\n\n      CASE WHEN month_actual < 2\n        THEN year_actual\n        ELSE (year_actual+1) END                                                              AS fiscal_year,\n      CASE WHEN month_actual < 2 THEN '4'\n        WHEN month_actual < 5 THEN '1'\n        WHEN month_actual < 8 THEN '2'\n        WHEN month_actual < 11 THEN '3'\n        ELSE '4' END                                                                          AS fiscal_quarter,\n\n      ROW_NUMBER() OVER (PARTITION BY fiscal_year, fiscal_quarter ORDER BY date_day)          AS day_of_fiscal_quarter,\n      ROW_NUMBER() OVER (PARTITION BY fiscal_year ORDER BY date_day)                          AS day_of_fiscal_year,\n\n      TO_CHAR(date_day, 'MMMM')                                                               AS month_name,\n\n      TRUNC(date_day, 'Month')                                                                AS first_day_of_month,\n      LAST_VALUE(date_day) OVER (PARTITION BY year_actual, month_actual ORDER BY date_day)    AS last_day_of_month,\n\n      FIRST_VALUE(date_day) OVER (PARTITION BY year_actual ORDER BY date_day)                 AS first_day_of_year,\n      LAST_VALUE(date_day) OVER (PARTITION BY year_actual ORDER BY date_day)                  AS last_day_of_year,\n\n      FIRST_VALUE(date_day) OVER (PARTITION BY year_actual, quarter_actual ORDER BY date_day) AS first_day_of_quarter,\n      LAST_VALUE(date_day) OVER (PARTITION BY year_actual, quarter_actual ORDER BY date_day)  AS last_day_of_quarter,\n\n      FIRST_VALUE(date_day) OVER (PARTITION BY fiscal_year, fiscal_quarter ORDER BY date_day) AS first_day_of_fiscal_quarter,\n      LAST_VALUE(date_day) OVER (PARTITION BY fiscal_year, fiscal_quarter ORDER BY date_day)  AS last_day_of_fiscal_quarter,\n\n      FIRST_VALUE(date_day) OVER (PARTITION BY fiscal_year ORDER BY date_day)                 AS first_day_of_fiscal_year,\n      LAST_VALUE(date_day) OVER (PARTITION BY fiscal_year ORDER BY date_day)                  AS last_day_of_fiscal_year,\n\n      DATEDIFF('week', first_day_of_fiscal_year, date_actual) +1                              AS week_of_fiscal_year,\n\n      CASE WHEN EXTRACT('month', date_day) = 1 THEN 12\n        ELSE EXTRACT('month', date_day) - 1 END                                               AS month_of_fiscal_year,\n\n      LAST_VALUE(date_day) OVER (PARTITION BY first_day_of_week ORDER BY date_day)            AS last_day_of_week,\n\n      (year_actual || '-Q' || EXTRACT(QUARTER FROM date_day))                                 AS quarter_name,\n\n      (fiscal_year || '-' || DECODE(fiscal_quarter,\n        1, 'Q1',\n        2, 'Q2',\n        3, 'Q3',\n        4, 'Q4'))                                                                             AS fiscal_quarter_name,\n      ('FY' || SUBSTR(fiscal_quarter_name, 3, 7))                                             AS fiscal_quarter_name_fy,\n      DENSE_RANK() OVER (ORDER BY fiscal_quarter_name)                                        AS fiscal_quarter_number_absolute,\n      fiscal_year || '-' || MONTHNAME(date_day)                                               AS fiscal_month_name,\n      ('FY' || SUBSTR(fiscal_month_name, 3, 8))                                               AS fiscal_month_name_fy,\n\n      (CASE WHEN MONTH(date_day) = 1 AND DAYOFMONTH(date_day) = 1 THEN 'New Year''s Day'\n        WHEN MONTH(date_day) = 12 AND DAYOFMONTH(date_day) = 25 THEN 'Christmas Day'\n        WHEN MONTH(date_day) = 12 AND DAYOFMONTH(date_day) = 26 THEN 'Boxing Day'\n        ELSE NULL END)::VARCHAR                                                               AS holiday_desc,\n      (CASE WHEN HOLIDAY_DESC IS NULL THEN 0\n        ELSE 1 END)::BOOLEAN                                                                  AS is_holiday,\n      DATE_TRUNC('month', last_day_of_fiscal_quarter)                                         AS last_month_of_fiscal_quarter,\n      IFF(DATE_TRUNC('month', last_day_of_fiscal_quarter) = date_actual, TRUE, FALSE)         AS is_first_day_of_last_month_of_fiscal_quarter,\n      DATE_TRUNC('month', last_day_of_fiscal_year)                                            AS last_month_of_fiscal_year,\n      IFF(DATE_TRUNC('month', last_day_of_fiscal_year) = date_actual, TRUE, FALSE)            AS is_first_day_of_last_month_of_fiscal_year,\n      DATEADD('day',7,DATEADD('month',1,first_day_of_month))                                  AS snapshot_date_fpa,\n      DATEADD('day',44,DATEADD('month',1,first_day_of_month))                                 AS snapshot_date_billings,\n      COUNT(date_actual) OVER (PARTITION BY first_day_of_month)                               AS days_in_month_count,\n      90 - DATEDIFF(day, date_actual, last_day_of_fiscal_quarter)                             AS day_of_fiscal_quarter_normalised,\n      12-floor((DATEDIFF(day, date_actual, last_day_of_fiscal_quarter)/7))                    AS week_of_fiscal_quarter_normalised,\n      CASE \n        WHEN  week_of_fiscal_quarter_normalised < 5\n          THEN week_of_fiscal_quarter_normalised \n        WHEN  week_of_fiscal_quarter_normalised < 9 \n          THEN week_of_fiscal_quarter_normalised - 4\n        ELSE week_of_fiscal_quarter_normalised - 8\n      END                                                                                     AS week_of_month_normalised,\n      365 - datediff(day,date_actual,last_day_of_fiscal_year)                                 AS day_of_fiscal_year_normalised,\n      CASE \n        WHEN ((DATEDIFF(day, date_actual, last_day_of_fiscal_quarter)-6) % 7 = 0 \n                OR date_actual = first_day_of_fiscal_quarter) \n          THEN 1 \n        ELSE 0 \n      END                                                                                     AS is_first_day_of_fiscal_quarter_week,\n\n      DATEDIFF('day', date_day, last_day_of_month)                                            AS days_until_last_day_of_month \n\n    FROM date_spine\n\n), current_date_information AS (\n  \n    SELECT \n      fiscal_year AS current_fiscal_year,\n      first_day_of_fiscal_year AS current_first_day_of_fiscal_year,\n      fiscal_quarter_name_fy AS current_fiscal_quarter_name_fy,\n      first_day_of_month AS current_first_day_of_month\n    FROM calculated\n    WHERE CURRENT_DATE = date_actual\n\n)\n\nSELECT\n  calculated.date_day,\n  calculated.date_actual,\n  calculated.day_name,\n  calculated.month_actual,\n  calculated.year_actual,\n  calculated.quarter_actual,\n  calculated.day_of_week,\n  calculated.first_day_of_week,\n  calculated.week_of_year,\n  calculated.day_of_month,\n  calculated.day_of_quarter,\n  calculated.day_of_year,\n  calculated.fiscal_year,\n  calculated.fiscal_quarter,\n  calculated.day_of_fiscal_quarter,\n  calculated.day_of_fiscal_year,\n  calculated.month_name,\n  calculated.first_day_of_month,\n  calculated.last_day_of_month,\n  calculated.first_day_of_year,\n  calculated.last_day_of_year,\n  calculated.first_day_of_quarter,\n  calculated.last_day_of_quarter,\n  calculated.first_day_of_fiscal_quarter,\n  calculated.last_day_of_fiscal_quarter,\n  calculated.first_day_of_fiscal_year,\n  calculated.last_day_of_fiscal_year,\n  calculated.week_of_fiscal_year,\n  calculated.month_of_fiscal_year,\n  calculated.last_day_of_week,\n  calculated.quarter_name,\n  calculated.fiscal_quarter_name,\n  calculated.fiscal_quarter_name_fy,\n  calculated.fiscal_quarter_number_absolute,\n  calculated.fiscal_month_name,\n  calculated.fiscal_month_name_fy,\n  calculated.holiday_desc,\n  calculated.is_holiday,\n  calculated.last_month_of_fiscal_quarter,\n  calculated.is_first_day_of_last_month_of_fiscal_quarter,\n  calculated.last_month_of_fiscal_year,\n  calculated.is_first_day_of_last_month_of_fiscal_year,\n  calculated.snapshot_date_fpa,\n  calculated.snapshot_date_billings,\n  calculated.days_in_month_count,\n  calculated.week_of_month_normalised,\n  calculated.day_of_fiscal_quarter_normalised,\n  calculated.week_of_fiscal_quarter_normalised,\n  calculated.day_of_fiscal_year_normalised,\n  calculated.is_first_day_of_fiscal_quarter_week,\n  calculated.days_until_last_day_of_month,\n  current_date_information.current_fiscal_year,\n  current_date_information.current_first_day_of_fiscal_year,\n  current_date_information.current_fiscal_quarter_name_fy,\n  current_date_information.current_first_day_of_month\nFROM calculated\nCROSS JOIN current_date_information", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_06_bv.date_bs", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:53:59.088103Z", "completed_at": "2025-04-07T20:53:59.146004Z"}, {"name": "execute", "started_at": "2025-04-07T20:53:59.152404Z", "completed_at": "2025-04-07T20:54:02.788896Z"}], "thread_id": "Thread-1", "execution_time": 3.703376293182373, "adapter_response": {"_message": "SUCCESS 5", "code": "SUCCESS", "rows_affected": 5, "query_id": "01bb8986-0306-09a8-0003-ac120002f092"}, "message": "SUCCESS 5", "failures": null, "unique_id": "model.ddvug_willibald_samen.control_snap_v0", "compiled": true, "compiled_code": "with s0data as\n(\nWITH \n\ninitial_timestamps AS (\n    \n    SELECT\n        DATEADD(DAY, SEQ4(), \n        TIMESTAMPADD(SECOND, EXTRACT(SECOND FROM TO_TIME('23:59:59')), \n            TIMESTAMPADD(MINUTE, EXTRACT(MINUTE FROM TO_TIME('23:59:59')), \n                TIMESTAMPADD(HOUR, EXTRACT(HOUR FROM TO_TIME('23:59:59')), TO_DATE('2022-01-01', 'YYYY-MM-DD')))\n                ))::TIMESTAMP AS sdts\n    FROM \n        TABLE(GENERATOR(ROWCOUNT => 100000))\n    WHERE \n        sdts <= CURRENT_TIMESTAMP\n    AND sdts > (SELECT MAX(sdts) FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.control_snap_v0)\n\n),\n\nenriched_timestamps AS (\n\n    SELECT\n        sdts as sdts,\n        TRUE as force_active,\n        sdts AS replacement_sdts,\n        CONCAT('Snapshot ', DATE(sdts)) AS caption,\n        CASE\n            WHEN EXTRACT(MINUTE FROM sdts) = 0 AND EXTRACT(SECOND FROM sdts) = 0 THEN TRUE\n            ELSE FALSE\n        END AS is_hourly,\n        CASE\n            WHEN EXTRACT(MINUTE FROM sdts) = 0 AND EXTRACT(SECOND FROM sdts) = 0 AND EXTRACT(HOUR FROM sdts) = 0 THEN TRUE\n            ELSE FALSE\n        END AS is_daily,\n        CASE\n            WHEN EXTRACT(DAYOFWEEK FROM  sdts) = 1 THEN TRUE\n            ELSE FALSE\n        END AS is_weekly,\n        CASE\n            WHEN EXTRACT(DAY FROM sdts) = 1 THEN TRUE\n            ELSE FALSE\n        END AS is_monthly,\n        CASE\n            WHEN EXTRACT(DAY FROM sdts) = 1 AND EXTRACT(MONTH FROM sdts) = 1 THEN TRUE\n            ELSE FALSE\n        END AS is_yearly,\n        NULL AS comment\n    FROM initial_timestamps\n\n)\n\nSELECT * FROM enriched_timestamps \n)\nselect    date_trunc(day, sdts) as replacement_sdts\n        , * exclude replacement_sdts\n       \nfrom s0data                               \nwhere sdts  < dateadd(day, 1, date_trunc(day, sysdate()))", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.control_snap_v0", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:02.518091Z", "completed_at": "2025-04-07T20:54:02.538228Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:02.538879Z", "completed_at": "2025-04-07T20:54:04.443711Z"}], "thread_id": "Thread-3", "execution_time": 1.9268109798431396, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-09a8-0003-ac120002f0b6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.load_webshop_kunde", "compiled": true, "compiled_code": "with \nhwm as\n    (\n        select max(hwm_ldts) hwm_max_ts from WILLIBALD_DATA_VAULT_WITH_DBT.DWH_00_META.META_HWM where object_name = 'WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_kunde'\n    ),\n    hwm_max AS\n    (\n        select COALESCE(hwm.hwm_max_ts,to_timestamp('01.01.1900','DD.MM.YYYY') ) hwm_max_ts from hwm\n    ),\nraw_data AS \n(\n\tSELECT \n\t\t  TRIM(replace(right(filenamedate,19),'.csv','')::STRING) as \"LDTS_SOURCE_RAW\"\n                , TRIM(filenamedate::STRING) as \"RSRC_SOURCE_RAW\"\n\t\t, TRIM(trim(reverse(substring(reverse(replace(filenamedate,'.csv','')), 17,8))::varchar)::STRING) as \"EDTS_IN_RAW\"\n                , TRIM(value::STRING) as \"RAW_DATA_RAW\"\n                , TRIM(metadata$file_row_number::STRING) as \"ROW_NUMBER_RAW\"\n\t\t, TRIM(value:c1::STRING) as \"KUNDEID_RAW\"\n                , TRIM(value:c10::STRING) as \"KREDITKARTE_RAW\"\n                , TRIM(value:c11::STRING) as \"GUELTIGBIS_RAW\"\n                , TRIM(value:c12::STRING) as \"KKFIRMA_RAW\"\n                , TRIM(value:c2::STRING) as \"VEREINSPARTNERID_RAW\"\n                , TRIM(value:c3::STRING) as \"VORNAME_RAW\"\n                , TRIM(value:c4::STRING) as \"NAME_RAW\"\n                , TRIM(value:c5::STRING) as \"GESCHLECHT_RAW\"\n                , TRIM(value:c6::STRING) as \"GEBURTSDATUM_RAW\"\n                , TRIM(value:c7::STRING) as \"TELEFON_RAW\"\n                , TRIM(value:c8::STRING) as \"MOBIL_RAW\"\n                , TRIM(value:c9::STRING) as \"EMAIL_RAW\"\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_WEBSHOP_KUNDE\n)\nSELECT \n\t\t  TRY_TO_TIMESTAMP(\"LDTS_SOURCE_RAW\", 'YYYYMMDD_HH24MISS') as \"LDTS_SOURCE\"\n                , \"RSRC_SOURCE_RAW\" as \"RSRC_SOURCE\" \n\t\t, TRY_TO_DATE(\"EDTS_IN_RAW\", 'YYYYMMDD') as \"EDTS_IN\"\n                , \"RAW_DATA_RAW\" as \"RAW_DATA\"\n                , TRY_TO_NUMBER(\"ROW_NUMBER_RAW\") as \"ROW_NUMBER\" \n\t\t, \"KUNDEID_RAW\" as \"KUNDEID\"\n                , \"KREDITKARTE_RAW\" as \"KREDITKARTE\"\n                , \"GUELTIGBIS_RAW\" as \"GUELTIGBIS\"\n                , \"KKFIRMA_RAW\" as \"KKFIRMA\"\n                , \"VEREINSPARTNERID_RAW\" as \"VEREINSPARTNERID\"\n                , \"VORNAME_RAW\" as \"VORNAME\"\n                , \"NAME_RAW\" as \"NAME\"\n                , \"GESCHLECHT_RAW\" as \"GESCHLECHT\"\n                , TRY_TO_DATE(\"GEBURTSDATUM_RAW\", 'DD.MM.YYYY') as \"GEBURTSDATUM\"\n                , \"TELEFON_RAW\" as \"TELEFON\"\n                , \"MOBIL_RAW\" as \"MOBIL\"\n                , \"EMAIL_RAW\" as \"EMAIL\" \n\t\t, TRY_TO_TIMESTAMP(\"LDTS_SOURCE_RAW\", 'YYYYMMDD_HH24MISS') IS NOT NULL OR \"LDTS_SOURCE_RAW\" IS NULL as \"IS_LDTS_SOURCE_TYPE_OK\" \n\t\t, TRY_TO_DATE(\"EDTS_IN_RAW\", 'YYYYMMDD') IS NOT NULL OR \"EDTS_IN_RAW\" IS NULL as \"IS_EDTS_IN_TYPE_OK\"\n                , TRY_TO_NUMBER(\"ROW_NUMBER_RAW\") IS NOT NULL OR \"ROW_NUMBER_RAW\" IS NULL as \"IS_ROW_NUMBER_TYPE_OK\" \n\t\t, TRY_TO_DATE(\"GEBURTSDATUM_RAW\", 'DD.MM.YYYY') IS NOT NULL OR \"GEBURTSDATUM_RAW\" IS NULL as \"IS_GEBURTSDATUM_TYPE_OK\" \n\t\t, ROW_NUMBER() OVER (PARTITION BY ldts_source,KundeID ORDER BY ldts_source,KundeID) = 1 AS \"IS_DUB_CHECK_OK\" \n\t\t, COALESCE(\"KUNDEID_RAW\", '') <> '' as \"IS_KUNDEID_KEY_CHECK_OK\"\n\t\t \n\t\t, \"IS_LDTS_SOURCE_TYPE_OK\" AND \"IS_EDTS_IN_TYPE_OK\" AND \"IS_ROW_NUMBER_TYPE_OK\" AND \"IS_GEBURTSDATUM_TYPE_OK\" AND \"IS_DUB_CHECK_OK\" AND \"IS_KUNDEID_KEY_CHECK_OK\" is_check_ok\n\t\t \n\t\t,  TO_VARIANT(ARRAY_EXCEPT([REPLACE(IFF(NOT \"IS_LDTS_SOURCE_TYPE_OK\",'{\"ldts_source\":\"' || COALESCE(TO_VARCHAR(\"LDTS_SOURCE_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_EDTS_IN_TYPE_OK\",'{\"edts_in\":\"' || COALESCE(TO_VARCHAR(\"EDTS_IN_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_ROW_NUMBER_TYPE_OK\",'{\"row_number\":\"' || COALESCE(TO_VARCHAR(\"ROW_NUMBER_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_GEBURTSDATUM_TYPE_OK\",'{\"geburtsdatum\":\"' || COALESCE(TO_VARCHAR(\"GEBURTSDATUM_RAW\") ,'') || '\"}','') || IFF(NOT is_dub_check_ok, '{\"dub_check\": \"ldts_source,KundeID\"}','') || IFF(NOT is_KundeID_key_check_ok, '{\"key_check\": \"KundeID\"}',''), '}{','},{')],[''])) chk_all_msg\n\t\tFROM raw_data \n\n\nCROSS JOIN hwm_max \nWHERE ldts_source > hwm_max.hwm_max_ts\n", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_kunde", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:02.191678Z", "completed_at": "2025-04-07T20:54:02.205140Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:02.205389Z", "completed_at": "2025-04-07T20:54:04.495398Z"}], "thread_id": "Thread-4", "execution_time": 2.3045389652252197, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-0979-0003-ac120003011e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.load_webshop_bestellung", "compiled": true, "compiled_code": "with \nhwm as\n    (\n        select max(hwm_ldts) hwm_max_ts from WILLIBALD_DATA_VAULT_WITH_DBT.DWH_00_META.META_HWM where object_name = 'WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_bestellung'\n    ),\n    hwm_max AS\n    (\n        select COALESCE(hwm.hwm_max_ts,to_timestamp('01.01.1900','DD.MM.YYYY') ) hwm_max_ts from hwm\n    ),\nraw_data AS \n(\n\tSELECT \n\t\t  TRIM(replace(right(filenamedate,19),'.csv','')::STRING) as \"LDTS_SOURCE_RAW\"\n                , TRIM(filenamedate::STRING) as \"RSRC_SOURCE_RAW\"\n\t\t, TRIM(trim(reverse(substring(reverse(replace(filenamedate,'.csv','')), 17,8))::varchar)::STRING) as \"EDTS_IN_RAW\"\n                , TRIM(value::STRING) as \"RAW_DATA_RAW\"\n                , TRIM(metadata$file_row_number::STRING) as \"ROW_NUMBER_RAW\"\n\t\t, TRIM(value:c1::STRING) as \"BESTELLUNGID_RAW\"\n                , TRIM(value:c2::STRING) as \"KUNDEID_RAW\"\n                , REPLACE(TRIM(value:c3::STRING) , ',', '') as \"ALLGLIEFERADRID_RAW\"\n                , TRIM(value:c4::STRING) as \"BESTELLDATUM_RAW\"\n                , TRIM(value:c5::STRING) as \"WUNSCHDATUM_RAW\"\n                , REPLACE(TRIM(value:c6::STRING) , ',', '.') as \"RABATT_RAW\"\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_WEBSHOP_BESTELLUNG\n)\nSELECT \n\t\t  TRY_TO_TIMESTAMP(\"LDTS_SOURCE_RAW\", 'YYYYMMDD_HH24MISS') as \"LDTS_SOURCE\"\n                , \"RSRC_SOURCE_RAW\" as \"RSRC_SOURCE\" \n\t\t, TRY_TO_DATE(\"EDTS_IN_RAW\", 'YYYYMMDD') as \"EDTS_IN\"\n                , \"RAW_DATA_RAW\" as \"RAW_DATA\"\n                , TRY_TO_NUMBER(\"ROW_NUMBER_RAW\") as \"ROW_NUMBER\" \n\t\t, \"BESTELLUNGID_RAW\" as \"BESTELLUNGID\"\n                , \"KUNDEID_RAW\" as \"KUNDEID\"\n                , TRY_TO_NUMBER(\"ALLGLIEFERADRID_RAW\") as \"ALLGLIEFERADRID\"\n                , TRY_TO_DATE(\"BESTELLDATUM_RAW\", 'DD.MM.YYYY') as \"BESTELLDATUM\"\n                , TRY_TO_DATE(\"WUNSCHDATUM_RAW\", 'DD.MM.YYYY') as \"WUNSCHDATUM\"\n                , TRY_TO_NUMBER(\"RABATT_RAW\", 28,10) as \"RABATT\" \n\t\t, TRY_TO_TIMESTAMP(\"LDTS_SOURCE_RAW\", 'YYYYMMDD_HH24MISS') IS NOT NULL OR \"LDTS_SOURCE_RAW\" IS NULL as \"IS_LDTS_SOURCE_TYPE_OK\" \n\t\t, TRY_TO_DATE(\"EDTS_IN_RAW\", 'YYYYMMDD') IS NOT NULL OR \"EDTS_IN_RAW\" IS NULL as \"IS_EDTS_IN_TYPE_OK\"\n                , TRY_TO_NUMBER(\"ROW_NUMBER_RAW\") IS NOT NULL OR \"ROW_NUMBER_RAW\" IS NULL as \"IS_ROW_NUMBER_TYPE_OK\" \n\t\t, TRY_TO_NUMBER(\"ALLGLIEFERADRID_RAW\") IS NOT NULL OR \"ALLGLIEFERADRID_RAW\" IS NULL as \"IS_ALLGLIEFERADRID_TYPE_OK\"\n                , TRY_TO_DATE(\"BESTELLDATUM_RAW\", 'DD.MM.YYYY') IS NOT NULL OR \"BESTELLDATUM_RAW\" IS NULL as \"IS_BESTELLDATUM_TYPE_OK\"\n                , TRY_TO_DATE(\"WUNSCHDATUM_RAW\", 'DD.MM.YYYY') IS NOT NULL OR \"WUNSCHDATUM_RAW\" IS NULL as \"IS_WUNSCHDATUM_TYPE_OK\"\n                , TRY_TO_NUMBER(\"RABATT_RAW\", 28,10) IS NOT NULL OR \"RABATT_RAW\" IS NULL as \"IS_RABATT_TYPE_OK\" \n\t\t, ROW_NUMBER() OVER (PARTITION BY ldts_source,BestellungID,KundeID ORDER BY ldts_source,BestellungID,KundeID) = 1 AS \"IS_DUB_CHECK_OK\" \n\t\t, COALESCE(\"BESTELLUNGID_RAW\", '') <> '' as \"IS_BESTELLUNGID_KEY_CHECK_OK\"\n\t\t \n\t\t, \"IS_LDTS_SOURCE_TYPE_OK\" AND \"IS_EDTS_IN_TYPE_OK\" AND \"IS_ROW_NUMBER_TYPE_OK\" AND \"IS_ALLGLIEFERADRID_TYPE_OK\" AND \"IS_BESTELLDATUM_TYPE_OK\" AND \"IS_WUNSCHDATUM_TYPE_OK\" AND \"IS_RABATT_TYPE_OK\" AND \"IS_DUB_CHECK_OK\" AND \"IS_BESTELLUNGID_KEY_CHECK_OK\" is_check_ok\n\t\t \n\t\t,  TO_VARIANT(ARRAY_EXCEPT([REPLACE(IFF(NOT \"IS_LDTS_SOURCE_TYPE_OK\",'{\"ldts_source\":\"' || COALESCE(TO_VARCHAR(\"LDTS_SOURCE_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_EDTS_IN_TYPE_OK\",'{\"edts_in\":\"' || COALESCE(TO_VARCHAR(\"EDTS_IN_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_ROW_NUMBER_TYPE_OK\",'{\"row_number\":\"' || COALESCE(TO_VARCHAR(\"ROW_NUMBER_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_ALLGLIEFERADRID_TYPE_OK\",'{\"allglieferadrid\":\"' || COALESCE(TO_VARCHAR(\"ALLGLIEFERADRID_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_BESTELLDATUM_TYPE_OK\",'{\"bestelldatum\":\"' || COALESCE(TO_VARCHAR(\"BESTELLDATUM_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_WUNSCHDATUM_TYPE_OK\",'{\"wunschdatum\":\"' || COALESCE(TO_VARCHAR(\"WUNSCHDATUM_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_RABATT_TYPE_OK\",'{\"rabatt\":\"' || COALESCE(TO_VARCHAR(\"RABATT_RAW\") ,'') || '\"}','') || IFF(NOT is_dub_check_ok, '{\"dub_check\": \"ldts_source,BestellungID,KundeID\"}','') || IFF(NOT is_BestellungID_key_check_ok, '{\"key_check\": \"BestellungID\"}',''), '}{','},{')],[''])) chk_all_msg\n\t\tFROM raw_data \n\n\nCROSS JOIN hwm_max \nWHERE ldts_source > hwm_max.hwm_max_ts\n", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_bestellung", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:02.646518Z", "completed_at": "2025-04-07T20:54:02.665866Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:02.667285Z", "completed_at": "2025-04-07T20:54:04.707983Z"}], "thread_id": "Thread-2", "execution_time": 2.062641143798828, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-0851-0003-ac120003109e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.load_webshop_lieferadresse", "compiled": true, "compiled_code": "with \nhwm as\n    (\n        select max(hwm_ldts) hwm_max_ts from WILLIBALD_DATA_VAULT_WITH_DBT.DWH_00_META.META_HWM where object_name = 'WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_lieferadresse'\n    ),\n    hwm_max AS\n    (\n        select COALESCE(hwm.hwm_max_ts,to_timestamp('01.01.1900','DD.MM.YYYY') ) hwm_max_ts from hwm\n    ),\nraw_data AS \n(\n\tSELECT \n\t\t  TRIM(replace(right(filenamedate,19),'.csv','')::STRING) as \"LDTS_SOURCE_RAW\"\n                , TRIM(filenamedate::STRING) as \"RSRC_SOURCE_RAW\"\n\t\t, TRIM(trim(reverse(substring(reverse(replace(filenamedate,'.csv','')), 17,8))::varchar)::STRING) as \"EDTS_IN_RAW\"\n                , TRIM(value::STRING) as \"RAW_DATA_RAW\"\n                , TRIM(metadata$file_row_number::STRING) as \"ROW_NUMBER_RAW\"\n\t\t, TRIM(value:c1::STRING) as \"LIEFERADRID_RAW\"\n                , TRIM(value:c2::STRING) as \"KUNDEID_RAW\"\n                , TRIM(value:c3::STRING) as \"STRASSE_RAW\"\n                , TRIM(value:c4::STRING) as \"HAUSNUMMER_RAW\"\n                , TRIM(value:c5::STRING) as \"ADRESSZUSATZ_RAW\"\n                , TRIM(value:c6::STRING) as \"PLZ_RAW\"\n                , TRIM(value:c7::STRING) as \"ORT_RAW\"\n                , TRIM(value:c8::STRING) as \"LAND_RAW\"\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_WEBSHOP_LIEFERADRESSE\n)\nSELECT \n\t\t  TRY_TO_TIMESTAMP(\"LDTS_SOURCE_RAW\", 'YYYYMMDD_HH24MISS') as \"LDTS_SOURCE\"\n                , \"RSRC_SOURCE_RAW\" as \"RSRC_SOURCE\" \n\t\t, TRY_TO_DATE(\"EDTS_IN_RAW\", 'YYYYMMDD') as \"EDTS_IN\"\n                , \"RAW_DATA_RAW\" as \"RAW_DATA\"\n                , TRY_TO_NUMBER(\"ROW_NUMBER_RAW\") as \"ROW_NUMBER\" \n\t\t, \"LIEFERADRID_RAW\" as \"LIEFERADRID\"\n                , \"KUNDEID_RAW\" as \"KUNDEID\"\n                , \"STRASSE_RAW\" as \"STRASSE\"\n                , \"HAUSNUMMER_RAW\" as \"HAUSNUMMER\"\n                , \"ADRESSZUSATZ_RAW\" as \"ADRESSZUSATZ\"\n                , \"PLZ_RAW\" as \"PLZ\"\n                , \"ORT_RAW\" as \"ORT\"\n                , \"LAND_RAW\" as \"LAND\" \n\t\t, TRY_TO_TIMESTAMP(\"LDTS_SOURCE_RAW\", 'YYYYMMDD_HH24MISS') IS NOT NULL OR \"LDTS_SOURCE_RAW\" IS NULL as \"IS_LDTS_SOURCE_TYPE_OK\" \n\t\t, TRY_TO_DATE(\"EDTS_IN_RAW\", 'YYYYMMDD') IS NOT NULL OR \"EDTS_IN_RAW\" IS NULL as \"IS_EDTS_IN_TYPE_OK\"\n                , TRY_TO_NUMBER(\"ROW_NUMBER_RAW\") IS NOT NULL OR \"ROW_NUMBER_RAW\" IS NULL as \"IS_ROW_NUMBER_TYPE_OK\" \n\t\t, ROW_NUMBER() OVER (PARTITION BY ldts_source,LieferAdrID ORDER BY ldts_source,LieferAdrID) = 1 AS \"IS_DUB_CHECK_OK\" \n\t\t, COALESCE(\"LIEFERADRID_RAW\", '') <> '' as \"IS_LIEFERADRID_KEY_CHECK_OK\"\n\t\t \n\t\t, \"IS_LDTS_SOURCE_TYPE_OK\" AND \"IS_EDTS_IN_TYPE_OK\" AND \"IS_ROW_NUMBER_TYPE_OK\" AND \"IS_DUB_CHECK_OK\" AND \"IS_LIEFERADRID_KEY_CHECK_OK\" is_check_ok\n\t\t \n\t\t,  TO_VARIANT(ARRAY_EXCEPT([REPLACE(IFF(NOT \"IS_LDTS_SOURCE_TYPE_OK\",'{\"ldts_source\":\"' || COALESCE(TO_VARCHAR(\"LDTS_SOURCE_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_EDTS_IN_TYPE_OK\",'{\"edts_in\":\"' || COALESCE(TO_VARCHAR(\"EDTS_IN_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_ROW_NUMBER_TYPE_OK\",'{\"row_number\":\"' || COALESCE(TO_VARCHAR(\"ROW_NUMBER_RAW\") ,'') || '\"}','') || IFF(NOT is_dub_check_ok, '{\"dub_check\": \"ldts_source,LieferAdrID\"}','') || IFF(NOT is_LieferAdrID_key_check_ok, '{\"key_check\": \"LieferAdrID\"}',''), '}{','},{')],[''])) chk_all_msg\n\t\tFROM raw_data \n\n\nCROSS JOIN hwm_max \nWHERE ldts_source > hwm_max.hwm_max_ts\n", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_lieferadresse", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:02.792002Z", "completed_at": "2025-04-07T20:54:02.844698Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:02.845018Z", "completed_at": "2025-04-07T20:54:04.811747Z"}], "thread_id": "Thread-1", "execution_time": 2.0204920768737793, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-0979-0003-ac1200030122"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.load_webshop_lieferdienst", "compiled": true, "compiled_code": "with \nhwm as\n    (\n        select max(hwm_ldts) hwm_max_ts from WILLIBALD_DATA_VAULT_WITH_DBT.DWH_00_META.META_HWM where object_name = 'WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_lieferdienst'\n    ),\n    hwm_max AS\n    (\n        select COALESCE(hwm.hwm_max_ts,to_timestamp('01.01.1900','DD.MM.YYYY') ) hwm_max_ts from hwm\n    ),\nraw_data AS \n(\n\tSELECT \n\t\t  TRIM(replace(right(filenamedate,19),'.csv','')::STRING) as \"LDTS_SOURCE_RAW\"\n                , TRIM(filenamedate::STRING) as \"RSRC_SOURCE_RAW\"\n\t\t, TRIM(trim(reverse(substring(reverse(replace(filenamedate,'.csv','')), 17,8))::varchar)::STRING) as \"EDTS_IN_RAW\"\n                , TRIM(value::STRING) as \"RAW_DATA_RAW\"\n                , TRIM(metadata$file_row_number::STRING) as \"ROW_NUMBER_RAW\"\n\t\t, TRIM(value:c1::STRING) as \"LIEFERDIENSTID_RAW\"\n                , TRIM(value:c10::STRING) as \"LAND_RAW\"\n                , TRIM(value:c2::STRING) as \"NAME_RAW\"\n                , TRIM(value:c3::STRING) as \"TELEFON_RAW\"\n                , TRIM(value:c4::STRING) as \"FAX_RAW\"\n                , TRIM(value:c5::STRING) as \"EMAIL_RAW\"\n                , TRIM(value:c6::STRING) as \"STRASSE_RAW\"\n                , TRIM(value:c7::STRING) as \"HAUSNUMMER_RAW\"\n                , TRIM(value:c8::STRING) as \"PLZ_RAW\"\n                , TRIM(value:c9::STRING) as \"ORT_RAW\"\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_WEBSHOP_LIEFERDIENST\n)\nSELECT \n\t\t  TRY_TO_TIMESTAMP(\"LDTS_SOURCE_RAW\", 'YYYYMMDD_HH24MISS') as \"LDTS_SOURCE\"\n                , \"RSRC_SOURCE_RAW\" as \"RSRC_SOURCE\" \n\t\t, TRY_TO_DATE(\"EDTS_IN_RAW\", 'YYYYMMDD') as \"EDTS_IN\"\n                , \"RAW_DATA_RAW\" as \"RAW_DATA\"\n                , TRY_TO_NUMBER(\"ROW_NUMBER_RAW\") as \"ROW_NUMBER\" \n\t\t, \"LIEFERDIENSTID_RAW\" as \"LIEFERDIENSTID\"\n                , \"LAND_RAW\" as \"LAND\"\n                , \"NAME_RAW\" as \"NAME\"\n                , \"TELEFON_RAW\" as \"TELEFON\"\n                , \"FAX_RAW\" as \"FAX\"\n                , \"EMAIL_RAW\" as \"EMAIL\"\n                , \"STRASSE_RAW\" as \"STRASSE\"\n                , \"HAUSNUMMER_RAW\" as \"HAUSNUMMER\"\n                , \"PLZ_RAW\" as \"PLZ\"\n                , \"ORT_RAW\" as \"ORT\" \n\t\t, TRY_TO_TIMESTAMP(\"LDTS_SOURCE_RAW\", 'YYYYMMDD_HH24MISS') IS NOT NULL OR \"LDTS_SOURCE_RAW\" IS NULL as \"IS_LDTS_SOURCE_TYPE_OK\" \n\t\t, TRY_TO_DATE(\"EDTS_IN_RAW\", 'YYYYMMDD') IS NOT NULL OR \"EDTS_IN_RAW\" IS NULL as \"IS_EDTS_IN_TYPE_OK\"\n                , TRY_TO_NUMBER(\"ROW_NUMBER_RAW\") IS NOT NULL OR \"ROW_NUMBER_RAW\" IS NULL as \"IS_ROW_NUMBER_TYPE_OK\" \n\t\t, ROW_NUMBER() OVER (PARTITION BY ldts_source,LieferDienstID ORDER BY ldts_source,LieferDienstID) = 1 AS \"IS_DUB_CHECK_OK\" \n\t\t, COALESCE(\"LIEFERDIENSTID_RAW\", '') <> '' as \"IS_LIEFERDIENSTID_KEY_CHECK_OK\"\n\t\t \n\t\t, \"IS_LDTS_SOURCE_TYPE_OK\" AND \"IS_EDTS_IN_TYPE_OK\" AND \"IS_ROW_NUMBER_TYPE_OK\" AND \"IS_DUB_CHECK_OK\" AND \"IS_LIEFERDIENSTID_KEY_CHECK_OK\" is_check_ok\n\t\t \n\t\t,  TO_VARIANT(ARRAY_EXCEPT([REPLACE(IFF(NOT \"IS_LDTS_SOURCE_TYPE_OK\",'{\"ldts_source\":\"' || COALESCE(TO_VARCHAR(\"LDTS_SOURCE_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_EDTS_IN_TYPE_OK\",'{\"edts_in\":\"' || COALESCE(TO_VARCHAR(\"EDTS_IN_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_ROW_NUMBER_TYPE_OK\",'{\"row_number\":\"' || COALESCE(TO_VARCHAR(\"ROW_NUMBER_RAW\") ,'') || '\"}','') || IFF(NOT is_dub_check_ok, '{\"dub_check\": \"ldts_source,LieferDienstID\"}','') || IFF(NOT is_LieferDienstID_key_check_ok, '{\"key_check\": \"LieferDienstID\"}',''), '}{','},{')],[''])) chk_all_msg\n\t\tFROM raw_data \n\n\nCROSS JOIN hwm_max \nWHERE ldts_source > hwm_max.hwm_max_ts\n", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_lieferdienst", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:04.498281Z", "completed_at": "2025-04-07T20:54:04.508579Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:04.508828Z", "completed_at": "2025-04-07T20:54:06.496780Z"}], "thread_id": "Thread-4", "execution_time": 1.9993679523468018, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-0979-0003-ac1200030142"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.load_webshop_position", "compiled": true, "compiled_code": "with \nhwm as\n    (\n        select max(hwm_ldts) hwm_max_ts from WILLIBALD_DATA_VAULT_WITH_DBT.DWH_00_META.META_HWM where object_name = 'WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_position'\n    ),\n    hwm_max AS\n    (\n        select COALESCE(hwm.hwm_max_ts,to_timestamp('01.01.1900','DD.MM.YYYY') ) hwm_max_ts from hwm\n    ),\nraw_data AS \n(\n\tSELECT \n\t\t  TRIM(replace(right(filenamedate,19),'.csv','')::STRING) as \"LDTS_SOURCE_RAW\"\n                , TRIM(filenamedate::STRING) as \"RSRC_SOURCE_RAW\"\n\t\t, TRIM(trim(reverse(substring(reverse(replace(filenamedate,'.csv','')), 17,8))::varchar)::STRING) as \"EDTS_IN_RAW\"\n                , TRIM(value::STRING) as \"RAW_DATA_RAW\"\n                , TRIM(metadata$file_row_number::STRING) as \"ROW_NUMBER_RAW\"\n\t\t, TRIM(value:c1::STRING) as \"BESTELLUNGID_RAW\"\n                , TRIM(value:c2::STRING) as \"POSID_RAW\"\n                , TRIM(value:c3::STRING) as \"PRODUKTID_RAW\"\n                , REPLACE(TRIM(value:c4::STRING) , ',', '') as \"SPEZLIEFERADRID_RAW\"\n                , REPLACE(TRIM(value:c5::STRING) , ',', '') as \"MENGE_RAW\"\n                , TRIM(value:c6::STRING) as \"PREIS_RAW\"\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_WEBSHOP_POSITION\n)\nSELECT \n\t\t  TRY_TO_TIMESTAMP(\"LDTS_SOURCE_RAW\", 'YYYYMMDD_HH24MISS') as \"LDTS_SOURCE\"\n                , \"RSRC_SOURCE_RAW\" as \"RSRC_SOURCE\" \n\t\t, TRY_TO_DATE(\"EDTS_IN_RAW\", 'YYYYMMDD') as \"EDTS_IN\"\n                , \"RAW_DATA_RAW\" as \"RAW_DATA\"\n                , TRY_TO_NUMBER(\"ROW_NUMBER_RAW\") as \"ROW_NUMBER\" \n\t\t, \"BESTELLUNGID_RAW\" as \"BESTELLUNGID\"\n                , \"POSID_RAW\" as \"POSID\"\n                , \"PRODUKTID_RAW\" as \"PRODUKTID\"\n                , TRY_TO_NUMBER(\"SPEZLIEFERADRID_RAW\") as \"SPEZLIEFERADRID\"\n                , TRY_TO_NUMBER(\"MENGE_RAW\") as \"MENGE\"\n                , \"PREIS_RAW\" as \"PREIS\" \n\t\t, TRY_TO_TIMESTAMP(\"LDTS_SOURCE_RAW\", 'YYYYMMDD_HH24MISS') IS NOT NULL OR \"LDTS_SOURCE_RAW\" IS NULL as \"IS_LDTS_SOURCE_TYPE_OK\" \n\t\t, TRY_TO_DATE(\"EDTS_IN_RAW\", 'YYYYMMDD') IS NOT NULL OR \"EDTS_IN_RAW\" IS NULL as \"IS_EDTS_IN_TYPE_OK\"\n                , TRY_TO_NUMBER(\"ROW_NUMBER_RAW\") IS NOT NULL OR \"ROW_NUMBER_RAW\" IS NULL as \"IS_ROW_NUMBER_TYPE_OK\" \n\t\t, TRY_TO_NUMBER(\"SPEZLIEFERADRID_RAW\") IS NOT NULL OR \"SPEZLIEFERADRID_RAW\" IS NULL as \"IS_SPEZLIEFERADRID_TYPE_OK\"\n                , TRY_TO_NUMBER(\"MENGE_RAW\") IS NOT NULL OR \"MENGE_RAW\" IS NULL as \"IS_MENGE_TYPE_OK\" \n\t\t, ROW_NUMBER() OVER (PARTITION BY ldts_source,bestellungid,PosID ORDER BY ldts_source,bestellungid,PosID) = 1 AS \"IS_DUB_CHECK_OK\" \n\t\t, COALESCE(\"BESTELLUNGID_RAW\", '') <> '' as \"IS_BESTELLUNGID_KEY_CHECK_OK\"\n                , COALESCE(\"POSID_RAW\", '') <> '' as \"IS_POSID_KEY_CHECK_OK\"\n\t\t \n\t\t, \"IS_LDTS_SOURCE_TYPE_OK\" AND \"IS_EDTS_IN_TYPE_OK\" AND \"IS_ROW_NUMBER_TYPE_OK\" AND \"IS_SPEZLIEFERADRID_TYPE_OK\" AND \"IS_MENGE_TYPE_OK\" AND \"IS_DUB_CHECK_OK\" AND \"IS_BESTELLUNGID_KEY_CHECK_OK\" AND \"IS_POSID_KEY_CHECK_OK\" is_check_ok\n\t\t \n\t\t,  TO_VARIANT(ARRAY_EXCEPT([REPLACE(IFF(NOT \"IS_LDTS_SOURCE_TYPE_OK\",'{\"ldts_source\":\"' || COALESCE(TO_VARCHAR(\"LDTS_SOURCE_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_EDTS_IN_TYPE_OK\",'{\"edts_in\":\"' || COALESCE(TO_VARCHAR(\"EDTS_IN_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_ROW_NUMBER_TYPE_OK\",'{\"row_number\":\"' || COALESCE(TO_VARCHAR(\"ROW_NUMBER_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_SPEZLIEFERADRID_TYPE_OK\",'{\"spezlieferadrid\":\"' || COALESCE(TO_VARCHAR(\"SPEZLIEFERADRID_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_MENGE_TYPE_OK\",'{\"menge\":\"' || COALESCE(TO_VARCHAR(\"MENGE_RAW\") ,'') || '\"}','') || IFF(NOT is_dub_check_ok, '{\"dub_check\": \"ldts_source,bestellungid,PosID\"}','') || IFF(NOT is_bestellungid_key_check_ok, '{\"key_check\": \"bestellungid\"}','') || IFF(NOT is_PosID_key_check_ok, '{\"key_check\": \"PosID\"}',''), '}{','},{')],[''])) chk_all_msg\n\t\tFROM raw_data \n\n\nCROSS JOIN hwm_max \nWHERE ldts_source > hwm_max.hwm_max_ts\n", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_position", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:04.449405Z", "completed_at": "2025-04-07T20:54:04.461906Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:04.462248Z", "completed_at": "2025-04-07T20:54:06.516762Z"}], "thread_id": "Thread-3", "execution_time": 2.0684590339660645, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-09a8-0003-ac120002f0d2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.load_webshop_lieferung", "compiled": true, "compiled_code": "with \nhwm as\n    (\n        select max(hwm_ldts) hwm_max_ts from WILLIBALD_DATA_VAULT_WITH_DBT.DWH_00_META.META_HWM where object_name = 'WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_lieferung'\n    ),\n    hwm_max AS\n    (\n        select COALESCE(hwm.hwm_max_ts,to_timestamp('01.01.1900','DD.MM.YYYY') ) hwm_max_ts from hwm\n    ),\nraw_data AS \n(\n\tSELECT \n\t\t  TRIM(replace(right(filenamedate,19),'.csv','')::STRING) as \"LDTS_SOURCE_RAW\"\n                , TRIM(filenamedate::STRING) as \"RSRC_SOURCE_RAW\"\n\t\t, TRIM(trim(reverse(substring(reverse(replace(filenamedate,'.csv','')), 17,8))::varchar)::STRING) as \"EDTS_IN_RAW\"\n                , TRIM(value::STRING) as \"RAW_DATA_RAW\"\n                , TRIM(metadata$file_row_number::STRING) as \"ROW_NUMBER_RAW\"\n\t\t, TRIM(value:c1::STRING) as \"BESTELLUNGID_RAW\"\n                , TRIM(value:c2::STRING) as \"POSID_RAW\"\n                , TRIM(value:c3::STRING) as \"LIEFERADRID_RAW\"\n                , TRIM(value:c4::STRING) as \"LIEFERDIENSTID_RAW\"\n                , TRIM(value:c5::STRING) as \"LIEFERDATUM_RAW\"\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_WEBSHOP_LIEFERUNG\n)\nSELECT \n\t\t  TRY_TO_TIMESTAMP(\"LDTS_SOURCE_RAW\", 'YYYYMMDD_HH24MISS') as \"LDTS_SOURCE\"\n                , \"RSRC_SOURCE_RAW\" as \"RSRC_SOURCE\" \n\t\t, TRY_TO_DATE(\"EDTS_IN_RAW\", 'YYYYMMDD') as \"EDTS_IN\"\n                , \"RAW_DATA_RAW\" as \"RAW_DATA\"\n                , TRY_TO_NUMBER(\"ROW_NUMBER_RAW\") as \"ROW_NUMBER\" \n\t\t, \"BESTELLUNGID_RAW\" as \"BESTELLUNGID\"\n                , \"POSID_RAW\" as \"POSID\"\n                , \"LIEFERADRID_RAW\" as \"LIEFERADRID\"\n                , \"LIEFERDIENSTID_RAW\" as \"LIEFERDIENSTID\"\n                , TRY_TO_DATE(\"LIEFERDATUM_RAW\", 'DD.MM.YYYY') as \"LIEFERDATUM\" \n\t\t, TRY_TO_TIMESTAMP(\"LDTS_SOURCE_RAW\", 'YYYYMMDD_HH24MISS') IS NOT NULL OR \"LDTS_SOURCE_RAW\" IS NULL as \"IS_LDTS_SOURCE_TYPE_OK\" \n\t\t, TRY_TO_DATE(\"EDTS_IN_RAW\", 'YYYYMMDD') IS NOT NULL OR \"EDTS_IN_RAW\" IS NULL as \"IS_EDTS_IN_TYPE_OK\"\n                , TRY_TO_NUMBER(\"ROW_NUMBER_RAW\") IS NOT NULL OR \"ROW_NUMBER_RAW\" IS NULL as \"IS_ROW_NUMBER_TYPE_OK\" \n\t\t, TRY_TO_DATE(\"LIEFERDATUM_RAW\", 'DD.MM.YYYY') IS NOT NULL OR \"LIEFERDATUM_RAW\" IS NULL as \"IS_LIEFERDATUM_TYPE_OK\" \n\t\t, ROW_NUMBER() OVER (PARTITION BY ldts_source,bestellungid,PosID ORDER BY ldts_source,bestellungid,PosID) = 1 AS \"IS_DUB_CHECK_OK\" \n\t\t, COALESCE(\"BESTELLUNGID_RAW\", '') <> '' as \"IS_BESTELLUNGID_KEY_CHECK_OK\"\n                , COALESCE(\"POSID_RAW\", '') <> '' as \"IS_POSID_KEY_CHECK_OK\"\n\t\t \n\t\t, \"IS_LDTS_SOURCE_TYPE_OK\" AND \"IS_EDTS_IN_TYPE_OK\" AND \"IS_ROW_NUMBER_TYPE_OK\" AND \"IS_LIEFERDATUM_TYPE_OK\" AND \"IS_DUB_CHECK_OK\" AND \"IS_BESTELLUNGID_KEY_CHECK_OK\" AND \"IS_POSID_KEY_CHECK_OK\" is_check_ok\n\t\t \n\t\t,  TO_VARIANT(ARRAY_EXCEPT([REPLACE(IFF(NOT \"IS_LDTS_SOURCE_TYPE_OK\",'{\"ldts_source\":\"' || COALESCE(TO_VARCHAR(\"LDTS_SOURCE_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_EDTS_IN_TYPE_OK\",'{\"edts_in\":\"' || COALESCE(TO_VARCHAR(\"EDTS_IN_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_ROW_NUMBER_TYPE_OK\",'{\"row_number\":\"' || COALESCE(TO_VARCHAR(\"ROW_NUMBER_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_LIEFERDATUM_TYPE_OK\",'{\"lieferdatum\":\"' || COALESCE(TO_VARCHAR(\"LIEFERDATUM_RAW\") ,'') || '\"}','') || IFF(NOT is_dub_check_ok, '{\"dub_check\": \"ldts_source,bestellungid,PosID\"}','') || IFF(NOT is_bestellungid_key_check_ok, '{\"key_check\": \"bestellungid\"}','') || IFF(NOT is_PosID_key_check_ok, '{\"key_check\": \"PosID\"}',''), '}{','},{')],[''])) chk_all_msg\n\t\tFROM raw_data \n\n\nCROSS JOIN hwm_max \nWHERE ldts_source > hwm_max.hwm_max_ts\n", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_lieferung", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:04.711225Z", "completed_at": "2025-04-07T20:54:04.723522Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:04.723798Z", "completed_at": "2025-04-07T20:54:06.540208Z"}], "thread_id": "Thread-2", "execution_time": 1.8298308849334717, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-0979-0003-ac1200030146"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.load_webshop_produkt", "compiled": true, "compiled_code": "with \nhwm as\n    (\n        select max(hwm_ldts) hwm_max_ts from WILLIBALD_DATA_VAULT_WITH_DBT.DWH_00_META.META_HWM where object_name = 'WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_produkt'\n    ),\n    hwm_max AS\n    (\n        select COALESCE(hwm.hwm_max_ts,to_timestamp('01.01.1900','DD.MM.YYYY') ) hwm_max_ts from hwm\n    ),\nraw_data AS \n(\n\tSELECT \n\t\t  TRIM(replace(right(filenamedate,19),'.csv','')::STRING) as \"LDTS_SOURCE_RAW\"\n                , TRIM(filenamedate::STRING) as \"RSRC_SOURCE_RAW\"\n\t\t, TRIM(trim(reverse(substring(reverse(replace(filenamedate,'.csv','')), 17,8))::varchar)::STRING) as \"EDTS_IN_RAW\"\n                , TRIM(value::STRING) as \"RAW_DATA_RAW\"\n                , TRIM(metadata$file_row_number::STRING) as \"ROW_NUMBER_RAW\"\n\t\t, TRIM(value:c1::STRING) as \"PRODUKTID_RAW\"\n                , TRIM(value:c2::STRING) as \"KATID_RAW\"\n                , TRIM(value:c3::STRING) as \"BEZEICHNUNG_RAW\"\n                , TRIM(value:c4::STRING) as \"UMFANG_RAW\"\n                , REPLACE(TRIM(value:c5::STRING) , ',', '') as \"TYP_RAW\"\n                , REPLACE(TRIM(value:c6::STRING) , ',', '.') as \"PREIS_RAW\"\n                , TRIM(value:c7::STRING) as \"PFLANZORT_RAW\"\n                , TRIM(value:c8::STRING) as \"PFLANZABSTAND_RAW\"\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_WEBSHOP_PRODUKT\n)\nSELECT \n\t\t  TRY_TO_TIMESTAMP(\"LDTS_SOURCE_RAW\", 'YYYYMMDD_HH24MISS') as \"LDTS_SOURCE\"\n                , \"RSRC_SOURCE_RAW\" as \"RSRC_SOURCE\" \n\t\t, TRY_TO_DATE(\"EDTS_IN_RAW\", 'YYYYMMDD') as \"EDTS_IN\"\n                , \"RAW_DATA_RAW\" as \"RAW_DATA\"\n                , TRY_TO_NUMBER(\"ROW_NUMBER_RAW\") as \"ROW_NUMBER\" \n\t\t, \"PRODUKTID_RAW\" as \"PRODUKTID\"\n                , \"KATID_RAW\" as \"KATID\"\n                , \"BEZEICHNUNG_RAW\" as \"BEZEICHNUNG\"\n                , \"UMFANG_RAW\" as \"UMFANG\"\n                , TRY_TO_NUMBER(\"TYP_RAW\") as \"TYP\"\n                , TRY_TO_NUMBER(\"PREIS_RAW\", 28,10) as \"PREIS\"\n                , \"PFLANZORT_RAW\" as \"PFLANZORT\"\n                , \"PFLANZABSTAND_RAW\" as \"PFLANZABSTAND\" \n\t\t, TRY_TO_TIMESTAMP(\"LDTS_SOURCE_RAW\", 'YYYYMMDD_HH24MISS') IS NOT NULL OR \"LDTS_SOURCE_RAW\" IS NULL as \"IS_LDTS_SOURCE_TYPE_OK\" \n\t\t, TRY_TO_DATE(\"EDTS_IN_RAW\", 'YYYYMMDD') IS NOT NULL OR \"EDTS_IN_RAW\" IS NULL as \"IS_EDTS_IN_TYPE_OK\"\n                , TRY_TO_NUMBER(\"ROW_NUMBER_RAW\") IS NOT NULL OR \"ROW_NUMBER_RAW\" IS NULL as \"IS_ROW_NUMBER_TYPE_OK\" \n\t\t, TRY_TO_NUMBER(\"TYP_RAW\") IS NOT NULL OR \"TYP_RAW\" IS NULL as \"IS_TYP_TYPE_OK\"\n                , TRY_TO_NUMBER(\"PREIS_RAW\", 28,10) IS NOT NULL OR \"PREIS_RAW\" IS NULL as \"IS_PREIS_TYPE_OK\" \n\t\t, ROW_NUMBER() OVER (PARTITION BY ldts_source,produktid ORDER BY ldts_source,produktid) = 1 AS \"IS_DUB_CHECK_OK\" \n\t\t, COALESCE(\"PRODUKTID_RAW\", '') <> '' as \"IS_PRODUKTID_KEY_CHECK_OK\"\n\t\t \n\t\t, \"IS_LDTS_SOURCE_TYPE_OK\" AND \"IS_EDTS_IN_TYPE_OK\" AND \"IS_ROW_NUMBER_TYPE_OK\" AND \"IS_TYP_TYPE_OK\" AND \"IS_PREIS_TYPE_OK\" AND \"IS_DUB_CHECK_OK\" AND \"IS_PRODUKTID_KEY_CHECK_OK\" is_check_ok\n\t\t \n\t\t,  TO_VARIANT(ARRAY_EXCEPT([REPLACE(IFF(NOT \"IS_LDTS_SOURCE_TYPE_OK\",'{\"ldts_source\":\"' || COALESCE(TO_VARCHAR(\"LDTS_SOURCE_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_EDTS_IN_TYPE_OK\",'{\"edts_in\":\"' || COALESCE(TO_VARCHAR(\"EDTS_IN_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_ROW_NUMBER_TYPE_OK\",'{\"row_number\":\"' || COALESCE(TO_VARCHAR(\"ROW_NUMBER_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_TYP_TYPE_OK\",'{\"typ\":\"' || COALESCE(TO_VARCHAR(\"TYP_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_PREIS_TYPE_OK\",'{\"preis\":\"' || COALESCE(TO_VARCHAR(\"PREIS_RAW\") ,'') || '\"}','') || IFF(NOT is_dub_check_ok, '{\"dub_check\": \"ldts_source,produktid\"}','') || IFF(NOT is_produktid_key_check_ok, '{\"key_check\": \"produktid\"}',''), '}{','},{')],[''])) chk_all_msg\n\t\tFROM raw_data \n\n\nCROSS JOIN hwm_max \nWHERE ldts_source > hwm_max.hwm_max_ts\n", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_produkt", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:04.818576Z", "completed_at": "2025-04-07T20:54:04.828965Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:04.829256Z", "completed_at": "2025-04-07T20:54:06.807402Z"}], "thread_id": "Thread-1", "execution_time": 1.9899001121520996, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-09a8-0003-ac120002f0d6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.load_webshop_produktkategorie", "compiled": true, "compiled_code": "with \nhwm as\n    (\n        select max(hwm_ldts) hwm_max_ts from WILLIBALD_DATA_VAULT_WITH_DBT.DWH_00_META.META_HWM where object_name = 'WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_produktkategorie'\n    ),\n    hwm_max AS\n    (\n        select COALESCE(hwm.hwm_max_ts,to_timestamp('01.01.1900','DD.MM.YYYY') ) hwm_max_ts from hwm\n    ),\nraw_data AS \n(\n\tSELECT \n\t\t  TRIM(replace(right(filenamedate,19),'.csv','')::STRING) as \"LDTS_SOURCE_RAW\"\n                , TRIM(filenamedate::STRING) as \"RSRC_SOURCE_RAW\"\n\t\t, TRIM(trim(reverse(substring(reverse(replace(filenamedate,'.csv','')), 17,8))::varchar)::STRING) as \"EDTS_IN_RAW\"\n                , TRIM(value::STRING) as \"RAW_DATA_RAW\"\n                , TRIM(metadata$file_row_number::STRING) as \"ROW_NUMBER_RAW\"\n\t\t, TRIM(value:c1::STRING) as \"KATID_RAW\"\n                , TRIM(value:c2::STRING) as \"OBERKATID_RAW\"\n                , TRIM(value:c3::STRING) as \"NAME_RAW\"\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_WEBSHOP_PRODUKTKATEGORIE\n)\nSELECT \n\t\t  TRY_TO_TIMESTAMP(\"LDTS_SOURCE_RAW\", 'YYYYMMDD_HH24MISS') as \"LDTS_SOURCE\"\n                , \"RSRC_SOURCE_RAW\" as \"RSRC_SOURCE\" \n\t\t, TRY_TO_DATE(\"EDTS_IN_RAW\", 'YYYYMMDD') as \"EDTS_IN\"\n                , \"RAW_DATA_RAW\" as \"RAW_DATA\"\n                , TRY_TO_NUMBER(\"ROW_NUMBER_RAW\") as \"ROW_NUMBER\" \n\t\t, \"KATID_RAW\" as \"KATID\"\n                , \"OBERKATID_RAW\" as \"OBERKATID\"\n                , \"NAME_RAW\" as \"NAME\" \n\t\t, TRY_TO_TIMESTAMP(\"LDTS_SOURCE_RAW\", 'YYYYMMDD_HH24MISS') IS NOT NULL OR \"LDTS_SOURCE_RAW\" IS NULL as \"IS_LDTS_SOURCE_TYPE_OK\" \n\t\t, TRY_TO_DATE(\"EDTS_IN_RAW\", 'YYYYMMDD') IS NOT NULL OR \"EDTS_IN_RAW\" IS NULL as \"IS_EDTS_IN_TYPE_OK\"\n                , TRY_TO_NUMBER(\"ROW_NUMBER_RAW\") IS NOT NULL OR \"ROW_NUMBER_RAW\" IS NULL as \"IS_ROW_NUMBER_TYPE_OK\" \n\t\t, ROW_NUMBER() OVER (PARTITION BY ldts_source,katid ORDER BY ldts_source,katid) = 1 AS \"IS_DUB_CHECK_OK\" \n\t\t, COALESCE(\"KATID_RAW\", '') <> '' as \"IS_KATID_KEY_CHECK_OK\"\n\t\t \n\t\t, \"IS_LDTS_SOURCE_TYPE_OK\" AND \"IS_EDTS_IN_TYPE_OK\" AND \"IS_ROW_NUMBER_TYPE_OK\" AND \"IS_DUB_CHECK_OK\" AND \"IS_KATID_KEY_CHECK_OK\" is_check_ok\n\t\t \n\t\t,  TO_VARIANT(ARRAY_EXCEPT([REPLACE(IFF(NOT \"IS_LDTS_SOURCE_TYPE_OK\",'{\"ldts_source\":\"' || COALESCE(TO_VARCHAR(\"LDTS_SOURCE_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_EDTS_IN_TYPE_OK\",'{\"edts_in\":\"' || COALESCE(TO_VARCHAR(\"EDTS_IN_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_ROW_NUMBER_TYPE_OK\",'{\"row_number\":\"' || COALESCE(TO_VARCHAR(\"ROW_NUMBER_RAW\") ,'') || '\"}','') || IFF(NOT is_dub_check_ok, '{\"dub_check\": \"ldts_source,katid\"}','') || IFF(NOT is_katid_key_check_ok, '{\"key_check\": \"katid\"}',''), '}{','},{')],[''])) chk_all_msg\n\t\tFROM raw_data \n\n\nCROSS JOIN hwm_max \nWHERE ldts_source > hwm_max.hwm_max_ts\n", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_produktkategorie", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:06.818866Z", "completed_at": "2025-04-07T20:54:06.824005Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:06.824386Z", "completed_at": "2025-04-07T20:54:07.380147Z"}], "thread_id": "Thread-1", "execution_time": 0.562701940536499, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-0851-0003-ac12000310d6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.pre_stg_error_roadshow", "compiled": true, "compiled_code": "select ROW_NUMBER, ldts_source as LDTS, rsrc_source as RSRC, raw_data, CHK_ALL_MSG\nfrom  WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_roadshow_bestellung\nwhere not is_check_ok", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.pre_stg_error_roadshow", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:06.527556Z", "completed_at": "2025-04-07T20:54:06.541198Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:06.541527Z", "completed_at": "2025-04-07T20:54:08.435614Z"}], "thread_id": "Thread-3", "execution_time": 1.9090158939361572, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-09a8-0003-ac120002f0f6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.load_webshop_vereinspartner", "compiled": true, "compiled_code": "with \nhwm as\n    (\n        select max(hwm_ldts) hwm_max_ts from WILLIBALD_DATA_VAULT_WITH_DBT.DWH_00_META.META_HWM where object_name = 'WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_vereinspartner'\n    ),\n    hwm_max AS\n    (\n        select COALESCE(hwm.hwm_max_ts,to_timestamp('01.01.1900','DD.MM.YYYY') ) hwm_max_ts from hwm\n    ),\nraw_data AS \n(\n\tSELECT \n\t\t  TRIM(replace(right(filenamedate,19),'.csv','')::STRING) as \"LDTS_SOURCE_RAW\"\n                , TRIM(filenamedate::STRING) as \"RSRC_SOURCE_RAW\"\n\t\t, TRIM(trim(reverse(substring(reverse(replace(filenamedate,'.csv','')), 17,8))::varchar)::STRING) as \"EDTS_IN_RAW\"\n                , TRIM(value::STRING) as \"RAW_DATA_RAW\"\n                , TRIM(metadata$file_row_number::STRING) as \"ROW_NUMBER_RAW\"\n\t\t, TRIM(value:c1::STRING) as \"VEREINSPARTNERID_RAW\"\n                , TRIM(value:c2::STRING) as \"KUNDEIDVEREIN_RAW\"\n                , REPLACE(TRIM(value:c3::STRING) , ',', '') as \"RABATT1_RAW\"\n                , REPLACE(TRIM(value:c4::STRING) , ',', '') as \"RABATT2_RAW\"\n                , REPLACE(TRIM(value:c5::STRING) , ',', '') as \"RABATT3_RAW\"\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_WEBSHOP_VEREINSPARTNER\n)\nSELECT \n\t\t  TRY_TO_TIMESTAMP(\"LDTS_SOURCE_RAW\", 'YYYYMMDD_HH24MISS') as \"LDTS_SOURCE\"\n                , \"RSRC_SOURCE_RAW\" as \"RSRC_SOURCE\" \n\t\t, TRY_TO_DATE(\"EDTS_IN_RAW\", 'YYYYMMDD') as \"EDTS_IN\"\n                , \"RAW_DATA_RAW\" as \"RAW_DATA\"\n                , TRY_TO_NUMBER(\"ROW_NUMBER_RAW\") as \"ROW_NUMBER\" \n\t\t, \"VEREINSPARTNERID_RAW\" as \"VEREINSPARTNERID\"\n                , \"KUNDEIDVEREIN_RAW\" as \"KUNDEIDVEREIN\"\n                , TRY_TO_NUMBER(\"RABATT1_RAW\") as \"RABATT1\"\n                , TRY_TO_NUMBER(\"RABATT2_RAW\") as \"RABATT2\"\n                , TRY_TO_NUMBER(\"RABATT3_RAW\") as \"RABATT3\" \n\t\t, TRY_TO_TIMESTAMP(\"LDTS_SOURCE_RAW\", 'YYYYMMDD_HH24MISS') IS NOT NULL OR \"LDTS_SOURCE_RAW\" IS NULL as \"IS_LDTS_SOURCE_TYPE_OK\" \n\t\t, TRY_TO_DATE(\"EDTS_IN_RAW\", 'YYYYMMDD') IS NOT NULL OR \"EDTS_IN_RAW\" IS NULL as \"IS_EDTS_IN_TYPE_OK\"\n                , TRY_TO_NUMBER(\"ROW_NUMBER_RAW\") IS NOT NULL OR \"ROW_NUMBER_RAW\" IS NULL as \"IS_ROW_NUMBER_TYPE_OK\" \n\t\t, TRY_TO_NUMBER(\"RABATT1_RAW\") IS NOT NULL OR \"RABATT1_RAW\" IS NULL as \"IS_RABATT1_TYPE_OK\"\n                , TRY_TO_NUMBER(\"RABATT2_RAW\") IS NOT NULL OR \"RABATT2_RAW\" IS NULL as \"IS_RABATT2_TYPE_OK\"\n                , TRY_TO_NUMBER(\"RABATT3_RAW\") IS NOT NULL OR \"RABATT3_RAW\" IS NULL as \"IS_RABATT3_TYPE_OK\" \n\t\t, ROW_NUMBER() OVER (PARTITION BY ldts_source,vereinspartnerid,kundeidverein ORDER BY ldts_source,vereinspartnerid,kundeidverein) = 1 AS \"IS_DUB_CHECK_OK\" \n\t\t, COALESCE(\"VEREINSPARTNERID_RAW\", '') <> '' as \"IS_VEREINSPARTNERID_KEY_CHECK_OK\"\n\t\t \n\t\t, \"IS_LDTS_SOURCE_TYPE_OK\" AND \"IS_EDTS_IN_TYPE_OK\" AND \"IS_ROW_NUMBER_TYPE_OK\" AND \"IS_RABATT1_TYPE_OK\" AND \"IS_RABATT2_TYPE_OK\" AND \"IS_RABATT3_TYPE_OK\" AND \"IS_DUB_CHECK_OK\" AND \"IS_VEREINSPARTNERID_KEY_CHECK_OK\" is_check_ok\n\t\t \n\t\t,  TO_VARIANT(ARRAY_EXCEPT([REPLACE(IFF(NOT \"IS_LDTS_SOURCE_TYPE_OK\",'{\"ldts_source\":\"' || COALESCE(TO_VARCHAR(\"LDTS_SOURCE_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_EDTS_IN_TYPE_OK\",'{\"edts_in\":\"' || COALESCE(TO_VARCHAR(\"EDTS_IN_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_ROW_NUMBER_TYPE_OK\",'{\"row_number\":\"' || COALESCE(TO_VARCHAR(\"ROW_NUMBER_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_RABATT1_TYPE_OK\",'{\"rabatt1\":\"' || COALESCE(TO_VARCHAR(\"RABATT1_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_RABATT2_TYPE_OK\",'{\"rabatt2\":\"' || COALESCE(TO_VARCHAR(\"RABATT2_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_RABATT3_TYPE_OK\",'{\"rabatt3\":\"' || COALESCE(TO_VARCHAR(\"RABATT3_RAW\") ,'') || '\"}','') || IFF(NOT is_dub_check_ok, '{\"dub_check\": \"ldts_source,vereinspartnerid,kundeidverein\"}','') || IFF(NOT is_vereinspartnerid_key_check_ok, '{\"key_check\": \"vereinspartnerid\"}',''), '}{','},{')],[''])) chk_all_msg\n\t\tFROM raw_data \n\n\nCROSS JOIN hwm_max \nWHERE ldts_source > hwm_max.hwm_max_ts\n", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_vereinspartner", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:06.502591Z", "completed_at": "2025-04-07T20:54:06.518087Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:06.518597Z", "completed_at": "2025-04-07T20:54:08.469724Z"}], "thread_id": "Thread-4", "execution_time": 1.9684557914733887, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-09a8-0003-ac120002f0fa"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.load_webshop_ref_produkt_typ", "compiled": true, "compiled_code": "\nwith\nhwm as\n    (\n        select max(hwm_ldts) hwm_max_ts from WILLIBALD_DATA_VAULT_WITH_DBT.DWH_00_META.META_HWM where object_name = 'WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_ref_produkt_typ'\n    ),\n    hwm_max AS\n    (\n        select COALESCE(hwm.hwm_max_ts,to_timestamp('01.01.1900','DD.MM.YYYY') ) hwm_max_ts from hwm\n    ),\nraw_data AS \n(\n\tSELECT \n\t\t   TRIM(replace(right(filenamedate, 19),'.csv','')::VARCHAR) AS ldts_raw\n\t\t , TRIM(reverse(substring(reverse(replace(Filenamedate,'.csv','')), 17,8))::VARCHAR) AS business_date_raw\n\t\t , TRIM(filenamedate::VARCHAR) AS rsrc_raw\n\t\t , value AS json_data_raw\n\t\t , TRIM(METADATA$FILE_ROW_NUMBER::VARCHAR) AS external_table_row_number_raw\n\t\t , TRIM(value:c1::VARCHAR) AS typ_raw\n\t\t , TRIM(value:c2::VARCHAR) AS bezeichnung_raw\n FROM WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_WEBSHOP_REF_PRODUKT_TYP\n)\nSELECT \n\t\t   TRY_TO_TIMESTAMP(ldts_raw ,'YYYYMMDD_HH24MISS') as \"LDTS_SOURCE\"\n\t\t , TRY_TO_DATE(business_date_raw ,'YYYYMMDD') as edts_in\n\t\t , rsrc_raw as  \"RSRC_SOURCE\"\n\t\t , json_data_raw as raw_data\n\t\t , external_table_row_number_raw as row_number\n\t\t , typ_raw as typ\n\t\t , bezeichnung_raw as bezeichnung\n\t\t, row_number() over (partition by \"LDTS_SOURCE\", typ_raw order by typ_raw desc) = 1 as is_dub_check_ok\n\t\t, coalesce(typ_raw, '') <>'' as is_key_check_ok\n\t\t,  is_dub_check_ok and  is_key_check_ok as is_check_ok\n \t\t,  TO_VARIANT(ARRAY_EXCEPT([REPLACE(IFF(NOT is_dub_check_ok, '{\"dub_check\": \"ldts_source, typ\"}','') || IFF(NOT is_key_check_ok, '{\"key_check\": \"typ\"}',''), '}{','},{')],[''])) chk_all_msg\n\n FROM raw_data\n\n\nCROSS JOIN hwm_max \nWHERE ldts_source > hwm_max.hwm_max_ts", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_ref_produkt_typ", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:06.547433Z", "completed_at": "2025-04-07T20:54:06.555758Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:06.556005Z", "completed_at": "2025-04-07T20:54:08.546899Z"}], "thread_id": "Thread-2", "execution_time": 2.000124931335449, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-09a8-0003-ac120002f0f2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.load_webshop_wohnort", "compiled": true, "compiled_code": "with \nhwm as\n    (\n        select max(hwm_ldts) hwm_max_ts from WILLIBALD_DATA_VAULT_WITH_DBT.DWH_00_META.META_HWM where object_name = 'WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_wohnort'\n    ),\n    hwm_max AS\n    (\n        select COALESCE(hwm.hwm_max_ts,to_timestamp('01.01.1900','DD.MM.YYYY') ) hwm_max_ts from hwm\n    ),\nraw_data AS \n(\n\tSELECT \n\t\t  TRIM(replace(right(filenamedate,19),'.csv','')::STRING) as \"LDTS_SOURCE_RAW\"\n                , TRIM(filenamedate::STRING) as \"RSRC_SOURCE_RAW\"\n\t\t, TRIM(trim(reverse(substring(reverse(replace(filenamedate,'.csv','')), 17,8))::varchar)::STRING) as \"EDTS_IN_RAW\"\n                , TRIM(value::STRING) as \"RAW_DATA_RAW\"\n                , TRIM(metadata$file_row_number::STRING) as \"ROW_NUMBER_RAW\"\n\t\t, TRIM(value:c1::STRING) as \"KUNDEID_RAW\"\n                , TRIM(value:c2::STRING) as \"VON_RAW\"\n                , TRIM(value:c3::STRING) as \"BIS_RAW\"\n                , TRIM(value:c4::STRING) as \"STRASSE_RAW\"\n                , TRIM(value:c5::STRING) as \"HAUSNUMMER_RAW\"\n                , TRIM(value:c6::STRING) as \"ADRESSZUSATZ_RAW\"\n                , TRIM(value:c7::STRING) as \"PLZ_RAW\"\n                , TRIM(value:c8::STRING) as \"ORT_RAW\"\n                , TRIM(value:c9::STRING) as \"LAND_RAW\"\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.DWH_01_EXT.EXT_WEBSHOP_WOHNORT\n)\nSELECT \n\t\t  TRY_TO_TIMESTAMP(\"LDTS_SOURCE_RAW\", 'YYYYMMDD_HH24MISS') as \"LDTS_SOURCE\"\n                , \"RSRC_SOURCE_RAW\" as \"RSRC_SOURCE\" \n\t\t, TRY_TO_DATE(\"EDTS_IN_RAW\", 'YYYYMMDD') as \"EDTS_IN\"\n                , \"RAW_DATA_RAW\" as \"RAW_DATA\"\n                , TRY_TO_NUMBER(\"ROW_NUMBER_RAW\") as \"ROW_NUMBER\" \n\t\t, \"KUNDEID_RAW\" as \"KUNDEID\"\n                , TRY_TO_DATE(\"VON_RAW\", 'DD.MM.YYYY') as \"VON\"\n                , TRY_TO_DATE(\"BIS_RAW\", 'DD.MM.YYYY') as \"BIS\"\n                , \"STRASSE_RAW\" as \"STRASSE\"\n                , \"HAUSNUMMER_RAW\" as \"HAUSNUMMER\"\n                , \"ADRESSZUSATZ_RAW\" as \"ADRESSZUSATZ\"\n                , \"PLZ_RAW\" as \"PLZ\"\n                , \"ORT_RAW\" as \"ORT\"\n                , \"LAND_RAW\" as \"LAND\" \n\t\t, TRY_TO_TIMESTAMP(\"LDTS_SOURCE_RAW\", 'YYYYMMDD_HH24MISS') IS NOT NULL OR \"LDTS_SOURCE_RAW\" IS NULL as \"IS_LDTS_SOURCE_TYPE_OK\" \n\t\t, TRY_TO_DATE(\"EDTS_IN_RAW\", 'YYYYMMDD') IS NOT NULL OR \"EDTS_IN_RAW\" IS NULL as \"IS_EDTS_IN_TYPE_OK\"\n                , TRY_TO_NUMBER(\"ROW_NUMBER_RAW\") IS NOT NULL OR \"ROW_NUMBER_RAW\" IS NULL as \"IS_ROW_NUMBER_TYPE_OK\" \n\t\t, TRY_TO_DATE(\"VON_RAW\", 'DD.MM.YYYY') IS NOT NULL OR \"VON_RAW\" IS NULL as \"IS_VON_TYPE_OK\"\n                , TRY_TO_DATE(\"BIS_RAW\", 'DD.MM.YYYY') IS NOT NULL OR \"BIS_RAW\" IS NULL as \"IS_BIS_TYPE_OK\" \n\t\t, ROW_NUMBER() OVER (PARTITION BY ldts_source,kundeid,von ORDER BY ldts_source,kundeid,von) = 1 AS \"IS_DUB_CHECK_OK\" \n\t\t, COALESCE(\"KUNDEID_RAW\", '') <> '' as \"IS_KUNDEID_KEY_CHECK_OK\"\n                , COALESCE(\"VON_RAW\", '') <> '' as \"IS_VON_KEY_CHECK_OK\"\n\t\t \n\t\t, \"IS_LDTS_SOURCE_TYPE_OK\" AND \"IS_EDTS_IN_TYPE_OK\" AND \"IS_ROW_NUMBER_TYPE_OK\" AND \"IS_VON_TYPE_OK\" AND \"IS_BIS_TYPE_OK\" AND \"IS_DUB_CHECK_OK\" AND \"IS_KUNDEID_KEY_CHECK_OK\" AND \"IS_VON_KEY_CHECK_OK\" is_check_ok\n\t\t \n\t\t,  TO_VARIANT(ARRAY_EXCEPT([REPLACE(IFF(NOT \"IS_LDTS_SOURCE_TYPE_OK\",'{\"ldts_source\":\"' || COALESCE(TO_VARCHAR(\"LDTS_SOURCE_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_EDTS_IN_TYPE_OK\",'{\"edts_in\":\"' || COALESCE(TO_VARCHAR(\"EDTS_IN_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_ROW_NUMBER_TYPE_OK\",'{\"row_number\":\"' || COALESCE(TO_VARCHAR(\"ROW_NUMBER_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_VON_TYPE_OK\",'{\"von\":\"' || COALESCE(TO_VARCHAR(\"VON_RAW\") ,'') || '\"}','') || IFF(NOT \"IS_BIS_TYPE_OK\",'{\"bis\":\"' || COALESCE(TO_VARCHAR(\"BIS_RAW\") ,'') || '\"}','') || IFF(NOT is_dub_check_ok, '{\"dub_check\": \"ldts_source,kundeid,von\"}','') || IFF(NOT is_kundeid_key_check_ok, '{\"key_check\": \"kundeid\"}','') || IFF(NOT is_von_key_check_ok, '{\"key_check\": \"von\"}',''), '}{','},{')],[''])) chk_all_msg\n\t\tFROM raw_data \n\n\nCROSS JOIN hwm_max \nWHERE ldts_source > hwm_max.hwm_max_ts\n", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_wohnort", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:08.441397Z", "completed_at": "2025-04-07T20:54:08.449950Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:08.450482Z", "completed_at": "2025-04-07T20:54:08.961079Z"}], "thread_id": "Thread-3", "execution_time": 0.52103590965271, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-09a8-0003-ac120002f10a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.pre_stg_error_misc", "compiled": true, "compiled_code": "select ROW_NUMBER, ldts_source as LDTS, rsrc_source as RSRC, raw_data, CHK_ALL_MSG, true as IS_CHECK_OK\nfrom  WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_misc_kategorie_termintreue\nwhere not is_check_ok", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.pre_stg_error_misc", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:07.387479Z", "completed_at": "2025-04-07T20:54:07.849736Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:07.849901Z", "completed_at": "2025-04-07T20:54:08.987387Z"}], "thread_id": "Thread-1", "execution_time": 1.6007537841796875, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-09a8-0003-ac120002f102"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.stg_roadshow_bestellung", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\n\nsource_data AS (\n    SELECT\n\n    \n        \"LDTS_SOURCE\",\n        \"RSRC_SOURCE\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"BESTELLUNGID\",\n        \"PREIS\",\n        \"RABATT\",\n        \"KUNDEID\",\n        \"VEREINSPARTNERID\",\n        \"KAUFDATUM\",\n        \"KREDITKARTE\",\n        \"GUELTIGBIS\",\n        \"KKFIRMA\",\n        \"PRODUKTID\",\n        \"MENGE\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_PREIS_TYPE_OK\",\n        \"IS_RABATT_TYPE_OK\",\n        \"IS_KAUFDATUM_TYPE_OK\",\n        \"IS_MENGE_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_BESTELLUNGID_KEY_CHECK_OK\",\n        \"IS_PRODUKTID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\"\n\n  FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_roadshow_bestellung\n\n  ),\n\n\n\n\n\nldts_rsrc_data AS (\n\n  SELECT\n    \"LDTS_SOURCE\" AS ldts,\n    CAST( \"RSRC_SOURCE\" as STRING ) AS rsrc,\n      \n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"BESTELLUNGID\",\n        \"PREIS\",\n        \"RABATT\",\n        \"KUNDEID\",\n        \"VEREINSPARTNERID\",\n        \"KAUFDATUM\",\n        \"KREDITKARTE\",\n        \"GUELTIGBIS\",\n        \"KKFIRMA\",\n        \"PRODUKTID\",\n        \"MENGE\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_PREIS_TYPE_OK\",\n        \"IS_RABATT_TYPE_OK\",\n        \"IS_KAUFDATUM_TYPE_OK\",\n        \"IS_MENGE_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_BESTELLUNGID_KEY_CHECK_OK\",\n        \"IS_PRODUKTID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\"\n    \n\n  FROM source_data\n  \n\n),\n\nderived_columns AS (SELECT\n  \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"BESTELLUNGID\",\n        \"PREIS\",\n        \"RABATT\",\n        \"KUNDEID\",\n        \"VEREINSPARTNERID\",\n        \"KAUFDATUM\",\n        \"KREDITKARTE\",\n        \"GUELTIGBIS\",\n        \"KKFIRMA\",\n        \"PRODUKTID\",\n        \"MENGE\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_PREIS_TYPE_OK\",\n        \"IS_RABATT_TYPE_OK\",\n        \"IS_KAUFDATUM_TYPE_OK\",\n        \"IS_MENGE_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_BESTELLUNGID_KEY_CHECK_OK\",\n        \"IS_PRODUKTID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n  \n  \"VEREINSPARTNERID\" AS \"ASSOCIATIONPARTNER_BK\",\n    \"KUNDEID\" AS \"CUSTOMER_BK\",\n    \"BESTELLUNGID\" AS \"ORDER_BK\",\n    CAST(BESTELLUNGID ||'_'|| PRODUKTID ||'_'|| CAST(ROW_NUMBER() OVER (PARTITION BY LDTS, BESTELLUNGID, PRODUKTID  ORDER BY MENGE, PREIS) AS VARCHAR) AS VARCHAR) AS \"POSITION_BK\",\n    \"PRODUKTID\" AS \"PRODUCT_BK\",\n    TO_TIMESTAMP(DATEADD(HOUR, 1, SYSDATE())) AS \"CDTS\",\n    \"EDTS_IN\" AS \"EDTS\"\n\n  FROM ldts_rsrc_data\n),\n\n\n\n\nhashed_columns AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"BESTELLUNGID\",\n        \"PREIS\",\n        \"RABATT\",\n        \"KUNDEID\",\n        \"VEREINSPARTNERID\",\n        \"KAUFDATUM\",\n        \"KREDITKARTE\",\n        \"GUELTIGBIS\",\n        \"KKFIRMA\",\n        \"PRODUKTID\",\n        \"MENGE\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_PREIS_TYPE_OK\",\n        \"IS_RABATT_TYPE_OK\",\n        \"IS_KAUFDATUM_TYPE_OK\",\n        \"IS_MENGE_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_BESTELLUNGID_KEY_CHECK_OK\",\n        \"IS_PRODUKTID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"ASSOCIATIONPARTNER_BK\",\n        \"CUSTOMER_BK\",\n        \"ORDER_BK\",\n        \"POSITION_BK\",\n        \"PRODUCT_BK\",\n        \"CDTS\",\n        \"EDTS\",\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"VEREINSPARTNERID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^'))), '00000000000000000000000000000000') AS HK_ASSOCIATIONPARTNER_H,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"KUNDEID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^'))), '00000000000000000000000000000000') AS HK_CUSTOMER_H,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"BESTELLUNGID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^'))), '00000000000000000000000000000000') AS HK_ORDER_H,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"BESTELLUNGID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"PRODUKTID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^||^^'))), '00000000000000000000000000000000') AS HK_POSITION_H,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"PRODUKTID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^'))), '00000000000000000000000000000000') AS HK_PRODUCT_H,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"ORDER_BK\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"ASSOCIATIONPARTNER_BK\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^||^^'))), '00000000000000000000000000000000') AS HK_ORDER_ASSOCIATIONPARTNER_L,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"ORDER_BK\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"CUSTOMER_BK\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^||^^'))), '00000000000000000000000000000000') AS HK_ORDER_CUSTOMER_L,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"POSITION_BK\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"ORDER_BK\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^||^^'))), '00000000000000000000000000000000') AS HK_ORDER_POSITION_L,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"PRODUCT_BK\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"POSITION_BK\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^||^^'))), '00000000000000000000000000000000') AS HK_POSITION_PRODUCT_L,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"BESTELLUNGID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"GUELTIGBIS\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"KAUFDATUM\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"KKFIRMA\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"KREDITKARTE\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"MENGE\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"PREIS\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"PRODUKTID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"RABATT\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        )), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^||^^||^^||^^||^^||^^||^^||^^||^^'))), '00000000000000000000000000000000') AS HD_POSITION_RS_S\n\n    FROM derived_columns\n  \n),\n\nunknown_values AS (\n  \n    SELECT\n\n    TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'SYSTEM' as rsrc,\n    \n        TO_DATE('0001-01-01', 'YYYY-mm-dd' ) as \"EDTS_IN\",\n        '(unknown)' AS RAW_DATA,\n        0 AS ROW_NUMBER,\n        '(unknown)' AS BESTELLUNGID,\n        0 AS PREIS,\n        0 AS RABATT,\n        '(unknown)' AS KUNDEID,\n        '(unknown)' AS VEREINSPARTNERID,\n        TO_DATE('0001-01-01', 'YYYY-mm-dd' ) as \"KAUFDATUM\",\n        '(unknown)' AS KREDITKARTE,\n        '(unknown)' AS GUELTIGBIS,\n        '(unknown)' AS KKFIRMA,\n        '(unknown)' AS PRODUKTID,\n        0 AS MENGE,\n        CAST('FALSE' AS BOOLEAN) AS IS_LDTS_SOURCE_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_EDTS_IN_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_ROW_NUMBER_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_PREIS_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_RABATT_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_KAUFDATUM_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_MENGE_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_DUB_CHECK_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_BESTELLUNGID_KEY_CHECK_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_PRODUKTID_KEY_CHECK_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_CHECK_OK,\n        NULL AS CHK_ALL_MSG\n     ,\n    \n        '(unknown)' AS ASSOCIATIONPARTNER_BK,\n        TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') AS CDTS,\n        '(unknown)' AS CUSTOMER_BK,\n        TO_DATE('0001-01-01', 'YYYY-mm-dd' ) as \"EDTS\",\n        '(unknown)' AS ORDER_BK,\n        '(unknown)' AS POSITION_BK,\n        '(unknown)' AS PRODUCT_BK,\n        CAST('00000000000000000000000000000000' as STRING) as HK_ASSOCIATIONPARTNER_H,\n        CAST('00000000000000000000000000000000' as STRING) as HK_CUSTOMER_H,\n        CAST('00000000000000000000000000000000' as STRING) as HK_ORDER_H,\n        CAST('00000000000000000000000000000000' as STRING) as HK_POSITION_H,\n        CAST('00000000000000000000000000000000' as STRING) as HK_PRODUCT_H,\n        CAST('00000000000000000000000000000000' as STRING) as HK_ORDER_ASSOCIATIONPARTNER_L,\n        CAST('00000000000000000000000000000000' as STRING) as HK_ORDER_CUSTOMER_L,\n        CAST('00000000000000000000000000000000' as STRING) as HK_ORDER_POSITION_L,\n        CAST('00000000000000000000000000000000' as STRING) as HK_POSITION_PRODUCT_L,\n        CAST('00000000000000000000000000000000' as STRING) as HD_POSITION_RS_S\n),\n\n\nerror_values AS (\n\n    SELECT\n\n    TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'ERROR' as rsrc,\n    \n        TO_DATE('8888-12-31', 'YYYY-mm-dd' ) as \"EDTS_IN\",\n        '(error)' AS RAW_DATA,\n        -1 AS ROW_NUMBER\n     ,\n        '(error)' AS BESTELLUNGID,\n        -1 AS PREIS\n     ,\n        -1 AS RABATT\n     ,\n        '(error)' AS KUNDEID,\n        '(error)' AS VEREINSPARTNERID,\n        TO_DATE('8888-12-31', 'YYYY-mm-dd' ) as \"KAUFDATUM\",\n        '(error)' AS KREDITKARTE,\n        '(error)' AS GUELTIGBIS,\n        '(error)' AS KKFIRMA,\n        '(error)' AS PRODUKTID,\n        -1 AS MENGE\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_LDTS_SOURCE_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_EDTS_IN_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_ROW_NUMBER_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_PREIS_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_RABATT_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_KAUFDATUM_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_MENGE_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_DUB_CHECK_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_BESTELLUNGID_KEY_CHECK_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_PRODUKTID_KEY_CHECK_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_CHECK_OK\n     ,\n        NULL AS CHK_ALL_MSG\n      ,\n    \n        '(error)' AS ASSOCIATIONPARTNER_BK,\n        TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') AS CDTS,\n        '(error)' AS CUSTOMER_BK,\n        TO_DATE('8888-12-31', 'YYYY-mm-dd' ) as \"EDTS\",\n        '(error)' AS ORDER_BK,\n        '(error)' AS POSITION_BK,\n        '(error)' AS PRODUCT_BK,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_ASSOCIATIONPARTNER_H,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_CUSTOMER_H,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_ORDER_H,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_POSITION_H,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_PRODUCT_H,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_ORDER_ASSOCIATIONPARTNER_L,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_ORDER_CUSTOMER_L,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_ORDER_POSITION_L,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_POSITION_PRODUCT_L,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HD_POSITION_RS_S\n),\n\n\nghost_records AS (\n    SELECT * FROM unknown_values\n    UNION ALL\n    SELECT * FROM error_values\n),\ncolumns_to_select AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"BESTELLUNGID\",\n        \"PREIS\",\n        \"RABATT\",\n        \"KUNDEID\",\n        \"VEREINSPARTNERID\",\n        \"KAUFDATUM\",\n        \"KREDITKARTE\",\n        \"GUELTIGBIS\",\n        \"KKFIRMA\",\n        \"PRODUKTID\",\n        \"MENGE\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_PREIS_TYPE_OK\",\n        \"IS_RABATT_TYPE_OK\",\n        \"IS_KAUFDATUM_TYPE_OK\",\n        \"IS_MENGE_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_BESTELLUNGID_KEY_CHECK_OK\",\n        \"IS_PRODUKTID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"ASSOCIATIONPARTNER_BK\",\n        \"CUSTOMER_BK\",\n        \"ORDER_BK\",\n        \"POSITION_BK\",\n        \"PRODUCT_BK\",\n        \"CDTS\",\n        \"EDTS\",\n        \"HK_ASSOCIATIONPARTNER_H\",\n        \"HK_CUSTOMER_H\",\n        \"HK_ORDER_H\",\n        \"HK_POSITION_H\",\n        \"HK_PRODUCT_H\",\n        \"HK_ORDER_ASSOCIATIONPARTNER_L\",\n        \"HK_ORDER_CUSTOMER_L\",\n        \"HK_ORDER_POSITION_L\",\n        \"HK_POSITION_PRODUCT_L\",\n        \"HD_POSITION_RS_S\"\n\n    FROM hashed_columns\n\n  \n    UNION ALL\n    \n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"BESTELLUNGID\",\n        \"PREIS\",\n        \"RABATT\",\n        \"KUNDEID\",\n        \"VEREINSPARTNERID\",\n        \"KAUFDATUM\",\n        \"KREDITKARTE\",\n        \"GUELTIGBIS\",\n        \"KKFIRMA\",\n        \"PRODUKTID\",\n        \"MENGE\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_PREIS_TYPE_OK\",\n        \"IS_RABATT_TYPE_OK\",\n        \"IS_KAUFDATUM_TYPE_OK\",\n        \"IS_MENGE_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_BESTELLUNGID_KEY_CHECK_OK\",\n        \"IS_PRODUKTID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"ASSOCIATIONPARTNER_BK\",\n        \"CUSTOMER_BK\",\n        \"ORDER_BK\",\n        \"POSITION_BK\",\n        \"PRODUCT_BK\",\n        \"CDTS\",\n        \"EDTS\",\n        \"HK_ASSOCIATIONPARTNER_H\",\n        \"HK_CUSTOMER_H\",\n        \"HK_ORDER_H\",\n        \"HK_POSITION_H\",\n        \"HK_PRODUCT_H\",\n        \"HK_ORDER_ASSOCIATIONPARTNER_L\",\n        \"HK_ORDER_CUSTOMER_L\",\n        \"HK_ORDER_POSITION_L\",\n        \"HK_POSITION_PRODUCT_L\",\n        \"HD_POSITION_RS_S\"\n\n    FROM ghost_records\n  \n)\n\nSELECT * FROM columns_to_select\nwhere is_check_ok or rsrc ='SYSTEM'", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_roadshow_bestellung", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:08.550683Z", "completed_at": "2025-04-07T20:54:08.561473Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:08.562000Z", "completed_at": "2025-04-07T20:54:09.026078Z"}], "thread_id": "Thread-2", "execution_time": 0.4763200283050537, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-09a8-0003-ac120002f10e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.dim_delivery_date", "compiled": true, "compiled_code": "SELECT \ndate_day AS delivery_date\n, CAST(year_actual AS char(4))||'-'||CAST(week_of_year AS char(2)) AS delivery_week\n, month_name AS delivery_month \n, year_actual AS delivery_year\nFROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_06_bv.date_bs\nWHERE date_day BETWEEN to_date('03/01/2022', 'mm/dd/yyyy') AND to_date('04/01/2022', 'mm/dd/yyyy')", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_07_inmt.dim_delivery_date", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:08.977078Z", "completed_at": "2025-04-07T20:54:08.987671Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:08.988105Z", "completed_at": "2025-04-07T20:54:09.391969Z"}], "thread_id": "Thread-3", "execution_time": 0.42247605323791504, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-0979-0003-ac120003017a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.dim_reporting_date", "compiled": true, "compiled_code": "SELECT \ndate_day AS reporting_date\n, month_name AS reporting_month \n, year_actual AS reporting_year\n, CAST(year_actual AS char(4))||'-'||CAST(week_of_year AS char(2)) AS reporting_week\nFROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_06_bv.date_bs\nWHERE date_day BETWEEN to_date('03/01/2022', 'mm/dd/yyyy') AND to_date('04/01/2022', 'mm/dd/yyyy')", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_07_inmt.dim_reporting_date", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:09.027917Z", "completed_at": "2025-04-07T20:54:09.030932Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:09.031120Z", "completed_at": "2025-04-07T20:54:09.417795Z"}], "thread_id": "Thread-2", "execution_time": 0.39037489891052246, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-0979-0003-ac120003017e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.dim_sales_date", "compiled": true, "compiled_code": "SELECT \ndate_day AS sales_date\n, month_name AS sales_month \n, year_actual AS sales_year\n, CAST(year_actual AS char(4))||'-'||CAST(week_of_year AS char(2)) AS sales_week\nFROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_06_bv.date_bs\nWHERE date_day BETWEEN to_date('03/01/2022', 'mm/dd/yyyy') AND to_date('04/01/2022', 'mm/dd/yyyy')", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_07_inmt.dim_sales_date", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:08.996715Z", "completed_at": "2025-04-07T20:54:08.999843Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:09.000109Z", "completed_at": "2025-04-07T20:54:09.433091Z"}], "thread_id": "Thread-1", "execution_time": 0.43726372718811035, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-09a8-0003-ac120002f116"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.dim_requested_date", "compiled": true, "compiled_code": "SELECT \ndate_day AS requested_date\n, month_name AS requested_month \n, year_actual AS requested_year\n, CAST(year_actual AS char(4))||'-'||CAST(week_of_year AS char(2)) AS requested_week\nFROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_06_bv.date_bs\nWHERE date_day BETWEEN to_date('03/01/2022', 'mm/dd/yyyy') AND to_date('04/01/2022', 'mm/dd/yyyy')", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_07_inmt.dim_requested_date", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:08.473086Z", "completed_at": "2025-04-07T20:54:08.775560Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:08.775830Z", "completed_at": "2025-04-07T20:54:09.532084Z"}], "thread_id": "Thread-4", "execution_time": 1.059722900390625, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-09a8-0003-ac120002f112"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.stg_misc_kategorie_termintreue", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\n\nsource_data AS (\n    SELECT\n\n    \n        \"LDTS_SOURCE\",\n        \"RSRC_SOURCE\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"ANZAHL_TAGE_VON\",\n        \"ANZAHL_TAGE_BIS\",\n        \"BEZEICHNUNG\",\n        \"BEWERTUNG\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_BEWERTUNG_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\"\n\n  FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_misc_kategorie_termintreue\n\n  ),\n\n\n\n\n\nldts_rsrc_data AS (\n\n  SELECT\n    \"LDTS_SOURCE\" AS ldts,\n    CAST( \"RSRC_SOURCE\" as STRING ) AS rsrc,\n      \n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"ANZAHL_TAGE_VON\",\n        \"ANZAHL_TAGE_BIS\",\n        \"BEZEICHNUNG\",\n        \"BEWERTUNG\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_BEWERTUNG_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\"\n    \n\n  FROM source_data\n  \n\n),\n\nderived_columns AS (SELECT\n  \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"ANZAHL_TAGE_VON\",\n        \"ANZAHL_TAGE_BIS\",\n        \"BEZEICHNUNG\",\n        \"BEWERTUNG\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_BEWERTUNG_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n  \n  \"BEWERTUNG\" AS \"CATEGORY_DELIVERYADHERENCE_NK\",\n    \"ANZAHL_TAGE_VON\" AS \"COUNT_DAYS_FROM\",\n    \"ANZAHL_TAGE_BIS\" AS \"COUNT_DAYS_TO\",\n    \"BEZEICHNUNG\" AS \"NAME\",\n    TO_TIMESTAMP(DATEADD(HOUR, 1, SYSDATE())) AS \"CDTS\",\n    \"EDTS_IN\" AS \"EDTS\"\n\n  FROM ldts_rsrc_data\n),\n\n\n\n\nhashed_columns AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"ANZAHL_TAGE_VON\",\n        \"ANZAHL_TAGE_BIS\",\n        \"BEZEICHNUNG\",\n        \"BEWERTUNG\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_BEWERTUNG_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"CATEGORY_DELIVERYADHERENCE_NK\",\n        \"COUNT_DAYS_FROM\",\n        \"COUNT_DAYS_TO\",\n        \"NAME\",\n        \"CDTS\",\n        \"EDTS\",\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"ANZAHL_TAGE_VON\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"ANZAHL_TAGE_BIS\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"BEZEICHNUNG\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        )), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^||^^||^^'))), '00000000000000000000000000000000') AS HD_CATEGORY_DELIVERYADHERENCE_MISC_RS\n\n    FROM derived_columns\n  \n),\n\nunknown_values AS (\n  \n    SELECT\n\n    TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'SYSTEM' as rsrc,\n    \n        TO_DATE('0001-01-01', 'YYYY-mm-dd' ) as \"EDTS_IN\",\n        '(unknown)' AS RAW_DATA,\n        0 AS ROW_NUMBER,\n        '(unknown)' AS ANZAHL_TAGE_VON,\n        '(unknown)' AS ANZAHL_TAGE_BIS,\n        '(unknown)' AS BEZEICHNUNG,\n        '(unknown)' AS BEWERTUNG,\n        CAST('FALSE' AS BOOLEAN) AS IS_LDTS_SOURCE_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_EDTS_IN_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_ROW_NUMBER_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_DUB_CHECK_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_BEWERTUNG_KEY_CHECK_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_CHECK_OK,\n        NULL AS CHK_ALL_MSG\n     ,\n    \n        '(unknown)' AS CATEGORY_DELIVERYADHERENCE_NK,\n        TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') AS CDTS,\n        '(unknown)' AS COUNT_DAYS_FROM,\n        '(unknown)' AS COUNT_DAYS_TO,\n        TO_DATE('0001-01-01', 'YYYY-mm-dd' ) as \"EDTS\",\n        '(unknown)' AS NAME,\n        CAST('00000000000000000000000000000000' as STRING) as HD_CATEGORY_DELIVERYADHERENCE_MISC_RS\n),\n\n\nerror_values AS (\n\n    SELECT\n\n    TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'ERROR' as rsrc,\n    \n        TO_DATE('8888-12-31', 'YYYY-mm-dd' ) as \"EDTS_IN\",\n        '(error)' AS RAW_DATA,\n        -1 AS ROW_NUMBER\n     ,\n        '(error)' AS ANZAHL_TAGE_VON,\n        '(error)' AS ANZAHL_TAGE_BIS,\n        '(error)' AS BEZEICHNUNG,\n        '(error)' AS BEWERTUNG,\n        CAST('FALSE' AS BOOLEAN) AS IS_LDTS_SOURCE_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_EDTS_IN_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_ROW_NUMBER_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_DUB_CHECK_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_BEWERTUNG_KEY_CHECK_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_CHECK_OK\n     ,\n        NULL AS CHK_ALL_MSG\n      ,\n    \n        '(error)' AS CATEGORY_DELIVERYADHERENCE_NK,\n        TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') AS CDTS,\n        '(error)' AS COUNT_DAYS_FROM,\n        '(error)' AS COUNT_DAYS_TO,\n        TO_DATE('8888-12-31', 'YYYY-mm-dd' ) as \"EDTS\",\n        '(error)' AS NAME,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HD_CATEGORY_DELIVERYADHERENCE_MISC_RS\n),\n\n\nghost_records AS (\n    SELECT * FROM unknown_values\n    UNION ALL\n    SELECT * FROM error_values\n),\ncolumns_to_select AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"ANZAHL_TAGE_VON\",\n        \"ANZAHL_TAGE_BIS\",\n        \"BEZEICHNUNG\",\n        \"BEWERTUNG\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_BEWERTUNG_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"CATEGORY_DELIVERYADHERENCE_NK\",\n        \"COUNT_DAYS_FROM\",\n        \"COUNT_DAYS_TO\",\n        \"NAME\",\n        \"CDTS\",\n        \"EDTS\",\n        \"HD_CATEGORY_DELIVERYADHERENCE_MISC_RS\"\n\n    FROM hashed_columns\n\n  \n    UNION ALL\n    \n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"ANZAHL_TAGE_VON\",\n        \"ANZAHL_TAGE_BIS\",\n        \"BEZEICHNUNG\",\n        \"BEWERTUNG\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_BEWERTUNG_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"CATEGORY_DELIVERYADHERENCE_NK\",\n        \"COUNT_DAYS_FROM\",\n        \"COUNT_DAYS_TO\",\n        \"NAME\",\n        \"CDTS\",\n        \"EDTS\",\n        \"HD_CATEGORY_DELIVERYADHERENCE_MISC_RS\"\n\n    FROM ghost_records\n  \n)\n\nSELECT * FROM columns_to_select\nwhere is_check_ok or rsrc ='SYSTEM'", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_misc_kategorie_termintreue", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:09.436489Z", "completed_at": "2025-04-07T20:54:09.796587Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:09.796766Z", "completed_at": "2025-04-07T20:54:10.602267Z"}], "thread_id": "Thread-1", "execution_time": 1.166344165802002, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-09a8-0003-ac120002f12a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.stg_webshop_lieferadresse", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\n\nsource_data AS (\n    SELECT\n\n    \n        \"LDTS_SOURCE\",\n        \"RSRC_SOURCE\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"LIEFERADRID\",\n        \"KUNDEID\",\n        \"STRASSE\",\n        \"HAUSNUMMER\",\n        \"ADRESSZUSATZ\",\n        \"PLZ\",\n        \"ORT\",\n        \"LAND\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_LIEFERADRID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\"\n\n  FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_lieferadresse\n\n  ),\n\n\n\n\n\nldts_rsrc_data AS (\n\n  SELECT\n    \"LDTS_SOURCE\" AS ldts,\n    CAST( \"RSRC_SOURCE\" as STRING ) AS rsrc,\n      \n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"LIEFERADRID\",\n        \"KUNDEID\",\n        \"STRASSE\",\n        \"HAUSNUMMER\",\n        \"ADRESSZUSATZ\",\n        \"PLZ\",\n        \"ORT\",\n        \"LAND\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_LIEFERADRID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\"\n    \n\n  FROM source_data\n  \n\n),\n\nderived_columns AS (SELECT\n  \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"LIEFERADRID\",\n        \"KUNDEID\",\n        \"STRASSE\",\n        \"HAUSNUMMER\",\n        \"ADRESSZUSATZ\",\n        \"PLZ\",\n        \"ORT\",\n        \"LAND\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_LIEFERADRID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n  \n  \"KUNDEID\" AS \"CUSTOMER_BK\",\n    \"LIEFERADRID\" AS \"DELIVERYADRESS_BK\",\n    TO_TIMESTAMP(DATEADD(HOUR, 1, SYSDATE())) AS \"CDTS\",\n    \"EDTS_IN\" AS \"EDTS\"\n\n  FROM ldts_rsrc_data\n),\n\n\n\n\nhashed_columns AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"LIEFERADRID\",\n        \"KUNDEID\",\n        \"STRASSE\",\n        \"HAUSNUMMER\",\n        \"ADRESSZUSATZ\",\n        \"PLZ\",\n        \"ORT\",\n        \"LAND\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_LIEFERADRID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"CUSTOMER_BK\",\n        \"DELIVERYADRESS_BK\",\n        \"CDTS\",\n        \"EDTS\",\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"KUNDEID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^'))), '00000000000000000000000000000000') AS HK_CUSTOMER_H,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"LIEFERADRID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^'))), '00000000000000000000000000000000') AS HK_DELIVERYADRESS_H,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"DELIVERYADRESS_BK\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"CUSTOMER_BK\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^||^^'))), '00000000000000000000000000000000') AS HK_DELIVERYADRESS_CUSTOMER_L,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"ADRESSZUSATZ\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"HAUSNUMMER\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"LAND\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"ORT\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"PLZ\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"STRASSE\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        )), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^||^^||^^||^^||^^||^^'))), '00000000000000000000000000000000') AS HD_DELIVERYADRESS_WS_S\n\n    FROM derived_columns\n  \n),\n\nunknown_values AS (\n  \n    SELECT\n\n    TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'SYSTEM' as rsrc,\n    \n        TO_DATE('0001-01-01', 'YYYY-mm-dd' ) as \"EDTS_IN\",\n        '(unknown)' AS RAW_DATA,\n        0 AS ROW_NUMBER,\n        '(unknown)' AS LIEFERADRID,\n        '(unknown)' AS KUNDEID,\n        '(unknown)' AS STRASSE,\n        '(unknown)' AS HAUSNUMMER,\n        '(unknown)' AS ADRESSZUSATZ,\n        '(unknown)' AS PLZ,\n        '(unknown)' AS ORT,\n        '(unknown)' AS LAND,\n        CAST('FALSE' AS BOOLEAN) AS IS_LDTS_SOURCE_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_EDTS_IN_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_ROW_NUMBER_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_DUB_CHECK_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_LIEFERADRID_KEY_CHECK_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_CHECK_OK,\n        NULL AS CHK_ALL_MSG\n     ,\n    \n        TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') AS CDTS,\n        '(unknown)' AS CUSTOMER_BK,\n        '(unknown)' AS DELIVERYADRESS_BK,\n        TO_DATE('0001-01-01', 'YYYY-mm-dd' ) as \"EDTS\",\n        CAST('00000000000000000000000000000000' as STRING) as HK_CUSTOMER_H,\n        CAST('00000000000000000000000000000000' as STRING) as HK_DELIVERYADRESS_H,\n        CAST('00000000000000000000000000000000' as STRING) as HK_DELIVERYADRESS_CUSTOMER_L,\n        CAST('00000000000000000000000000000000' as STRING) as HD_DELIVERYADRESS_WS_S\n),\n\n\nerror_values AS (\n\n    SELECT\n\n    TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'ERROR' as rsrc,\n    \n        TO_DATE('8888-12-31', 'YYYY-mm-dd' ) as \"EDTS_IN\",\n        '(error)' AS RAW_DATA,\n        -1 AS ROW_NUMBER\n     ,\n        '(error)' AS LIEFERADRID,\n        '(error)' AS KUNDEID,\n        '(error)' AS STRASSE,\n        '(error)' AS HAUSNUMMER,\n        '(error)' AS ADRESSZUSATZ,\n        '(error)' AS PLZ,\n        '(error)' AS ORT,\n        '(error)' AS LAND,\n        CAST('FALSE' AS BOOLEAN) AS IS_LDTS_SOURCE_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_EDTS_IN_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_ROW_NUMBER_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_DUB_CHECK_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_LIEFERADRID_KEY_CHECK_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_CHECK_OK\n     ,\n        NULL AS CHK_ALL_MSG\n      ,\n    \n        TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') AS CDTS,\n        '(error)' AS CUSTOMER_BK,\n        '(error)' AS DELIVERYADRESS_BK,\n        TO_DATE('8888-12-31', 'YYYY-mm-dd' ) as \"EDTS\",\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_CUSTOMER_H,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_DELIVERYADRESS_H,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_DELIVERYADRESS_CUSTOMER_L,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HD_DELIVERYADRESS_WS_S\n),\n\n\nghost_records AS (\n    SELECT * FROM unknown_values\n    UNION ALL\n    SELECT * FROM error_values\n),\ncolumns_to_select AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"LIEFERADRID\",\n        \"KUNDEID\",\n        \"STRASSE\",\n        \"HAUSNUMMER\",\n        \"ADRESSZUSATZ\",\n        \"PLZ\",\n        \"ORT\",\n        \"LAND\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_LIEFERADRID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"CUSTOMER_BK\",\n        \"DELIVERYADRESS_BK\",\n        \"CDTS\",\n        \"EDTS\",\n        \"HK_CUSTOMER_H\",\n        \"HK_DELIVERYADRESS_H\",\n        \"HK_DELIVERYADRESS_CUSTOMER_L\",\n        \"HD_DELIVERYADRESS_WS_S\"\n\n    FROM hashed_columns\n\n  \n    UNION ALL\n    \n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"LIEFERADRID\",\n        \"KUNDEID\",\n        \"STRASSE\",\n        \"HAUSNUMMER\",\n        \"ADRESSZUSATZ\",\n        \"PLZ\",\n        \"ORT\",\n        \"LAND\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_LIEFERADRID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"CUSTOMER_BK\",\n        \"DELIVERYADRESS_BK\",\n        \"CDTS\",\n        \"EDTS\",\n        \"HK_CUSTOMER_H\",\n        \"HK_DELIVERYADRESS_H\",\n        \"HK_DELIVERYADRESS_CUSTOMER_L\",\n        \"HD_DELIVERYADRESS_WS_S\"\n\n    FROM ghost_records\n  \n)\n\nSELECT * FROM columns_to_select\nwhere is_check_ok or rsrc ='SYSTEM'", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_lieferadresse", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:09.421914Z", "completed_at": "2025-04-07T20:54:09.791133Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:09.791309Z", "completed_at": "2025-04-07T20:54:10.630863Z"}], "thread_id": "Thread-2", "execution_time": 1.2097439765930176, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-0979-0003-ac1200030196"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.stg_webshop_bestellung", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\n\nsource_data AS (\n    SELECT\n\n    \n        \"LDTS_SOURCE\",\n        \"RSRC_SOURCE\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"BESTELLUNGID\",\n        \"KUNDEID\",\n        \"ALLGLIEFERADRID\",\n        \"BESTELLDATUM\",\n        \"WUNSCHDATUM\",\n        \"RABATT\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_ALLGLIEFERADRID_TYPE_OK\",\n        \"IS_BESTELLDATUM_TYPE_OK\",\n        \"IS_WUNSCHDATUM_TYPE_OK\",\n        \"IS_RABATT_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_BESTELLUNGID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\"\n\n  FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_bestellung\n\n  ),\n\n\n\n\n\nldts_rsrc_data AS (\n\n  SELECT\n    \"LDTS_SOURCE\" AS ldts,\n    CAST( \"RSRC_SOURCE\" as STRING ) AS rsrc,\n      \n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"BESTELLUNGID\",\n        \"KUNDEID\",\n        \"ALLGLIEFERADRID\",\n        \"BESTELLDATUM\",\n        \"WUNSCHDATUM\",\n        \"RABATT\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_ALLGLIEFERADRID_TYPE_OK\",\n        \"IS_BESTELLDATUM_TYPE_OK\",\n        \"IS_WUNSCHDATUM_TYPE_OK\",\n        \"IS_RABATT_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_BESTELLUNGID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\"\n    \n\n  FROM source_data\n  \n\n),\n\nderived_columns AS (SELECT\n  \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"BESTELLUNGID\",\n        \"KUNDEID\",\n        \"ALLGLIEFERADRID\",\n        \"BESTELLDATUM\",\n        \"WUNSCHDATUM\",\n        \"RABATT\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_ALLGLIEFERADRID_TYPE_OK\",\n        \"IS_BESTELLDATUM_TYPE_OK\",\n        \"IS_WUNSCHDATUM_TYPE_OK\",\n        \"IS_RABATT_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_BESTELLUNGID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n  \n  \"KUNDEID\" AS \"CUSTOMER_BK\",\n    \"BESTELLUNGID\" AS \"ORDER_BK\",\n    TO_TIMESTAMP(DATEADD(HOUR, 1, SYSDATE())) AS \"CDTS\",\n    \"EDTS_IN\" AS \"EDTS\"\n\n  FROM ldts_rsrc_data\n),\n\n\n\n\nhashed_columns AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"BESTELLUNGID\",\n        \"KUNDEID\",\n        \"ALLGLIEFERADRID\",\n        \"BESTELLDATUM\",\n        \"WUNSCHDATUM\",\n        \"RABATT\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_ALLGLIEFERADRID_TYPE_OK\",\n        \"IS_BESTELLDATUM_TYPE_OK\",\n        \"IS_WUNSCHDATUM_TYPE_OK\",\n        \"IS_RABATT_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_BESTELLUNGID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"CUSTOMER_BK\",\n        \"ORDER_BK\",\n        \"CDTS\",\n        \"EDTS\",\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"KUNDEID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^'))), '00000000000000000000000000000000') AS HK_CUSTOMER_H,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"BESTELLUNGID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^'))), '00000000000000000000000000000000') AS HK_ORDER_H,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"ORDER_BK\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"CUSTOMER_BK\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^||^^'))), '00000000000000000000000000000000') AS HK_ORDER_CUSTOMER_L,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"ALLGLIEFERADRID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"BESTELLDATUM\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"RABATT\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"WUNSCHDATUM\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        )), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^||^^||^^||^^'))), '00000000000000000000000000000000') AS HD_ORDER_WS_S\n\n    FROM derived_columns\n  \n),\n\nunknown_values AS (\n  \n    SELECT\n\n    TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'SYSTEM' as rsrc,\n    \n        TO_DATE('0001-01-01', 'YYYY-mm-dd' ) as \"EDTS_IN\",\n        '(unknown)' AS RAW_DATA,\n        0 AS ROW_NUMBER,\n        '(unknown)' AS BESTELLUNGID,\n        '(unknown)' AS KUNDEID,\n        0 AS ALLGLIEFERADRID,\n        TO_DATE('0001-01-01', 'YYYY-mm-dd' ) as \"BESTELLDATUM\",\n        TO_DATE('0001-01-01', 'YYYY-mm-dd' ) as \"WUNSCHDATUM\",\n        0 AS RABATT,\n        CAST('FALSE' AS BOOLEAN) AS IS_LDTS_SOURCE_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_EDTS_IN_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_ROW_NUMBER_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_ALLGLIEFERADRID_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_BESTELLDATUM_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_WUNSCHDATUM_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_RABATT_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_DUB_CHECK_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_BESTELLUNGID_KEY_CHECK_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_CHECK_OK,\n        NULL AS CHK_ALL_MSG\n     ,\n    \n        TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') AS CDTS,\n        '(unknown)' AS CUSTOMER_BK,\n        TO_DATE('0001-01-01', 'YYYY-mm-dd' ) as \"EDTS\",\n        '(unknown)' AS ORDER_BK,\n        CAST('00000000000000000000000000000000' as STRING) as HK_CUSTOMER_H,\n        CAST('00000000000000000000000000000000' as STRING) as HK_ORDER_H,\n        CAST('00000000000000000000000000000000' as STRING) as HK_ORDER_CUSTOMER_L,\n        CAST('00000000000000000000000000000000' as STRING) as HD_ORDER_WS_S\n),\n\n\nerror_values AS (\n\n    SELECT\n\n    TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'ERROR' as rsrc,\n    \n        TO_DATE('8888-12-31', 'YYYY-mm-dd' ) as \"EDTS_IN\",\n        '(error)' AS RAW_DATA,\n        -1 AS ROW_NUMBER\n     ,\n        '(error)' AS BESTELLUNGID,\n        '(error)' AS KUNDEID,\n        -1 AS ALLGLIEFERADRID\n     ,\n        TO_DATE('8888-12-31', 'YYYY-mm-dd' ) as \"BESTELLDATUM\",\n        TO_DATE('8888-12-31', 'YYYY-mm-dd' ) as \"WUNSCHDATUM\",\n        -1 AS RABATT\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_LDTS_SOURCE_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_EDTS_IN_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_ROW_NUMBER_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_ALLGLIEFERADRID_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_BESTELLDATUM_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_WUNSCHDATUM_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_RABATT_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_DUB_CHECK_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_BESTELLUNGID_KEY_CHECK_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_CHECK_OK\n     ,\n        NULL AS CHK_ALL_MSG\n      ,\n    \n        TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') AS CDTS,\n        '(error)' AS CUSTOMER_BK,\n        TO_DATE('8888-12-31', 'YYYY-mm-dd' ) as \"EDTS\",\n        '(error)' AS ORDER_BK,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_CUSTOMER_H,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_ORDER_H,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_ORDER_CUSTOMER_L,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HD_ORDER_WS_S\n),\n\n\nghost_records AS (\n    SELECT * FROM unknown_values\n    UNION ALL\n    SELECT * FROM error_values\n),\ncolumns_to_select AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"BESTELLUNGID\",\n        \"KUNDEID\",\n        \"ALLGLIEFERADRID\",\n        \"BESTELLDATUM\",\n        \"WUNSCHDATUM\",\n        \"RABATT\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_ALLGLIEFERADRID_TYPE_OK\",\n        \"IS_BESTELLDATUM_TYPE_OK\",\n        \"IS_WUNSCHDATUM_TYPE_OK\",\n        \"IS_RABATT_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_BESTELLUNGID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"CUSTOMER_BK\",\n        \"ORDER_BK\",\n        \"CDTS\",\n        \"EDTS\",\n        \"HK_CUSTOMER_H\",\n        \"HK_ORDER_H\",\n        \"HK_ORDER_CUSTOMER_L\",\n        \"HD_ORDER_WS_S\"\n\n    FROM hashed_columns\n\n  \n    UNION ALL\n    \n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"BESTELLUNGID\",\n        \"KUNDEID\",\n        \"ALLGLIEFERADRID\",\n        \"BESTELLDATUM\",\n        \"WUNSCHDATUM\",\n        \"RABATT\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_ALLGLIEFERADRID_TYPE_OK\",\n        \"IS_BESTELLDATUM_TYPE_OK\",\n        \"IS_WUNSCHDATUM_TYPE_OK\",\n        \"IS_RABATT_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_BESTELLUNGID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"CUSTOMER_BK\",\n        \"ORDER_BK\",\n        \"CDTS\",\n        \"EDTS\",\n        \"HK_CUSTOMER_H\",\n        \"HK_ORDER_H\",\n        \"HK_ORDER_CUSTOMER_L\",\n        \"HD_ORDER_WS_S\"\n\n    FROM ghost_records\n  \n)\n\nSELECT * FROM columns_to_select\nwhere is_check_ok or rsrc ='SYSTEM'", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_bestellung", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:09.396873Z", "completed_at": "2025-04-07T20:54:09.728182Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:09.728365Z", "completed_at": "2025-04-07T20:54:10.644554Z"}], "thread_id": "Thread-3", "execution_time": 1.2487468719482422, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-0851-0003-ac1200031102"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.stg_webshop_kunde", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\n\nsource_data AS (\n    SELECT\n\n    \n        \"LDTS_SOURCE\",\n        \"RSRC_SOURCE\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"KUNDEID\",\n        \"KREDITKARTE\",\n        \"GUELTIGBIS\",\n        \"KKFIRMA\",\n        \"VEREINSPARTNERID\",\n        \"VORNAME\",\n        \"NAME\",\n        \"GESCHLECHT\",\n        \"GEBURTSDATUM\",\n        \"TELEFON\",\n        \"MOBIL\",\n        \"EMAIL\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_GEBURTSDATUM_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_KUNDEID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\"\n\n  FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_kunde\n\n  ),\n\n\n\n\n\nldts_rsrc_data AS (\n\n  SELECT\n    \"LDTS_SOURCE\" AS ldts,\n    CAST( \"RSRC_SOURCE\" as STRING ) AS rsrc,\n      \n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"KUNDEID\",\n        \"KREDITKARTE\",\n        \"GUELTIGBIS\",\n        \"KKFIRMA\",\n        \"VEREINSPARTNERID\",\n        \"VORNAME\",\n        \"NAME\",\n        \"GESCHLECHT\",\n        \"GEBURTSDATUM\",\n        \"TELEFON\",\n        \"MOBIL\",\n        \"EMAIL\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_GEBURTSDATUM_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_KUNDEID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\"\n    \n\n  FROM source_data\n  \n\n),\n\nderived_columns AS (SELECT\n  \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"KUNDEID\",\n        \"KREDITKARTE\",\n        \"GUELTIGBIS\",\n        \"KKFIRMA\",\n        \"VEREINSPARTNERID\",\n        \"VORNAME\",\n        \"NAME\",\n        \"GESCHLECHT\",\n        \"GEBURTSDATUM\",\n        \"TELEFON\",\n        \"MOBIL\",\n        \"EMAIL\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_GEBURTSDATUM_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_KUNDEID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n  \n  \"VEREINSPARTNERID\" AS \"ASSOCIATIONPARTNER_BK\",\n    \"KUNDEID\" AS \"CUSTOMER_BK\",\n    TO_TIMESTAMP(DATEADD(HOUR, 1, SYSDATE())) AS \"CDTS\",\n    \"EDTS_IN\" AS \"EDTS\"\n\n  FROM ldts_rsrc_data\n),\n\n\n\n\nhashed_columns AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"KUNDEID\",\n        \"KREDITKARTE\",\n        \"GUELTIGBIS\",\n        \"KKFIRMA\",\n        \"VEREINSPARTNERID\",\n        \"VORNAME\",\n        \"NAME\",\n        \"GESCHLECHT\",\n        \"GEBURTSDATUM\",\n        \"TELEFON\",\n        \"MOBIL\",\n        \"EMAIL\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_GEBURTSDATUM_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_KUNDEID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"ASSOCIATIONPARTNER_BK\",\n        \"CUSTOMER_BK\",\n        \"CDTS\",\n        \"EDTS\",\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"VEREINSPARTNERID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^'))), '00000000000000000000000000000000') AS HK_ASSOCIATIONPARTNER_H,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"KUNDEID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^'))), '00000000000000000000000000000000') AS HK_CUSTOMER_H,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"CUSTOMER_BK\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"ASSOCIATIONPARTNER_BK\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^||^^'))), '00000000000000000000000000000000') AS HK_CUSTOMER_ASSOCIATIONPARTNER_L,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"EMAIL\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"GEBURTSDATUM\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"GESCHLECHT\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"GUELTIGBIS\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"KKFIRMA\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"KREDITKARTE\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"MOBIL\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"NAME\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"TELEFON\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"VORNAME\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        )), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^||^^||^^||^^||^^||^^||^^||^^||^^||^^'))), '00000000000000000000000000000000') AS HD_CUSTOMER_WS_S\n\n    FROM derived_columns\n  \n),\n\nunknown_values AS (\n  \n    SELECT\n\n    TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'SYSTEM' as rsrc,\n    \n        TO_DATE('0001-01-01', 'YYYY-mm-dd' ) as \"EDTS_IN\",\n        '(unknown)' AS RAW_DATA,\n        0 AS ROW_NUMBER,\n        '(unknown)' AS KUNDEID,\n        '(unknown)' AS KREDITKARTE,\n        '(unknown)' AS GUELTIGBIS,\n        '(unknown)' AS KKFIRMA,\n        '(unknown)' AS VEREINSPARTNERID,\n        '(unknown)' AS VORNAME,\n        '(unknown)' AS NAME,\n        '(unknown)' AS GESCHLECHT,\n        TO_DATE('0001-01-01', 'YYYY-mm-dd' ) as \"GEBURTSDATUM\",\n        '(unknown)' AS TELEFON,\n        '(unknown)' AS MOBIL,\n        '(unknown)' AS EMAIL,\n        CAST('FALSE' AS BOOLEAN) AS IS_LDTS_SOURCE_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_EDTS_IN_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_ROW_NUMBER_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_GEBURTSDATUM_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_DUB_CHECK_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_KUNDEID_KEY_CHECK_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_CHECK_OK,\n        NULL AS CHK_ALL_MSG\n     ,\n    \n        '(unknown)' AS ASSOCIATIONPARTNER_BK,\n        TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') AS CDTS,\n        '(unknown)' AS CUSTOMER_BK,\n        TO_DATE('0001-01-01', 'YYYY-mm-dd' ) as \"EDTS\",\n        CAST('00000000000000000000000000000000' as STRING) as HK_ASSOCIATIONPARTNER_H,\n        CAST('00000000000000000000000000000000' as STRING) as HK_CUSTOMER_H,\n        CAST('00000000000000000000000000000000' as STRING) as HK_CUSTOMER_ASSOCIATIONPARTNER_L,\n        CAST('00000000000000000000000000000000' as STRING) as HD_CUSTOMER_WS_S\n),\n\n\nerror_values AS (\n\n    SELECT\n\n    TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'ERROR' as rsrc,\n    \n        TO_DATE('8888-12-31', 'YYYY-mm-dd' ) as \"EDTS_IN\",\n        '(error)' AS RAW_DATA,\n        -1 AS ROW_NUMBER\n     ,\n        '(error)' AS KUNDEID,\n        '(error)' AS KREDITKARTE,\n        '(error)' AS GUELTIGBIS,\n        '(error)' AS KKFIRMA,\n        '(error)' AS VEREINSPARTNERID,\n        '(error)' AS VORNAME,\n        '(error)' AS NAME,\n        '(error)' AS GESCHLECHT,\n        TO_DATE('8888-12-31', 'YYYY-mm-dd' ) as \"GEBURTSDATUM\",\n        '(error)' AS TELEFON,\n        '(error)' AS MOBIL,\n        '(error)' AS EMAIL,\n        CAST('FALSE' AS BOOLEAN) AS IS_LDTS_SOURCE_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_EDTS_IN_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_ROW_NUMBER_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_GEBURTSDATUM_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_DUB_CHECK_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_KUNDEID_KEY_CHECK_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_CHECK_OK\n     ,\n        NULL AS CHK_ALL_MSG\n      ,\n    \n        '(error)' AS ASSOCIATIONPARTNER_BK,\n        TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') AS CDTS,\n        '(error)' AS CUSTOMER_BK,\n        TO_DATE('8888-12-31', 'YYYY-mm-dd' ) as \"EDTS\",\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_ASSOCIATIONPARTNER_H,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_CUSTOMER_H,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_CUSTOMER_ASSOCIATIONPARTNER_L,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HD_CUSTOMER_WS_S\n),\n\n\nghost_records AS (\n    SELECT * FROM unknown_values\n    UNION ALL\n    SELECT * FROM error_values\n),\ncolumns_to_select AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"KUNDEID\",\n        \"KREDITKARTE\",\n        \"GUELTIGBIS\",\n        \"KKFIRMA\",\n        \"VEREINSPARTNERID\",\n        \"VORNAME\",\n        \"NAME\",\n        \"GESCHLECHT\",\n        \"GEBURTSDATUM\",\n        \"TELEFON\",\n        \"MOBIL\",\n        \"EMAIL\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_GEBURTSDATUM_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_KUNDEID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"ASSOCIATIONPARTNER_BK\",\n        \"CUSTOMER_BK\",\n        \"CDTS\",\n        \"EDTS\",\n        \"HK_ASSOCIATIONPARTNER_H\",\n        \"HK_CUSTOMER_H\",\n        \"HK_CUSTOMER_ASSOCIATIONPARTNER_L\",\n        \"HD_CUSTOMER_WS_S\"\n\n    FROM hashed_columns\n\n  \n    UNION ALL\n    \n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"KUNDEID\",\n        \"KREDITKARTE\",\n        \"GUELTIGBIS\",\n        \"KKFIRMA\",\n        \"VEREINSPARTNERID\",\n        \"VORNAME\",\n        \"NAME\",\n        \"GESCHLECHT\",\n        \"GEBURTSDATUM\",\n        \"TELEFON\",\n        \"MOBIL\",\n        \"EMAIL\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_GEBURTSDATUM_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_KUNDEID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"ASSOCIATIONPARTNER_BK\",\n        \"CUSTOMER_BK\",\n        \"CDTS\",\n        \"EDTS\",\n        \"HK_ASSOCIATIONPARTNER_H\",\n        \"HK_CUSTOMER_H\",\n        \"HK_CUSTOMER_ASSOCIATIONPARTNER_L\",\n        \"HD_CUSTOMER_WS_S\"\n\n    FROM ghost_records\n  \n)\n\nSELECT * FROM columns_to_select\nwhere is_check_ok or rsrc ='SYSTEM'", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_kunde", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:10.214877Z", "completed_at": "2025-04-07T20:54:10.514998Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:10.515213Z", "completed_at": "2025-04-07T20:54:11.278884Z"}], "thread_id": "Thread-4", "execution_time": 1.0650010108947754, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-0979-0003-ac120003019e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.stg_webshop_lieferdienst", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\n\nsource_data AS (\n    SELECT\n\n    \n        \"LDTS_SOURCE\",\n        \"RSRC_SOURCE\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"LIEFERDIENSTID\",\n        \"LAND\",\n        \"NAME\",\n        \"TELEFON\",\n        \"FAX\",\n        \"EMAIL\",\n        \"STRASSE\",\n        \"HAUSNUMMER\",\n        \"PLZ\",\n        \"ORT\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_LIEFERDIENSTID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\"\n\n  FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_lieferdienst\n\n  ),\n\n\n\n\n\nldts_rsrc_data AS (\n\n  SELECT\n    \"LDTS_SOURCE\" AS ldts,\n    CAST( \"RSRC_SOURCE\" as STRING ) AS rsrc,\n      \n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"LIEFERDIENSTID\",\n        \"LAND\",\n        \"NAME\",\n        \"TELEFON\",\n        \"FAX\",\n        \"EMAIL\",\n        \"STRASSE\",\n        \"HAUSNUMMER\",\n        \"PLZ\",\n        \"ORT\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_LIEFERDIENSTID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\"\n    \n\n  FROM source_data\n  \n\n),\n\nderived_columns AS (SELECT\n  \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"LIEFERDIENSTID\",\n        \"LAND\",\n        \"NAME\",\n        \"TELEFON\",\n        \"FAX\",\n        \"EMAIL\",\n        \"STRASSE\",\n        \"HAUSNUMMER\",\n        \"PLZ\",\n        \"ORT\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_LIEFERDIENSTID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n  \n  \"LIEFERDIENSTID\" AS \"DELIVERYSERVICE_BK\",\n    TO_TIMESTAMP(DATEADD(HOUR, 1, SYSDATE())) AS \"CDTS\",\n    \"EDTS_IN\" AS \"EDTS\"\n\n  FROM ldts_rsrc_data\n),\n\n\n\n\nhashed_columns AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"LIEFERDIENSTID\",\n        \"LAND\",\n        \"NAME\",\n        \"TELEFON\",\n        \"FAX\",\n        \"EMAIL\",\n        \"STRASSE\",\n        \"HAUSNUMMER\",\n        \"PLZ\",\n        \"ORT\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_LIEFERDIENSTID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"DELIVERYSERVICE_BK\",\n        \"CDTS\",\n        \"EDTS\",\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"LIEFERDIENSTID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^'))), '00000000000000000000000000000000') AS HK_DELIVERYSERVICE_H,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"EMAIL\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"FAX\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"HAUSNUMMER\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"LAND\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"NAME\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"ORT\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"PLZ\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"STRASSE\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"TELEFON\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        )), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^||^^||^^||^^||^^||^^||^^||^^||^^'))), '00000000000000000000000000000000') AS HD_DELIVERYSERVICE_WS_S\n\n    FROM derived_columns\n  \n),\n\nunknown_values AS (\n  \n    SELECT\n\n    TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'SYSTEM' as rsrc,\n    \n        TO_DATE('0001-01-01', 'YYYY-mm-dd' ) as \"EDTS_IN\",\n        '(unknown)' AS RAW_DATA,\n        0 AS ROW_NUMBER,\n        '(unknown)' AS LIEFERDIENSTID,\n        '(unknown)' AS LAND,\n        '(unknown)' AS NAME,\n        '(unknown)' AS TELEFON,\n        '(unknown)' AS FAX,\n        '(unknown)' AS EMAIL,\n        '(unknown)' AS STRASSE,\n        '(unknown)' AS HAUSNUMMER,\n        '(unknown)' AS PLZ,\n        '(unknown)' AS ORT,\n        CAST('FALSE' AS BOOLEAN) AS IS_LDTS_SOURCE_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_EDTS_IN_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_ROW_NUMBER_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_DUB_CHECK_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_LIEFERDIENSTID_KEY_CHECK_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_CHECK_OK,\n        NULL AS CHK_ALL_MSG\n     ,\n    \n        TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') AS CDTS,\n        '(unknown)' AS DELIVERYSERVICE_BK,\n        TO_DATE('0001-01-01', 'YYYY-mm-dd' ) as \"EDTS\",\n        CAST('00000000000000000000000000000000' as STRING) as HK_DELIVERYSERVICE_H,\n        CAST('00000000000000000000000000000000' as STRING) as HD_DELIVERYSERVICE_WS_S\n),\n\n\nerror_values AS (\n\n    SELECT\n\n    TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'ERROR' as rsrc,\n    \n        TO_DATE('8888-12-31', 'YYYY-mm-dd' ) as \"EDTS_IN\",\n        '(error)' AS RAW_DATA,\n        -1 AS ROW_NUMBER\n     ,\n        '(error)' AS LIEFERDIENSTID,\n        '(error)' AS LAND,\n        '(error)' AS NAME,\n        '(error)' AS TELEFON,\n        '(error)' AS FAX,\n        '(error)' AS EMAIL,\n        '(error)' AS STRASSE,\n        '(error)' AS HAUSNUMMER,\n        '(error)' AS PLZ,\n        '(error)' AS ORT,\n        CAST('FALSE' AS BOOLEAN) AS IS_LDTS_SOURCE_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_EDTS_IN_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_ROW_NUMBER_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_DUB_CHECK_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_LIEFERDIENSTID_KEY_CHECK_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_CHECK_OK\n     ,\n        NULL AS CHK_ALL_MSG\n      ,\n    \n        TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') AS CDTS,\n        '(error)' AS DELIVERYSERVICE_BK,\n        TO_DATE('8888-12-31', 'YYYY-mm-dd' ) as \"EDTS\",\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_DELIVERYSERVICE_H,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HD_DELIVERYSERVICE_WS_S\n),\n\n\nghost_records AS (\n    SELECT * FROM unknown_values\n    UNION ALL\n    SELECT * FROM error_values\n),\ncolumns_to_select AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"LIEFERDIENSTID\",\n        \"LAND\",\n        \"NAME\",\n        \"TELEFON\",\n        \"FAX\",\n        \"EMAIL\",\n        \"STRASSE\",\n        \"HAUSNUMMER\",\n        \"PLZ\",\n        \"ORT\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_LIEFERDIENSTID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"DELIVERYSERVICE_BK\",\n        \"CDTS\",\n        \"EDTS\",\n        \"HK_DELIVERYSERVICE_H\",\n        \"HD_DELIVERYSERVICE_WS_S\"\n\n    FROM hashed_columns\n\n  \n    UNION ALL\n    \n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"LIEFERDIENSTID\",\n        \"LAND\",\n        \"NAME\",\n        \"TELEFON\",\n        \"FAX\",\n        \"EMAIL\",\n        \"STRASSE\",\n        \"HAUSNUMMER\",\n        \"PLZ\",\n        \"ORT\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_LIEFERDIENSTID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"DELIVERYSERVICE_BK\",\n        \"CDTS\",\n        \"EDTS\",\n        \"HK_DELIVERYSERVICE_H\",\n        \"HD_DELIVERYSERVICE_WS_S\"\n\n    FROM ghost_records\n  \n)\n\nSELECT * FROM columns_to_select\nwhere is_check_ok or rsrc ='SYSTEM'", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_lieferdienst", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:10.605221Z", "completed_at": "2025-04-07T20:54:10.955494Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:10.957090Z", "completed_at": "2025-04-07T20:54:11.798586Z"}], "thread_id": "Thread-1", "execution_time": 1.1940279006958008, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-09a8-0003-ac120002f146"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.stg_webshop_position", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\n\nsource_data AS (\n    SELECT\n\n    \n        \"LDTS_SOURCE\",\n        \"RSRC_SOURCE\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"BESTELLUNGID\",\n        \"POSID\",\n        \"PRODUKTID\",\n        \"SPEZLIEFERADRID\",\n        \"MENGE\",\n        \"PREIS\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_SPEZLIEFERADRID_TYPE_OK\",\n        \"IS_MENGE_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_BESTELLUNGID_KEY_CHECK_OK\",\n        \"IS_POSID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\"\n\n  FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_position\n\n  ),\n\n\n\n\n\nldts_rsrc_data AS (\n\n  SELECT\n    \"LDTS_SOURCE\" AS ldts,\n    CAST( \"RSRC_SOURCE\" as STRING ) AS rsrc,\n      \n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"BESTELLUNGID\",\n        \"POSID\",\n        \"PRODUKTID\",\n        \"SPEZLIEFERADRID\",\n        \"MENGE\",\n        \"PREIS\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_SPEZLIEFERADRID_TYPE_OK\",\n        \"IS_MENGE_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_BESTELLUNGID_KEY_CHECK_OK\",\n        \"IS_POSID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\"\n    \n\n  FROM source_data\n  \n\n),\n\nderived_columns AS (SELECT\n  \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"BESTELLUNGID\",\n        \"POSID\",\n        \"PRODUKTID\",\n        \"SPEZLIEFERADRID\",\n        \"MENGE\",\n        \"PREIS\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_SPEZLIEFERADRID_TYPE_OK\",\n        \"IS_MENGE_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_BESTELLUNGID_KEY_CHECK_OK\",\n        \"IS_POSID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n  \n  \"BESTELLUNGID\" AS \"ORDER_BK\",\n    BESTELLUNGID||'_'||POSID AS \"POSITION_BK\",\n    \"PRODUKTID\" AS \"PRODUCT_BK\",\n    TO_TIMESTAMP(DATEADD(HOUR, 1, SYSDATE())) AS \"CDTS\",\n    \"EDTS_IN\" AS \"EDTS\"\n\n  FROM ldts_rsrc_data\n),\n\n\n\n\nhashed_columns AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"BESTELLUNGID\",\n        \"POSID\",\n        \"PRODUKTID\",\n        \"SPEZLIEFERADRID\",\n        \"MENGE\",\n        \"PREIS\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_SPEZLIEFERADRID_TYPE_OK\",\n        \"IS_MENGE_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_BESTELLUNGID_KEY_CHECK_OK\",\n        \"IS_POSID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"ORDER_BK\",\n        \"POSITION_BK\",\n        \"PRODUCT_BK\",\n        \"CDTS\",\n        \"EDTS\",\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"BESTELLUNGID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^'))), '00000000000000000000000000000000') AS HK_ORDER_H,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"BESTELLUNGID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"POSID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^||^^'))), '00000000000000000000000000000000') AS HK_POSITION_H,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"PRODUKTID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^'))), '00000000000000000000000000000000') AS HK_PRODUCT_H,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"POSITION_BK\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"ORDER_BK\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^||^^'))), '00000000000000000000000000000000') AS HK_ORDER_POSITION_L,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"PRODUCT_BK\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"POSITION_BK\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^||^^'))), '00000000000000000000000000000000') AS HK_POSITION_PRODUCT_L,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"BESTELLUNGID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"MENGE\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"POSID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"PREIS\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"SPEZLIEFERADRID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        )), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^||^^||^^||^^||^^'))), '00000000000000000000000000000000') AS HD_POSITION_WS_S\n\n    FROM derived_columns\n  \n),\n\nunknown_values AS (\n  \n    SELECT\n\n    TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'SYSTEM' as rsrc,\n    \n        TO_DATE('0001-01-01', 'YYYY-mm-dd' ) as \"EDTS_IN\",\n        '(unknown)' AS RAW_DATA,\n        0 AS ROW_NUMBER,\n        '(unknown)' AS BESTELLUNGID,\n        '(unknown)' AS POSID,\n        '(unknown)' AS PRODUKTID,\n        0 AS SPEZLIEFERADRID,\n        0 AS MENGE,\n        '(unknown)' AS PREIS,\n        CAST('FALSE' AS BOOLEAN) AS IS_LDTS_SOURCE_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_EDTS_IN_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_ROW_NUMBER_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_SPEZLIEFERADRID_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_MENGE_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_DUB_CHECK_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_BESTELLUNGID_KEY_CHECK_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_POSID_KEY_CHECK_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_CHECK_OK,\n        NULL AS CHK_ALL_MSG\n     ,\n    \n        TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') AS CDTS,\n        TO_DATE('0001-01-01', 'YYYY-mm-dd' ) as \"EDTS\",\n        '(unknown)' AS ORDER_BK,\n        '(unknown)' AS POSITION_BK,\n        '(unknown)' AS PRODUCT_BK,\n        CAST('00000000000000000000000000000000' as STRING) as HK_ORDER_H,\n        CAST('00000000000000000000000000000000' as STRING) as HK_POSITION_H,\n        CAST('00000000000000000000000000000000' as STRING) as HK_PRODUCT_H,\n        CAST('00000000000000000000000000000000' as STRING) as HK_ORDER_POSITION_L,\n        CAST('00000000000000000000000000000000' as STRING) as HK_POSITION_PRODUCT_L,\n        CAST('00000000000000000000000000000000' as STRING) as HD_POSITION_WS_S\n),\n\n\nerror_values AS (\n\n    SELECT\n\n    TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'ERROR' as rsrc,\n    \n        TO_DATE('8888-12-31', 'YYYY-mm-dd' ) as \"EDTS_IN\",\n        '(error)' AS RAW_DATA,\n        -1 AS ROW_NUMBER\n     ,\n        '(error)' AS BESTELLUNGID,\n        '(error)' AS POSID,\n        '(error)' AS PRODUKTID,\n        -1 AS SPEZLIEFERADRID\n     ,\n        -1 AS MENGE\n     ,\n        '(error)' AS PREIS,\n        CAST('FALSE' AS BOOLEAN) AS IS_LDTS_SOURCE_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_EDTS_IN_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_ROW_NUMBER_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_SPEZLIEFERADRID_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_MENGE_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_DUB_CHECK_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_BESTELLUNGID_KEY_CHECK_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_POSID_KEY_CHECK_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_CHECK_OK\n     ,\n        NULL AS CHK_ALL_MSG\n      ,\n    \n        TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') AS CDTS,\n        TO_DATE('8888-12-31', 'YYYY-mm-dd' ) as \"EDTS\",\n        '(error)' AS ORDER_BK,\n        '(error)' AS POSITION_BK,\n        '(error)' AS PRODUCT_BK,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_ORDER_H,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_POSITION_H,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_PRODUCT_H,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_ORDER_POSITION_L,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_POSITION_PRODUCT_L,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HD_POSITION_WS_S\n),\n\n\nghost_records AS (\n    SELECT * FROM unknown_values\n    UNION ALL\n    SELECT * FROM error_values\n),\ncolumns_to_select AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"BESTELLUNGID\",\n        \"POSID\",\n        \"PRODUKTID\",\n        \"SPEZLIEFERADRID\",\n        \"MENGE\",\n        \"PREIS\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_SPEZLIEFERADRID_TYPE_OK\",\n        \"IS_MENGE_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_BESTELLUNGID_KEY_CHECK_OK\",\n        \"IS_POSID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"ORDER_BK\",\n        \"POSITION_BK\",\n        \"PRODUCT_BK\",\n        \"CDTS\",\n        \"EDTS\",\n        \"HK_ORDER_H\",\n        \"HK_POSITION_H\",\n        \"HK_PRODUCT_H\",\n        \"HK_ORDER_POSITION_L\",\n        \"HK_POSITION_PRODUCT_L\",\n        \"HD_POSITION_WS_S\"\n\n    FROM hashed_columns\n\n  \n    UNION ALL\n    \n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"BESTELLUNGID\",\n        \"POSID\",\n        \"PRODUKTID\",\n        \"SPEZLIEFERADRID\",\n        \"MENGE\",\n        \"PREIS\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_SPEZLIEFERADRID_TYPE_OK\",\n        \"IS_MENGE_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_BESTELLUNGID_KEY_CHECK_OK\",\n        \"IS_POSID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"ORDER_BK\",\n        \"POSITION_BK\",\n        \"PRODUCT_BK\",\n        \"CDTS\",\n        \"EDTS\",\n        \"HK_ORDER_H\",\n        \"HK_POSITION_H\",\n        \"HK_PRODUCT_H\",\n        \"HK_ORDER_POSITION_L\",\n        \"HK_POSITION_PRODUCT_L\",\n        \"HD_POSITION_WS_S\"\n\n    FROM ghost_records\n  \n)\n\nSELECT * FROM columns_to_select\nwhere is_check_ok or rsrc ='SYSTEM'", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_position", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:10.647165Z", "completed_at": "2025-04-07T20:54:10.963302Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:10.963484Z", "completed_at": "2025-04-07T20:54:11.874679Z"}], "thread_id": "Thread-3", "execution_time": 1.2280628681182861, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-0851-0003-ac120003111e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.stg_webshop_produkt", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\n\nsource_data AS (\n    SELECT\n\n    \n        \"LDTS_SOURCE\",\n        \"RSRC_SOURCE\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"PRODUKTID\",\n        \"KATID\",\n        \"BEZEICHNUNG\",\n        \"UMFANG\",\n        \"TYP\",\n        \"PREIS\",\n        \"PFLANZORT\",\n        \"PFLANZABSTAND\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_TYP_TYPE_OK\",\n        \"IS_PREIS_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_PRODUKTID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\"\n\n  FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_produkt\n\n  ),\n\n\n\n\n\nldts_rsrc_data AS (\n\n  SELECT\n    \"LDTS_SOURCE\" AS ldts,\n    CAST( \"RSRC_SOURCE\" as STRING ) AS rsrc,\n      \n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"PRODUKTID\",\n        \"KATID\",\n        \"BEZEICHNUNG\",\n        \"UMFANG\",\n        \"TYP\",\n        \"PREIS\",\n        \"PFLANZORT\",\n        \"PFLANZABSTAND\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_TYP_TYPE_OK\",\n        \"IS_PREIS_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_PRODUKTID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\"\n    \n\n  FROM source_data\n  \n\n),\n\nderived_columns AS (SELECT\n  \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"PRODUKTID\",\n        \"KATID\",\n        \"BEZEICHNUNG\",\n        \"UMFANG\",\n        \"TYP\",\n        \"PREIS\",\n        \"PFLANZORT\",\n        \"PFLANZABSTAND\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_TYP_TYPE_OK\",\n        \"IS_PREIS_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_PRODUKTID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n  \n  \"PRODUKTID\" AS \"PRODUCT_BK\",\n    \"KATID\" AS \"PRODUCTCATEGORY_BK\",\n    TO_TIMESTAMP(DATEADD(HOUR, 1, SYSDATE())) AS \"CDTS\",\n    \"EDTS_IN\" AS \"EDTS\"\n\n  FROM ldts_rsrc_data\n),\n\n\n\n\nhashed_columns AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"PRODUKTID\",\n        \"KATID\",\n        \"BEZEICHNUNG\",\n        \"UMFANG\",\n        \"TYP\",\n        \"PREIS\",\n        \"PFLANZORT\",\n        \"PFLANZABSTAND\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_TYP_TYPE_OK\",\n        \"IS_PREIS_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_PRODUKTID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"PRODUCT_BK\",\n        \"PRODUCTCATEGORY_BK\",\n        \"CDTS\",\n        \"EDTS\",\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"PRODUKTID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^'))), '00000000000000000000000000000000') AS HK_PRODUCT_H,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"KATID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^'))), '00000000000000000000000000000000') AS HK_PRODUCTCATEGORY_H,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"PRODUCTCATEGORY_BK\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"PRODUCT_BK\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^||^^'))), '00000000000000000000000000000000') AS HK_PRODUCT_PRODUCTCATEGORY_L,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"BEZEICHNUNG\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"PFLANZABSTAND\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"PFLANZORT\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"PREIS\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"TYP\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"UMFANG\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        )), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^||^^||^^||^^||^^||^^'))), '00000000000000000000000000000000') AS HD_PRODUCT_WS_S\n\n    FROM derived_columns\n  \n),\n\nunknown_values AS (\n  \n    SELECT\n\n    TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'SYSTEM' as rsrc,\n    \n        TO_DATE('0001-01-01', 'YYYY-mm-dd' ) as \"EDTS_IN\",\n        '(unknown)' AS RAW_DATA,\n        0 AS ROW_NUMBER,\n        '(unknown)' AS PRODUKTID,\n        '(unknown)' AS KATID,\n        '(unknown)' AS BEZEICHNUNG,\n        '(unknown)' AS UMFANG,\n        0 AS TYP,\n        0 AS PREIS,\n        '(unknown)' AS PFLANZORT,\n        '(unknown)' AS PFLANZABSTAND,\n        CAST('FALSE' AS BOOLEAN) AS IS_LDTS_SOURCE_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_EDTS_IN_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_ROW_NUMBER_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_TYP_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_PREIS_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_DUB_CHECK_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_PRODUKTID_KEY_CHECK_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_CHECK_OK,\n        NULL AS CHK_ALL_MSG\n     ,\n    \n        TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') AS CDTS,\n        TO_DATE('0001-01-01', 'YYYY-mm-dd' ) as \"EDTS\",\n        '(unknown)' AS PRODUCTCATEGORY_BK,\n        '(unknown)' AS PRODUCT_BK,\n        CAST('00000000000000000000000000000000' as STRING) as HK_PRODUCT_H,\n        CAST('00000000000000000000000000000000' as STRING) as HK_PRODUCTCATEGORY_H,\n        CAST('00000000000000000000000000000000' as STRING) as HK_PRODUCT_PRODUCTCATEGORY_L,\n        CAST('00000000000000000000000000000000' as STRING) as HD_PRODUCT_WS_S\n),\n\n\nerror_values AS (\n\n    SELECT\n\n    TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'ERROR' as rsrc,\n    \n        TO_DATE('8888-12-31', 'YYYY-mm-dd' ) as \"EDTS_IN\",\n        '(error)' AS RAW_DATA,\n        -1 AS ROW_NUMBER\n     ,\n        '(error)' AS PRODUKTID,\n        '(error)' AS KATID,\n        '(error)' AS BEZEICHNUNG,\n        '(error)' AS UMFANG,\n        -1 AS TYP\n     ,\n        -1 AS PREIS\n     ,\n        '(error)' AS PFLANZORT,\n        '(error)' AS PFLANZABSTAND,\n        CAST('FALSE' AS BOOLEAN) AS IS_LDTS_SOURCE_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_EDTS_IN_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_ROW_NUMBER_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_TYP_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_PREIS_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_DUB_CHECK_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_PRODUKTID_KEY_CHECK_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_CHECK_OK\n     ,\n        NULL AS CHK_ALL_MSG\n      ,\n    \n        TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') AS CDTS,\n        TO_DATE('8888-12-31', 'YYYY-mm-dd' ) as \"EDTS\",\n        '(error)' AS PRODUCTCATEGORY_BK,\n        '(error)' AS PRODUCT_BK,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_PRODUCT_H,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_PRODUCTCATEGORY_H,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_PRODUCT_PRODUCTCATEGORY_L,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HD_PRODUCT_WS_S\n),\n\n\nghost_records AS (\n    SELECT * FROM unknown_values\n    UNION ALL\n    SELECT * FROM error_values\n),\ncolumns_to_select AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"PRODUKTID\",\n        \"KATID\",\n        \"BEZEICHNUNG\",\n        \"UMFANG\",\n        \"TYP\",\n        \"PREIS\",\n        \"PFLANZORT\",\n        \"PFLANZABSTAND\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_TYP_TYPE_OK\",\n        \"IS_PREIS_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_PRODUKTID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"PRODUCT_BK\",\n        \"PRODUCTCATEGORY_BK\",\n        \"CDTS\",\n        \"EDTS\",\n        \"HK_PRODUCT_H\",\n        \"HK_PRODUCTCATEGORY_H\",\n        \"HK_PRODUCT_PRODUCTCATEGORY_L\",\n        \"HD_PRODUCT_WS_S\"\n\n    FROM hashed_columns\n\n  \n    UNION ALL\n    \n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"PRODUKTID\",\n        \"KATID\",\n        \"BEZEICHNUNG\",\n        \"UMFANG\",\n        \"TYP\",\n        \"PREIS\",\n        \"PFLANZORT\",\n        \"PFLANZABSTAND\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_TYP_TYPE_OK\",\n        \"IS_PREIS_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_PRODUKTID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"PRODUCT_BK\",\n        \"PRODUCTCATEGORY_BK\",\n        \"CDTS\",\n        \"EDTS\",\n        \"HK_PRODUCT_H\",\n        \"HK_PRODUCTCATEGORY_H\",\n        \"HK_PRODUCT_PRODUCTCATEGORY_L\",\n        \"HD_PRODUCT_WS_S\"\n\n    FROM ghost_records\n  \n)\n\nSELECT * FROM columns_to_select\nwhere is_check_ok or rsrc ='SYSTEM'", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_produkt", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:10.633324Z", "completed_at": "2025-04-07T20:54:11.025723Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:11.025882Z", "completed_at": "2025-04-07T20:54:12.015603Z"}], "thread_id": "Thread-2", "execution_time": 1.3829150199890137, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-0851-0003-ac1200031122"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.stg_webshop_lieferung", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\n\nsource_data AS (\n    SELECT\n\n    \n        \"LDTS_SOURCE\",\n        \"RSRC_SOURCE\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"BESTELLUNGID\",\n        \"POSID\",\n        \"LIEFERADRID\",\n        \"LIEFERDIENSTID\",\n        \"LIEFERDATUM\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_LIEFERDATUM_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_BESTELLUNGID_KEY_CHECK_OK\",\n        \"IS_POSID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\"\n\n  FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_lieferung\n\n  ),\n\n\n\n\n\nldts_rsrc_data AS (\n\n  SELECT\n    \"LDTS_SOURCE\" AS ldts,\n    CAST( \"RSRC_SOURCE\" as STRING ) AS rsrc,\n      \n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"BESTELLUNGID\",\n        \"POSID\",\n        \"LIEFERADRID\",\n        \"LIEFERDIENSTID\",\n        \"LIEFERDATUM\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_LIEFERDATUM_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_BESTELLUNGID_KEY_CHECK_OK\",\n        \"IS_POSID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\"\n    \n\n  FROM source_data\n  \n\n),\n\nderived_columns AS (SELECT\n  \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"BESTELLUNGID\",\n        \"POSID\",\n        \"LIEFERADRID\",\n        \"LIEFERDIENSTID\",\n        \"LIEFERDATUM\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_LIEFERDATUM_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_BESTELLUNGID_KEY_CHECK_OK\",\n        \"IS_POSID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n  \n  \"LIEFERADRID\" AS \"DELIVERYADRESS_BK\",\n    \"LIEFERDIENSTID\" AS \"DELIVERYSERVICE_BK\",\n    \"BESTELLUNGID\" AS \"ORDER_BK\",\n    BESTELLUNGID||'_'||POSID AS \"POSITION_BK\",\n    TO_TIMESTAMP(DATEADD(HOUR, 1, SYSDATE())) AS \"CDTS\",\n    \"EDTS_IN\" AS \"EDTS\"\n\n  FROM ldts_rsrc_data\n),\n\n\n\n\nhashed_columns AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"BESTELLUNGID\",\n        \"POSID\",\n        \"LIEFERADRID\",\n        \"LIEFERDIENSTID\",\n        \"LIEFERDATUM\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_LIEFERDATUM_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_BESTELLUNGID_KEY_CHECK_OK\",\n        \"IS_POSID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"DELIVERYADRESS_BK\",\n        \"DELIVERYSERVICE_BK\",\n        \"ORDER_BK\",\n        \"POSITION_BK\",\n        \"CDTS\",\n        \"EDTS\",\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"LIEFERADRID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^'))), '00000000000000000000000000000000') AS HK_DELIVERYADRESS_H,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"LIEFERDIENSTID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^'))), '00000000000000000000000000000000') AS HK_DELIVERYSERVICE_H,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"BESTELLUNGID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^'))), '00000000000000000000000000000000') AS HK_ORDER_H,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"BESTELLUNGID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"POSID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^||^^'))), '00000000000000000000000000000000') AS HK_POSITION_H,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"POSITION_BK\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"ORDER_BK\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^||^^'))), '00000000000000000000000000000000') AS HK_ORDER_POSITION_L,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"LIEFERADRID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"LIEFERDIENSTID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"BESTELLUNGID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"BESTELLUNGID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"POSID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^||^^||^^||^^||^^'))), '00000000000000000000000000000000') AS HK_DELIVERY_L,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"BESTELLUNGID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"POSID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        )), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^||^^'))), '00000000000000000000000000000000') AS HD_POSITION_WS_S\n\n    FROM derived_columns\n  \n),\n\nunknown_values AS (\n  \n    SELECT\n\n    TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'SYSTEM' as rsrc,\n    \n        TO_DATE('0001-01-01', 'YYYY-mm-dd' ) as \"EDTS_IN\",\n        '(unknown)' AS RAW_DATA,\n        0 AS ROW_NUMBER,\n        '(unknown)' AS BESTELLUNGID,\n        '(unknown)' AS POSID,\n        '(unknown)' AS LIEFERADRID,\n        '(unknown)' AS LIEFERDIENSTID,\n        TO_DATE('0001-01-01', 'YYYY-mm-dd' ) as \"LIEFERDATUM\",\n        CAST('FALSE' AS BOOLEAN) AS IS_LDTS_SOURCE_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_EDTS_IN_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_ROW_NUMBER_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_LIEFERDATUM_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_DUB_CHECK_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_BESTELLUNGID_KEY_CHECK_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_POSID_KEY_CHECK_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_CHECK_OK,\n        NULL AS CHK_ALL_MSG\n     ,\n    \n        TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') AS CDTS,\n        '(unknown)' AS DELIVERYADRESS_BK,\n        '(unknown)' AS DELIVERYSERVICE_BK,\n        TO_DATE('0001-01-01', 'YYYY-mm-dd' ) as \"EDTS\",\n        '(unknown)' AS ORDER_BK,\n        '(unknown)' AS POSITION_BK,\n        CAST('00000000000000000000000000000000' as STRING) as HK_DELIVERYADRESS_H,\n        CAST('00000000000000000000000000000000' as STRING) as HK_DELIVERYSERVICE_H,\n        CAST('00000000000000000000000000000000' as STRING) as HK_ORDER_H,\n        CAST('00000000000000000000000000000000' as STRING) as HK_POSITION_H,\n        CAST('00000000000000000000000000000000' as STRING) as HK_ORDER_POSITION_L,\n        CAST('00000000000000000000000000000000' as STRING) as HK_DELIVERY_L,\n        CAST('00000000000000000000000000000000' as STRING) as HD_POSITION_WS_S\n),\n\n\nerror_values AS (\n\n    SELECT\n\n    TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'ERROR' as rsrc,\n    \n        TO_DATE('8888-12-31', 'YYYY-mm-dd' ) as \"EDTS_IN\",\n        '(error)' AS RAW_DATA,\n        -1 AS ROW_NUMBER\n     ,\n        '(error)' AS BESTELLUNGID,\n        '(error)' AS POSID,\n        '(error)' AS LIEFERADRID,\n        '(error)' AS LIEFERDIENSTID,\n        TO_DATE('8888-12-31', 'YYYY-mm-dd' ) as \"LIEFERDATUM\",\n        CAST('FALSE' AS BOOLEAN) AS IS_LDTS_SOURCE_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_EDTS_IN_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_ROW_NUMBER_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_LIEFERDATUM_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_DUB_CHECK_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_BESTELLUNGID_KEY_CHECK_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_POSID_KEY_CHECK_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_CHECK_OK\n     ,\n        NULL AS CHK_ALL_MSG\n      ,\n    \n        TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') AS CDTS,\n        '(error)' AS DELIVERYADRESS_BK,\n        '(error)' AS DELIVERYSERVICE_BK,\n        TO_DATE('8888-12-31', 'YYYY-mm-dd' ) as \"EDTS\",\n        '(error)' AS ORDER_BK,\n        '(error)' AS POSITION_BK,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_DELIVERYADRESS_H,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_DELIVERYSERVICE_H,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_ORDER_H,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_POSITION_H,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_ORDER_POSITION_L,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_DELIVERY_L,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HD_POSITION_WS_S\n),\n\n\nghost_records AS (\n    SELECT * FROM unknown_values\n    UNION ALL\n    SELECT * FROM error_values\n),\ncolumns_to_select AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"BESTELLUNGID\",\n        \"POSID\",\n        \"LIEFERADRID\",\n        \"LIEFERDIENSTID\",\n        \"LIEFERDATUM\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_LIEFERDATUM_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_BESTELLUNGID_KEY_CHECK_OK\",\n        \"IS_POSID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"DELIVERYADRESS_BK\",\n        \"DELIVERYSERVICE_BK\",\n        \"ORDER_BK\",\n        \"POSITION_BK\",\n        \"CDTS\",\n        \"EDTS\",\n        \"HK_DELIVERYADRESS_H\",\n        \"HK_DELIVERYSERVICE_H\",\n        \"HK_ORDER_H\",\n        \"HK_POSITION_H\",\n        \"HK_ORDER_POSITION_L\",\n        \"HK_DELIVERY_L\",\n        \"HD_POSITION_WS_S\"\n\n    FROM hashed_columns\n\n  \n    UNION ALL\n    \n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"BESTELLUNGID\",\n        \"POSID\",\n        \"LIEFERADRID\",\n        \"LIEFERDIENSTID\",\n        \"LIEFERDATUM\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_LIEFERDATUM_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_BESTELLUNGID_KEY_CHECK_OK\",\n        \"IS_POSID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"DELIVERYADRESS_BK\",\n        \"DELIVERYSERVICE_BK\",\n        \"ORDER_BK\",\n        \"POSITION_BK\",\n        \"CDTS\",\n        \"EDTS\",\n        \"HK_DELIVERYADRESS_H\",\n        \"HK_DELIVERYSERVICE_H\",\n        \"HK_ORDER_H\",\n        \"HK_POSITION_H\",\n        \"HK_ORDER_POSITION_L\",\n        \"HK_DELIVERY_L\",\n        \"HD_POSITION_WS_S\"\n\n    FROM ghost_records\n  \n)\n\nSELECT * FROM columns_to_select\nwhere is_check_ok or rsrc ='SYSTEM'", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_lieferung", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:11.281627Z", "completed_at": "2025-04-07T20:54:11.655919Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:11.656133Z", "completed_at": "2025-04-07T20:54:12.715827Z"}], "thread_id": "Thread-4", "execution_time": 1.4349613189697266, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-0851-0003-ac120003112e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.stg_webshop_produktkategorie", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\n\nsource_data AS (\n    SELECT\n\n    \n        \"LDTS_SOURCE\",\n        \"RSRC_SOURCE\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"KATID\",\n        \"OBERKATID\",\n        \"NAME\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_KATID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\"\n\n  FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_produktkategorie\n\n  ),\n\n\n\n\n\nldts_rsrc_data AS (\n\n  SELECT\n    \"LDTS_SOURCE\" AS ldts,\n    CAST( \"RSRC_SOURCE\" as STRING ) AS rsrc,\n      \n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"KATID\",\n        \"OBERKATID\",\n        \"NAME\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_KATID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\"\n    \n\n  FROM source_data\n  \n\n),\n\nderived_columns AS (SELECT\n  \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"KATID\",\n        \"OBERKATID\",\n        \"NAME\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_KATID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n  \n  \"KATID\" AS \"PRODUCTCATEGORY_BK\",\n    \"OBERKATID\" AS \"PRODUCTCATEGORY_PARENT_BK\",\n    TO_TIMESTAMP(DATEADD(HOUR, 1, SYSDATE())) AS \"CDTS\",\n    \"EDTS_IN\" AS \"EDTS\"\n\n  FROM ldts_rsrc_data\n),\n\n\n\n\nhashed_columns AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"KATID\",\n        \"OBERKATID\",\n        \"NAME\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_KATID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"PRODUCTCATEGORY_BK\",\n        \"PRODUCTCATEGORY_PARENT_BK\",\n        \"CDTS\",\n        \"EDTS\",\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"KATID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^'))), '00000000000000000000000000000000') AS HK_PRODUCTCATEGORY_H,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"OBERKATID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^'))), '00000000000000000000000000000000') AS HK_PRODUCTCATEGORY_PARENT_H,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"PRODUCTCATEGORY_PARENT_BK\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"PRODUCTCATEGORY_BK\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^||^^'))), '00000000000000000000000000000000') AS HK_PRODUCTCATEGORY_HIERARCHY_L,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"NAME\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        )), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^'))), '00000000000000000000000000000000') AS HD_PRODUCTCATEGORY_WS_S\n\n    FROM derived_columns\n  \n),\n\nunknown_values AS (\n  \n    SELECT\n\n    TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'SYSTEM' as rsrc,\n    \n        TO_DATE('0001-01-01', 'YYYY-mm-dd' ) as \"EDTS_IN\",\n        '(unknown)' AS RAW_DATA,\n        0 AS ROW_NUMBER,\n        '(unknown)' AS KATID,\n        '(unknown)' AS OBERKATID,\n        '(unknown)' AS NAME,\n        CAST('FALSE' AS BOOLEAN) AS IS_LDTS_SOURCE_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_EDTS_IN_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_ROW_NUMBER_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_DUB_CHECK_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_KATID_KEY_CHECK_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_CHECK_OK,\n        NULL AS CHK_ALL_MSG\n     ,\n    \n        TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') AS CDTS,\n        TO_DATE('0001-01-01', 'YYYY-mm-dd' ) as \"EDTS\",\n        '(unknown)' AS PRODUCTCATEGORY_BK,\n        '(unknown)' AS PRODUCTCATEGORY_PARENT_BK,\n        CAST('00000000000000000000000000000000' as STRING) as HK_PRODUCTCATEGORY_H,\n        CAST('00000000000000000000000000000000' as STRING) as HK_PRODUCTCATEGORY_PARENT_H,\n        CAST('00000000000000000000000000000000' as STRING) as HK_PRODUCTCATEGORY_HIERARCHY_L,\n        CAST('00000000000000000000000000000000' as STRING) as HD_PRODUCTCATEGORY_WS_S\n),\n\n\nerror_values AS (\n\n    SELECT\n\n    TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'ERROR' as rsrc,\n    \n        TO_DATE('8888-12-31', 'YYYY-mm-dd' ) as \"EDTS_IN\",\n        '(error)' AS RAW_DATA,\n        -1 AS ROW_NUMBER\n     ,\n        '(error)' AS KATID,\n        '(error)' AS OBERKATID,\n        '(error)' AS NAME,\n        CAST('FALSE' AS BOOLEAN) AS IS_LDTS_SOURCE_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_EDTS_IN_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_ROW_NUMBER_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_DUB_CHECK_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_KATID_KEY_CHECK_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_CHECK_OK\n     ,\n        NULL AS CHK_ALL_MSG\n      ,\n    \n        TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') AS CDTS,\n        TO_DATE('8888-12-31', 'YYYY-mm-dd' ) as \"EDTS\",\n        '(error)' AS PRODUCTCATEGORY_BK,\n        '(error)' AS PRODUCTCATEGORY_PARENT_BK,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_PRODUCTCATEGORY_H,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_PRODUCTCATEGORY_PARENT_H,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_PRODUCTCATEGORY_HIERARCHY_L,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HD_PRODUCTCATEGORY_WS_S\n),\n\n\nghost_records AS (\n    SELECT * FROM unknown_values\n    UNION ALL\n    SELECT * FROM error_values\n),\ncolumns_to_select AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"KATID\",\n        \"OBERKATID\",\n        \"NAME\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_KATID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"PRODUCTCATEGORY_BK\",\n        \"PRODUCTCATEGORY_PARENT_BK\",\n        \"CDTS\",\n        \"EDTS\",\n        \"HK_PRODUCTCATEGORY_H\",\n        \"HK_PRODUCTCATEGORY_PARENT_H\",\n        \"HK_PRODUCTCATEGORY_HIERARCHY_L\",\n        \"HD_PRODUCTCATEGORY_WS_S\"\n\n    FROM hashed_columns\n\n  \n    UNION ALL\n    \n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"KATID\",\n        \"OBERKATID\",\n        \"NAME\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_KATID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"PRODUCTCATEGORY_BK\",\n        \"PRODUCTCATEGORY_PARENT_BK\",\n        \"CDTS\",\n        \"EDTS\",\n        \"HK_PRODUCTCATEGORY_H\",\n        \"HK_PRODUCTCATEGORY_PARENT_H\",\n        \"HK_PRODUCTCATEGORY_HIERARCHY_L\",\n        \"HD_PRODUCTCATEGORY_WS_S\"\n\n    FROM ghost_records\n  \n)\n\nSELECT * FROM columns_to_select\nwhere is_check_ok or rsrc ='SYSTEM'", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_produktkategorie", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:11.802286Z", "completed_at": "2025-04-07T20:54:12.065794Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:12.065970Z", "completed_at": "2025-04-07T20:54:12.776011Z"}], "thread_id": "Thread-1", "execution_time": 0.974431037902832, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-0979-0003-ac12000301c2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.stg_error_roadshow", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\nWITH\n\n\nsource_data AS (\n    SELECT\n\n    \n        \"ROW_NUMBER\",\n        \"LDTS\",\n        \"RSRC\",\n        \"RAW_DATA\",\n        \"CHK_ALL_MSG\"\n\n  FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.pre_stg_error_roadshow\n\n  ),\n\n\n\n\n\nldts_rsrc_data AS (\n\n  SELECT\n    \"LDTS\" AS ldts,\n    CAST( \"RSRC\" as STRING ) AS rsrc,\n      \n        \"ROW_NUMBER\",\n        \"RAW_DATA\",\n        \"CHK_ALL_MSG\"\n    \n\n  FROM source_data\n  \n\n),\n\nderived_columns AS (SELECT\n  \n        \"LDTS\",\n        \"RSRC\",\n        \"ROW_NUMBER\",\n        \"RAW_DATA\",\n        \"CHK_ALL_MSG\",\n  \n  to_varchar(row_number) AS \"ERROR_ROW_NO_BK\",\n    to_varchar(rsrc) AS \"ERROR_FILE_BK\"\n\n  FROM ldts_rsrc_data\n),\n\n\n\n\nhashed_columns AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"ROW_NUMBER\",\n        \"RAW_DATA\",\n        \"CHK_ALL_MSG\",\n        \"ERROR_ROW_NO_BK\",\n        \"ERROR_FILE_BK\",\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"ERROR_FILE_BK\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"ERROR_ROW_NO_BK\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^||^^'))), '00000000000000000000000000000000') AS HK_ERROR_H,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"RAW_DATA\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"CHK_ALL_MSG\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^||^^'))), '00000000000000000000000000000000') AS HD_ERROR_S\n\n    FROM derived_columns\n  \n),\n\nunknown_values AS (\n  \n    SELECT\n\n    TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'SYSTEM' as rsrc,\n    \n        0 AS ROW_NUMBER,\n        '(unknown)' AS RAW_DATA,\n        NULL AS CHK_ALL_MSG\n     ,\n    \n        '(unknown)' AS ERROR_FILE_BK,\n        '(unknown)' AS ERROR_ROW_NO_BK,\n        CAST('00000000000000000000000000000000' as STRING) as HK_ERROR_H,\n        CAST('00000000000000000000000000000000' as STRING) as HD_ERROR_S\n),\n\n\nerror_values AS (\n\n    SELECT\n\n    TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'ERROR' as rsrc,\n    \n        -1 AS ROW_NUMBER\n     ,\n        '(error)' AS RAW_DATA,\n        NULL AS CHK_ALL_MSG\n      ,\n    \n        '(error)' AS ERROR_FILE_BK,\n        '(error)' AS ERROR_ROW_NO_BK,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_ERROR_H,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HD_ERROR_S\n),\n\n\nghost_records AS (\n    SELECT * FROM unknown_values\n    UNION ALL\n    SELECT * FROM error_values\n),\ncolumns_to_select AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"ROW_NUMBER\",\n        \"RAW_DATA\",\n        \"CHK_ALL_MSG\",\n        \"ERROR_ROW_NO_BK\",\n        \"ERROR_FILE_BK\",\n        \"HK_ERROR_H\",\n        \"HD_ERROR_S\"\n\n    FROM hashed_columns\n\n  \n    UNION ALL\n    \n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"ROW_NUMBER\",\n        \"RAW_DATA\",\n        \"CHK_ALL_MSG\",\n        \"ERROR_ROW_NO_BK\",\n        \"ERROR_FILE_BK\",\n        \"HK_ERROR_H\",\n        \"HD_ERROR_S\"\n\n    FROM ghost_records\n  \n)\n\nSELECT * FROM columns_to_select", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.stg_error_roadshow", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:11.877209Z", "completed_at": "2025-04-07T20:54:12.151162Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:12.151349Z", "completed_at": "2025-04-07T20:54:13.035690Z"}], "thread_id": "Thread-3", "execution_time": 1.1593332290649414, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-09a8-0003-ac120002f15e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.stg_webshop_vereinspartner", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\n\nsource_data AS (\n    SELECT\n\n    \n        \"LDTS_SOURCE\",\n        \"RSRC_SOURCE\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"VEREINSPARTNERID\",\n        \"KUNDEIDVEREIN\",\n        \"RABATT1\",\n        \"RABATT2\",\n        \"RABATT3\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_RABATT1_TYPE_OK\",\n        \"IS_RABATT2_TYPE_OK\",\n        \"IS_RABATT3_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_VEREINSPARTNERID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\"\n\n  FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_vereinspartner\n\n  ),\n\n\n\n\n\nldts_rsrc_data AS (\n\n  SELECT\n    \"LDTS_SOURCE\" AS ldts,\n    CAST( \"RSRC_SOURCE\" as STRING ) AS rsrc,\n      \n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"VEREINSPARTNERID\",\n        \"KUNDEIDVEREIN\",\n        \"RABATT1\",\n        \"RABATT2\",\n        \"RABATT3\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_RABATT1_TYPE_OK\",\n        \"IS_RABATT2_TYPE_OK\",\n        \"IS_RABATT3_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_VEREINSPARTNERID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\"\n    \n\n  FROM source_data\n  \n\n),\n\nderived_columns AS (SELECT\n  \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"VEREINSPARTNERID\",\n        \"KUNDEIDVEREIN\",\n        \"RABATT1\",\n        \"RABATT2\",\n        \"RABATT3\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_RABATT1_TYPE_OK\",\n        \"IS_RABATT2_TYPE_OK\",\n        \"IS_RABATT3_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_VEREINSPARTNERID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n  \n  \"VEREINSPARTNERID\" AS \"ASSOCIATIONPARTNER_BK\",\n    \"KUNDEIDVEREIN\" AS \"CUSTOMER_BK\",\n    TO_TIMESTAMP(DATEADD(HOUR, 1, SYSDATE())) AS \"CDTS\",\n    \"EDTS_IN\" AS \"EDTS\"\n\n  FROM ldts_rsrc_data\n),\n\n\n\n\nhashed_columns AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"VEREINSPARTNERID\",\n        \"KUNDEIDVEREIN\",\n        \"RABATT1\",\n        \"RABATT2\",\n        \"RABATT3\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_RABATT1_TYPE_OK\",\n        \"IS_RABATT2_TYPE_OK\",\n        \"IS_RABATT3_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_VEREINSPARTNERID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"ASSOCIATIONPARTNER_BK\",\n        \"CUSTOMER_BK\",\n        \"CDTS\",\n        \"EDTS\",\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"VEREINSPARTNERID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^'))), '00000000000000000000000000000000') AS HK_ASSOCIATIONPARTNER_H,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"KUNDEIDVEREIN\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^'))), '00000000000000000000000000000000') AS HK_CUSTOMER_H,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"CUSTOMER_BK\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"ASSOCIATIONPARTNER_BK\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^||^^'))), '00000000000000000000000000000000') AS HK_ASSOCIATIONPARTNER_CUSTOMER_L,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"KUNDEIDVEREIN\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"RABATT1\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"RABATT2\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"RABATT3\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        )), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^||^^||^^||^^'))), '00000000000000000000000000000000') AS HD_ASSOCIATIONPARTNER_WS_S\n\n    FROM derived_columns\n  \n),\n\nunknown_values AS (\n  \n    SELECT\n\n    TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'SYSTEM' as rsrc,\n    \n        TO_DATE('0001-01-01', 'YYYY-mm-dd' ) as \"EDTS_IN\",\n        '(unknown)' AS RAW_DATA,\n        0 AS ROW_NUMBER,\n        '(unknown)' AS VEREINSPARTNERID,\n        '(unknown)' AS KUNDEIDVEREIN,\n        0 AS RABATT1,\n        0 AS RABATT2,\n        0 AS RABATT3,\n        CAST('FALSE' AS BOOLEAN) AS IS_LDTS_SOURCE_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_EDTS_IN_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_ROW_NUMBER_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_RABATT1_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_RABATT2_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_RABATT3_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_DUB_CHECK_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_VEREINSPARTNERID_KEY_CHECK_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_CHECK_OK,\n        NULL AS CHK_ALL_MSG\n     ,\n    \n        '(unknown)' AS ASSOCIATIONPARTNER_BK,\n        TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') AS CDTS,\n        '(unknown)' AS CUSTOMER_BK,\n        TO_DATE('0001-01-01', 'YYYY-mm-dd' ) as \"EDTS\",\n        CAST('00000000000000000000000000000000' as STRING) as HK_ASSOCIATIONPARTNER_H,\n        CAST('00000000000000000000000000000000' as STRING) as HK_CUSTOMER_H,\n        CAST('00000000000000000000000000000000' as STRING) as HK_ASSOCIATIONPARTNER_CUSTOMER_L,\n        CAST('00000000000000000000000000000000' as STRING) as HD_ASSOCIATIONPARTNER_WS_S\n),\n\n\nerror_values AS (\n\n    SELECT\n\n    TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'ERROR' as rsrc,\n    \n        TO_DATE('8888-12-31', 'YYYY-mm-dd' ) as \"EDTS_IN\",\n        '(error)' AS RAW_DATA,\n        -1 AS ROW_NUMBER\n     ,\n        '(error)' AS VEREINSPARTNERID,\n        '(error)' AS KUNDEIDVEREIN,\n        -1 AS RABATT1\n     ,\n        -1 AS RABATT2\n     ,\n        -1 AS RABATT3\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_LDTS_SOURCE_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_EDTS_IN_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_ROW_NUMBER_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_RABATT1_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_RABATT2_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_RABATT3_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_DUB_CHECK_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_VEREINSPARTNERID_KEY_CHECK_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_CHECK_OK\n     ,\n        NULL AS CHK_ALL_MSG\n      ,\n    \n        '(error)' AS ASSOCIATIONPARTNER_BK,\n        TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') AS CDTS,\n        '(error)' AS CUSTOMER_BK,\n        TO_DATE('8888-12-31', 'YYYY-mm-dd' ) as \"EDTS\",\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_ASSOCIATIONPARTNER_H,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_CUSTOMER_H,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_ASSOCIATIONPARTNER_CUSTOMER_L,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HD_ASSOCIATIONPARTNER_WS_S\n),\n\n\nghost_records AS (\n    SELECT * FROM unknown_values\n    UNION ALL\n    SELECT * FROM error_values\n),\ncolumns_to_select AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"VEREINSPARTNERID\",\n        \"KUNDEIDVEREIN\",\n        \"RABATT1\",\n        \"RABATT2\",\n        \"RABATT3\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_RABATT1_TYPE_OK\",\n        \"IS_RABATT2_TYPE_OK\",\n        \"IS_RABATT3_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_VEREINSPARTNERID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"ASSOCIATIONPARTNER_BK\",\n        \"CUSTOMER_BK\",\n        \"CDTS\",\n        \"EDTS\",\n        \"HK_ASSOCIATIONPARTNER_H\",\n        \"HK_CUSTOMER_H\",\n        \"HK_ASSOCIATIONPARTNER_CUSTOMER_L\",\n        \"HD_ASSOCIATIONPARTNER_WS_S\"\n\n    FROM hashed_columns\n\n  \n    UNION ALL\n    \n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"VEREINSPARTNERID\",\n        \"KUNDEIDVEREIN\",\n        \"RABATT1\",\n        \"RABATT2\",\n        \"RABATT3\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_RABATT1_TYPE_OK\",\n        \"IS_RABATT2_TYPE_OK\",\n        \"IS_RABATT3_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_VEREINSPARTNERID_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"ASSOCIATIONPARTNER_BK\",\n        \"CUSTOMER_BK\",\n        \"CDTS\",\n        \"EDTS\",\n        \"HK_ASSOCIATIONPARTNER_H\",\n        \"HK_CUSTOMER_H\",\n        \"HK_ASSOCIATIONPARTNER_CUSTOMER_L\",\n        \"HD_ASSOCIATIONPARTNER_WS_S\"\n\n    FROM ghost_records\n  \n)\n\nSELECT * FROM columns_to_select\nwhere is_check_ok or rsrc ='SYSTEM'", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_vereinspartner", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:12.017941Z", "completed_at": "2025-04-07T20:54:12.479021Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:12.479201Z", "completed_at": "2025-04-07T20:54:13.085463Z"}], "thread_id": "Thread-2", "execution_time": 1.0683331489562988, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-09a8-0003-ac120002f162"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.stg_webshop_ref_produkt_typ", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\nWITH\n\n\nsource_data AS (\n    SELECT\n\n    \n        \"LDTS_SOURCE\",\n        \"EDTS_IN\",\n        \"RSRC_SOURCE\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"TYP\",\n        \"BEZEICHNUNG\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\"\n\n  FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_ref_produkt_typ\n\n  ),\n\n\n\n\n\nldts_rsrc_data AS (\n\n  SELECT\n    \"LDTS_SOURCE\" AS ldts,\n    CAST( \"RSRC_SOURCE\" as STRING ) AS rsrc,\n      \n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"TYP\",\n        \"BEZEICHNUNG\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\"\n    \n\n  FROM source_data\n  \n\n),\n\nderived_columns AS (SELECT\n  \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"TYP\",\n        \"BEZEICHNUNG\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n  \n  TO_TIMESTAMP(DATEADD(HOUR, 1, SYSDATE())) AS \"CDTS\",\n    typ::string AS \"PRODUCT_TYPE_NK\",\n    \"EDTS_IN\" AS \"EDTS\"\n\n  FROM ldts_rsrc_data\n),\n\n\n\n\nhashed_columns AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"TYP\",\n        \"BEZEICHNUNG\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"CDTS\",\n        \"PRODUCT_TYPE_NK\",\n        \"EDTS\",\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"BEZEICHNUNG\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        )), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^'))), '00000000000000000000000000000000') AS HD_PRODUCT_TYPE_WS_RS\n\n    FROM derived_columns\n  \n),\n\nunknown_values AS (\n  \n    SELECT\n\n    TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'SYSTEM' as rsrc,\n    \n        TO_DATE('0001-01-01', 'YYYY-mm-dd' ) as \"EDTS_IN\",\n        NULL AS RAW_DATA\n     ,\n        '(unknown)' AS ROW_NUMBER,\n        '(unknown)' AS TYP,\n        '(unknown)' AS BEZEICHNUNG,\n        CAST('FALSE' AS BOOLEAN) AS IS_DUB_CHECK_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_KEY_CHECK_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_CHECK_OK,\n        NULL AS CHK_ALL_MSG\n     ,\n    \n        TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') AS CDTS,\n        TO_DATE('0001-01-01', 'YYYY-mm-dd' ) as \"EDTS\",\n        '(unknown)' AS PRODUCT_TYPE_NK,\n        CAST('00000000000000000000000000000000' as STRING) as HD_PRODUCT_TYPE_WS_RS\n),\n\n\nerror_values AS (\n\n    SELECT\n\n    TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'ERROR' as rsrc,\n    \n        TO_DATE('8888-12-31', 'YYYY-mm-dd' ) as \"EDTS_IN\",\n        NULL AS RAW_DATA\n      ,\n        '(error)' AS ROW_NUMBER,\n        '(error)' AS TYP,\n        '(error)' AS BEZEICHNUNG,\n        CAST('FALSE' AS BOOLEAN) AS IS_DUB_CHECK_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_KEY_CHECK_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_CHECK_OK\n     ,\n        NULL AS CHK_ALL_MSG\n      ,\n    \n        TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') AS CDTS,\n        TO_DATE('8888-12-31', 'YYYY-mm-dd' ) as \"EDTS\",\n        '(error)' AS PRODUCT_TYPE_NK,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HD_PRODUCT_TYPE_WS_RS\n),\n\n\nghost_records AS (\n    SELECT * FROM unknown_values\n    UNION ALL\n    SELECT * FROM error_values\n),\ncolumns_to_select AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"TYP\",\n        \"BEZEICHNUNG\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"CDTS\",\n        \"PRODUCT_TYPE_NK\",\n        \"EDTS\",\n        \"HD_PRODUCT_TYPE_WS_RS\"\n\n    FROM hashed_columns\n\n  \n    UNION ALL\n    \n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"TYP\",\n        \"BEZEICHNUNG\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"CDTS\",\n        \"PRODUCT_TYPE_NK\",\n        \"EDTS\",\n        \"HD_PRODUCT_TYPE_WS_RS\"\n\n    FROM ghost_records\n  \n)\n\nSELECT * FROM columns_to_select\nwhere is_check_ok or (typ in ('00000000000000000000000000000000'::string, 'ffffffffffffffffffffffffffffffff'::string) )", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_ref_produkt_typ", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:13.042247Z", "completed_at": "2025-04-07T20:54:13.055292Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:13.055696Z", "completed_at": "2025-04-07T20:54:13.532250Z"}], "thread_id": "Thread-3", "execution_time": 0.4911839962005615, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-0979-0003-ac12000301d2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.pre_stg_error_webshop", "compiled": true, "compiled_code": "select ROW_NUMBER, ldts_source AS ldts, rsrc_source as rsrc, raw_data, CHK_ALL_MSG\nfrom  WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_bestellung\nwhere not is_check_ok\nunion all\nselect ROW_NUMBER, ldts_source AS ldts, rsrc_source as rsrc, raw_data, CHK_ALL_MSG\nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_kunde\nwhere not is_check_ok\nunion all\nselect ROW_NUMBER, ldts_source AS ldts, rsrc_source as rsrc, raw_data, CHK_ALL_MSG\nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_lieferadresse\nwhere not is_check_ok\nunion all\nselect ROW_NUMBER, ldts_source AS ldts, rsrc_source as rsrc, raw_data, CHK_ALL_MSG\nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_lieferdienst\nwhere not is_check_ok\nUNION all\nselect ROW_NUMBER, ldts_source AS ldts, rsrc_source as rsrc, raw_data, CHK_ALL_MSG\nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_lieferung\nwhere not is_check_ok\nUNION all\nselect ROW_NUMBER, ldts_source AS ldts, rsrc_source as rsrc, raw_data, CHK_ALL_MSG\nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_position\nwhere not is_check_ok\nUNION all\nselect ROW_NUMBER, ldts_source AS ldts, rsrc_source as rsrc, raw_data, CHK_ALL_MSG\nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_produkt\nwhere not is_check_ok\nUNION all\nselect ROW_NUMBER, ldts_source AS ldts, rsrc_source as rsrc, raw_data, CHK_ALL_MSG\nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_produktkategorie\nwhere not is_check_ok\nUNION all\nselect ROW_NUMBER, ldts_source AS ldts, rsrc_source as rsrc, raw_data, CHK_ALL_MSG\nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_ref_produkt_typ\nwhere not is_check_ok\nUNION all\nselect ROW_NUMBER, ldts_source AS ldts, rsrc_source as rsrc, raw_data, CHK_ALL_MSG\nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_vereinspartner\nwhere not is_check_ok\nUNION all\nselect ROW_NUMBER, ldts_source AS ldts, rsrc_source as rsrc, raw_data, CHK_ALL_MSG\nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_wohnort\nwhere not is_check_ok", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.pre_stg_error_webshop", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:13.088324Z", "completed_at": "2025-04-07T20:54:13.394780Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:13.395025Z", "completed_at": "2025-04-07T20:54:14.171347Z"}], "thread_id": "Thread-2", "execution_time": 1.0838310718536377, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-09a8-0003-ac120002f172"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.stg_webshop_wohnort", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\n\nsource_data AS (\n    SELECT\n\n    \n        \"LDTS_SOURCE\",\n        \"RSRC_SOURCE\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"KUNDEID\",\n        \"VON\",\n        \"BIS\",\n        \"STRASSE\",\n        \"HAUSNUMMER\",\n        \"ADRESSZUSATZ\",\n        \"PLZ\",\n        \"ORT\",\n        \"LAND\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_VON_TYPE_OK\",\n        \"IS_BIS_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_KUNDEID_KEY_CHECK_OK\",\n        \"IS_VON_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\"\n\n  FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_wohnort\n\n  ),\n\n\n\n\n\nldts_rsrc_data AS (\n\n  SELECT\n    \"LDTS_SOURCE\" AS ldts,\n    CAST( \"RSRC_SOURCE\" as STRING ) AS rsrc,\n      \n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"KUNDEID\",\n        \"VON\",\n        \"BIS\",\n        \"STRASSE\",\n        \"HAUSNUMMER\",\n        \"ADRESSZUSATZ\",\n        \"PLZ\",\n        \"ORT\",\n        \"LAND\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_VON_TYPE_OK\",\n        \"IS_BIS_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_KUNDEID_KEY_CHECK_OK\",\n        \"IS_VON_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\"\n    \n\n  FROM source_data\n  \n\n),\n\nderived_columns AS (SELECT\n  \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"KUNDEID\",\n        \"VON\",\n        \"BIS\",\n        \"STRASSE\",\n        \"HAUSNUMMER\",\n        \"ADRESSZUSATZ\",\n        \"PLZ\",\n        \"ORT\",\n        \"LAND\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_VON_TYPE_OK\",\n        \"IS_BIS_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_KUNDEID_KEY_CHECK_OK\",\n        \"IS_VON_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n  \n  \"KUNDEID\" AS \"CUSTOMER_BK\",\n    TO_TIMESTAMP(DATEADD(HOUR, 1, SYSDATE())) AS \"CDTS\",\n    \"EDTS_IN\" AS \"EDTS\"\n\n  FROM ldts_rsrc_data\n),\n\n\n\nhashed_columns AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"KUNDEID\",\n        \"VON\",\n        \"BIS\",\n        \"STRASSE\",\n        \"HAUSNUMMER\",\n        \"ADRESSZUSATZ\",\n        \"PLZ\",\n        \"ORT\",\n        \"LAND\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_VON_TYPE_OK\",\n        \"IS_BIS_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_KUNDEID_KEY_CHECK_OK\",\n        \"IS_VON_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"CUSTOMER_BK\",\n        \"CDTS\",\n        \"EDTS\",\n\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"KUNDEID\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^'))), '00000000000000000000000000000000') AS HK_CUSTOMER_H, \n    IFNULL(LOWER(MD5(LISTAGG(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"ADRESSZUSATZ\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"BIS\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"HAUSNUMMER\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"LAND\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"ORT\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"PLZ\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"STRASSE\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        )), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^||^^||^^||^^||^^||^^||^^')) WITHIN GROUP (ORDER BY VON) OVER (PARTITION BY HK_CUSTOMER_H, ldts))), '00000000000000000000000000000000') AS HD_CUSTOMER_WS_LA_MS\n\n    FROM derived_columns\n\n),\n\n\n\nunknown_values AS (\n  \n    SELECT\n\n    TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'SYSTEM' as rsrc,\n    \n        TO_DATE('0001-01-01', 'YYYY-mm-dd' ) as \"EDTS_IN\",\n        '(unknown)' AS RAW_DATA,\n        0 AS ROW_NUMBER,\n        '(unknown)' AS KUNDEID,\n        TO_DATE('0001-01-01', 'YYYY-mm-dd' ) as \"VON\",\n        TO_DATE('0001-01-01', 'YYYY-mm-dd' ) as \"BIS\",\n        '(unknown)' AS STRASSE,\n        '(unknown)' AS HAUSNUMMER,\n        '(unknown)' AS ADRESSZUSATZ,\n        '(unknown)' AS PLZ,\n        '(unknown)' AS ORT,\n        '(unknown)' AS LAND,\n        CAST('FALSE' AS BOOLEAN) AS IS_LDTS_SOURCE_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_EDTS_IN_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_ROW_NUMBER_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_VON_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_BIS_TYPE_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_DUB_CHECK_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_KUNDEID_KEY_CHECK_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_VON_KEY_CHECK_OK,\n        CAST('FALSE' AS BOOLEAN) AS IS_CHECK_OK,\n        NULL AS CHK_ALL_MSG\n     ,\n    \n        TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') AS CDTS,\n        '(unknown)' AS CUSTOMER_BK,\n        TO_DATE('0001-01-01', 'YYYY-mm-dd' ) as \"EDTS\",\n        CAST('00000000000000000000000000000000' as STRING) as HK_CUSTOMER_H,\n        CAST('00000000000000000000000000000000' as STRING) as HD_CUSTOMER_WS_LA_MS\n),\n\n\nerror_values AS (\n\n    SELECT\n\n    TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'ERROR' as rsrc,\n    \n        TO_DATE('8888-12-31', 'YYYY-mm-dd' ) as \"EDTS_IN\",\n        '(error)' AS RAW_DATA,\n        -1 AS ROW_NUMBER\n     ,\n        '(error)' AS KUNDEID,\n        TO_DATE('8888-12-31', 'YYYY-mm-dd' ) as \"VON\",\n        TO_DATE('8888-12-31', 'YYYY-mm-dd' ) as \"BIS\",\n        '(error)' AS STRASSE,\n        '(error)' AS HAUSNUMMER,\n        '(error)' AS ADRESSZUSATZ,\n        '(error)' AS PLZ,\n        '(error)' AS ORT,\n        '(error)' AS LAND,\n        CAST('FALSE' AS BOOLEAN) AS IS_LDTS_SOURCE_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_EDTS_IN_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_ROW_NUMBER_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_VON_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_BIS_TYPE_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_DUB_CHECK_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_KUNDEID_KEY_CHECK_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_VON_KEY_CHECK_OK\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_CHECK_OK\n     ,\n        NULL AS CHK_ALL_MSG\n      ,\n    \n        TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') AS CDTS,\n        '(error)' AS CUSTOMER_BK,\n        TO_DATE('8888-12-31', 'YYYY-mm-dd' ) as \"EDTS\",\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_CUSTOMER_H,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HD_CUSTOMER_WS_LA_MS\n),\n\n\nghost_records AS (\n    SELECT * FROM unknown_values\n    UNION ALL\n    SELECT * FROM error_values\n),\ncolumns_to_select AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"KUNDEID\",\n        \"VON\",\n        \"BIS\",\n        \"STRASSE\",\n        \"HAUSNUMMER\",\n        \"ADRESSZUSATZ\",\n        \"PLZ\",\n        \"ORT\",\n        \"LAND\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_VON_TYPE_OK\",\n        \"IS_BIS_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_KUNDEID_KEY_CHECK_OK\",\n        \"IS_VON_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"CUSTOMER_BK\",\n        \"CDTS\",\n        \"EDTS\",\n        \"HK_CUSTOMER_H\",\n        \"HD_CUSTOMER_WS_LA_MS\"\n\n    FROM hashed_columns\n\n  \n    UNION ALL\n    \n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"EDTS_IN\",\n        \"RAW_DATA\",\n        \"ROW_NUMBER\",\n        \"KUNDEID\",\n        \"VON\",\n        \"BIS\",\n        \"STRASSE\",\n        \"HAUSNUMMER\",\n        \"ADRESSZUSATZ\",\n        \"PLZ\",\n        \"ORT\",\n        \"LAND\",\n        \"IS_LDTS_SOURCE_TYPE_OK\",\n        \"IS_EDTS_IN_TYPE_OK\",\n        \"IS_ROW_NUMBER_TYPE_OK\",\n        \"IS_VON_TYPE_OK\",\n        \"IS_BIS_TYPE_OK\",\n        \"IS_DUB_CHECK_OK\",\n        \"IS_KUNDEID_KEY_CHECK_OK\",\n        \"IS_VON_KEY_CHECK_OK\",\n        \"IS_CHECK_OK\",\n        \"CHK_ALL_MSG\",\n        \"CUSTOMER_BK\",\n        \"CDTS\",\n        \"EDTS\",\n        \"HK_CUSTOMER_H\",\n        \"HD_CUSTOMER_WS_LA_MS\"\n\n    FROM ghost_records\n  \n)\n\nSELECT * FROM columns_to_select\nwhere is_check_ok or rsrc ='SYSTEM'", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_wohnort", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:13.535127Z", "completed_at": "2025-04-07T20:54:13.847523Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:13.847794Z", "completed_at": "2025-04-07T20:54:14.425615Z"}], "thread_id": "Thread-3", "execution_time": 0.8911843299865723, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-0851-0003-ac1200031152"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.stg_error_misc", "compiled": true, "compiled_code": "\n--LOAD_TIMESTAMP, RECORD_SOURCE, JSON_DATA, CHK_ALL_MSG\n\n\n\n\n\n\n\n\nWITH\n\n\nsource_data AS (\n    SELECT\n\n    \n        \"ROW_NUMBER\",\n        \"LDTS\",\n        \"RSRC\",\n        \"RAW_DATA\",\n        \"CHK_ALL_MSG\",\n        \"IS_CHECK_OK\"\n\n  FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.pre_stg_error_misc\n\n  ),\n\n\n\n\n\nldts_rsrc_data AS (\n\n  SELECT\n    \"LDTS\" AS ldts,\n    CAST( \"RSRC\" as STRING ) AS rsrc,\n      \n        \"ROW_NUMBER\",\n        \"RAW_DATA\",\n        \"CHK_ALL_MSG\",\n        \"IS_CHECK_OK\"\n    \n\n  FROM source_data\n  \n\n),\n\nderived_columns AS (SELECT\n  \n        \"LDTS\",\n        \"RSRC\",\n        \"ROW_NUMBER\",\n        \"RAW_DATA\",\n        \"CHK_ALL_MSG\",\n        \"IS_CHECK_OK\",\n  \n  to_varchar(row_number) AS \"ERROR_ROW_NO_BK\",\n    to_varchar(rsrc) AS \"ERROR_FILE_BK\"\n\n  FROM ldts_rsrc_data\n),\n\n\n\n\nhashed_columns AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"ROW_NUMBER\",\n        \"RAW_DATA\",\n        \"CHK_ALL_MSG\",\n        \"IS_CHECK_OK\",\n        \"ERROR_ROW_NO_BK\",\n        \"ERROR_FILE_BK\",\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"ERROR_FILE_BK\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"ERROR_ROW_NO_BK\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^||^^'))), '00000000000000000000000000000000') AS HK_ERROR_H,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"RAW_DATA\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"CHK_ALL_MSG\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^||^^'))), '00000000000000000000000000000000') AS HD_ERROR_S\n\n    FROM derived_columns\n  \n),\n\nunknown_values AS (\n  \n    SELECT\n\n    TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'SYSTEM' as rsrc,\n    \n        0 AS ROW_NUMBER,\n        '(unknown)' AS RAW_DATA,\n        NULL AS CHK_ALL_MSG\n     ,\n        CAST('FALSE' AS BOOLEAN) AS IS_CHECK_OK,\n    \n        '(unknown)' AS ERROR_FILE_BK,\n        '(unknown)' AS ERROR_ROW_NO_BK,\n        CAST('00000000000000000000000000000000' as STRING) as HK_ERROR_H,\n        CAST('00000000000000000000000000000000' as STRING) as HD_ERROR_S\n),\n\n\nerror_values AS (\n\n    SELECT\n\n    TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'ERROR' as rsrc,\n    \n        -1 AS ROW_NUMBER\n     ,\n        '(error)' AS RAW_DATA,\n        NULL AS CHK_ALL_MSG\n      ,\n        CAST('FALSE' AS BOOLEAN) AS IS_CHECK_OK\n     ,\n    \n        '(error)' AS ERROR_FILE_BK,\n        '(error)' AS ERROR_ROW_NO_BK,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_ERROR_H,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HD_ERROR_S\n),\n\n\nghost_records AS (\n    SELECT * FROM unknown_values\n    UNION ALL\n    SELECT * FROM error_values\n),\ncolumns_to_select AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"ROW_NUMBER\",\n        \"RAW_DATA\",\n        \"CHK_ALL_MSG\",\n        \"IS_CHECK_OK\",\n        \"ERROR_ROW_NO_BK\",\n        \"ERROR_FILE_BK\",\n        \"HK_ERROR_H\",\n        \"HD_ERROR_S\"\n\n    FROM hashed_columns\n\n  \n    UNION ALL\n    \n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"ROW_NUMBER\",\n        \"RAW_DATA\",\n        \"CHK_ALL_MSG\",\n        \"IS_CHECK_OK\",\n        \"ERROR_ROW_NO_BK\",\n        \"ERROR_FILE_BK\",\n        \"HK_ERROR_H\",\n        \"HD_ERROR_S\"\n\n    FROM ghost_records\n  \n)\n\nSELECT * FROM columns_to_select", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.stg_error_misc", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:12.719428Z", "completed_at": "2025-04-07T20:54:12.726259Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:12.726545Z", "completed_at": "2025-04-07T20:54:14.647255Z"}], "thread_id": "Thread-4", "execution_time": 1.9285659790039062, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0851-0003-ac1200031156"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.load_sdts", "compiled": true, "compiled_code": "\nSELECT  date_trunc(day,ldts_source) as sdts, True as is_active\nFROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_misc_kategorie_termintreue\nwhere is_check_ok\nUNION \nSELECT date_trunc(day,ldts_source) as sdts, True as is_active\nFROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_roadshow_bestellung\nwhere is_check_ok\nUNION \nSELECT date_trunc(day,ldts_source) as sdts,True as is_active\nFROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_bestellung\nwhere is_check_ok\nUNION \nSELECT date_trunc(day,ldts_source) as sdts, True as is_active\nFROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_kunde\nwhere is_check_ok\nUNION \nSELECT date_trunc(day,ldts_source) as sdts, True as is_active\nFROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_lieferadresse\nwhere is_check_ok\nUNION \nSELECT date_trunc(day,ldts_source) as sdts, True as is_active\nFROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_lieferdienst\nwhere is_check_ok\nUNION \nSELECT date_trunc(day,ldts_source) as sdts, True as is_active\nFROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_lieferung\nwhere is_check_ok\nUNION \nSELECT date_trunc(day,ldts_source) as sdts, True as is_active\nFROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_position\nwhere is_check_ok\nUNION \nSELECT date_trunc(day,ldts_source) as sdts, True as is_active\nFROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_produkt\nwhere is_check_ok\nUNION \nSELECT date_trunc(day,ldts_source) as sdts, True as is_active\nFROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_produktkategorie\nwhere is_check_ok\nUNION \nSELECT date_trunc(day,ldts_source) as sdts, True as is_active\nFROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_ref_produkt_typ\nwhere is_check_ok\nUNION \nSELECT date_trunc(day,ldts_source) as sdts, True as is_active\nFROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_vereinspartner\nwhere is_check_ok\nUNION \nSELECT date_trunc(day,ldts_source) as sdts, True as is_active\nFROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_wohnort\nwhere is_check_ok", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_sdts", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:12.778572Z", "completed_at": "2025-04-07T20:54:12.783694Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:12.783906Z", "completed_at": "2025-04-07T20:54:16.328366Z"}], "thread_id": "Thread-1", "execution_time": 3.5505800247192383, "adapter_response": {"_message": "SUCCESS 13", "code": "SUCCESS", "rows_affected": 13, "query_id": "01bb8986-0306-0851-0003-ac120003116e"}, "message": "SUCCESS 13", "failures": null, "unique_id": "model.ddvug_willibald_samen.meta_load", "compiled": true, "compiled_code": "\nwith current_date as\n(\n    SELECT SYSDATE() as ldts\n)\nSELECT 'load_misc_kategorie_termintreue' as table_name, l.file_ldts, coalesce(l.rowcount, 0) as rowcount, ldts\nFROM current_date \nLEFT JOIN (select ldts_source as file_ldts, count(*) as rowcount from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_misc_kategorie_termintreue where is_check_ok group by ldts_source  ) l\n    ON 1=1\nUNION ALL\nSELECT 'load_roadshow_bestellung' as table_name, l.file_ldts, coalesce(l.rowcount, 0) as rowcount, ldts\nFROM current_date \nLEFT JOIN (select ldts_source as file_ldts, count(*) as rowcount from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_roadshow_bestellung where is_check_ok group by ldts_source  ) l\n    ON 1=1\nUNION ALL\nSELECT 'load_webshop_bestellung' as table_name, l.file_ldts, coalesce(l.rowcount, 0) as rowcount, ldts\nFROM current_date \nLEFT JOIN (select ldts_source as file_ldts, count(*) as rowcount from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_bestellung where is_check_ok group by ldts_source  ) l\n    ON 1=1\nUNION ALL\nSELECT 'load_webshop_kunde' as table_name, l.file_ldts, coalesce(l.rowcount, 0) as rowcount, ldts\nFROM current_date \nLEFT JOIN (select ldts_source as file_ldts, count(*) as rowcount from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_kunde where is_check_ok group by ldts_source  ) l\n    ON 1=1\nUNION ALL\nSELECT 'load_webshop_lieferadresse' as table_name, l.file_ldts, coalesce(l.rowcount, 0) as rowcount, ldts\nFROM current_date \nLEFT JOIN (select ldts_source as file_ldts, count(*) as rowcount from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_lieferadresse where is_check_ok group by ldts_source  ) l\n    ON 1=1\nUNION ALL\nSELECT 'load_webshop_lieferdienst' as table_name, l.file_ldts, coalesce(l.rowcount, 0) as rowcount, ldts\nFROM current_date \nLEFT JOIN (select ldts_source as file_ldts, count(*) as rowcount from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_lieferdienst where is_check_ok group by ldts_source  ) l\n    ON 1=1\nUNION ALL\nSELECT 'load_webshop_lieferung' as table_name, l.file_ldts, coalesce(l.rowcount, 0) as rowcount, ldts\nFROM current_date \nLEFT JOIN (select ldts_source as file_ldts, count(*) as rowcount from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_lieferung where is_check_ok group by ldts_source  ) l\n    ON 1=1\nUNION ALL\nSELECT 'load_webshop_position' as table_name, l.file_ldts, coalesce(l.rowcount, 0) as rowcount, ldts\nFROM current_date \nLEFT JOIN (select ldts_source as file_ldts, count(*) as rowcount from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_position where is_check_ok group by ldts_source  ) l\n    ON 1=1\nUNION ALL\nSELECT 'load_webshop_produkt' as table_name, l.file_ldts, coalesce(l.rowcount, 0) as rowcount, ldts\nFROM current_date \nLEFT JOIN (select ldts_source as file_ldts, count(*) as rowcount from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_produkt where is_check_ok group by ldts_source  ) l\n    ON 1=1\nUNION ALL\nSELECT 'load_webshop_produktkategorie' as table_name, l.file_ldts, coalesce(l.rowcount, 0) as rowcount, ldts\nFROM current_date \nLEFT JOIN (select ldts_source as file_ldts, count(*) as rowcount from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_produktkategorie where is_check_ok group by ldts_source  ) l\n    ON 1=1\nUNION ALL\nSELECT 'load_webshop_ref_produkt_typ' as table_name, l.file_ldts, coalesce(l.rowcount, 0) as rowcount, ldts\nFROM current_date \nLEFT JOIN (select ldts_source as file_ldts, count(*) as rowcount from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_ref_produkt_typ where is_check_ok group by ldts_source  ) l\n    ON 1=1\nUNION ALL\nSELECT 'load_webshop_vereinspartner' as table_name, l.file_ldts, coalesce(l.rowcount, 0) as rowcount, ldts\nFROM current_date \nLEFT JOIN (select ldts_source as file_ldts, count(*) as rowcount from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_vereinspartner where is_check_ok group by ldts_source  ) l\n    ON 1=1\nUNION ALL\nSELECT 'load_webshop_wohnort' as table_name, l.file_ldts, coalesce(l.rowcount, 0) as rowcount, ldts\nFROM current_date \nLEFT JOIN (select ldts_source as file_ldts, count(*) as rowcount from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_webshop_wohnort where is_check_ok group by ldts_source  ) l\n    ON 1=1", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_00_meta.meta_load", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:14.649576Z", "completed_at": "2025-04-07T20:54:14.674135Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:14.674322Z", "completed_at": "2025-04-07T20:54:17.168670Z"}], "thread_id": "Thread-4", "execution_time": 2.5197079181671143, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-09a8-0003-ac120002f1aa"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.order_customer_rs_rts", "compiled": true, "compiled_code": "\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\n\n    distinct_concated_target AS (\n\n        SELECT\n        CONCAT(hk_order_customer_l,'||',ldts,'||',rsrc\n) as concat\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_customer_rs_rts\n    ),\nsrc_new_1 AS (\n            SELECT DISTINCT\n                hk_order_customer_l AS hk_order_customer_l,\n                ldts,\n                CAST(rsrc AS STRING) AS rsrc,\n                CAST(UPPER('stg_roadshow_bestellung') AS STRING) AS stg\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_roadshow_bestellung src\n                WHERE src.ldts > (\n            SELECT MAX(ldts)\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_customer_rs_rts\n            WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n            )\n        ),\n\n\n\n\n\nrecords_to_insert AS (\n\n    SELECT\n    \n        hk_order_customer_l,\n        ldts,\n        rsrc,\n        stg\n    FROM src_new_1\n    WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') \n    AND ldts != TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')\n        AND CONCAT(hk_order_customer_l,'||',ldts,'||',rsrc\n) NOT IN (SELECT * FROM distinct_concated_target)\n    \n)\n\nSELECT * FROM records_to_insert\n                                ", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_customer_rs_rts", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:14.175462Z", "completed_at": "2025-04-07T20:54:14.492494Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:14.492840Z", "completed_at": "2025-04-07T20:54:17.492099Z"}], "thread_id": "Thread-2", "execution_time": 3.3176991939544678, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-09a8-0003-ac120002f1a2"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.order_associationpartner_l", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\n\n    distinct_target_hashkeys AS (\n        \n        SELECT\n        hk_order_associationpartner_l\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_associationpartner_l\n\n    ),\n        \n\n            rsrc_static_1 AS (SELECT t.*,\n                    '*/roadshow/bestellung/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_associationpartner_l t\n                    WHERE rsrc like '*/roadshow/bestellung/*'),\n\n        max_ldts_per_rsrc_static_in_target AS (\n        \n\n            SELECT\n                rsrc_static,\n                MAX(ldts) as max_ldts\n            FROM rsrc_static_1\n            WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n            GROUP BY rsrc_static\n\n        ),\n\n\n\n\n    src_new_1 AS (\n\n        SELECT\n            hk_order_associationpartner_l AS hk_order_associationpartner_l,\n            hk_order_h,\n            hk_associationpartner_h,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_roadshow_bestellung src\n        \n\n    ),\n\nearliest_hk_over_all_sources AS (\n    \n\n    SELECT\n        lcte.*\n    FROM src_new_1 AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY hk_order_associationpartner_l ORDER BY ldts) = 1),\n\nrecords_to_insert AS (\n    \n\n    SELECT\n        \n            hk_order_associationpartner_l,\n            hk_order_h,\n            hk_associationpartner_h,\n            ldts,\n            rsrc\n    FROM earliest_hk_over_all_sources\n    WHERE hk_order_associationpartner_l NOT IN (SELECT * FROM distinct_target_hashkeys)\n    \n)\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_associationpartner_l", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:14.430619Z", "completed_at": "2025-04-07T20:54:14.486718Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:14.487448Z", "completed_at": "2025-04-07T20:54:19.128357Z"}], "thread_id": "Thread-3", "execution_time": 4.698746919631958, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0851-0003-ac120003118a"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.order_associationpartner_rs_sts", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\ncte_current_sts as\n(\n    select sts.hk_order_associationpartner_l, sts.rsrc, sts.ldts, cdc\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_associationpartner_rs_sts sts\n    qualify row_number() over (PARTITION BY sts.hk_order_associationpartner_l order by sts.ldts desc) = 1\n)\n,\ncte_current_sts_not_deleted as\n(\n  select  cte_current_sts.hk_order_associationpartner_l, cte_current_sts.rsrc, cte_current_sts.ldts\n  from cte_current_sts\n  where cdc <> 'D'\n)\n, cte_max_rv_ldts AS\n(\n    SELECT COALESCE(max(ldts), TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') ) ldts \n    FROM cte_current_sts_not_deleted\n)\n, cte_stage AS\n(\n    select src.hk_order_associationpartner_l, src.rsrc, src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_roadshow_bestellung src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts\n)\n, cte_rv_stage_union as\n(\n    select cte_current_sts_not_deleted.hk_order_associationpartner_l, cte_current_sts_not_deleted.rsrc, cte_current_sts_not_deleted.ldts\n    from cte_current_sts_not_deleted\n    UNION\n    (\n        select cte_stage.hk_order_associationpartner_l, cte_stage.rsrc, cte_stage.ldts\n        from cte_stage\n    )\n)\n, cte_dat_dom as\n(\n    select distinct src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_roadshow_bestellung src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts \n)\n, cte_key_dom as\n(\n    select cte_rv_stage_union.hk_order_associationpartner_l\n    from cte_rv_stage_union\n)\n, cte_key_dat_dom as\n(\n    select distinct  cte_key_dom.hk_order_associationpartner_l\n                    , cte_dat_dom.ldts\n                    from cte_key_dom \n    cross join cte_dat_dom\n), cte_data_join as\n(\n    select\n          cte_key_dat_dom.hk_order_associationpartner_l dom_key\n        , cte_key_dat_dom.ldts as dom_ldts\n        , cte_rv_stage_union.ldts as stage_ldts, lag(cte_key_dat_dom.ldts) over (partition by  cte_key_dat_dom.hk_order_associationpartner_l order by  cte_key_dat_dom.ldts) as prev_dom_ldts\n        , lag(cte_rv_stage_union.ldts) over (partition by  cte_key_dat_dom.hk_order_associationpartner_l order by  cte_key_dat_dom.ldts) as prev_stage_ldts\n        , cte_rv_stage_union.rsrc\n    from cte_key_dat_dom \n    left join cte_rv_stage_union \n         on cte_key_dat_dom.ldts = cte_rv_stage_union.ldts\n         and cte_key_dat_dom.hk_order_associationpartner_l = cte_rv_stage_union.hk_order_associationpartner_l\n    where 1=1\n)\n, cte_data_interpretation as\n(\n    select\n      dom_key\n    , dom_ldts\n    , stage_ldts, prev_dom_ldts\n    , prev_stage_ldts\n    , CASE WHEN stage_ldts IS NULL AND prev_dom_ldts IS NULL\n        THEN 'discard'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_dom_ldts IS NULL\n    THEN 'I'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_stage_ldts IS NULL \n        THEN 'I'\n        ELSE 'discard'\n        END AS cdc\n    , cte_data_join.rsrc\n    from cte_data_join\n)\nSELECT\n      dom_key AS hk_order_associationpartner_l\n    , dom_ldts AS ldts, cte_data_interpretation.rsrc\n    , cdc\nFROM cte_data_interpretation\nWHERE cdc<>'discard'", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_associationpartner_rs_sts", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:16.333719Z", "completed_at": "2025-04-07T20:54:16.353737Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:16.354092Z", "completed_at": "2025-04-07T20:54:19.290040Z"}], "thread_id": "Thread-1", "execution_time": 2.957700729370117, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0851-0003-ac12000311aa"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.order_customer_rs_sts", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\ncte_current_sts as\n(\n    select sts.hk_order_customer_l, sts.rsrc, sts.ldts, cdc\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_customer_rs_sts sts\n    qualify row_number() over (PARTITION BY sts.hk_order_customer_l order by sts.ldts desc) = 1\n)\n,\ncte_current_sts_not_deleted as\n(\n  select  cte_current_sts.hk_order_customer_l, cte_current_sts.rsrc, cte_current_sts.ldts\n  from cte_current_sts\n  where cdc <> 'D'\n)\n, cte_max_rv_ldts AS\n(\n    SELECT COALESCE(max(ldts), TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') ) ldts \n    FROM cte_current_sts_not_deleted\n)\n, cte_stage AS\n(\n    select src.hk_order_customer_l, src.rsrc, src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_roadshow_bestellung src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts\n)\n, cte_rv_stage_union as\n(\n    select cte_current_sts_not_deleted.hk_order_customer_l, cte_current_sts_not_deleted.rsrc, cte_current_sts_not_deleted.ldts\n    from cte_current_sts_not_deleted\n    UNION\n    (\n        select cte_stage.hk_order_customer_l, cte_stage.rsrc, cte_stage.ldts\n        from cte_stage\n    )\n)\n, cte_dat_dom as\n(\n    select distinct src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_roadshow_bestellung src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts \n)\n, cte_key_dom as\n(\n    select cte_rv_stage_union.hk_order_customer_l\n    from cte_rv_stage_union\n)\n, cte_key_dat_dom as\n(\n    select distinct  cte_key_dom.hk_order_customer_l\n                    , cte_dat_dom.ldts\n                    from cte_key_dom \n    cross join cte_dat_dom\n), cte_data_join as\n(\n    select\n          cte_key_dat_dom.hk_order_customer_l dom_key\n        , cte_key_dat_dom.ldts as dom_ldts\n        , cte_rv_stage_union.ldts as stage_ldts, lag(cte_key_dat_dom.ldts) over (partition by  cte_key_dat_dom.hk_order_customer_l order by  cte_key_dat_dom.ldts) as prev_dom_ldts\n        , lag(cte_rv_stage_union.ldts) over (partition by  cte_key_dat_dom.hk_order_customer_l order by  cte_key_dat_dom.ldts) as prev_stage_ldts\n        , cte_rv_stage_union.rsrc\n    from cte_key_dat_dom \n    left join cte_rv_stage_union \n         on cte_key_dat_dom.ldts = cte_rv_stage_union.ldts\n         and cte_key_dat_dom.hk_order_customer_l = cte_rv_stage_union.hk_order_customer_l\n    where 1=1\n)\n, cte_data_interpretation as\n(\n    select\n      dom_key\n    , dom_ldts\n    , stage_ldts, prev_dom_ldts\n    , prev_stage_ldts\n    , CASE WHEN stage_ldts IS NULL AND prev_dom_ldts IS NULL\n        THEN 'discard'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_dom_ldts IS NULL\n    THEN 'I'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_stage_ldts IS NULL \n        THEN 'I'\n        ELSE 'discard'\n        END AS cdc\n    , cte_data_join.rsrc\n    from cte_data_join\n)\nSELECT\n      dom_key AS hk_order_customer_l\n    , dom_ldts AS ldts, cte_data_interpretation.rsrc\n    , cdc\nFROM cte_data_interpretation\nWHERE cdc<>'discard'", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_customer_rs_sts", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:17.506648Z", "completed_at": "2025-04-07T20:54:17.517976Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:17.518264Z", "completed_at": "2025-04-07T20:54:19.758888Z"}], "thread_id": "Thread-2", "execution_time": 2.253309965133667, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-09a8-0003-ac120002f1d6"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.order_rs_rts", "compiled": true, "compiled_code": "\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\n\n    distinct_concated_target AS (\n\n        SELECT\n        CONCAT(hk_order_h,'||',ldts,'||',rsrc\n) as concat\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_rs_rts\n    ),\nsrc_new_1 AS (\n            SELECT DISTINCT\n                hk_order_h AS hk_order_h,\n                ldts,\n                CAST(rsrc AS STRING) AS rsrc,\n                CAST(UPPER('stg_roadshow_bestellung') AS STRING) AS stg\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_roadshow_bestellung src\n                WHERE src.ldts > (\n            SELECT MAX(ldts)\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_rs_rts\n            WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n            )\n        ),\n\n\n\n\n\nrecords_to_insert AS (\n\n    SELECT\n    \n        hk_order_h,\n        ldts,\n        rsrc,\n        stg\n    FROM src_new_1\n    WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') \n    AND ldts != TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')\n        AND CONCAT(hk_order_h,'||',ldts,'||',rsrc\n) NOT IN (SELECT * FROM distinct_concated_target)\n    \n)\n\nSELECT * FROM records_to_insert\n                                ", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_rs_rts", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:17.173883Z", "completed_at": "2025-04-07T20:54:17.189112Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:17.189411Z", "completed_at": "2025-04-07T20:54:20.359749Z"}], "thread_id": "Thread-4", "execution_time": 3.186925172805786, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0851-0003-ac12000311be"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.order_position_rs_sts", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\ncte_current_sts as\n(\n    select sts.hk_order_position_l, sts.rsrc, sts.ldts, cdc\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_position_rs_sts sts\n    qualify row_number() over (PARTITION BY sts.hk_order_position_l order by sts.ldts desc) = 1\n)\n,\ncte_current_sts_not_deleted as\n(\n  select  cte_current_sts.hk_order_position_l, cte_current_sts.rsrc, cte_current_sts.ldts\n  from cte_current_sts\n  where cdc <> 'D'\n)\n, cte_max_rv_ldts AS\n(\n    SELECT COALESCE(max(ldts), TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') ) ldts \n    FROM cte_current_sts_not_deleted\n)\n, cte_stage AS\n(\n    select src.hk_order_position_l, src.rsrc, src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_roadshow_bestellung src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts\n)\n, cte_rv_stage_union as\n(\n    select cte_current_sts_not_deleted.hk_order_position_l, cte_current_sts_not_deleted.rsrc, cte_current_sts_not_deleted.ldts\n    from cte_current_sts_not_deleted\n    UNION\n    (\n        select cte_stage.hk_order_position_l, cte_stage.rsrc, cte_stage.ldts\n        from cte_stage\n    )\n)\n, cte_dat_dom as\n(\n    select distinct src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_roadshow_bestellung src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts \n)\n, cte_key_dom as\n(\n    select cte_rv_stage_union.hk_order_position_l\n    from cte_rv_stage_union\n)\n, cte_key_dat_dom as\n(\n    select distinct  cte_key_dom.hk_order_position_l\n                    , cte_dat_dom.ldts\n                    from cte_key_dom \n    cross join cte_dat_dom\n), cte_data_join as\n(\n    select\n          cte_key_dat_dom.hk_order_position_l dom_key\n        , cte_key_dat_dom.ldts as dom_ldts\n        , cte_rv_stage_union.ldts as stage_ldts, lag(cte_key_dat_dom.ldts) over (partition by  cte_key_dat_dom.hk_order_position_l order by  cte_key_dat_dom.ldts) as prev_dom_ldts\n        , lag(cte_rv_stage_union.ldts) over (partition by  cte_key_dat_dom.hk_order_position_l order by  cte_key_dat_dom.ldts) as prev_stage_ldts\n        , cte_rv_stage_union.rsrc\n    from cte_key_dat_dom \n    left join cte_rv_stage_union \n         on cte_key_dat_dom.ldts = cte_rv_stage_union.ldts\n         and cte_key_dat_dom.hk_order_position_l = cte_rv_stage_union.hk_order_position_l\n    where 1=1\n)\n, cte_data_interpretation as\n(\n    select\n      dom_key\n    , dom_ldts\n    , stage_ldts, prev_dom_ldts\n    , prev_stage_ldts\n    , CASE WHEN stage_ldts IS NULL AND prev_dom_ldts IS NULL\n        THEN 'discard'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_dom_ldts IS NULL\n    THEN 'I'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_stage_ldts IS NULL \n        THEN 'I'\n        ELSE 'discard'\n        END AS cdc\n    , cte_data_join.rsrc\n    from cte_data_join\n)\nSELECT\n      dom_key AS hk_order_position_l\n    , dom_ldts AS ldts, cte_data_interpretation.rsrc\n    , cdc\nFROM cte_data_interpretation\nWHERE cdc<>'discard'", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_position_rs_sts", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:19.131871Z", "completed_at": "2025-04-07T20:54:19.142154Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:19.142407Z", "completed_at": "2025-04-07T20:54:21.827465Z"}], "thread_id": "Thread-3", "execution_time": 2.6965408325195312, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-09a8-0003-ac120002f1f6"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.order_rs_sts", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\ncte_current_sts as\n(\n    select sts.hk_order_h, sts.rsrc, sts.ldts, cdc\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_rs_sts sts\n    qualify row_number() over (PARTITION BY sts.hk_order_h order by sts.ldts desc) = 1\n)\n,\ncte_current_sts_not_deleted as\n(\n  select  cte_current_sts.hk_order_h, cte_current_sts.rsrc, cte_current_sts.ldts\n  from cte_current_sts\n  where cdc <> 'D'\n)\n, cte_max_rv_ldts AS\n(\n    SELECT COALESCE(max(ldts), TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') ) ldts \n    FROM cte_current_sts_not_deleted\n)\n, cte_stage AS\n(\n    select src.hk_order_h, src.rsrc, src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_roadshow_bestellung src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts\n)\n, cte_rv_stage_union as\n(\n    select cte_current_sts_not_deleted.hk_order_h, cte_current_sts_not_deleted.rsrc, cte_current_sts_not_deleted.ldts\n    from cte_current_sts_not_deleted\n    UNION\n    (\n        select cte_stage.hk_order_h, cte_stage.rsrc, cte_stage.ldts\n        from cte_stage\n    )\n)\n, cte_dat_dom as\n(\n    select distinct src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_roadshow_bestellung src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts \n)\n, cte_key_dom as\n(\n    select cte_rv_stage_union.hk_order_h\n    from cte_rv_stage_union\n)\n, cte_key_dat_dom as\n(\n    select distinct  cte_key_dom.hk_order_h\n                    , cte_dat_dom.ldts\n                    from cte_key_dom \n    cross join cte_dat_dom\n), cte_data_join as\n(\n    select\n          cte_key_dat_dom.hk_order_h dom_key\n        , cte_key_dat_dom.ldts as dom_ldts\n        , cte_rv_stage_union.ldts as stage_ldts, lag(cte_key_dat_dom.ldts) over (partition by  cte_key_dat_dom.hk_order_h order by  cte_key_dat_dom.ldts) as prev_dom_ldts\n        , lag(cte_rv_stage_union.ldts) over (partition by  cte_key_dat_dom.hk_order_h order by  cte_key_dat_dom.ldts) as prev_stage_ldts\n        , cte_rv_stage_union.rsrc\n    from cte_key_dat_dom \n    left join cte_rv_stage_union \n         on cte_key_dat_dom.ldts = cte_rv_stage_union.ldts\n         and cte_key_dat_dom.hk_order_h = cte_rv_stage_union.hk_order_h\n    where 1=1\n)\n, cte_data_interpretation as\n(\n    select\n      dom_key\n    , dom_ldts\n    , stage_ldts, prev_dom_ldts\n    , prev_stage_ldts\n    , CASE WHEN stage_ldts IS NULL AND prev_dom_ldts IS NULL\n        THEN 'discard'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_dom_ldts IS NULL\n    THEN 'I'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_stage_ldts IS NULL \n        THEN 'I'\n        ELSE 'discard'\n        END AS cdc\n    , cte_data_join.rsrc\n    from cte_data_join\n)\nSELECT\n      dom_key AS hk_order_h\n    , dom_ldts AS ldts, cte_data_interpretation.rsrc\n    , cdc\nFROM cte_data_interpretation\nWHERE cdc<>'discard'", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_rs_sts", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:19.292829Z", "completed_at": "2025-04-07T20:54:19.301874Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:19.302104Z", "completed_at": "2025-04-07T20:54:22.496645Z"}], "thread_id": "Thread-1", "execution_time": 3.204580783843994, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0979-0003-ac120003025a"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.position_product_rs_sts", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\ncte_current_sts as\n(\n    select sts.hk_position_product_l, sts.rsrc, sts.ldts, cdc\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_product_rs_sts sts\n    qualify row_number() over (PARTITION BY sts.hk_position_product_l order by sts.ldts desc) = 1\n)\n,\ncte_current_sts_not_deleted as\n(\n  select  cte_current_sts.hk_position_product_l, cte_current_sts.rsrc, cte_current_sts.ldts\n  from cte_current_sts\n  where cdc <> 'D'\n)\n, cte_max_rv_ldts AS\n(\n    SELECT COALESCE(max(ldts), TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') ) ldts \n    FROM cte_current_sts_not_deleted\n)\n, cte_stage AS\n(\n    select src.hk_position_product_l, src.rsrc, src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_roadshow_bestellung src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts\n)\n, cte_rv_stage_union as\n(\n    select cte_current_sts_not_deleted.hk_position_product_l, cte_current_sts_not_deleted.rsrc, cte_current_sts_not_deleted.ldts\n    from cte_current_sts_not_deleted\n    UNION\n    (\n        select cte_stage.hk_position_product_l, cte_stage.rsrc, cte_stage.ldts\n        from cte_stage\n    )\n)\n, cte_dat_dom as\n(\n    select distinct src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_roadshow_bestellung src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts \n)\n, cte_key_dom as\n(\n    select cte_rv_stage_union.hk_position_product_l\n    from cte_rv_stage_union\n)\n, cte_key_dat_dom as\n(\n    select distinct  cte_key_dom.hk_position_product_l\n                    , cte_dat_dom.ldts\n                    from cte_key_dom \n    cross join cte_dat_dom\n), cte_data_join as\n(\n    select\n          cte_key_dat_dom.hk_position_product_l dom_key\n        , cte_key_dat_dom.ldts as dom_ldts\n        , cte_rv_stage_union.ldts as stage_ldts, lag(cte_key_dat_dom.ldts) over (partition by  cte_key_dat_dom.hk_position_product_l order by  cte_key_dat_dom.ldts) as prev_dom_ldts\n        , lag(cte_rv_stage_union.ldts) over (partition by  cte_key_dat_dom.hk_position_product_l order by  cte_key_dat_dom.ldts) as prev_stage_ldts\n        , cte_rv_stage_union.rsrc\n    from cte_key_dat_dom \n    left join cte_rv_stage_union \n         on cte_key_dat_dom.ldts = cte_rv_stage_union.ldts\n         and cte_key_dat_dom.hk_position_product_l = cte_rv_stage_union.hk_position_product_l\n    where 1=1\n)\n, cte_data_interpretation as\n(\n    select\n      dom_key\n    , dom_ldts\n    , stage_ldts, prev_dom_ldts\n    , prev_stage_ldts\n    , CASE WHEN stage_ldts IS NULL AND prev_dom_ldts IS NULL\n        THEN 'discard'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_dom_ldts IS NULL\n    THEN 'I'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_stage_ldts IS NULL \n        THEN 'I'\n        ELSE 'discard'\n        END AS cdc\n    , cte_data_join.rsrc\n    from cte_data_join\n)\nSELECT\n      dom_key AS hk_position_product_l\n    , dom_ldts AS ldts, cte_data_interpretation.rsrc\n    , cdc\nFROM cte_data_interpretation\nWHERE cdc<>'discard'", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_product_rs_sts", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:19.764209Z", "completed_at": "2025-04-07T20:54:19.798115Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:19.798398Z", "completed_at": "2025-04-07T20:54:23.301648Z"}], "thread_id": "Thread-2", "execution_time": 3.538771867752075, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0851-0003-ac12000311ea"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.position_rs_s", "compiled": true, "compiled_code": "\n\n\n\n    \n    \n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\nsource_data AS (\n\n    SELECT\n        hk_position_h,\n        hd_position_rs_s as hd_position_rs_s,\n        \n        rsrc,\n        ldts,\n        bestellungid,\n        gueltigbis,\n        kaufdatum,\n        kkfirma,\n        kreditkarte,\n        menge,\n        preis,\n        produktid,\n        rabatt\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_roadshow_bestellung\n    WHERE ldts > (\n        SELECT\n            MAX(ldts) FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_rs_s\n        WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n    )\n),\n\n\nlatest_entries_in_sat AS (\n\n    SELECT\n        hk_position_h,\n        hd_position_rs_s\n    FROM \n        WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_rs_s\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY hk_position_h ORDER BY ldts DESC) = 1  \n),\n\n\ndeduplicated_numbered_source AS (\n\n    SELECT\n    hk_position_h,\n    hd_position_rs_s,\n    \n        rsrc,\n        ldts,\n        bestellungid,\n        gueltigbis,\n        kaufdatum,\n        kkfirma,\n        kreditkarte,\n        menge,\n        preis,\n        produktid,\n        rabatt\n    , ROW_NUMBER() OVER(PARTITION BY hk_position_h ORDER BY ldts) as rn\n    FROM source_data\n    QUALIFY\n        CASE\n            WHEN hd_position_rs_s = LAG(hd_position_rs_s) OVER(PARTITION BY hk_position_h ORDER BY ldts) THEN FALSE\n            ELSE TRUE\n        END\n),\n\n\nrecords_to_insert AS (\n\n    SELECT\n    hk_position_h,\n    hd_position_rs_s,\n    \n        rsrc,\n        ldts,\n        bestellungid,\n        gueltigbis,\n        kaufdatum,\n        kkfirma,\n        kreditkarte,\n        menge,\n        preis,\n        produktid,\n        rabatt\n    FROM deduplicated_numbered_source\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE latest_entries_in_sat.hk_position_h = deduplicated_numbered_source.hk_position_h\n            AND latest_entries_in_sat.hd_position_rs_s = deduplicated_numbered_source.hd_position_rs_s\n            AND deduplicated_numbered_source.rn = 1)\n\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_rs_s", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:20.376129Z", "completed_at": "2025-04-07T20:54:20.389665Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:20.389980Z", "completed_at": "2025-04-07T20:54:23.446498Z"}], "thread_id": "Thread-4", "execution_time": 3.0723650455474854, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0979-0003-ac120003026a"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.position_rs_sts", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\ncte_current_sts as\n(\n    select sts.hk_position_h, sts.rsrc, sts.ldts, cdc\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_rs_sts sts\n    qualify row_number() over (PARTITION BY sts.hk_position_h order by sts.ldts desc) = 1\n)\n,\ncte_current_sts_not_deleted as\n(\n  select  cte_current_sts.hk_position_h, cte_current_sts.rsrc, cte_current_sts.ldts\n  from cte_current_sts\n  where cdc <> 'D'\n)\n, cte_max_rv_ldts AS\n(\n    SELECT COALESCE(max(ldts), TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') ) ldts \n    FROM cte_current_sts_not_deleted\n)\n, cte_stage AS\n(\n    select src.hk_position_h, src.rsrc, src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_roadshow_bestellung src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts\n)\n, cte_rv_stage_union as\n(\n    select cte_current_sts_not_deleted.hk_position_h, cte_current_sts_not_deleted.rsrc, cte_current_sts_not_deleted.ldts\n    from cte_current_sts_not_deleted\n    UNION\n    (\n        select cte_stage.hk_position_h, cte_stage.rsrc, cte_stage.ldts\n        from cte_stage\n    )\n)\n, cte_dat_dom as\n(\n    select distinct src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_roadshow_bestellung src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts \n)\n, cte_key_dom as\n(\n    select cte_rv_stage_union.hk_position_h\n    from cte_rv_stage_union\n)\n, cte_key_dat_dom as\n(\n    select distinct  cte_key_dom.hk_position_h\n                    , cte_dat_dom.ldts\n                    from cte_key_dom \n    cross join cte_dat_dom\n), cte_data_join as\n(\n    select\n          cte_key_dat_dom.hk_position_h dom_key\n        , cte_key_dat_dom.ldts as dom_ldts\n        , cte_rv_stage_union.ldts as stage_ldts, lag(cte_key_dat_dom.ldts) over (partition by  cte_key_dat_dom.hk_position_h order by  cte_key_dat_dom.ldts) as prev_dom_ldts\n        , lag(cte_rv_stage_union.ldts) over (partition by  cte_key_dat_dom.hk_position_h order by  cte_key_dat_dom.ldts) as prev_stage_ldts\n        , cte_rv_stage_union.rsrc\n    from cte_key_dat_dom \n    left join cte_rv_stage_union \n         on cte_key_dat_dom.ldts = cte_rv_stage_union.ldts\n         and cte_key_dat_dom.hk_position_h = cte_rv_stage_union.hk_position_h\n    where 1=1\n)\n, cte_data_interpretation as\n(\n    select\n      dom_key\n    , dom_ldts\n    , stage_ldts, prev_dom_ldts\n    , prev_stage_ldts\n    , CASE WHEN stage_ldts IS NULL AND prev_dom_ldts IS NULL\n        THEN 'discard'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_dom_ldts IS NULL\n    THEN 'I'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_stage_ldts IS NULL \n        THEN 'I'\n        ELSE 'discard'\n        END AS cdc\n    , cte_data_join.rsrc\n    from cte_data_join\n)\nSELECT\n      dom_key AS hk_position_h\n    , dom_ldts AS ldts, cte_data_interpretation.rsrc\n    , cdc\nFROM cte_data_interpretation\nWHERE cdc<>'discard'", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_rs_sts", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:21.833661Z", "completed_at": "2025-04-07T20:54:21.870868Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:21.871392Z", "completed_at": "2025-04-07T20:54:24.503748Z"}], "thread_id": "Thread-3", "execution_time": 2.671525239944458, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0851-0003-ac120003120a"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.category_deliveryadherence_misc_rs", "compiled": true, "compiled_code": "\n\n\n\n\n\n    \n    \n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\nsource_data AS (\n\n    SELECT\n        \n        category_deliveryadherence_nk,\n        \n        hd_category_deliveryadherence_misc_rs as hd_category_deliveryadherence_misc_rs,\n        \n        rsrc,\n        ldts,\n        count_days_from,\n        count_days_to,\n        name\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_misc_kategorie_termintreue\n    WHERE ldts > (\n        SELECT\n            MAX(ldts) FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.category_deliveryadherence_misc_rs\n        WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n    )\n),\n\n\nlatest_entries_in_sat AS (\n\n    SELECT\n        \n        category_deliveryadherence_nk,\n        \n        hd_category_deliveryadherence_misc_rs\n    FROM \n        WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.category_deliveryadherence_misc_rs\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY category_deliveryadherence_nk ORDER BY ldts DESC) = 1  \n),\n\n\ndeduplicated_numbered_source AS (\n\n    SELECT\n    \n    category_deliveryadherence_nk,\n    \n    hd_category_deliveryadherence_misc_rs,\n    \n        rsrc,\n        ldts,\n        count_days_from,\n        count_days_to,\n        name\n    , ROW_NUMBER() OVER(PARTITION BY category_deliveryadherence_nk ORDER BY ldts) as rn\n    FROM source_data\n    QUALIFY\n        CASE\n            WHEN hd_category_deliveryadherence_misc_rs = LAG(hd_category_deliveryadherence_misc_rs) OVER(PARTITION BY category_deliveryadherence_nk ORDER BY ldts) THEN FALSE\n            ELSE TRUE\n        END\n),\n\n\nrecords_to_insert AS (\n\n    SELECT\n    \n    category_deliveryadherence_nk,\n    \n    hd_category_deliveryadherence_misc_rs,\n    \n        rsrc,\n        ldts,\n        count_days_from,\n        count_days_to,\n        name\n    FROM deduplicated_numbered_source\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE 1=1\n            \n            AND latest_entries_in_sat.category_deliveryadherence_nk = deduplicated_numbered_source.category_deliveryadherence_nk\n            \n            AND latest_entries_in_sat.hd_category_deliveryadherence_misc_rs = deduplicated_numbered_source.hd_category_deliveryadherence_misc_rs\n            AND deduplicated_numbered_source.rn = 1)\n\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.category_deliveryadherence_misc_rs", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:22.502383Z", "completed_at": "2025-04-07T20:54:22.518955Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:22.519367Z", "completed_at": "2025-04-07T20:54:24.949597Z"}], "thread_id": "Thread-1", "execution_time": 2.4490089416503906, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-09a8-0003-ac120002f236"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.category_deliveryadherence_misc_sts", "compiled": true, "compiled_code": "WITH\n\n\ncte_current_sts as\n(\n    select sts.category_deliveryadherence_nk, sts.rsrc, sts.ldts, cdc\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.category_deliveryadherence_misc_sts sts\n    qualify row_number() over (PARTITION BY sts.category_deliveryadherence_nk order by sts.ldts desc) = 1\n)\n,\ncte_current_sts_not_deleted as\n(\n  select  cte_current_sts.category_deliveryadherence_nk, cte_current_sts.rsrc, cte_current_sts.ldts\n  from cte_current_sts\n  where cdc <> 'D'\n)\n, cte_max_rv_ldts AS\n(\n    SELECT COALESCE(max(ldts), TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') ) ldts \n    FROM cte_current_sts_not_deleted\n)\n, cte_stage AS\n(\n    select src.category_deliveryadherence_nk, src.rsrc, src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_misc_kategorie_termintreue src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts\n)\n, cte_rv_stage_union as\n(\n    select cte_current_sts_not_deleted.category_deliveryadherence_nk, cte_current_sts_not_deleted.rsrc, cte_current_sts_not_deleted.ldts\n    from cte_current_sts_not_deleted\n    UNION\n    (\n        select cte_stage.category_deliveryadherence_nk, cte_stage.rsrc, cte_stage.ldts\n        from cte_stage\n    )\n)\n, cte_dat_dom as\n(\n    select distinct src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_misc_kategorie_termintreue src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts \n)\n, cte_key_dom as\n(\n    select cte_rv_stage_union.category_deliveryadherence_nk\n    from cte_rv_stage_union\n)\n, cte_key_dat_dom as\n(\n    select distinct  cte_key_dom.category_deliveryadherence_nk\n                    , cte_dat_dom.ldts\n                    from cte_key_dom \n    cross join cte_dat_dom\n), cte_data_join as\n(\n    select\n          cte_key_dat_dom.category_deliveryadherence_nk dom_key\n        , cte_key_dat_dom.ldts as dom_ldts\n        , cte_rv_stage_union.ldts as stage_ldts, lag(cte_key_dat_dom.ldts) over (partition by  cte_key_dat_dom.category_deliveryadherence_nk order by  cte_key_dat_dom.ldts) as prev_dom_ldts\n        , lag(cte_rv_stage_union.ldts) over (partition by  cte_key_dat_dom.category_deliveryadherence_nk order by  cte_key_dat_dom.ldts) as prev_stage_ldts\n        , cte_rv_stage_union.rsrc\n    from cte_key_dat_dom \n    left join cte_rv_stage_union \n         on cte_key_dat_dom.ldts = cte_rv_stage_union.ldts\n         and cte_key_dat_dom.category_deliveryadherence_nk = cte_rv_stage_union.category_deliveryadherence_nk\n    where 1=1\n)\n, cte_data_interpretation as\n(\n    select\n      dom_key\n    , dom_ldts\n    , stage_ldts, prev_dom_ldts\n    , prev_stage_ldts\n    , CASE WHEN stage_ldts IS NULL AND prev_dom_ldts IS NULL\n        THEN 'discard'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_dom_ldts IS NULL\n    THEN 'I'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_stage_ldts IS NULL \n        THEN 'I'\n        WHEN stage_ldts IS NULL AND COALESCE(prev_stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))= COALESCE(prev_dom_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))\n        THEN 'D'\n    \n        ELSE 'discard'\n        END AS cdc\n    , cte_data_join.rsrc\n    from cte_data_join\n)\nSELECT\n      dom_key AS category_deliveryadherence_nk\n    , dom_ldts AS ldts, cte_data_interpretation.rsrc\n    , cdc\nFROM cte_data_interpretation\nWHERE cdc<>'discard'", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.category_deliveryadherence_misc_sts", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:23.306911Z", "completed_at": "2025-04-07T20:54:23.607947Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:23.608855Z", "completed_at": "2025-04-07T20:54:25.915044Z"}], "thread_id": "Thread-2", "execution_time": 2.609200954437256, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-09a8-0003-ac120002f252"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.category_deliveryadherence_r", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\n    distinct_target_ref_keys AS (\n\n        SELECT\n            CONCAT(category_deliveryadherence_nk\n)\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.category_deliveryadherence_r\n\n    ),\n         \n\n            rsrc_static_1 AS (SELECT \n                    t.ldts,\n                    '*/misc/kategorie_termintreue/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.category_deliveryadherence_r t\n                    WHERE rsrc LIKE '*/misc/kategorie_termintreue/*'),\n\n        max_ldts_per_rsrc_static_in_target AS (\n        \n            SELECT\n                rsrc_static,\n                MAX(ldts) as max_ldts\n            FROM rsrc_static_1\n            WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n            GROUP BY rsrc_static\n\n        ),\nsrc_new_1 AS (\n\n        SELECT\n            category_deliveryadherence_nk,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_misc_kategorie_termintreue src\n\n    ),\n\nearliest_ref_key_over_all_sources AS (\n    SELECT\n        lcte.*\n    FROM src_new_1 AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY category_deliveryadherence_nk ORDER BY ldts) = 1),\n\nrecords_to_insert AS (\n    SELECT\n        \n        category_deliveryadherence_nk,\n        ldts,\n        rsrc\n    FROM earliest_ref_key_over_all_sources\n    WHERE CONCAT(category_deliveryadherence_nk\n) NOT IN (SELECT * FROM distinct_target_ref_keys)\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.category_deliveryadherence_r", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:23.449622Z", "completed_at": "2025-04-07T20:54:23.641016Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:23.641378Z", "completed_at": "2025-04-07T20:54:26.259977Z"}], "thread_id": "Thread-4", "execution_time": 2.8111398220062256, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0979-0003-ac12000302aa"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.deliveryadress_customer_l", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\n\n    distinct_target_hashkeys AS (\n        \n        SELECT\n        hk_deliveryadress_customer_l\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryadress_customer_l\n\n    ),\n        \n\n            rsrc_static_1 AS (SELECT t.*,\n                    '*/webshop/lieferadresse/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryadress_customer_l t\n                    WHERE rsrc like '*/webshop/lieferadresse/*'),\n\n        max_ldts_per_rsrc_static_in_target AS (\n        \n\n            SELECT\n                rsrc_static,\n                MAX(ldts) as max_ldts\n            FROM rsrc_static_1\n            WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n            GROUP BY rsrc_static\n\n        ),\n\n\n\n\n    src_new_1 AS (\n\n        SELECT\n            hk_deliveryadress_customer_l AS hk_deliveryadress_customer_l,\n            hk_deliveryadress_h,\n            hk_customer_h,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_lieferadresse src\n        \n\n    ),\n\nearliest_hk_over_all_sources AS (\n    \n\n    SELECT\n        lcte.*\n    FROM src_new_1 AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY hk_deliveryadress_customer_l ORDER BY ldts) = 1),\n\nrecords_to_insert AS (\n    \n\n    SELECT\n        \n            hk_deliveryadress_customer_l,\n            hk_deliveryadress_h,\n            hk_customer_h,\n            ldts,\n            rsrc\n    FROM earliest_hk_over_all_sources\n    WHERE hk_deliveryadress_customer_l NOT IN (SELECT * FROM distinct_target_hashkeys)\n    \n)\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryadress_customer_l", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:24.506855Z", "completed_at": "2025-04-07T20:54:24.517501Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:24.517762Z", "completed_at": "2025-04-07T20:54:27.154048Z"}], "thread_id": "Thread-3", "execution_time": 2.6480140686035156, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0979-0003-ac12000302c6"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.deliveryadress_customer_ws_sts", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\ncte_current_sts as\n(\n    select sts.hk_deliveryadress_customer_l, sts.rsrc, sts.ldts, cdc\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryadress_customer_ws_sts sts\n    qualify row_number() over (PARTITION BY sts.hk_deliveryadress_customer_l order by sts.ldts desc) = 1\n)\n,\ncte_current_sts_not_deleted as\n(\n  select  cte_current_sts.hk_deliveryadress_customer_l, cte_current_sts.rsrc, cte_current_sts.ldts\n  from cte_current_sts\n  where cdc <> 'D'\n)\n, cte_max_rv_ldts AS\n(\n    SELECT COALESCE(max(ldts), TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') ) ldts \n    FROM cte_current_sts_not_deleted\n)\n, cte_stage AS\n(\n    select src.hk_deliveryadress_customer_l, src.rsrc, src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_lieferadresse src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts\n)\n, cte_rv_stage_union as\n(\n    select cte_current_sts_not_deleted.hk_deliveryadress_customer_l, cte_current_sts_not_deleted.rsrc, cte_current_sts_not_deleted.ldts\n    from cte_current_sts_not_deleted\n    UNION\n    (\n        select cte_stage.hk_deliveryadress_customer_l, cte_stage.rsrc, cte_stage.ldts\n        from cte_stage\n    )\n)\n, cte_dat_dom as\n(\n    select distinct src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_lieferadresse src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts \n)\n, cte_key_dom as\n(\n    select cte_rv_stage_union.hk_deliveryadress_customer_l\n    from cte_rv_stage_union\n)\n, cte_key_dat_dom as\n(\n    select distinct  cte_key_dom.hk_deliveryadress_customer_l\n                    , cte_dat_dom.ldts\n                    from cte_key_dom \n    cross join cte_dat_dom\n), cte_data_join as\n(\n    select\n          cte_key_dat_dom.hk_deliveryadress_customer_l dom_key\n        , cte_key_dat_dom.ldts as dom_ldts\n        , cte_rv_stage_union.ldts as stage_ldts, lag(cte_key_dat_dom.ldts) over (partition by  cte_key_dat_dom.hk_deliveryadress_customer_l order by  cte_key_dat_dom.ldts) as prev_dom_ldts\n        , lag(cte_rv_stage_union.ldts) over (partition by  cte_key_dat_dom.hk_deliveryadress_customer_l order by  cte_key_dat_dom.ldts) as prev_stage_ldts\n        , cte_rv_stage_union.rsrc\n    from cte_key_dat_dom \n    left join cte_rv_stage_union \n         on cte_key_dat_dom.ldts = cte_rv_stage_union.ldts\n         and cte_key_dat_dom.hk_deliveryadress_customer_l = cte_rv_stage_union.hk_deliveryadress_customer_l\n    where 1=1\n)\n, cte_data_interpretation as\n(\n    select\n      dom_key\n    , dom_ldts\n    , stage_ldts, prev_dom_ldts\n    , prev_stage_ldts\n    , CASE WHEN stage_ldts IS NULL AND prev_dom_ldts IS NULL\n        THEN 'discard'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_dom_ldts IS NULL\n    THEN 'I'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_stage_ldts IS NULL \n        THEN 'I'\n        WHEN stage_ldts IS NULL AND COALESCE(prev_stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))= COALESCE(prev_dom_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))\n        THEN 'D'\n    \n        ELSE 'discard'\n        END AS cdc\n    , cte_data_join.rsrc\n    from cte_data_join\n)\nSELECT\n      dom_key AS hk_deliveryadress_customer_l\n    , dom_ldts AS ldts, cte_data_interpretation.rsrc\n    , cdc\nFROM cte_data_interpretation\nWHERE cdc<>'discard'", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryadress_customer_ws_sts", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:24.954124Z", "completed_at": "2025-04-07T20:54:24.970205Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:24.970618Z", "completed_at": "2025-04-07T20:54:27.960178Z"}], "thread_id": "Thread-1", "execution_time": 3.007157802581787, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0851-0003-ac1200031262"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.deliveryadress_ws_s", "compiled": true, "compiled_code": "\n\n\n\n    \n    \n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\nsource_data AS (\n\n    SELECT\n        hk_deliveryadress_h,\n        hd_deliveryadress_ws_s as hd_deliveryadress_ws_s,\n        \n        rsrc,\n        ldts,\n        adresszusatz,\n        hausnummer,\n        land,\n        ort,\n        plz,\n        strasse\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_lieferadresse\n    WHERE ldts > (\n        SELECT\n            MAX(ldts) FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryadress_ws_s\n        WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n    )\n),\n\n\nlatest_entries_in_sat AS (\n\n    SELECT\n        hk_deliveryadress_h,\n        hd_deliveryadress_ws_s\n    FROM \n        WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryadress_ws_s\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY hk_deliveryadress_h ORDER BY ldts DESC) = 1  \n),\n\n\ndeduplicated_numbered_source AS (\n\n    SELECT\n    hk_deliveryadress_h,\n    hd_deliveryadress_ws_s,\n    \n        rsrc,\n        ldts,\n        adresszusatz,\n        hausnummer,\n        land,\n        ort,\n        plz,\n        strasse\n    , ROW_NUMBER() OVER(PARTITION BY hk_deliveryadress_h ORDER BY ldts) as rn\n    FROM source_data\n    QUALIFY\n        CASE\n            WHEN hd_deliveryadress_ws_s = LAG(hd_deliveryadress_ws_s) OVER(PARTITION BY hk_deliveryadress_h ORDER BY ldts) THEN FALSE\n            ELSE TRUE\n        END\n),\n\n\nrecords_to_insert AS (\n\n    SELECT\n    hk_deliveryadress_h,\n    hd_deliveryadress_ws_s,\n    \n        rsrc,\n        ldts,\n        adresszusatz,\n        hausnummer,\n        land,\n        ort,\n        plz,\n        strasse\n    FROM deduplicated_numbered_source\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE latest_entries_in_sat.hk_deliveryadress_h = deduplicated_numbered_source.hk_deliveryadress_h\n            AND latest_entries_in_sat.hd_deliveryadress_ws_s = deduplicated_numbered_source.hd_deliveryadress_ws_s\n            AND deduplicated_numbered_source.rn = 1)\n\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryadress_ws_s", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:25.918577Z", "completed_at": "2025-04-07T20:54:26.323798Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:26.324316Z", "completed_at": "2025-04-07T20:54:29.272126Z"}], "thread_id": "Thread-2", "execution_time": 3.354429244995117, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-09a8-0003-ac120002f292"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.order_customer_l", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\n\n    distinct_target_hashkeys AS (\n        \n        SELECT\n        hk_order_customer_l\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_customer_l\n\n    ),\n        \n\n            rsrc_static_1 AS (SELECT t.*,\n                    '*/roadshow/bestellung/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_customer_l t\n                    WHERE rsrc like '*/roadshow/bestellung/*'),\n        \n\n            rsrc_static_2 AS (SELECT t.*,\n                    '*/webshop/bestellung/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_customer_l t\n                    WHERE rsrc like '*/webshop/bestellung/*'),\n\n        rsrc_static_union AS (\n            \n\n            SELECT rsrc_static_1.* FROM rsrc_static_1\n            UNION ALL\n            SELECT rsrc_static_2.* FROM rsrc_static_2),\n\n        max_ldts_per_rsrc_static_in_target AS (\n        \n\n            SELECT\n                rsrc_static,\n                MAX(ldts) as max_ldts\n            FROM rsrc_static_union\n            WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n            GROUP BY rsrc_static\n\n        ),\n\n\n\n\n    src_new_1 AS (\n\n        SELECT\n            hk_order_customer_l AS hk_order_customer_l,\n            hk_order_h,\n            hk_customer_h,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_roadshow_bestellung src\n        \n\n    ),\n\n\n\n    src_new_2 AS (\n\n        SELECT\n            hk_order_customer_l AS hk_order_customer_l,\n            hk_order_h,\n            hk_customer_h,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_bestellung src\n        \n\n    ),\n\nsource_new_union AS (\nSELECT\n        hk_order_customer_l,\n        \n            hk_order_h AS hk_order_h,\n        \n            hk_customer_h AS hk_customer_h,\n        ldts,\n        rsrc\n    FROM src_new_1\n    UNION ALL\n    SELECT\n        hk_order_customer_l,\n        \n            hk_order_h AS hk_order_h,\n        \n            hk_customer_h AS hk_customer_h,\n        ldts,\n        rsrc\n    FROM src_new_2),\n\nearliest_hk_over_all_sources AS (\n    \n\n    SELECT\n        lcte.*\n    FROM source_new_union AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY hk_order_customer_l ORDER BY ldts) = 1),\n\nrecords_to_insert AS (\n    \n\n    SELECT\n        \n            hk_order_customer_l,\n            hk_order_h,\n            hk_customer_h,\n            ldts,\n            rsrc\n    FROM earliest_hk_over_all_sources\n    WHERE hk_order_customer_l NOT IN (SELECT * FROM distinct_target_hashkeys)\n    \n)\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_customer_l", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:26.959915Z", "completed_at": "2025-04-07T20:54:26.979266Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:26.979639Z", "completed_at": "2025-04-07T20:54:29.511801Z"}], "thread_id": "Thread-4", "execution_time": 2.553321123123169, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-09a8-0003-ac120002f2a6"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.order_customer_ws_sts", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\ncte_current_sts as\n(\n    select sts.hk_order_customer_l, sts.rsrc, sts.ldts, cdc\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_customer_ws_sts sts\n    qualify row_number() over (PARTITION BY sts.hk_order_customer_l order by sts.ldts desc) = 1\n)\n,\ncte_current_sts_not_deleted as\n(\n  select  cte_current_sts.hk_order_customer_l, cte_current_sts.rsrc, cte_current_sts.ldts\n  from cte_current_sts\n  where cdc <> 'D'\n)\n, cte_max_rv_ldts AS\n(\n    SELECT COALESCE(max(ldts), TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') ) ldts \n    FROM cte_current_sts_not_deleted\n)\n, cte_stage AS\n(\n    select src.hk_order_customer_l, src.rsrc, src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_bestellung src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts\n)\n, cte_rv_stage_union as\n(\n    select cte_current_sts_not_deleted.hk_order_customer_l, cte_current_sts_not_deleted.rsrc, cte_current_sts_not_deleted.ldts\n    from cte_current_sts_not_deleted\n    UNION\n    (\n        select cte_stage.hk_order_customer_l, cte_stage.rsrc, cte_stage.ldts\n        from cte_stage\n    )\n)\n, cte_dat_dom as\n(\n    select distinct src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_bestellung src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts \n)\n, cte_key_dom as\n(\n    select cte_rv_stage_union.hk_order_customer_l\n    from cte_rv_stage_union\n)\n, cte_key_dat_dom as\n(\n    select distinct  cte_key_dom.hk_order_customer_l\n                    , cte_dat_dom.ldts\n                    from cte_key_dom \n    cross join cte_dat_dom\n), cte_data_join as\n(\n    select\n          cte_key_dat_dom.hk_order_customer_l dom_key\n        , cte_key_dat_dom.ldts as dom_ldts\n        , cte_rv_stage_union.ldts as stage_ldts, lag(cte_key_dat_dom.ldts) over (partition by  cte_key_dat_dom.hk_order_customer_l order by  cte_key_dat_dom.ldts) as prev_dom_ldts\n        , lag(cte_rv_stage_union.ldts) over (partition by  cte_key_dat_dom.hk_order_customer_l order by  cte_key_dat_dom.ldts) as prev_stage_ldts\n        , cte_rv_stage_union.rsrc\n    from cte_key_dat_dom \n    left join cte_rv_stage_union \n         on cte_key_dat_dom.ldts = cte_rv_stage_union.ldts\n         and cte_key_dat_dom.hk_order_customer_l = cte_rv_stage_union.hk_order_customer_l\n    where 1=1\n)\n, cte_data_interpretation as\n(\n    select\n      dom_key\n    , dom_ldts\n    , stage_ldts, prev_dom_ldts\n    , prev_stage_ldts\n    , CASE WHEN stage_ldts IS NULL AND prev_dom_ldts IS NULL\n        THEN 'discard'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_dom_ldts IS NULL\n    THEN 'I'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_stage_ldts IS NULL \n        THEN 'I'\n        WHEN stage_ldts IS NULL AND COALESCE(prev_stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))= COALESCE(prev_dom_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))\n        THEN 'D'\n    \n        ELSE 'discard'\n        END AS cdc\n    , cte_data_join.rsrc\n    from cte_data_join\n)\nSELECT\n      dom_key AS hk_order_customer_l\n    , dom_ldts AS ldts, cte_data_interpretation.rsrc\n    , cdc\nFROM cte_data_interpretation\nWHERE cdc<>'discard'", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_customer_ws_sts", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:27.161496Z", "completed_at": "2025-04-07T20:54:27.176897Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:27.177239Z", "completed_at": "2025-04-07T20:54:29.777068Z"}], "thread_id": "Thread-3", "execution_time": 2.617763042449951, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-09a8-0003-ac120002f2a2"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.order_ws_s", "compiled": true, "compiled_code": "\n\n\n\n    \n    \n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\nsource_data AS (\n\n    SELECT\n        hk_order_h,\n        hd_order_ws_s as hd_order_ws_s,\n        \n        rsrc,\n        ldts,\n        allglieferadrid,\n        bestelldatum,\n        rabatt,\n        wunschdatum\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_bestellung\n    WHERE ldts > (\n        SELECT\n            MAX(ldts) FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_ws_s\n        WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n    )\n),\n\n\nlatest_entries_in_sat AS (\n\n    SELECT\n        hk_order_h,\n        hd_order_ws_s\n    FROM \n        WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_ws_s\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY hk_order_h ORDER BY ldts DESC) = 1  \n),\n\n\ndeduplicated_numbered_source AS (\n\n    SELECT\n    hk_order_h,\n    hd_order_ws_s,\n    \n        rsrc,\n        ldts,\n        allglieferadrid,\n        bestelldatum,\n        rabatt,\n        wunschdatum\n    , ROW_NUMBER() OVER(PARTITION BY hk_order_h ORDER BY ldts) as rn\n    FROM source_data\n    QUALIFY\n        CASE\n            WHEN hd_order_ws_s = LAG(hd_order_ws_s) OVER(PARTITION BY hk_order_h ORDER BY ldts) THEN FALSE\n            ELSE TRUE\n        END\n),\n\n\nrecords_to_insert AS (\n\n    SELECT\n    hk_order_h,\n    hd_order_ws_s,\n    \n        rsrc,\n        ldts,\n        allglieferadrid,\n        bestelldatum,\n        rabatt,\n        wunschdatum\n    FROM deduplicated_numbered_source\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE latest_entries_in_sat.hk_order_h = deduplicated_numbered_source.hk_order_h\n            AND latest_entries_in_sat.hd_order_ws_s = deduplicated_numbered_source.hd_order_ws_s\n            AND deduplicated_numbered_source.rn = 1)\n\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_ws_s", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:27.963305Z", "completed_at": "2025-04-07T20:54:27.971708Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:27.971981Z", "completed_at": "2025-04-07T20:54:30.748235Z"}], "thread_id": "Thread-1", "execution_time": 2.7855167388916016, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0979-0003-ac1200030312"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.order_ws_sts", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\ncte_current_sts as\n(\n    select sts.hk_order_h, sts.rsrc, sts.ldts, cdc\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_ws_sts sts\n    qualify row_number() over (PARTITION BY sts.hk_order_h order by sts.ldts desc) = 1\n)\n,\ncte_current_sts_not_deleted as\n(\n  select  cte_current_sts.hk_order_h, cte_current_sts.rsrc, cte_current_sts.ldts\n  from cte_current_sts\n  where cdc <> 'D'\n)\n, cte_max_rv_ldts AS\n(\n    SELECT COALESCE(max(ldts), TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') ) ldts \n    FROM cte_current_sts_not_deleted\n)\n, cte_stage AS\n(\n    select src.hk_order_h, src.rsrc, src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_bestellung src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts\n)\n, cte_rv_stage_union as\n(\n    select cte_current_sts_not_deleted.hk_order_h, cte_current_sts_not_deleted.rsrc, cte_current_sts_not_deleted.ldts\n    from cte_current_sts_not_deleted\n    UNION\n    (\n        select cte_stage.hk_order_h, cte_stage.rsrc, cte_stage.ldts\n        from cte_stage\n    )\n)\n, cte_dat_dom as\n(\n    select distinct src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_bestellung src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts \n)\n, cte_key_dom as\n(\n    select cte_rv_stage_union.hk_order_h\n    from cte_rv_stage_union\n)\n, cte_key_dat_dom as\n(\n    select distinct  cte_key_dom.hk_order_h\n                    , cte_dat_dom.ldts\n                    from cte_key_dom \n    cross join cte_dat_dom\n), cte_data_join as\n(\n    select\n          cte_key_dat_dom.hk_order_h dom_key\n        , cte_key_dat_dom.ldts as dom_ldts\n        , cte_rv_stage_union.ldts as stage_ldts, lag(cte_key_dat_dom.ldts) over (partition by  cte_key_dat_dom.hk_order_h order by  cte_key_dat_dom.ldts) as prev_dom_ldts\n        , lag(cte_rv_stage_union.ldts) over (partition by  cte_key_dat_dom.hk_order_h order by  cte_key_dat_dom.ldts) as prev_stage_ldts\n        , cte_rv_stage_union.rsrc\n    from cte_key_dat_dom \n    left join cte_rv_stage_union \n         on cte_key_dat_dom.ldts = cte_rv_stage_union.ldts\n         and cte_key_dat_dom.hk_order_h = cte_rv_stage_union.hk_order_h\n    where 1=1\n)\n, cte_data_interpretation as\n(\n    select\n      dom_key\n    , dom_ldts\n    , stage_ldts, prev_dom_ldts\n    , prev_stage_ldts\n    , CASE WHEN stage_ldts IS NULL AND prev_dom_ldts IS NULL\n        THEN 'discard'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_dom_ldts IS NULL\n    THEN 'I'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_stage_ldts IS NULL \n        THEN 'I'\n        WHEN stage_ldts IS NULL AND COALESCE(prev_stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))= COALESCE(prev_dom_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))\n        THEN 'D'\n    \n        ELSE 'discard'\n        END AS cdc\n    , cte_data_join.rsrc\n    from cte_data_join\n)\nSELECT\n      dom_key AS hk_order_h\n    , dom_ldts AS ldts, cte_data_interpretation.rsrc\n    , cdc\nFROM cte_data_interpretation\nWHERE cdc<>'discard'", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_ws_sts", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:29.277682Z", "completed_at": "2025-04-07T20:54:29.465092Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:29.465272Z", "completed_at": "2025-04-07T20:54:32.094910Z"}], "thread_id": "Thread-2", "execution_time": 2.8188717365264893, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0979-0003-ac120003032e"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.customer_associationpartner_l", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\n\n    distinct_target_hashkeys AS (\n        \n        SELECT\n        hk_customer_associationpartner_l\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_associationpartner_l\n\n    ),\n        \n\n            rsrc_static_1 AS (SELECT t.*,\n                    '*/webshop/kunde/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_associationpartner_l t\n                    WHERE rsrc like '*/webshop/kunde/*'),\n\n        max_ldts_per_rsrc_static_in_target AS (\n        \n\n            SELECT\n                rsrc_static,\n                MAX(ldts) as max_ldts\n            FROM rsrc_static_1\n            WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n            GROUP BY rsrc_static\n\n        ),\n\n\n\n\n    src_new_1 AS (\n\n        SELECT\n            hk_customer_associationpartner_l AS hk_customer_associationpartner_l,\n            hk_customer_h,\n            hk_associationpartner_h,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_kunde src\n        \n\n    ),\n\nearliest_hk_over_all_sources AS (\n    \n\n    SELECT\n        lcte.*\n    FROM src_new_1 AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY hk_customer_associationpartner_l ORDER BY ldts) = 1),\n\nrecords_to_insert AS (\n    \n\n    SELECT\n        \n            hk_customer_associationpartner_l,\n            hk_customer_h,\n            hk_associationpartner_h,\n            ldts,\n            rsrc\n    FROM earliest_hk_over_all_sources\n    WHERE hk_customer_associationpartner_l NOT IN (SELECT * FROM distinct_target_hashkeys)\n    \n)\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_associationpartner_l", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:29.513784Z", "completed_at": "2025-04-07T20:54:29.520456Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:29.520682Z", "completed_at": "2025-04-07T20:54:32.205211Z"}], "thread_id": "Thread-4", "execution_time": 2.6919190883636475, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0851-0003-ac12000312c6"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.customer_associationpartner_ws_sts", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\ncte_current_sts as\n(\n    select sts.hk_customer_associationpartner_l, sts.rsrc, sts.ldts, cdc\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_associationpartner_ws_sts sts\n    qualify row_number() over (PARTITION BY sts.hk_customer_associationpartner_l order by sts.ldts desc) = 1\n)\n,\ncte_current_sts_not_deleted as\n(\n  select  cte_current_sts.hk_customer_associationpartner_l, cte_current_sts.rsrc, cte_current_sts.ldts\n  from cte_current_sts\n  where cdc <> 'D'\n)\n, cte_max_rv_ldts AS\n(\n    SELECT COALESCE(max(ldts), TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') ) ldts \n    FROM cte_current_sts_not_deleted\n)\n, cte_stage AS\n(\n    select src.hk_customer_associationpartner_l, src.rsrc, src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_kunde src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts\n)\n, cte_rv_stage_union as\n(\n    select cte_current_sts_not_deleted.hk_customer_associationpartner_l, cte_current_sts_not_deleted.rsrc, cte_current_sts_not_deleted.ldts\n    from cte_current_sts_not_deleted\n    UNION\n    (\n        select cte_stage.hk_customer_associationpartner_l, cte_stage.rsrc, cte_stage.ldts\n        from cte_stage\n    )\n)\n, cte_dat_dom as\n(\n    select distinct src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_kunde src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts \n)\n, cte_key_dom as\n(\n    select cte_rv_stage_union.hk_customer_associationpartner_l\n    from cte_rv_stage_union\n)\n, cte_key_dat_dom as\n(\n    select distinct  cte_key_dom.hk_customer_associationpartner_l\n                    , cte_dat_dom.ldts\n                    from cte_key_dom \n    cross join cte_dat_dom\n), cte_data_join as\n(\n    select\n          cte_key_dat_dom.hk_customer_associationpartner_l dom_key\n        , cte_key_dat_dom.ldts as dom_ldts\n        , cte_rv_stage_union.ldts as stage_ldts, lag(cte_key_dat_dom.ldts) over (partition by  cte_key_dat_dom.hk_customer_associationpartner_l order by  cte_key_dat_dom.ldts) as prev_dom_ldts\n        , lag(cte_rv_stage_union.ldts) over (partition by  cte_key_dat_dom.hk_customer_associationpartner_l order by  cte_key_dat_dom.ldts) as prev_stage_ldts\n        , cte_rv_stage_union.rsrc\n    from cte_key_dat_dom \n    left join cte_rv_stage_union \n         on cte_key_dat_dom.ldts = cte_rv_stage_union.ldts\n         and cte_key_dat_dom.hk_customer_associationpartner_l = cte_rv_stage_union.hk_customer_associationpartner_l\n    where 1=1\n)\n, cte_data_interpretation as\n(\n    select\n      dom_key\n    , dom_ldts\n    , stage_ldts, prev_dom_ldts\n    , prev_stage_ldts\n    , CASE WHEN stage_ldts IS NULL AND prev_dom_ldts IS NULL\n        THEN 'discard'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_dom_ldts IS NULL\n    THEN 'I'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_stage_ldts IS NULL \n        THEN 'I'\n        WHEN stage_ldts IS NULL AND COALESCE(prev_stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))= COALESCE(prev_dom_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))\n        THEN 'D'\n    \n        ELSE 'discard'\n        END AS cdc\n    , cte_data_join.rsrc\n    from cte_data_join\n)\nSELECT\n      dom_key AS hk_customer_associationpartner_l\n    , dom_ldts AS ldts, cte_data_interpretation.rsrc\n    , cdc\nFROM cte_data_interpretation\nWHERE cdc<>'discard'", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_associationpartner_ws_sts", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:29.788982Z", "completed_at": "2025-04-07T20:54:29.799000Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:29.799351Z", "completed_at": "2025-04-07T20:54:32.992140Z"}], "thread_id": "Thread-3", "execution_time": 3.204022169113159, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0851-0003-ac12000312ca"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.customer_ws_s", "compiled": true, "compiled_code": "\n\n\n\n    \n    \n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\nsource_data AS (\n\n    SELECT\n        hk_customer_h,\n        hd_customer_ws_s as hd_customer_ws_s,\n        \n        rsrc,\n        ldts,\n        email,\n        geburtsdatum,\n        geschlecht,\n        gueltigbis,\n        kkfirma,\n        kreditkarte,\n        mobil,\n        name,\n        telefon,\n        vorname\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_kunde\n    WHERE ldts > (\n        SELECT\n            MAX(ldts) FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_ws_s\n        WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n    )\n),\n\n\nlatest_entries_in_sat AS (\n\n    SELECT\n        hk_customer_h,\n        hd_customer_ws_s\n    FROM \n        WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_ws_s\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY hk_customer_h ORDER BY ldts DESC) = 1  \n),\n\n\ndeduplicated_numbered_source AS (\n\n    SELECT\n    hk_customer_h,\n    hd_customer_ws_s,\n    \n        rsrc,\n        ldts,\n        email,\n        geburtsdatum,\n        geschlecht,\n        gueltigbis,\n        kkfirma,\n        kreditkarte,\n        mobil,\n        name,\n        telefon,\n        vorname\n    , ROW_NUMBER() OVER(PARTITION BY hk_customer_h ORDER BY ldts) as rn\n    FROM source_data\n    QUALIFY\n        CASE\n            WHEN hd_customer_ws_s = LAG(hd_customer_ws_s) OVER(PARTITION BY hk_customer_h ORDER BY ldts) THEN FALSE\n            ELSE TRUE\n        END\n),\n\n\nrecords_to_insert AS (\n\n    SELECT\n    hk_customer_h,\n    hd_customer_ws_s,\n    \n        rsrc,\n        ldts,\n        email,\n        geburtsdatum,\n        geschlecht,\n        gueltigbis,\n        kkfirma,\n        kreditkarte,\n        mobil,\n        name,\n        telefon,\n        vorname\n    FROM deduplicated_numbered_source\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE latest_entries_in_sat.hk_customer_h = deduplicated_numbered_source.hk_customer_h\n            AND latest_entries_in_sat.hd_customer_ws_s = deduplicated_numbered_source.hd_customer_ws_s\n            AND deduplicated_numbered_source.rn = 1)\n\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_ws_s", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:30.756099Z", "completed_at": "2025-04-07T20:54:30.764821Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:30.765056Z", "completed_at": "2025-04-07T20:54:33.522735Z"}], "thread_id": "Thread-1", "execution_time": 2.7678489685058594, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-09a8-0003-ac120002f2fa"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.customer_ws_sts", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\ncte_current_sts as\n(\n    select sts.hk_customer_h, sts.rsrc, sts.ldts, cdc\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_ws_sts sts\n    qualify row_number() over (PARTITION BY sts.hk_customer_h order by sts.ldts desc) = 1\n)\n,\ncte_current_sts_not_deleted as\n(\n  select  cte_current_sts.hk_customer_h, cte_current_sts.rsrc, cte_current_sts.ldts\n  from cte_current_sts\n  where cdc <> 'D'\n)\n, cte_max_rv_ldts AS\n(\n    SELECT COALESCE(max(ldts), TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') ) ldts \n    FROM cte_current_sts_not_deleted\n)\n, cte_stage AS\n(\n    select src.hk_customer_h, src.rsrc, src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_kunde src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts\n)\n, cte_rv_stage_union as\n(\n    select cte_current_sts_not_deleted.hk_customer_h, cte_current_sts_not_deleted.rsrc, cte_current_sts_not_deleted.ldts\n    from cte_current_sts_not_deleted\n    UNION\n    (\n        select cte_stage.hk_customer_h, cte_stage.rsrc, cte_stage.ldts\n        from cte_stage\n    )\n)\n, cte_dat_dom as\n(\n    select distinct src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_kunde src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts \n)\n, cte_key_dom as\n(\n    select cte_rv_stage_union.hk_customer_h\n    from cte_rv_stage_union\n)\n, cte_key_dat_dom as\n(\n    select distinct  cte_key_dom.hk_customer_h\n                    , cte_dat_dom.ldts\n                    from cte_key_dom \n    cross join cte_dat_dom\n), cte_data_join as\n(\n    select\n          cte_key_dat_dom.hk_customer_h dom_key\n        , cte_key_dat_dom.ldts as dom_ldts\n        , cte_rv_stage_union.ldts as stage_ldts, lag(cte_key_dat_dom.ldts) over (partition by  cte_key_dat_dom.hk_customer_h order by  cte_key_dat_dom.ldts) as prev_dom_ldts\n        , lag(cte_rv_stage_union.ldts) over (partition by  cte_key_dat_dom.hk_customer_h order by  cte_key_dat_dom.ldts) as prev_stage_ldts\n        , cte_rv_stage_union.rsrc\n    from cte_key_dat_dom \n    left join cte_rv_stage_union \n         on cte_key_dat_dom.ldts = cte_rv_stage_union.ldts\n         and cte_key_dat_dom.hk_customer_h = cte_rv_stage_union.hk_customer_h\n    where 1=1\n)\n, cte_data_interpretation as\n(\n    select\n      dom_key\n    , dom_ldts\n    , stage_ldts, prev_dom_ldts\n    , prev_stage_ldts\n    , CASE WHEN stage_ldts IS NULL AND prev_dom_ldts IS NULL\n        THEN 'discard'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_dom_ldts IS NULL\n    THEN 'I'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_stage_ldts IS NULL \n        THEN 'I'\n        WHEN stage_ldts IS NULL AND COALESCE(prev_stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))= COALESCE(prev_dom_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))\n        THEN 'D'\n    \n        ELSE 'discard'\n        END AS cdc\n    , cte_data_join.rsrc\n    from cte_data_join\n)\nSELECT\n      dom_key AS hk_customer_h\n    , dom_ldts AS ldts, cte_data_interpretation.rsrc\n    , cdc\nFROM cte_data_interpretation\nWHERE cdc<>'discard'", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_ws_sts", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:32.208369Z", "completed_at": "2025-04-07T20:54:32.219119Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:32.219364Z", "completed_at": "2025-04-07T20:54:34.792081Z"}], "thread_id": "Thread-4", "execution_time": 2.584540843963623, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-09a8-0003-ac120002f322"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.deliveryservice_ws_sts", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\ncte_current_sts as\n(\n    select sts.hk_deliveryservice_h, sts.rsrc, sts.ldts, cdc\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryservice_ws_sts sts\n    qualify row_number() over (PARTITION BY sts.hk_deliveryservice_h order by sts.ldts desc) = 1\n)\n,\ncte_current_sts_not_deleted as\n(\n  select  cte_current_sts.hk_deliveryservice_h, cte_current_sts.rsrc, cte_current_sts.ldts\n  from cte_current_sts\n  where cdc <> 'D'\n)\n, cte_max_rv_ldts AS\n(\n    SELECT COALESCE(max(ldts), TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') ) ldts \n    FROM cte_current_sts_not_deleted\n)\n, cte_stage AS\n(\n    select src.hk_deliveryservice_h, src.rsrc, src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_lieferdienst src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts\n)\n, cte_rv_stage_union as\n(\n    select cte_current_sts_not_deleted.hk_deliveryservice_h, cte_current_sts_not_deleted.rsrc, cte_current_sts_not_deleted.ldts\n    from cte_current_sts_not_deleted\n    UNION\n    (\n        select cte_stage.hk_deliveryservice_h, cte_stage.rsrc, cte_stage.ldts\n        from cte_stage\n    )\n)\n, cte_dat_dom as\n(\n    select distinct src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_lieferdienst src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts \n)\n, cte_key_dom as\n(\n    select cte_rv_stage_union.hk_deliveryservice_h\n    from cte_rv_stage_union\n)\n, cte_key_dat_dom as\n(\n    select distinct  cte_key_dom.hk_deliveryservice_h\n                    , cte_dat_dom.ldts\n                    from cte_key_dom \n    cross join cte_dat_dom\n), cte_data_join as\n(\n    select\n          cte_key_dat_dom.hk_deliveryservice_h dom_key\n        , cte_key_dat_dom.ldts as dom_ldts\n        , cte_rv_stage_union.ldts as stage_ldts, lag(cte_key_dat_dom.ldts) over (partition by  cte_key_dat_dom.hk_deliveryservice_h order by  cte_key_dat_dom.ldts) as prev_dom_ldts\n        , lag(cte_rv_stage_union.ldts) over (partition by  cte_key_dat_dom.hk_deliveryservice_h order by  cte_key_dat_dom.ldts) as prev_stage_ldts\n        , cte_rv_stage_union.rsrc\n    from cte_key_dat_dom \n    left join cte_rv_stage_union \n         on cte_key_dat_dom.ldts = cte_rv_stage_union.ldts\n         and cte_key_dat_dom.hk_deliveryservice_h = cte_rv_stage_union.hk_deliveryservice_h\n    where 1=1\n)\n, cte_data_interpretation as\n(\n    select\n      dom_key\n    , dom_ldts\n    , stage_ldts, prev_dom_ldts\n    , prev_stage_ldts\n    , CASE WHEN stage_ldts IS NULL AND prev_dom_ldts IS NULL\n        THEN 'discard'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_dom_ldts IS NULL\n    THEN 'I'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_stage_ldts IS NULL \n        THEN 'I'\n        WHEN stage_ldts IS NULL AND COALESCE(prev_stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))= COALESCE(prev_dom_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))\n        THEN 'D'\n    \n        ELSE 'discard'\n        END AS cdc\n    , cte_data_join.rsrc\n    from cte_data_join\n)\nSELECT\n      dom_key AS hk_deliveryservice_h\n    , dom_ldts AS ldts, cte_data_interpretation.rsrc\n    , cdc\nFROM cte_data_interpretation\nWHERE cdc<>'discard'", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryservice_ws_sts", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:32.097620Z", "completed_at": "2025-04-07T20:54:32.105935Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:32.106212Z", "completed_at": "2025-04-07T20:54:35.114381Z"}], "thread_id": "Thread-2", "execution_time": 3.017441987991333, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0851-0003-ac12000312f6"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.deliveryservice_ws_s", "compiled": true, "compiled_code": "\n\n\n\n    \n    \n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\nsource_data AS (\n\n    SELECT\n        hk_deliveryservice_h,\n        hd_deliveryservice_ws_s as hd_deliveryservice_ws_s,\n        \n        rsrc,\n        ldts,\n        email,\n        fax,\n        hausnummer,\n        land,\n        name,\n        ort,\n        plz,\n        strasse,\n        telefon\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_lieferdienst\n    WHERE ldts > (\n        SELECT\n            MAX(ldts) FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryservice_ws_s\n        WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n    )\n),\n\n\nlatest_entries_in_sat AS (\n\n    SELECT\n        hk_deliveryservice_h,\n        hd_deliveryservice_ws_s\n    FROM \n        WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryservice_ws_s\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY hk_deliveryservice_h ORDER BY ldts DESC) = 1  \n),\n\n\ndeduplicated_numbered_source AS (\n\n    SELECT\n    hk_deliveryservice_h,\n    hd_deliveryservice_ws_s,\n    \n        rsrc,\n        ldts,\n        email,\n        fax,\n        hausnummer,\n        land,\n        name,\n        ort,\n        plz,\n        strasse,\n        telefon\n    , ROW_NUMBER() OVER(PARTITION BY hk_deliveryservice_h ORDER BY ldts) as rn\n    FROM source_data\n    QUALIFY\n        CASE\n            WHEN hd_deliveryservice_ws_s = LAG(hd_deliveryservice_ws_s) OVER(PARTITION BY hk_deliveryservice_h ORDER BY ldts) THEN FALSE\n            ELSE TRUE\n        END\n),\n\n\nrecords_to_insert AS (\n\n    SELECT\n    hk_deliveryservice_h,\n    hd_deliveryservice_ws_s,\n    \n        rsrc,\n        ldts,\n        email,\n        fax,\n        hausnummer,\n        land,\n        name,\n        ort,\n        plz,\n        strasse,\n        telefon\n    FROM deduplicated_numbered_source\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE latest_entries_in_sat.hk_deliveryservice_h = deduplicated_numbered_source.hk_deliveryservice_h\n            AND latest_entries_in_sat.hd_deliveryservice_ws_s = deduplicated_numbered_source.hd_deliveryservice_ws_s\n            AND deduplicated_numbered_source.rn = 1)\n\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryservice_ws_s", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:32.994341Z", "completed_at": "2025-04-07T20:54:33.001285Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:33.001460Z", "completed_at": "2025-04-07T20:54:35.642114Z"}], "thread_id": "Thread-3", "execution_time": 2.648286819458008, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-09a8-0003-ac120002f32e"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.order_position_ws_sts", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\ncte_current_sts as\n(\n    select sts.hk_order_position_l, sts.rsrc, sts.ldts, cdc\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_position_ws_sts sts\n    qualify row_number() over (PARTITION BY sts.hk_order_position_l order by sts.ldts desc) = 1\n)\n,\ncte_current_sts_not_deleted as\n(\n  select  cte_current_sts.hk_order_position_l, cte_current_sts.rsrc, cte_current_sts.ldts\n  from cte_current_sts\n  where cdc <> 'D'\n)\n, cte_max_rv_ldts AS\n(\n    SELECT COALESCE(max(ldts), TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') ) ldts \n    FROM cte_current_sts_not_deleted\n)\n, cte_stage AS\n(\n    select src.hk_order_position_l, src.rsrc, src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_position src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts\n)\n, cte_rv_stage_union as\n(\n    select cte_current_sts_not_deleted.hk_order_position_l, cte_current_sts_not_deleted.rsrc, cte_current_sts_not_deleted.ldts\n    from cte_current_sts_not_deleted\n    UNION\n    (\n        select cte_stage.hk_order_position_l, cte_stage.rsrc, cte_stage.ldts\n        from cte_stage\n    )\n)\n, cte_dat_dom as\n(\n    select distinct src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_position src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts \n)\n, cte_key_dom as\n(\n    select cte_rv_stage_union.hk_order_position_l\n    from cte_rv_stage_union\n)\n, cte_key_dat_dom as\n(\n    select distinct  cte_key_dom.hk_order_position_l\n                    , cte_dat_dom.ldts\n                    from cte_key_dom \n    cross join cte_dat_dom\n), cte_data_join as\n(\n    select\n          cte_key_dat_dom.hk_order_position_l dom_key\n        , cte_key_dat_dom.ldts as dom_ldts\n        , cte_rv_stage_union.ldts as stage_ldts, lag(cte_key_dat_dom.ldts) over (partition by  cte_key_dat_dom.hk_order_position_l order by  cte_key_dat_dom.ldts) as prev_dom_ldts\n        , lag(cte_rv_stage_union.ldts) over (partition by  cte_key_dat_dom.hk_order_position_l order by  cte_key_dat_dom.ldts) as prev_stage_ldts\n        , cte_rv_stage_union.rsrc\n    from cte_key_dat_dom \n    left join cte_rv_stage_union \n         on cte_key_dat_dom.ldts = cte_rv_stage_union.ldts\n         and cte_key_dat_dom.hk_order_position_l = cte_rv_stage_union.hk_order_position_l\n    where 1=1\n)\n, cte_data_interpretation as\n(\n    select\n      dom_key\n    , dom_ldts\n    , stage_ldts, prev_dom_ldts\n    , prev_stage_ldts\n    , CASE WHEN stage_ldts IS NULL AND prev_dom_ldts IS NULL\n        THEN 'discard'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_dom_ldts IS NULL\n    THEN 'I'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_stage_ldts IS NULL \n        THEN 'I'\n        WHEN stage_ldts IS NULL AND COALESCE(prev_stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))= COALESCE(prev_dom_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))\n        THEN 'D'\n    \n        ELSE 'discard'\n        END AS cdc\n    , cte_data_join.rsrc\n    from cte_data_join\n)\nSELECT\n      dom_key AS hk_order_position_l\n    , dom_ldts AS ldts, cte_data_interpretation.rsrc\n    , cdc\nFROM cte_data_interpretation\nWHERE cdc<>'discard'", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_position_ws_sts", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:33.526529Z", "completed_at": "2025-04-07T20:54:33.956291Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:33.956673Z", "completed_at": "2025-04-07T20:54:36.837468Z"}], "thread_id": "Thread-1", "execution_time": 3.3118672370910645, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0851-0003-ac1200031322"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.position_product_l", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\n\n    distinct_target_hashkeys AS (\n        \n        SELECT\n        hk_position_product_l\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_product_l\n\n    ),\n        \n\n            rsrc_static_1 AS (SELECT t.*,\n                    '*/roadshow/bestellung/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_product_l t\n                    WHERE rsrc like '*/roadshow/bestellung/*'),\n        \n\n            rsrc_static_2 AS (SELECT t.*,\n                    '*/webshop/position/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_product_l t\n                    WHERE rsrc like '*/webshop/position/*'),\n\n        rsrc_static_union AS (\n            \n\n            SELECT rsrc_static_1.* FROM rsrc_static_1\n            UNION ALL\n            SELECT rsrc_static_2.* FROM rsrc_static_2),\n\n        max_ldts_per_rsrc_static_in_target AS (\n        \n\n            SELECT\n                rsrc_static,\n                MAX(ldts) as max_ldts\n            FROM rsrc_static_union\n            WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n            GROUP BY rsrc_static\n\n        ),\n\n\n\n\n    src_new_1 AS (\n\n        SELECT\n            hk_position_product_l AS hk_position_product_l,\n            hk_product_h,\n            hk_position_h,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_roadshow_bestellung src\n        \n\n    ),\n\n\n\n    src_new_2 AS (\n\n        SELECT\n            hk_position_product_l AS hk_position_product_l,\n            hk_product_h,\n            hk_position_h,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_position src\n        \n\n    ),\n\nsource_new_union AS (\nSELECT\n        hk_position_product_l,\n        \n            hk_product_h AS hk_product_h,\n        \n            hk_position_h AS hk_position_h,\n        ldts,\n        rsrc\n    FROM src_new_1\n    UNION ALL\n    SELECT\n        hk_position_product_l,\n        \n            hk_product_h AS hk_product_h,\n        \n            hk_position_h AS hk_position_h,\n        ldts,\n        rsrc\n    FROM src_new_2),\n\nearliest_hk_over_all_sources AS (\n    \n\n    SELECT\n        lcte.*\n    FROM source_new_union AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY hk_position_product_l ORDER BY ldts) = 1),\n\nrecords_to_insert AS (\n    \n\n    SELECT\n        \n            hk_position_product_l,\n            hk_product_h,\n            hk_position_h,\n            ldts,\n            rsrc\n    FROM earliest_hk_over_all_sources\n    WHERE hk_position_product_l NOT IN (SELECT * FROM distinct_target_hashkeys)\n    \n)\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_product_l", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:34.794866Z", "completed_at": "2025-04-07T20:54:34.805308Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:34.805573Z", "completed_at": "2025-04-07T20:54:37.365232Z"}], "thread_id": "Thread-4", "execution_time": 2.5710058212280273, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0851-0003-ac1200031332"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.position_product_ws_sts", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\ncte_current_sts as\n(\n    select sts.hk_position_product_l, sts.rsrc, sts.ldts, cdc\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_product_ws_sts sts\n    qualify row_number() over (PARTITION BY sts.hk_position_product_l order by sts.ldts desc) = 1\n)\n,\ncte_current_sts_not_deleted as\n(\n  select  cte_current_sts.hk_position_product_l, cte_current_sts.rsrc, cte_current_sts.ldts\n  from cte_current_sts\n  where cdc <> 'D'\n)\n, cte_max_rv_ldts AS\n(\n    SELECT COALESCE(max(ldts), TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') ) ldts \n    FROM cte_current_sts_not_deleted\n)\n, cte_stage AS\n(\n    select src.hk_position_product_l, src.rsrc, src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_position src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts\n)\n, cte_rv_stage_union as\n(\n    select cte_current_sts_not_deleted.hk_position_product_l, cte_current_sts_not_deleted.rsrc, cte_current_sts_not_deleted.ldts\n    from cte_current_sts_not_deleted\n    UNION\n    (\n        select cte_stage.hk_position_product_l, cte_stage.rsrc, cte_stage.ldts\n        from cte_stage\n    )\n)\n, cte_dat_dom as\n(\n    select distinct src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_position src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts \n)\n, cte_key_dom as\n(\n    select cte_rv_stage_union.hk_position_product_l\n    from cte_rv_stage_union\n)\n, cte_key_dat_dom as\n(\n    select distinct  cte_key_dom.hk_position_product_l\n                    , cte_dat_dom.ldts\n                    from cte_key_dom \n    cross join cte_dat_dom\n), cte_data_join as\n(\n    select\n          cte_key_dat_dom.hk_position_product_l dom_key\n        , cte_key_dat_dom.ldts as dom_ldts\n        , cte_rv_stage_union.ldts as stage_ldts, lag(cte_key_dat_dom.ldts) over (partition by  cte_key_dat_dom.hk_position_product_l order by  cte_key_dat_dom.ldts) as prev_dom_ldts\n        , lag(cte_rv_stage_union.ldts) over (partition by  cte_key_dat_dom.hk_position_product_l order by  cte_key_dat_dom.ldts) as prev_stage_ldts\n        , cte_rv_stage_union.rsrc\n    from cte_key_dat_dom \n    left join cte_rv_stage_union \n         on cte_key_dat_dom.ldts = cte_rv_stage_union.ldts\n         and cte_key_dat_dom.hk_position_product_l = cte_rv_stage_union.hk_position_product_l\n    where 1=1\n)\n, cte_data_interpretation as\n(\n    select\n      dom_key\n    , dom_ldts\n    , stage_ldts, prev_dom_ldts\n    , prev_stage_ldts\n    , CASE WHEN stage_ldts IS NULL AND prev_dom_ldts IS NULL\n        THEN 'discard'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_dom_ldts IS NULL\n    THEN 'I'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_stage_ldts IS NULL \n        THEN 'I'\n        WHEN stage_ldts IS NULL AND COALESCE(prev_stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))= COALESCE(prev_dom_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))\n        THEN 'D'\n    \n        ELSE 'discard'\n        END AS cdc\n    , cte_data_join.rsrc\n    from cte_data_join\n)\nSELECT\n      dom_key AS hk_position_product_l\n    , dom_ldts AS ldts, cte_data_interpretation.rsrc\n    , cdc\nFROM cte_data_interpretation\nWHERE cdc<>'discard'", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_product_ws_sts", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:35.120825Z", "completed_at": "2025-04-07T20:54:35.136060Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:35.136594Z", "completed_at": "2025-04-07T20:54:37.905337Z"}], "thread_id": "Thread-2", "execution_time": 2.7856109142303467, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0979-0003-ac120003039e"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.position_ws_s", "compiled": true, "compiled_code": "\n\n\n\n    \n    \n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\nsource_data AS (\n\n    SELECT\n        hk_position_h,\n        hd_position_ws_s as hd_position_ws_s,\n        \n        rsrc,\n        ldts,\n        bestellungid,\n        menge,\n        posid,\n        preis,\n        spezlieferadrid\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_position\n    WHERE ldts > (\n        SELECT\n            MAX(ldts) FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_ws_s\n        WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n    )\n),\n\n\nlatest_entries_in_sat AS (\n\n    SELECT\n        hk_position_h,\n        hd_position_ws_s\n    FROM \n        WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_ws_s\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY hk_position_h ORDER BY ldts DESC) = 1  \n),\n\n\ndeduplicated_numbered_source AS (\n\n    SELECT\n    hk_position_h,\n    hd_position_ws_s,\n    \n        rsrc,\n        ldts,\n        bestellungid,\n        menge,\n        posid,\n        preis,\n        spezlieferadrid\n    , ROW_NUMBER() OVER(PARTITION BY hk_position_h ORDER BY ldts) as rn\n    FROM source_data\n    QUALIFY\n        CASE\n            WHEN hd_position_ws_s = LAG(hd_position_ws_s) OVER(PARTITION BY hk_position_h ORDER BY ldts) THEN FALSE\n            ELSE TRUE\n        END\n),\n\n\nrecords_to_insert AS (\n\n    SELECT\n    hk_position_h,\n    hd_position_ws_s,\n    \n        rsrc,\n        ldts,\n        bestellungid,\n        menge,\n        posid,\n        preis,\n        spezlieferadrid\n    FROM deduplicated_numbered_source\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE latest_entries_in_sat.hk_position_h = deduplicated_numbered_source.hk_position_h\n            AND latest_entries_in_sat.hd_position_ws_s = deduplicated_numbered_source.hd_position_ws_s\n            AND deduplicated_numbered_source.rn = 1)\n\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_ws_s", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:35.647237Z", "completed_at": "2025-04-07T20:54:35.663635Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:35.664040Z", "completed_at": "2025-04-07T20:54:38.123164Z"}], "thread_id": "Thread-3", "execution_time": 2.477097988128662, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0851-0003-ac1200031346"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.position_ws_sts", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\ncte_current_sts as\n(\n    select sts.hk_position_h, sts.rsrc, sts.ldts, cdc\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_ws_sts sts\n    qualify row_number() over (PARTITION BY sts.hk_position_h order by sts.ldts desc) = 1\n)\n,\ncte_current_sts_not_deleted as\n(\n  select  cte_current_sts.hk_position_h, cte_current_sts.rsrc, cte_current_sts.ldts\n  from cte_current_sts\n  where cdc <> 'D'\n)\n, cte_max_rv_ldts AS\n(\n    SELECT COALESCE(max(ldts), TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') ) ldts \n    FROM cte_current_sts_not_deleted\n)\n, cte_stage AS\n(\n    select src.hk_position_h, src.rsrc, src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_position src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts\n)\n, cte_rv_stage_union as\n(\n    select cte_current_sts_not_deleted.hk_position_h, cte_current_sts_not_deleted.rsrc, cte_current_sts_not_deleted.ldts\n    from cte_current_sts_not_deleted\n    UNION\n    (\n        select cte_stage.hk_position_h, cte_stage.rsrc, cte_stage.ldts\n        from cte_stage\n    )\n)\n, cte_dat_dom as\n(\n    select distinct src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_position src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts \n)\n, cte_key_dom as\n(\n    select cte_rv_stage_union.hk_position_h\n    from cte_rv_stage_union\n)\n, cte_key_dat_dom as\n(\n    select distinct  cte_key_dom.hk_position_h\n                    , cte_dat_dom.ldts\n                    from cte_key_dom \n    cross join cte_dat_dom\n), cte_data_join as\n(\n    select\n          cte_key_dat_dom.hk_position_h dom_key\n        , cte_key_dat_dom.ldts as dom_ldts\n        , cte_rv_stage_union.ldts as stage_ldts, lag(cte_key_dat_dom.ldts) over (partition by  cte_key_dat_dom.hk_position_h order by  cte_key_dat_dom.ldts) as prev_dom_ldts\n        , lag(cte_rv_stage_union.ldts) over (partition by  cte_key_dat_dom.hk_position_h order by  cte_key_dat_dom.ldts) as prev_stage_ldts\n        , cte_rv_stage_union.rsrc\n    from cte_key_dat_dom \n    left join cte_rv_stage_union \n         on cte_key_dat_dom.ldts = cte_rv_stage_union.ldts\n         and cte_key_dat_dom.hk_position_h = cte_rv_stage_union.hk_position_h\n    where 1=1\n)\n, cte_data_interpretation as\n(\n    select\n      dom_key\n    , dom_ldts\n    , stage_ldts, prev_dom_ldts\n    , prev_stage_ldts\n    , CASE WHEN stage_ldts IS NULL AND prev_dom_ldts IS NULL\n        THEN 'discard'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_dom_ldts IS NULL\n    THEN 'I'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_stage_ldts IS NULL \n        THEN 'I'\n        WHEN stage_ldts IS NULL AND COALESCE(prev_stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))= COALESCE(prev_dom_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))\n        THEN 'D'\n    \n        ELSE 'discard'\n        END AS cdc\n    , cte_data_join.rsrc\n    from cte_data_join\n)\nSELECT\n      dom_key AS hk_position_h\n    , dom_ldts AS ldts, cte_data_interpretation.rsrc\n    , cdc\nFROM cte_data_interpretation\nWHERE cdc<>'discard'", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_ws_sts", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:37.375689Z", "completed_at": "2025-04-07T20:54:37.544190Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:37.544434Z", "completed_at": "2025-04-07T20:54:39.986607Z"}], "thread_id": "Thread-4", "execution_time": 2.611717700958252, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-09a8-0003-ac120002f38e"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.product_productcategory_l", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\n\n    distinct_target_hashkeys AS (\n        \n        SELECT\n        hk_product_productcategory_l\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_productcategory_l\n\n    ),\n        \n\n            rsrc_static_1 AS (SELECT t.*,\n                    '*/webshop/produkt/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_productcategory_l t\n                    WHERE rsrc like '*/webshop/produkt/*'),\n\n        max_ldts_per_rsrc_static_in_target AS (\n        \n\n            SELECT\n                rsrc_static,\n                MAX(ldts) as max_ldts\n            FROM rsrc_static_1\n            WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n            GROUP BY rsrc_static\n\n        ),\n\n\n\n\n    src_new_1 AS (\n\n        SELECT\n            hk_product_productcategory_l AS hk_product_productcategory_l,\n            hk_productcategory_h,\n            hk_product_h,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_produkt src\n        \n\n    ),\n\nearliest_hk_over_all_sources AS (\n    \n\n    SELECT\n        lcte.*\n    FROM src_new_1 AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY hk_product_productcategory_l ORDER BY ldts) = 1),\n\nrecords_to_insert AS (\n    \n\n    SELECT\n        \n            hk_product_productcategory_l,\n            hk_productcategory_h,\n            hk_product_h,\n            ldts,\n            rsrc\n    FROM earliest_hk_over_all_sources\n    WHERE hk_product_productcategory_l NOT IN (SELECT * FROM distinct_target_hashkeys)\n    \n)\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_productcategory_l", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:36.840665Z", "completed_at": "2025-04-07T20:54:37.366162Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:37.366464Z", "completed_at": "2025-04-07T20:54:40.204911Z"}], "thread_id": "Thread-1", "execution_time": 3.3651351928710938, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0979-0003-ac12000303de"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.product_h", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\n    distinct_target_hashkeys AS (\n\n        SELECT\n            hk_product_h\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_h\n\n    ),\n         \n\n            \n\n            rsrc_static_1 AS (SELECT \n                    t.*,\n                    '*/roadshow/bestellung/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_h t\n                    WHERE rsrc like '*/roadshow/bestellung/*'),\n         \n\n            \n\n            rsrc_static_2 AS (SELECT \n                    t.*,\n                    '*/webshop/position/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_h t\n                    WHERE rsrc like '*/webshop/position/*'),\n         \n\n            \n\n            rsrc_static_3 AS (SELECT \n                    t.*,\n                    '*/webshop/produkt/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_h t\n                    WHERE rsrc like '*/webshop/produkt/*'),\n\n        rsrc_static_union AS (\n            \n            SELECT rsrc_static_1.* FROM rsrc_static_1\n            UNION ALL\n            SELECT rsrc_static_2.* FROM rsrc_static_2\n            UNION ALL\n            SELECT rsrc_static_3.* FROM rsrc_static_3),\n\n        max_ldts_per_rsrc_static_in_target AS (\n        \n            SELECT\n                rsrc_static,\n                MAX(ldts) as max_ldts\n            FROM rsrc_static_union\n            WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n            GROUP BY rsrc_static\n\n        ),\n\n\n    src_new_1 AS (\n\n        SELECT\n            hk_product_h AS hk_product_h,\n            product_bk,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_roadshow_bestellung src\n        \n\n    ),\n\n    src_new_2 AS (\n\n        SELECT\n            hk_product_h AS hk_product_h,\n            product_bk,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_position src\n        \n\n    ),\n\n    src_new_3 AS (\n\n        SELECT\n            hk_product_h AS hk_product_h,\n            product_bk,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_produkt src\n        \n\n    ),\n\nsource_new_union AS (SELECT\n        hk_product_h,\n\n        product_bk AS product_bk,\n        ldts,\n        rsrc\n    FROM src_new_1\n    UNION ALL\n    SELECT\n        hk_product_h,\n\n        product_bk AS product_bk,\n        ldts,\n        rsrc\n    FROM src_new_2\n    UNION ALL\n    SELECT\n        hk_product_h,\n\n        product_bk AS product_bk,\n        ldts,\n        rsrc\n    FROM src_new_3),\n\nearliest_hk_over_all_sources AS (\n    SELECT\n        lcte.*\n    FROM source_new_union AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY hk_product_h ORDER BY ldts) = 1),\n\nrecords_to_insert AS (\n    SELECT\n        \n        hk_product_h,\n        product_bk,\n        ldts,\n        rsrc\n    FROM earliest_hk_over_all_sources\n    WHERE hk_product_h NOT IN (SELECT * FROM distinct_target_hashkeys)\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_h", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:37.908519Z", "completed_at": "2025-04-07T20:54:37.920480Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:37.920769Z", "completed_at": "2025-04-07T20:54:40.421207Z"}], "thread_id": "Thread-2", "execution_time": 2.513434886932373, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0979-0003-ac12000303ea"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.product_productcategory_ws_sts", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\ncte_current_sts as\n(\n    select sts.hk_product_productcategory_l, sts.rsrc, sts.ldts, cdc\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_productcategory_ws_sts sts\n    qualify row_number() over (PARTITION BY sts.hk_product_productcategory_l order by sts.ldts desc) = 1\n)\n,\ncte_current_sts_not_deleted as\n(\n  select  cte_current_sts.hk_product_productcategory_l, cte_current_sts.rsrc, cte_current_sts.ldts\n  from cte_current_sts\n  where cdc <> 'D'\n)\n, cte_max_rv_ldts AS\n(\n    SELECT COALESCE(max(ldts), TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') ) ldts \n    FROM cte_current_sts_not_deleted\n)\n, cte_stage AS\n(\n    select src.hk_product_productcategory_l, src.rsrc, src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_produkt src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts\n)\n, cte_rv_stage_union as\n(\n    select cte_current_sts_not_deleted.hk_product_productcategory_l, cte_current_sts_not_deleted.rsrc, cte_current_sts_not_deleted.ldts\n    from cte_current_sts_not_deleted\n    UNION\n    (\n        select cte_stage.hk_product_productcategory_l, cte_stage.rsrc, cte_stage.ldts\n        from cte_stage\n    )\n)\n, cte_dat_dom as\n(\n    select distinct src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_produkt src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts \n)\n, cte_key_dom as\n(\n    select cte_rv_stage_union.hk_product_productcategory_l\n    from cte_rv_stage_union\n)\n, cte_key_dat_dom as\n(\n    select distinct  cte_key_dom.hk_product_productcategory_l\n                    , cte_dat_dom.ldts\n                    from cte_key_dom \n    cross join cte_dat_dom\n), cte_data_join as\n(\n    select\n          cte_key_dat_dom.hk_product_productcategory_l dom_key\n        , cte_key_dat_dom.ldts as dom_ldts\n        , cte_rv_stage_union.ldts as stage_ldts, lag(cte_key_dat_dom.ldts) over (partition by  cte_key_dat_dom.hk_product_productcategory_l order by  cte_key_dat_dom.ldts) as prev_dom_ldts\n        , lag(cte_rv_stage_union.ldts) over (partition by  cte_key_dat_dom.hk_product_productcategory_l order by  cte_key_dat_dom.ldts) as prev_stage_ldts\n        , cte_rv_stage_union.rsrc\n    from cte_key_dat_dom \n    left join cte_rv_stage_union \n         on cte_key_dat_dom.ldts = cte_rv_stage_union.ldts\n         and cte_key_dat_dom.hk_product_productcategory_l = cte_rv_stage_union.hk_product_productcategory_l\n    where 1=1\n)\n, cte_data_interpretation as\n(\n    select\n      dom_key\n    , dom_ldts\n    , stage_ldts, prev_dom_ldts\n    , prev_stage_ldts\n    , CASE WHEN stage_ldts IS NULL AND prev_dom_ldts IS NULL\n        THEN 'discard'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_dom_ldts IS NULL\n    THEN 'I'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_stage_ldts IS NULL \n        THEN 'I'\n        WHEN stage_ldts IS NULL AND COALESCE(prev_stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))= COALESCE(prev_dom_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))\n        THEN 'D'\n    \n        ELSE 'discard'\n        END AS cdc\n    , cte_data_join.rsrc\n    from cte_data_join\n)\nSELECT\n      dom_key AS hk_product_productcategory_l\n    , dom_ldts AS ldts, cte_data_interpretation.rsrc\n    , cdc\nFROM cte_data_interpretation\nWHERE cdc<>'discard'", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_productcategory_ws_sts", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:38.127747Z", "completed_at": "2025-04-07T20:54:38.141892Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:38.142261Z", "completed_at": "2025-04-07T20:54:40.842956Z"}], "thread_id": "Thread-3", "execution_time": 2.716186046600342, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0979-0003-ac12000303ee"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.product_ws_s", "compiled": true, "compiled_code": "\n\n\n\n    \n    \n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\nsource_data AS (\n\n    SELECT\n        hk_product_h,\n        hd_product_ws_s as hd_product_ws_s,\n        \n        rsrc,\n        ldts,\n        bezeichnung,\n        pflanzabstand,\n        pflanzort,\n        preis,\n        typ,\n        umfang\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_produkt\n    WHERE ldts > (\n        SELECT\n            MAX(ldts) FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_ws_s\n        WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n    )\n),\n\n\nlatest_entries_in_sat AS (\n\n    SELECT\n        hk_product_h,\n        hd_product_ws_s\n    FROM \n        WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_ws_s\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY hk_product_h ORDER BY ldts DESC) = 1  \n),\n\n\ndeduplicated_numbered_source AS (\n\n    SELECT\n    hk_product_h,\n    hd_product_ws_s,\n    \n        rsrc,\n        ldts,\n        bezeichnung,\n        pflanzabstand,\n        pflanzort,\n        preis,\n        typ,\n        umfang\n    , ROW_NUMBER() OVER(PARTITION BY hk_product_h ORDER BY ldts) as rn\n    FROM source_data\n    QUALIFY\n        CASE\n            WHEN hd_product_ws_s = LAG(hd_product_ws_s) OVER(PARTITION BY hk_product_h ORDER BY ldts) THEN FALSE\n            ELSE TRUE\n        END\n),\n\n\nrecords_to_insert AS (\n\n    SELECT\n    hk_product_h,\n    hd_product_ws_s,\n    \n        rsrc,\n        ldts,\n        bezeichnung,\n        pflanzabstand,\n        pflanzort,\n        preis,\n        typ,\n        umfang\n    FROM deduplicated_numbered_source\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE latest_entries_in_sat.hk_product_h = deduplicated_numbered_source.hk_product_h\n            AND latest_entries_in_sat.hd_product_ws_s = deduplicated_numbered_source.hd_product_ws_s\n            AND deduplicated_numbered_source.rn = 1)\n\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_ws_s", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:40.209611Z", "completed_at": "2025-04-07T20:54:40.299734Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:40.299907Z", "completed_at": "2025-04-07T20:54:42.783832Z"}], "thread_id": "Thread-1", "execution_time": 2.575309991836548, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-09a8-0003-ac120002f3d6"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.delivery_nhl", "compiled": true, "compiled_code": "\n\n\n\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n    distinct_target_hashkeys AS (\n\n        SELECT\n        hk_delivery_l\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.delivery_nhl\n\n    ),\n\n\n\n\nsrc_new_1 AS (\n\n    SELECT\n            hk_delivery_l AS hk_delivery_l,\n            hk_deliveryadress_h,\n            hk_deliveryservice_h,\n            hk_order_h,\n            hk_position_h,\n            ldts,\n        rsrc,\n\n        \n           bestellungid,\n           lieferdatum,\n           posid\n\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_lieferung src\n    \n    \n    \n        WHERE src.ldts > (\n            SELECT MAX(ldts)\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.delivery_nhl\n            WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n            )\n\n    ),\n\nearliest_hk_over_all_sources AS (\n\n\n    SELECT\n        lcte.*\n    FROM src_new_1 AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY hk_delivery_l ORDER BY ldts) = 1),\n\nrecords_to_insert AS (\n\n\n    SELECT\n        \n            hk_delivery_l,\n            hk_deliveryadress_h,\n            hk_deliveryservice_h,\n            hk_order_h,\n            hk_position_h,\n            ldts,\n            rsrc,\n            bestellungid,\n            lieferdatum,\n            posid\n    FROM earliest_hk_over_all_sources\n    WHERE hk_delivery_l NOT IN (SELECT * FROM distinct_target_hashkeys)\n    \n)\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.delivery_nhl", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:39.991699Z", "completed_at": "2025-04-07T20:54:40.016629Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:40.017437Z", "completed_at": "2025-04-07T20:54:42.797862Z"}], "thread_id": "Thread-4", "execution_time": 2.807244062423706, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0851-0003-ac12000313b2"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.product_ws_sts", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\ncte_current_sts as\n(\n    select sts.hk_product_h, sts.rsrc, sts.ldts, cdc\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_ws_sts sts\n    qualify row_number() over (PARTITION BY sts.hk_product_h order by sts.ldts desc) = 1\n)\n,\ncte_current_sts_not_deleted as\n(\n  select  cte_current_sts.hk_product_h, cte_current_sts.rsrc, cte_current_sts.ldts\n  from cte_current_sts\n  where cdc <> 'D'\n)\n, cte_max_rv_ldts AS\n(\n    SELECT COALESCE(max(ldts), TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') ) ldts \n    FROM cte_current_sts_not_deleted\n)\n, cte_stage AS\n(\n    select src.hk_product_h, src.rsrc, src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_produkt src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts\n)\n, cte_rv_stage_union as\n(\n    select cte_current_sts_not_deleted.hk_product_h, cte_current_sts_not_deleted.rsrc, cte_current_sts_not_deleted.ldts\n    from cte_current_sts_not_deleted\n    UNION\n    (\n        select cte_stage.hk_product_h, cte_stage.rsrc, cte_stage.ldts\n        from cte_stage\n    )\n)\n, cte_dat_dom as\n(\n    select distinct src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_produkt src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts \n)\n, cte_key_dom as\n(\n    select cte_rv_stage_union.hk_product_h\n    from cte_rv_stage_union\n)\n, cte_key_dat_dom as\n(\n    select distinct  cte_key_dom.hk_product_h\n                    , cte_dat_dom.ldts\n                    from cte_key_dom \n    cross join cte_dat_dom\n), cte_data_join as\n(\n    select\n          cte_key_dat_dom.hk_product_h dom_key\n        , cte_key_dat_dom.ldts as dom_ldts\n        , cte_rv_stage_union.ldts as stage_ldts, lag(cte_key_dat_dom.ldts) over (partition by  cte_key_dat_dom.hk_product_h order by  cte_key_dat_dom.ldts) as prev_dom_ldts\n        , lag(cte_rv_stage_union.ldts) over (partition by  cte_key_dat_dom.hk_product_h order by  cte_key_dat_dom.ldts) as prev_stage_ldts\n        , cte_rv_stage_union.rsrc\n    from cte_key_dat_dom \n    left join cte_rv_stage_union \n         on cte_key_dat_dom.ldts = cte_rv_stage_union.ldts\n         and cte_key_dat_dom.hk_product_h = cte_rv_stage_union.hk_product_h\n    where 1=1\n)\n, cte_data_interpretation as\n(\n    select\n      dom_key\n    , dom_ldts\n    , stage_ldts, prev_dom_ldts\n    , prev_stage_ldts\n    , CASE WHEN stage_ldts IS NULL AND prev_dom_ldts IS NULL\n        THEN 'discard'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_dom_ldts IS NULL\n    THEN 'I'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_stage_ldts IS NULL \n        THEN 'I'\n        WHEN stage_ldts IS NULL AND COALESCE(prev_stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))= COALESCE(prev_dom_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))\n        THEN 'D'\n    \n        ELSE 'discard'\n        END AS cdc\n    , cte_data_join.rsrc\n    from cte_data_join\n)\nSELECT\n      dom_key AS hk_product_h\n    , dom_ldts AS ldts, cte_data_interpretation.rsrc\n    , cdc\nFROM cte_data_interpretation\nWHERE cdc<>'discard'", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_ws_sts", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:40.423686Z", "completed_at": "2025-04-07T20:54:40.815819Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:40.816302Z", "completed_at": "2025-04-07T20:54:43.481204Z"}], "thread_id": "Thread-2", "execution_time": 3.05812931060791, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0979-0003-ac120003042a"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.deliveryadress_h", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\n    distinct_target_hashkeys AS (\n\n        SELECT\n            hk_deliveryadress_h\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryadress_h\n\n    ),\n         \n\n            \n\n            rsrc_static_1 AS (SELECT \n                    t.*,\n                    '*/webshop/lieferadresse/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryadress_h t\n                    WHERE rsrc like '*/webshop/lieferadresse/*'),\n         \n\n            \n\n            rsrc_static_2 AS (SELECT \n                    t.*,\n                    '*/webshop/lieferung/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryadress_h t\n                    WHERE rsrc like '*/webshop/lieferung/*'),\n\n        rsrc_static_union AS (\n            \n            SELECT rsrc_static_1.* FROM rsrc_static_1\n            UNION ALL\n            SELECT rsrc_static_2.* FROM rsrc_static_2),\n\n        max_ldts_per_rsrc_static_in_target AS (\n        \n            SELECT\n                rsrc_static,\n                MAX(ldts) as max_ldts\n            FROM rsrc_static_union\n            WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n            GROUP BY rsrc_static\n\n        ),\n\n\n    src_new_1 AS (\n\n        SELECT\n            hk_deliveryadress_h AS hk_deliveryadress_h,\n            deliveryadress_bk,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_lieferadresse src\n        \n\n    ),\n\n    src_new_2 AS (\n\n        SELECT\n            hk_deliveryadress_h AS hk_deliveryadress_h,\n            deliveryadress_bk,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_lieferung src\n        \n\n    ),\n\nsource_new_union AS (SELECT\n        hk_deliveryadress_h,\n\n        deliveryadress_bk AS deliveryadress_bk,\n        ldts,\n        rsrc\n    FROM src_new_1\n    UNION ALL\n    SELECT\n        hk_deliveryadress_h,\n\n        deliveryadress_bk AS deliveryadress_bk,\n        ldts,\n        rsrc\n    FROM src_new_2),\n\nearliest_hk_over_all_sources AS (\n    SELECT\n        lcte.*\n    FROM source_new_union AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY hk_deliveryadress_h ORDER BY ldts) = 1),\n\nrecords_to_insert AS (\n    SELECT\n        \n        hk_deliveryadress_h,\n        deliveryadress_bk,\n        ldts,\n        rsrc\n    FROM earliest_hk_over_all_sources\n    WHERE hk_deliveryadress_h NOT IN (SELECT * FROM distinct_target_hashkeys)\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryadress_h", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:40.846526Z", "completed_at": "2025-04-07T20:54:41.310953Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:41.311241Z", "completed_at": "2025-04-07T20:54:44.145234Z"}], "thread_id": "Thread-3", "execution_time": 3.2995471954345703, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0979-0003-ac120003043a"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.deliveryservice_h", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\n    distinct_target_hashkeys AS (\n\n        SELECT\n            hk_deliveryservice_h\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryservice_h\n\n    ),\n         \n\n            \n\n            rsrc_static_1 AS (SELECT \n                    t.*,\n                    '*/webshop/lieferdienst/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryservice_h t\n                    WHERE rsrc like '*/webshop/lieferdienst/*'),\n         \n\n            \n\n            rsrc_static_2 AS (SELECT \n                    t.*,\n                    '*/webshop/lieferung/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryservice_h t\n                    WHERE rsrc like '*/webshop/lieferung/*'),\n\n        rsrc_static_union AS (\n            \n            SELECT rsrc_static_1.* FROM rsrc_static_1\n            UNION ALL\n            SELECT rsrc_static_2.* FROM rsrc_static_2),\n\n        max_ldts_per_rsrc_static_in_target AS (\n        \n            SELECT\n                rsrc_static,\n                MAX(ldts) as max_ldts\n            FROM rsrc_static_union\n            WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n            GROUP BY rsrc_static\n\n        ),\n\n\n    src_new_1 AS (\n\n        SELECT\n            hk_deliveryservice_h AS hk_deliveryservice_h,\n            deliveryservice_bk,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_lieferdienst src\n        \n\n    ),\n\n    src_new_2 AS (\n\n        SELECT\n            hk_deliveryservice_h AS hk_deliveryservice_h,\n            deliveryservice_bk,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_lieferung src\n        \n\n    ),\n\nsource_new_union AS (SELECT\n        hk_deliveryservice_h,\n\n        deliveryservice_bk AS deliveryservice_bk,\n        ldts,\n        rsrc\n    FROM src_new_1\n    UNION ALL\n    SELECT\n        hk_deliveryservice_h,\n\n        deliveryservice_bk AS deliveryservice_bk,\n        ldts,\n        rsrc\n    FROM src_new_2),\n\nearliest_hk_over_all_sources AS (\n    SELECT\n        lcte.*\n    FROM source_new_union AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY hk_deliveryservice_h ORDER BY ldts) = 1),\n\nrecords_to_insert AS (\n    SELECT\n        \n        hk_deliveryservice_h,\n        deliveryservice_bk,\n        ldts,\n        rsrc\n    FROM earliest_hk_over_all_sources\n    WHERE hk_deliveryservice_h NOT IN (SELECT * FROM distinct_target_hashkeys)\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryservice_h", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:42.801908Z", "completed_at": "2025-04-07T20:54:43.329926Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:43.330328Z", "completed_at": "2025-04-07T20:54:46.859604Z"}], "thread_id": "Thread-4", "execution_time": 4.058368921279907, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0979-0003-ac120003046e"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.order_position_l", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\n\n    distinct_target_hashkeys AS (\n        \n        SELECT\n        hk_order_position_l\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_position_l\n\n    ),\n        \n\n            rsrc_static_1 AS (SELECT t.*,\n                    '*/roadshow/bestellung/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_position_l t\n                    WHERE rsrc like '*/roadshow/bestellung/*'),\n        \n\n            rsrc_static_2 AS (SELECT t.*,\n                    '*/webshop/lieferung/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_position_l t\n                    WHERE rsrc like '*/webshop/lieferung/*'),\n        \n\n            rsrc_static_3 AS (SELECT t.*,\n                    '*/webshop/position/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_position_l t\n                    WHERE rsrc like '*/webshop/position/*'),\n\n        rsrc_static_union AS (\n            \n\n            SELECT rsrc_static_1.* FROM rsrc_static_1\n            UNION ALL\n            SELECT rsrc_static_2.* FROM rsrc_static_2\n            UNION ALL\n            SELECT rsrc_static_3.* FROM rsrc_static_3),\n\n        max_ldts_per_rsrc_static_in_target AS (\n        \n\n            SELECT\n                rsrc_static,\n                MAX(ldts) as max_ldts\n            FROM rsrc_static_union\n            WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n            GROUP BY rsrc_static\n\n        ),\n\n\n\n\n    src_new_1 AS (\n\n        SELECT\n            hk_order_position_l AS hk_order_position_l,\n            hk_position_h,\n            hk_order_h,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_roadshow_bestellung src\n        \n\n    ),\n\n\n\n    src_new_2 AS (\n\n        SELECT\n            hk_order_position_l AS hk_order_position_l,\n            hk_position_h,\n            hk_order_h,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_lieferung src\n        \n\n    ),\n\n\n\n    src_new_3 AS (\n\n        SELECT\n            hk_order_position_l AS hk_order_position_l,\n            hk_position_h,\n            hk_order_h,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_position src\n        \n\n    ),\n\nsource_new_union AS (\nSELECT\n        hk_order_position_l,\n        \n            hk_position_h AS hk_position_h,\n        \n            hk_order_h AS hk_order_h,\n        ldts,\n        rsrc\n    FROM src_new_1\n    UNION ALL\n    SELECT\n        hk_order_position_l,\n        \n            hk_position_h AS hk_position_h,\n        \n            hk_order_h AS hk_order_h,\n        ldts,\n        rsrc\n    FROM src_new_2\n    UNION ALL\n    SELECT\n        hk_order_position_l,\n        \n            hk_position_h AS hk_position_h,\n        \n            hk_order_h AS hk_order_h,\n        ldts,\n        rsrc\n    FROM src_new_3),\n\nearliest_hk_over_all_sources AS (\n    \n\n    SELECT\n        lcte.*\n    FROM source_new_union AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY hk_order_position_l ORDER BY ldts) = 1),\n\nrecords_to_insert AS (\n    \n\n    SELECT\n        \n            hk_order_position_l,\n            hk_position_h,\n            hk_order_h,\n            ldts,\n            rsrc\n    FROM earliest_hk_over_all_sources\n    WHERE hk_order_position_l NOT IN (SELECT * FROM distinct_target_hashkeys)\n    \n)\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_position_l", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:42.786951Z", "completed_at": "2025-04-07T20:54:43.460566Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:43.460889Z", "completed_at": "2025-04-07T20:54:46.930095Z"}], "thread_id": "Thread-1", "execution_time": 4.143949031829834, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0979-0003-ac1200030476"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.order_h", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\n    distinct_target_hashkeys AS (\n\n        SELECT\n            hk_order_h\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_h\n\n    ),\n         \n\n            \n\n            rsrc_static_1 AS (SELECT \n                    t.*,\n                    '*/roadshow/bestellung/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_h t\n                    WHERE rsrc like '*/roadshow/bestellung/*'),\n         \n\n            \n\n            rsrc_static_2 AS (SELECT \n                    t.*,\n                    '*/webshop/bestellung/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_h t\n                    WHERE rsrc like '*/webshop/bestellung/*'),\n         \n\n            \n\n            rsrc_static_3 AS (SELECT \n                    t.*,\n                    '*/webshop/lieferung/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_h t\n                    WHERE rsrc like '*/webshop/lieferung/*'),\n         \n\n            \n\n            rsrc_static_4 AS (SELECT \n                    t.*,\n                    '*/webshop/position/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_h t\n                    WHERE rsrc like '*/webshop/position/*'),\n\n        rsrc_static_union AS (\n            \n            SELECT rsrc_static_1.* FROM rsrc_static_1\n            UNION ALL\n            SELECT rsrc_static_2.* FROM rsrc_static_2\n            UNION ALL\n            SELECT rsrc_static_3.* FROM rsrc_static_3\n            UNION ALL\n            SELECT rsrc_static_4.* FROM rsrc_static_4),\n\n        max_ldts_per_rsrc_static_in_target AS (\n        \n            SELECT\n                rsrc_static,\n                MAX(ldts) as max_ldts\n            FROM rsrc_static_union\n            WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n            GROUP BY rsrc_static\n\n        ),\n\n\n    src_new_1 AS (\n\n        SELECT\n            hk_order_h AS hk_order_h,\n            order_bk,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_roadshow_bestellung src\n        \n\n    ),\n\n    src_new_2 AS (\n\n        SELECT\n            hk_order_h AS hk_order_h,\n            order_bk,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_bestellung src\n        \n\n    ),\n\n    src_new_3 AS (\n\n        SELECT\n            hk_order_h AS hk_order_h,\n            order_bk,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_lieferung src\n        \n\n    ),\n\n    src_new_4 AS (\n\n        SELECT\n            hk_order_h AS hk_order_h,\n            order_bk,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_position src\n        \n\n    ),\n\nsource_new_union AS (SELECT\n        hk_order_h,\n\n        order_bk AS order_bk,\n        ldts,\n        rsrc\n    FROM src_new_1\n    UNION ALL\n    SELECT\n        hk_order_h,\n\n        order_bk AS order_bk,\n        ldts,\n        rsrc\n    FROM src_new_2\n    UNION ALL\n    SELECT\n        hk_order_h,\n\n        order_bk AS order_bk,\n        ldts,\n        rsrc\n    FROM src_new_3\n    UNION ALL\n    SELECT\n        hk_order_h,\n\n        order_bk AS order_bk,\n        ldts,\n        rsrc\n    FROM src_new_4),\n\nearliest_hk_over_all_sources AS (\n    SELECT\n        lcte.*\n    FROM source_new_union AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY hk_order_h ORDER BY ldts) = 1),\n\nrecords_to_insert AS (\n    SELECT\n        \n        hk_order_h,\n        order_bk,\n        ldts,\n        rsrc\n    FROM earliest_hk_over_all_sources\n    WHERE hk_order_h NOT IN (SELECT * FROM distinct_target_hashkeys)\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_h", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:43.483707Z", "completed_at": "2025-04-07T20:54:44.005142Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:44.005343Z", "completed_at": "2025-04-07T20:54:47.054966Z"}], "thread_id": "Thread-2", "execution_time": 3.571850061416626, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0851-0003-ac120003140a"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.position_h", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\n    distinct_target_hashkeys AS (\n\n        SELECT\n            hk_position_h\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_h\n\n    ),\n         \n\n            \n\n            rsrc_static_1 AS (SELECT \n                    t.*,\n                    '*/roadshow/bestellung/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_h t\n                    WHERE rsrc like '*/roadshow/bestellung/*'),\n         \n\n            \n\n            rsrc_static_2 AS (SELECT \n                    t.*,\n                    '*/webshop/lieferung/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_h t\n                    WHERE rsrc like '*/webshop/lieferung/*'),\n         \n\n            \n\n            rsrc_static_3 AS (SELECT \n                    t.*,\n                    '*/webshop/position/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_h t\n                    WHERE rsrc like '*/webshop/position/*'),\n\n        rsrc_static_union AS (\n            \n            SELECT rsrc_static_1.* FROM rsrc_static_1\n            UNION ALL\n            SELECT rsrc_static_2.* FROM rsrc_static_2\n            UNION ALL\n            SELECT rsrc_static_3.* FROM rsrc_static_3),\n\n        max_ldts_per_rsrc_static_in_target AS (\n        \n            SELECT\n                rsrc_static,\n                MAX(ldts) as max_ldts\n            FROM rsrc_static_union\n            WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n            GROUP BY rsrc_static\n\n        ),\n\n\n    src_new_1 AS (\n\n        SELECT\n            hk_position_h AS hk_position_h,\n            position_bk,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_roadshow_bestellung src\n        \n\n    ),\n\n    src_new_2 AS (\n\n        SELECT\n            hk_position_h AS hk_position_h,\n            position_bk,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_lieferung src\n        \n\n    ),\n\n    src_new_3 AS (\n\n        SELECT\n            hk_position_h AS hk_position_h,\n            position_bk,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_position src\n        \n\n    ),\n\nsource_new_union AS (SELECT\n        hk_position_h,\n\n        position_bk AS position_bk,\n        ldts,\n        rsrc\n    FROM src_new_1\n    UNION ALL\n    SELECT\n        hk_position_h,\n\n        position_bk AS position_bk,\n        ldts,\n        rsrc\n    FROM src_new_2\n    UNION ALL\n    SELECT\n        hk_position_h,\n\n        position_bk AS position_bk,\n        ldts,\n        rsrc\n    FROM src_new_3),\n\nearliest_hk_over_all_sources AS (\n    SELECT\n        lcte.*\n    FROM source_new_union AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY hk_position_h ORDER BY ldts) = 1),\n\nrecords_to_insert AS (\n    SELECT\n        \n        hk_position_h,\n        position_bk,\n        ldts,\n        rsrc\n    FROM earliest_hk_over_all_sources\n    WHERE hk_position_h NOT IN (SELECT * FROM distinct_target_hashkeys)\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_h", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:44.147579Z", "completed_at": "2025-04-07T20:54:44.623016Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:44.623322Z", "completed_at": "2025-04-07T20:54:48.078394Z"}], "thread_id": "Thread-3", "execution_time": 3.9314191341400146, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0851-0003-ac1200031412"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.productcategory_h", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\n    distinct_target_hashkeys AS (\n\n        SELECT\n            hk_productcategory_h\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.productcategory_h\n\n    ),\n         \n\n            \n\n            rsrc_static_1 AS (SELECT \n                    t.*,\n                    '*/webshop/produkt/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.productcategory_h t\n                    WHERE rsrc like '*/webshop/produkt/*'),\n         \n\n            \n\n            rsrc_static_2 AS (SELECT \n                    t.*,\n                    '*/webshop/produktkategorie/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.productcategory_h t\n                    WHERE rsrc like '*/webshop/produktkategorie/*'),\n         \n\n            \n\n            rsrc_static_3 AS (SELECT \n                    t.*,\n                    '*/webshop/produktkategorie/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.productcategory_h t\n                    WHERE rsrc like '*/webshop/produktkategorie/*'),\n\n        rsrc_static_union AS (\n            \n            SELECT rsrc_static_1.* FROM rsrc_static_1\n            UNION ALL\n            SELECT rsrc_static_2.* FROM rsrc_static_2\n            UNION ALL\n            SELECT rsrc_static_3.* FROM rsrc_static_3),\n\n        max_ldts_per_rsrc_static_in_target AS (\n        \n            SELECT\n                rsrc_static,\n                MAX(ldts) as max_ldts\n            FROM rsrc_static_union\n            WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n            GROUP BY rsrc_static\n\n        ),\n\n\n    src_new_1 AS (\n\n        SELECT\n            hk_productcategory_h AS hk_productcategory_h,\n            productcategory_bk,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_produkt src\n        \n\n    ),\n\n    src_new_2 AS (\n\n        SELECT\n            hk_productcategory_h AS hk_productcategory_h,\n            productcategory_bk,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_produktkategorie src\n        \n\n    ),\n\n    src_new_3 AS (\n\n        SELECT\n            hk_productcategory_parent_h AS hk_productcategory_h,\n            productcategory_parent_bk,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_produktkategorie src\n        \n\n    ),\n\nsource_new_union AS (SELECT\n        hk_productcategory_h,\n\n        productcategory_bk AS productcategory_bk,\n        ldts,\n        rsrc\n    FROM src_new_1\n    UNION ALL\n    SELECT\n        hk_productcategory_h,\n\n        productcategory_bk AS productcategory_bk,\n        ldts,\n        rsrc\n    FROM src_new_2\n    UNION ALL\n    SELECT\n        hk_productcategory_h,\n\n        productcategory_parent_bk AS productcategory_bk,\n        ldts,\n        rsrc\n    FROM src_new_3),\n\nearliest_hk_over_all_sources AS (\n    SELECT\n        lcte.*\n    FROM source_new_union AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY hk_productcategory_h ORDER BY ldts) = 1),\n\nrecords_to_insert AS (\n    SELECT\n        \n        hk_productcategory_h,\n        productcategory_bk,\n        ldts,\n        rsrc\n    FROM earliest_hk_over_all_sources\n    WHERE hk_productcategory_h NOT IN (SELECT * FROM distinct_target_hashkeys)\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.productcategory_h", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:46.933202Z", "completed_at": "2025-04-07T20:54:46.943463Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:46.943730Z", "completed_at": "2025-04-07T20:54:49.809560Z"}], "thread_id": "Thread-1", "execution_time": 2.8771209716796875, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0851-0003-ac1200031452"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.productcategory_hierarchy_ws_sts", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\ncte_current_sts as\n(\n    select sts.hk_productcategory_hierarchy_l, sts.rsrc, sts.ldts, cdc\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.productcategory_hierarchy_ws_sts sts\n    qualify row_number() over (PARTITION BY sts.hk_productcategory_hierarchy_l order by sts.ldts desc) = 1\n)\n,\ncte_current_sts_not_deleted as\n(\n  select  cte_current_sts.hk_productcategory_hierarchy_l, cte_current_sts.rsrc, cte_current_sts.ldts\n  from cte_current_sts\n  where cdc <> 'D'\n)\n, cte_max_rv_ldts AS\n(\n    SELECT COALESCE(max(ldts), TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') ) ldts \n    FROM cte_current_sts_not_deleted\n)\n, cte_stage AS\n(\n    select src.hk_productcategory_hierarchy_l, src.rsrc, src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_produktkategorie src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts\n)\n, cte_rv_stage_union as\n(\n    select cte_current_sts_not_deleted.hk_productcategory_hierarchy_l, cte_current_sts_not_deleted.rsrc, cte_current_sts_not_deleted.ldts\n    from cte_current_sts_not_deleted\n    UNION\n    (\n        select cte_stage.hk_productcategory_hierarchy_l, cte_stage.rsrc, cte_stage.ldts\n        from cte_stage\n    )\n)\n, cte_dat_dom as\n(\n    select distinct src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_produktkategorie src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts \n)\n, cte_key_dom as\n(\n    select cte_rv_stage_union.hk_productcategory_hierarchy_l\n    from cte_rv_stage_union\n)\n, cte_key_dat_dom as\n(\n    select distinct  cte_key_dom.hk_productcategory_hierarchy_l\n                    , cte_dat_dom.ldts\n                    from cte_key_dom \n    cross join cte_dat_dom\n), cte_data_join as\n(\n    select\n          cte_key_dat_dom.hk_productcategory_hierarchy_l dom_key\n        , cte_key_dat_dom.ldts as dom_ldts\n        , cte_rv_stage_union.ldts as stage_ldts, lag(cte_key_dat_dom.ldts) over (partition by  cte_key_dat_dom.hk_productcategory_hierarchy_l order by  cte_key_dat_dom.ldts) as prev_dom_ldts\n        , lag(cte_rv_stage_union.ldts) over (partition by  cte_key_dat_dom.hk_productcategory_hierarchy_l order by  cte_key_dat_dom.ldts) as prev_stage_ldts\n        , cte_rv_stage_union.rsrc\n    from cte_key_dat_dom \n    left join cte_rv_stage_union \n         on cte_key_dat_dom.ldts = cte_rv_stage_union.ldts\n         and cte_key_dat_dom.hk_productcategory_hierarchy_l = cte_rv_stage_union.hk_productcategory_hierarchy_l\n    where 1=1\n)\n, cte_data_interpretation as\n(\n    select\n      dom_key\n    , dom_ldts\n    , stage_ldts, prev_dom_ldts\n    , prev_stage_ldts\n    , CASE WHEN stage_ldts IS NULL AND prev_dom_ldts IS NULL\n        THEN 'discard'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_dom_ldts IS NULL\n    THEN 'I'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_stage_ldts IS NULL \n        THEN 'I'\n        WHEN stage_ldts IS NULL AND COALESCE(prev_stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))= COALESCE(prev_dom_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))\n        THEN 'D'\n    \n        ELSE 'discard'\n        END AS cdc\n    , cte_data_join.rsrc\n    from cte_data_join\n)\nSELECT\n      dom_key AS hk_productcategory_hierarchy_l\n    , dom_ldts AS ldts, cte_data_interpretation.rsrc\n    , cdc\nFROM cte_data_interpretation\nWHERE cdc<>'discard'", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.productcategory_hierarchy_ws_sts", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:47.057009Z", "completed_at": "2025-04-07T20:54:47.062832Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:47.063025Z", "completed_at": "2025-04-07T20:54:49.922767Z"}], "thread_id": "Thread-2", "execution_time": 2.866374969482422, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0851-0003-ac120003144e"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.productcategory_ws_s", "compiled": true, "compiled_code": "\n\n\n\n    \n    \n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\nsource_data AS (\n\n    SELECT\n        hk_productcategory_h,\n        hd_productcategory_ws_s as hd_productcategory_ws_s,\n        \n        rsrc,\n        ldts,\n        name\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_produktkategorie\n    WHERE ldts > (\n        SELECT\n            MAX(ldts) FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.productcategory_ws_s\n        WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n    )\n),\n\n\nlatest_entries_in_sat AS (\n\n    SELECT\n        hk_productcategory_h,\n        hd_productcategory_ws_s\n    FROM \n        WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.productcategory_ws_s\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY hk_productcategory_h ORDER BY ldts DESC) = 1  \n),\n\n\ndeduplicated_numbered_source AS (\n\n    SELECT\n    hk_productcategory_h,\n    hd_productcategory_ws_s,\n    \n        rsrc,\n        ldts,\n        name\n    , ROW_NUMBER() OVER(PARTITION BY hk_productcategory_h ORDER BY ldts) as rn\n    FROM source_data\n    QUALIFY\n        CASE\n            WHEN hd_productcategory_ws_s = LAG(hd_productcategory_ws_s) OVER(PARTITION BY hk_productcategory_h ORDER BY ldts) THEN FALSE\n            ELSE TRUE\n        END\n),\n\n\nrecords_to_insert AS (\n\n    SELECT\n    hk_productcategory_h,\n    hd_productcategory_ws_s,\n    \n        rsrc,\n        ldts,\n        name\n    FROM deduplicated_numbered_source\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE latest_entries_in_sat.hk_productcategory_h = deduplicated_numbered_source.hk_productcategory_h\n            AND latest_entries_in_sat.hd_productcategory_ws_s = deduplicated_numbered_source.hd_productcategory_ws_s\n            AND deduplicated_numbered_source.rn = 1)\n\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.productcategory_ws_s", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:48.081608Z", "completed_at": "2025-04-07T20:54:48.093067Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:48.093348Z", "completed_at": "2025-04-07T20:54:50.234717Z"}], "thread_id": "Thread-3", "execution_time": 2.153825044631958, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-09a8-0003-ac120002f47e"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.error_rs_s", "compiled": true, "compiled_code": "\n    \n    \n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\nsource_data AS (\n\n    SELECT\n        hk_error_h,\n        hd_error_s as hd_error_s,\n        \n        rsrc,\n        ldts,\n        raw_data,\n        chk_all_msg\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.stg_error_roadshow\n    WHERE ldts > (\n        SELECT\n            MAX(ldts) FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.error_rs_s\n        WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n    )\n),\n\n\nlatest_entries_in_sat AS (\n\n    SELECT\n        hk_error_h,\n        hd_error_s\n    FROM \n        WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.error_rs_s\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY hk_error_h ORDER BY ldts DESC) = 1  \n),\n\n\ndeduplicated_numbered_source AS (\n\n    SELECT\n    hk_error_h,\n    hd_error_s,\n    \n        rsrc,\n        ldts,\n        raw_data,\n        chk_all_msg\n    , ROW_NUMBER() OVER(PARTITION BY hk_error_h ORDER BY ldts) as rn\n    FROM source_data\n    QUALIFY\n        CASE\n            WHEN hd_error_s = LAG(hd_error_s) OVER(PARTITION BY hk_error_h ORDER BY ldts) THEN FALSE\n            ELSE TRUE\n        END\n),\n\n\nrecords_to_insert AS (\n\n    SELECT\n    hk_error_h,\n    hd_error_s,\n    \n        rsrc,\n        ldts,\n        raw_data,\n        chk_all_msg\n    FROM deduplicated_numbered_source\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE latest_entries_in_sat.hk_error_h = deduplicated_numbered_source.hk_error_h\n            AND latest_entries_in_sat.hd_error_s = deduplicated_numbered_source.hd_error_s\n            AND deduplicated_numbered_source.rn = 1)\n\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.error_rs_s", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:46.862559Z", "completed_at": "2025-04-07T20:54:47.042805Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:47.043070Z", "completed_at": "2025-04-07T20:54:49.635765Z"}], "thread_id": "Thread-4", "execution_time": 2.773932933807373, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0851-0003-ac120003144a"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.productcategory_hierarchy_l", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\n\n    distinct_target_hashkeys AS (\n        \n        SELECT\n        hk_productcategory_hierarchy_l\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.productcategory_hierarchy_l\n\n    ),\n        \n\n            rsrc_static_1 AS (SELECT t.*,\n                    '*/webshop/produktkategorie/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.productcategory_hierarchy_l t\n                    WHERE rsrc like '*/webshop/produktkategorie/*'),\n\n        max_ldts_per_rsrc_static_in_target AS (\n        \n\n            SELECT\n                rsrc_static,\n                MAX(ldts) as max_ldts\n            FROM rsrc_static_1\n            WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n            GROUP BY rsrc_static\n\n        ),\n\n\n\n\n    src_new_1 AS (\n\n        SELECT\n            hk_productcategory_hierarchy_l AS hk_productcategory_hierarchy_l,\n            hk_productcategory_parent_h,\n            hk_productcategory_h,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_produktkategorie src\n        \n\n    ),\n\nearliest_hk_over_all_sources AS (\n    \n\n    SELECT\n        lcte.*\n    FROM src_new_1 AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY hk_productcategory_hierarchy_l ORDER BY ldts) = 1),\n\nrecords_to_insert AS (\n    \n\n    SELECT\n        \n            hk_productcategory_hierarchy_l,\n            hk_productcategory_parent_h,\n            hk_productcategory_h,\n            ldts,\n            rsrc\n    FROM earliest_hk_over_all_sources\n    WHERE hk_productcategory_hierarchy_l NOT IN (SELECT * FROM distinct_target_hashkeys)\n    \n)\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.productcategory_hierarchy_l", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:50.321503Z", "completed_at": "2025-04-07T20:54:50.341715Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:50.346603Z", "completed_at": "2025-04-07T20:54:52.776276Z"}], "thread_id": "Thread-2", "execution_time": 2.4613029956817627, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0979-0003-ac1200030502"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.associationpartner_customer_ws_sts", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\ncte_current_sts as\n(\n    select sts.hk_associationpartner_customer_l, sts.rsrc, sts.ldts, cdc\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.associationpartner_customer_ws_sts sts\n    qualify row_number() over (PARTITION BY sts.hk_associationpartner_customer_l order by sts.ldts desc) = 1\n)\n,\ncte_current_sts_not_deleted as\n(\n  select  cte_current_sts.hk_associationpartner_customer_l, cte_current_sts.rsrc, cte_current_sts.ldts\n  from cte_current_sts\n  where cdc <> 'D'\n)\n, cte_max_rv_ldts AS\n(\n    SELECT COALESCE(max(ldts), TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') ) ldts \n    FROM cte_current_sts_not_deleted\n)\n, cte_stage AS\n(\n    select src.hk_associationpartner_customer_l, src.rsrc, src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_vereinspartner src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts\n)\n, cte_rv_stage_union as\n(\n    select cte_current_sts_not_deleted.hk_associationpartner_customer_l, cte_current_sts_not_deleted.rsrc, cte_current_sts_not_deleted.ldts\n    from cte_current_sts_not_deleted\n    UNION\n    (\n        select cte_stage.hk_associationpartner_customer_l, cte_stage.rsrc, cte_stage.ldts\n        from cte_stage\n    )\n)\n, cte_dat_dom as\n(\n    select distinct src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_vereinspartner src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts \n)\n, cte_key_dom as\n(\n    select cte_rv_stage_union.hk_associationpartner_customer_l\n    from cte_rv_stage_union\n)\n, cte_key_dat_dom as\n(\n    select distinct  cte_key_dom.hk_associationpartner_customer_l\n                    , cte_dat_dom.ldts\n                    from cte_key_dom \n    cross join cte_dat_dom\n), cte_data_join as\n(\n    select\n          cte_key_dat_dom.hk_associationpartner_customer_l dom_key\n        , cte_key_dat_dom.ldts as dom_ldts\n        , cte_rv_stage_union.ldts as stage_ldts, lag(cte_key_dat_dom.ldts) over (partition by  cte_key_dat_dom.hk_associationpartner_customer_l order by  cte_key_dat_dom.ldts) as prev_dom_ldts\n        , lag(cte_rv_stage_union.ldts) over (partition by  cte_key_dat_dom.hk_associationpartner_customer_l order by  cte_key_dat_dom.ldts) as prev_stage_ldts\n        , cte_rv_stage_union.rsrc\n    from cte_key_dat_dom \n    left join cte_rv_stage_union \n         on cte_key_dat_dom.ldts = cte_rv_stage_union.ldts\n         and cte_key_dat_dom.hk_associationpartner_customer_l = cte_rv_stage_union.hk_associationpartner_customer_l\n    where 1=1\n)\n, cte_data_interpretation as\n(\n    select\n      dom_key\n    , dom_ldts\n    , stage_ldts, prev_dom_ldts\n    , prev_stage_ldts\n    , CASE WHEN stage_ldts IS NULL AND prev_dom_ldts IS NULL\n        THEN 'discard'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_dom_ldts IS NULL\n    THEN 'I'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_stage_ldts IS NULL \n        THEN 'I'\n        WHEN stage_ldts IS NULL AND COALESCE(prev_stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))= COALESCE(prev_dom_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))\n        THEN 'D'\n    \n        ELSE 'discard'\n        END AS cdc\n    , cte_data_join.rsrc\n    from cte_data_join\n)\nSELECT\n      dom_key AS hk_associationpartner_customer_l\n    , dom_ldts AS ldts, cte_data_interpretation.rsrc\n    , cdc\nFROM cte_data_interpretation\nWHERE cdc<>'discard'", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.associationpartner_customer_ws_sts", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:50.316421Z", "completed_at": "2025-04-07T20:54:50.524008Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:50.524363Z", "completed_at": "2025-04-07T20:54:52.962461Z"}], "thread_id": "Thread-1", "execution_time": 2.6486713886260986, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-09a8-0003-ac120002f4b6"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.associationpartner_customer_l", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\n\n    distinct_target_hashkeys AS (\n        \n        SELECT\n        hk_associationpartner_customer_l\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.associationpartner_customer_l\n\n    ),\n        \n\n            rsrc_static_1 AS (SELECT t.*,\n                    '*/webshop/vereinspartner/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.associationpartner_customer_l t\n                    WHERE rsrc like '*/webshop/vereinspartner/*'),\n\n        max_ldts_per_rsrc_static_in_target AS (\n        \n\n            SELECT\n                rsrc_static,\n                MAX(ldts) as max_ldts\n            FROM rsrc_static_1\n            WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n            GROUP BY rsrc_static\n\n        ),\n\n\n\n\n    src_new_1 AS (\n\n        SELECT\n            hk_associationpartner_customer_l AS hk_associationpartner_customer_l,\n            hk_customer_h,\n            hk_associationpartner_h,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_vereinspartner src\n        \n\n    ),\n\nearliest_hk_over_all_sources AS (\n    \n\n    SELECT\n        lcte.*\n    FROM src_new_1 AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY hk_associationpartner_customer_l ORDER BY ldts) = 1),\n\nrecords_to_insert AS (\n    \n\n    SELECT\n        \n            hk_associationpartner_customer_l,\n            hk_customer_h,\n            hk_associationpartner_h,\n            ldts,\n            rsrc\n    FROM earliest_hk_over_all_sources\n    WHERE hk_associationpartner_customer_l NOT IN (SELECT * FROM distinct_target_hashkeys)\n    \n)\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.associationpartner_customer_l", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:50.330656Z", "completed_at": "2025-04-07T20:54:50.341526Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:50.342662Z", "completed_at": "2025-04-07T20:54:52.968606Z"}], "thread_id": "Thread-4", "execution_time": 2.6527810096740723, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-09a8-0003-ac120002f4b2"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.associationpartner_ws_s", "compiled": true, "compiled_code": "\n\n\n\n    \n    \n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\nsource_data AS (\n\n    SELECT\n        hk_associationpartner_h,\n        hd_associationpartner_ws_s as hd_associationpartner_ws_s,\n        \n        rsrc,\n        ldts,\n        kundeidverein,\n        rabatt1,\n        rabatt2,\n        rabatt3\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_vereinspartner\n    WHERE ldts > (\n        SELECT\n            MAX(ldts) FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.associationpartner_ws_s\n        WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n    )\n),\n\n\nlatest_entries_in_sat AS (\n\n    SELECT\n        hk_associationpartner_h,\n        hd_associationpartner_ws_s\n    FROM \n        WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.associationpartner_ws_s\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY hk_associationpartner_h ORDER BY ldts DESC) = 1  \n),\n\n\ndeduplicated_numbered_source AS (\n\n    SELECT\n    hk_associationpartner_h,\n    hd_associationpartner_ws_s,\n    \n        rsrc,\n        ldts,\n        kundeidverein,\n        rabatt1,\n        rabatt2,\n        rabatt3\n    , ROW_NUMBER() OVER(PARTITION BY hk_associationpartner_h ORDER BY ldts) as rn\n    FROM source_data\n    QUALIFY\n        CASE\n            WHEN hd_associationpartner_ws_s = LAG(hd_associationpartner_ws_s) OVER(PARTITION BY hk_associationpartner_h ORDER BY ldts) THEN FALSE\n            ELSE TRUE\n        END\n),\n\n\nrecords_to_insert AS (\n\n    SELECT\n    hk_associationpartner_h,\n    hd_associationpartner_ws_s,\n    \n        rsrc,\n        ldts,\n        kundeidverein,\n        rabatt1,\n        rabatt2,\n        rabatt3\n    FROM deduplicated_numbered_source\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE latest_entries_in_sat.hk_associationpartner_h = deduplicated_numbered_source.hk_associationpartner_h\n            AND latest_entries_in_sat.hd_associationpartner_ws_s = deduplicated_numbered_source.hd_associationpartner_ws_s\n            AND deduplicated_numbered_source.rn = 1)\n\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.associationpartner_ws_s", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:52.972057Z", "completed_at": "2025-04-07T20:54:52.988597Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:52.989070Z", "completed_at": "2025-04-07T20:54:53.526038Z"}], "thread_id": "Thread-1", "execution_time": 0.5558583736419678, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-09a8-0003-ac120002f4ce"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.product_type_ws_rs", "compiled": true, "compiled_code": "\n    \n    \n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\nsource_data AS (\n\n    SELECT\n        \n        product_type_nk,\n        \n        hd_product_type_ws_rs as hd_product_type_ws_rs,\n        \n        rsrc,\n        ldts,\n        bezeichnung\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_ref_produkt_typ\n),\n\n\n\n\ndeduplicated_numbered_source AS (\n\n    SELECT\n    \n    product_type_nk,\n    \n    hd_product_type_ws_rs,\n    \n        rsrc,\n        ldts,\n        bezeichnung\n    \n    FROM source_data\n    QUALIFY\n        CASE\n            WHEN hd_product_type_ws_rs = LAG(hd_product_type_ws_rs) OVER(PARTITION BY product_type_nk ORDER BY ldts) THEN FALSE\n            ELSE TRUE\n        END\n),\n\n\nrecords_to_insert AS (\n\n    SELECT\n    \n    product_type_nk,\n    \n    hd_product_type_ws_rs,\n    \n        rsrc,\n        ldts,\n        bezeichnung\n    FROM deduplicated_numbered_source\n\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_type_ws_rs", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:52.981201Z", "completed_at": "2025-04-07T20:54:53.311923Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:53.312156Z", "completed_at": "2025-04-07T20:54:53.886110Z"}], "thread_id": "Thread-4", "execution_time": 0.9056189060211182, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-0851-0003-ac12000314b6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.stg_error_webshop", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\nWITH\n\n\nsource_data AS (\n    SELECT\n\n    \n        \"ROW_NUMBER\",\n        \"LDTS\",\n        \"RSRC\",\n        \"RAW_DATA\",\n        \"CHK_ALL_MSG\"\n\n  FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.pre_stg_error_webshop\n\n  ),\n\n\n\n\n\nldts_rsrc_data AS (\n\n  SELECT\n    \"LDTS\" AS ldts,\n    CAST( \"RSRC\" as STRING ) AS rsrc,\n      \n        \"ROW_NUMBER\",\n        \"RAW_DATA\",\n        \"CHK_ALL_MSG\"\n    \n\n  FROM source_data\n  \n\n),\n\nderived_columns AS (SELECT\n  \n        \"LDTS\",\n        \"RSRC\",\n        \"ROW_NUMBER\",\n        \"RAW_DATA\",\n        \"CHK_ALL_MSG\",\n  \n  to_varchar(row_number) AS \"ERROR_ROW_NO_BK\",\n    to_varchar(rsrc) AS \"ERROR_FILE_BK\"\n\n  FROM ldts_rsrc_data\n),\n\n\n\n\nhashed_columns AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"ROW_NUMBER\",\n        \"RAW_DATA\",\n        \"CHK_ALL_MSG\",\n        \"ERROR_ROW_NO_BK\",\n        \"ERROR_FILE_BK\",\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"ERROR_FILE_BK\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"ERROR_ROW_NO_BK\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^||^^'))), '00000000000000000000000000000000') AS HK_ERROR_H,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"RAW_DATA\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(\"CHK_ALL_MSG\" AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), '^^||^^'))), '00000000000000000000000000000000') AS HD_ERROR_S\n\n    FROM derived_columns\n  \n),\n\nunknown_values AS (\n  \n    SELECT\n\n    TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'SYSTEM' as rsrc,\n    \n        0 AS ROW_NUMBER,\n        '(unknown)' AS RAW_DATA,\n        NULL AS CHK_ALL_MSG\n     ,\n    \n        '(unknown)' AS ERROR_FILE_BK,\n        '(unknown)' AS ERROR_ROW_NO_BK,\n        CAST('00000000000000000000000000000000' as STRING) as HK_ERROR_H,\n        CAST('00000000000000000000000000000000' as STRING) as HD_ERROR_S\n),\n\n\nerror_values AS (\n\n    SELECT\n\n    TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'ERROR' as rsrc,\n    \n        -1 AS ROW_NUMBER\n     ,\n        '(error)' AS RAW_DATA,\n        NULL AS CHK_ALL_MSG\n      ,\n    \n        '(error)' AS ERROR_FILE_BK,\n        '(error)' AS ERROR_ROW_NO_BK,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HK_ERROR_H,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as HD_ERROR_S\n),\n\n\nghost_records AS (\n    SELECT * FROM unknown_values\n    UNION ALL\n    SELECT * FROM error_values\n),\ncolumns_to_select AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"ROW_NUMBER\",\n        \"RAW_DATA\",\n        \"CHK_ALL_MSG\",\n        \"ERROR_ROW_NO_BK\",\n        \"ERROR_FILE_BK\",\n        \"HK_ERROR_H\",\n        \"HD_ERROR_S\"\n\n    FROM hashed_columns\n\n  \n    UNION ALL\n    \n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"ROW_NUMBER\",\n        \"RAW_DATA\",\n        \"CHK_ALL_MSG\",\n        \"ERROR_ROW_NO_BK\",\n        \"ERROR_FILE_BK\",\n        \"HK_ERROR_H\",\n        \"HD_ERROR_S\"\n\n    FROM ghost_records\n  \n)\n\nSELECT * FROM columns_to_select", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.stg_error_webshop", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:50.327140Z", "completed_at": "2025-04-07T20:54:50.929054Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:50.929403Z", "completed_at": "2025-04-07T20:54:53.937079Z"}], "thread_id": "Thread-3", "execution_time": 3.621532917022705, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0851-0003-ac12000314a2"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.associationpartner_h", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\n    distinct_target_hashkeys AS (\n\n        SELECT\n            hk_associationpartner_h\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.associationpartner_h\n\n    ),\n         \n\n            \n\n            rsrc_static_1 AS (SELECT \n                    t.*,\n                    '*/roadshow/bestellung/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.associationpartner_h t\n                    WHERE rsrc like '*/roadshow/bestellung/*'),\n         \n\n            \n\n            rsrc_static_2 AS (SELECT \n                    t.*,\n                    '*/webshop/kunde/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.associationpartner_h t\n                    WHERE rsrc like '*/webshop/kunde/*'),\n         \n\n            \n\n            rsrc_static_3 AS (SELECT \n                    t.*,\n                    '*/webshop/vereinspartner/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.associationpartner_h t\n                    WHERE rsrc like '*/webshop/vereinspartner/*'),\n\n        rsrc_static_union AS (\n            \n            SELECT rsrc_static_1.* FROM rsrc_static_1\n            UNION ALL\n            SELECT rsrc_static_2.* FROM rsrc_static_2\n            UNION ALL\n            SELECT rsrc_static_3.* FROM rsrc_static_3),\n\n        max_ldts_per_rsrc_static_in_target AS (\n        \n            SELECT\n                rsrc_static,\n                MAX(ldts) as max_ldts\n            FROM rsrc_static_union\n            WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n            GROUP BY rsrc_static\n\n        ),\n\n\n    src_new_1 AS (\n\n        SELECT\n            hk_associationpartner_h AS hk_associationpartner_h,\n            associationpartner_bk,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_roadshow_bestellung src\n        \n\n    ),\n\n    src_new_2 AS (\n\n        SELECT\n            hk_associationpartner_h AS hk_associationpartner_h,\n            associationpartner_bk,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_kunde src\n        \n\n    ),\n\n    src_new_3 AS (\n\n        SELECT\n            hk_associationpartner_h AS hk_associationpartner_h,\n            associationpartner_bk,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_vereinspartner src\n        \n\n    ),\n\nsource_new_union AS (SELECT\n        hk_associationpartner_h,\n\n        associationpartner_bk AS associationpartner_bk,\n        ldts,\n        rsrc\n    FROM src_new_1\n    UNION ALL\n    SELECT\n        hk_associationpartner_h,\n\n        associationpartner_bk AS associationpartner_bk,\n        ldts,\n        rsrc\n    FROM src_new_2\n    UNION ALL\n    SELECT\n        hk_associationpartner_h,\n\n        associationpartner_bk AS associationpartner_bk,\n        ldts,\n        rsrc\n    FROM src_new_3),\n\nearliest_hk_over_all_sources AS (\n    SELECT\n        lcte.*\n    FROM source_new_union AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY hk_associationpartner_h ORDER BY ldts) = 1),\n\nrecords_to_insert AS (\n    SELECT\n        \n        hk_associationpartner_h,\n        associationpartner_bk,\n        ldts,\n        rsrc\n    FROM earliest_hk_over_all_sources\n    WHERE hk_associationpartner_h NOT IN (SELECT * FROM distinct_target_hashkeys)\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.associationpartner_h", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:52.778663Z", "completed_at": "2025-04-07T20:54:52.788118Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:52.788341Z", "completed_at": "2025-04-07T20:54:55.034493Z"}], "thread_id": "Thread-2", "execution_time": 2.2564263343811035, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0979-0003-ac120003053e"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.associationpartner_ws_sts", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\ncte_current_sts as\n(\n    select sts.hk_associationpartner_h, sts.rsrc, sts.ldts, cdc\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.associationpartner_ws_sts sts\n    qualify row_number() over (PARTITION BY sts.hk_associationpartner_h order by sts.ldts desc) = 1\n)\n,\ncte_current_sts_not_deleted as\n(\n  select  cte_current_sts.hk_associationpartner_h, cte_current_sts.rsrc, cte_current_sts.ldts\n  from cte_current_sts\n  where cdc <> 'D'\n)\n, cte_max_rv_ldts AS\n(\n    SELECT COALESCE(max(ldts), TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') ) ldts \n    FROM cte_current_sts_not_deleted\n)\n, cte_stage AS\n(\n    select src.hk_associationpartner_h, src.rsrc, src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_vereinspartner src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts\n)\n, cte_rv_stage_union as\n(\n    select cte_current_sts_not_deleted.hk_associationpartner_h, cte_current_sts_not_deleted.rsrc, cte_current_sts_not_deleted.ldts\n    from cte_current_sts_not_deleted\n    UNION\n    (\n        select cte_stage.hk_associationpartner_h, cte_stage.rsrc, cte_stage.ldts\n        from cte_stage\n    )\n)\n, cte_dat_dom as\n(\n    select distinct src.ldts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_vereinspartner src\n    CROSS JOIN cte_max_rv_ldts\n    where not src.ldts in (TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'), TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS'))\n    AND src.ldts > cte_max_rv_ldts.ldts \n)\n, cte_key_dom as\n(\n    select cte_rv_stage_union.hk_associationpartner_h\n    from cte_rv_stage_union\n)\n, cte_key_dat_dom as\n(\n    select distinct  cte_key_dom.hk_associationpartner_h\n                    , cte_dat_dom.ldts\n                    from cte_key_dom \n    cross join cte_dat_dom\n), cte_data_join as\n(\n    select\n          cte_key_dat_dom.hk_associationpartner_h dom_key\n        , cte_key_dat_dom.ldts as dom_ldts\n        , cte_rv_stage_union.ldts as stage_ldts, lag(cte_key_dat_dom.ldts) over (partition by  cte_key_dat_dom.hk_associationpartner_h order by  cte_key_dat_dom.ldts) as prev_dom_ldts\n        , lag(cte_rv_stage_union.ldts) over (partition by  cte_key_dat_dom.hk_associationpartner_h order by  cte_key_dat_dom.ldts) as prev_stage_ldts\n        , cte_rv_stage_union.rsrc\n    from cte_key_dat_dom \n    left join cte_rv_stage_union \n         on cte_key_dat_dom.ldts = cte_rv_stage_union.ldts\n         and cte_key_dat_dom.hk_associationpartner_h = cte_rv_stage_union.hk_associationpartner_h\n    where 1=1\n)\n, cte_data_interpretation as\n(\n    select\n      dom_key\n    , dom_ldts\n    , stage_ldts, prev_dom_ldts\n    , prev_stage_ldts\n    , CASE WHEN stage_ldts IS NULL AND prev_dom_ldts IS NULL\n        THEN 'discard'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_dom_ldts IS NULL\n    THEN 'I'\n    WHEN COALESCE (stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))=dom_ldts AND prev_stage_ldts IS NULL \n        THEN 'I'\n        WHEN stage_ldts IS NULL AND COALESCE(prev_stage_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))= COALESCE(prev_dom_ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS'))\n        THEN 'D'\n    \n        ELSE 'discard'\n        END AS cdc\n    , cte_data_join.rsrc\n    from cte_data_join\n)\nSELECT\n      dom_key AS hk_associationpartner_h\n    , dom_ldts AS ldts, cte_data_interpretation.rsrc\n    , cdc\nFROM cte_data_interpretation\nWHERE cdc<>'discard'", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.associationpartner_ws_sts", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:55.036828Z", "completed_at": "2025-04-07T20:54:55.050038Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:55.050265Z", "completed_at": "2025-04-07T20:54:55.613326Z"}], "thread_id": "Thread-2", "execution_time": 0.577233076095581, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-09a8-0003-ac120002f50a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.control_snap_v1", "compiled": true, "compiled_code": "with control_snap_v1 as\n(\nWITH \n\nlatest_row AS (\n\n    SELECT\n        sdts\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.control_snap_v0\n    ORDER BY sdts DESC\n    LIMIT 1\n\n), \n\nvirtual_logic AS (\n    \n    SELECT\n        c.sdts,\n        c.replacement_sdts,\n        c.force_active,\n        CASE \n            WHEN\n            (DATE_TRUNC('DAY', c.sdts::DATE) BETWEEN CURRENT_DATE() - INTERVAL '7 DAY' AND CURRENT_DATE()) OR            \n              ((DATE_TRUNC('DAY', c.sdts::DATE) BETWEEN CURRENT_DATE() - INTERVAL '0 YEAR' AND CURRENT_DATE()) AND (c.is_weekly = TRUE)) OR            \n              ((DATE_TRUNC('DAY', c.sdts::DATE) BETWEEN CURRENT_DATE() - INTERVAL '1 YEAR' AND CURRENT_DATE()) AND (c.is_monthly = TRUE)) OR\n              (c.is_yearly = TRUE)\n            THEN TRUE\n            ELSE FALSE\n        END AS is_active,\n\n        CASE\n            WHEN l.sdts IS NULL THEN FALSE\n            ELSE TRUE\n        END AS is_latest,\n\n        c.caption,\n        c.is_hourly,\n        c.is_daily,\n        c.is_weekly,\n        c.is_monthly,\n        c.is_yearly,\n        CASE\n            WHEN EXTRACT(YEAR FROM c.sdts) = EXTRACT(YEAR FROM CURRENT_DATE()) THEN TRUE\n            ELSE FALSE\n        END AS is_current_year,\n        CASE\n            WHEN EXTRACT(YEAR FROM c.sdts) = EXTRACT(YEAR FROM CURRENT_DATE())-1 THEN TRUE\n            ELSE FALSE\n        END AS is_last_year,\n        CASE\n            WHEN DATE_TRUNC('DAY', c.sdts::DATE) BETWEEN (CURRENT_DATE() - INTERVAL '1 YEAR') AND CURRENT_DATE() THEN TRUE\n            ELSE FALSE\n        END AS is_rolling_year,\n        CASE\n            WHEN DATE_TRUNC('DAY', c.sdts::DATE) BETWEEN (CURRENT_DATE() - INTERVAL '2 YEAR') AND (CURRENT_DATE() - INTERVAL '1 YEAR') THEN TRUE\n            ELSE FALSE\n        END AS is_last_rolling_year,\n        c.comment\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.control_snap_v0 c\n    LEFT JOIN latest_row l\n    ON c.sdts = l.sdts\n),\n\nactive_logic_combined AS (\n\n    SELECT \n        sdts,\n        replacement_sdts,\n        CASE\n            WHEN force_active AND is_active THEN TRUE\n            WHEN NOT force_active OR NOT is_active THEN FALSE\n        END AS is_active,\n        is_latest, \n        caption,\n        is_hourly,\n        is_daily,\n        is_weekly,\n        is_monthly,\n        is_yearly,\n        is_current_year,\n        is_last_year,\n        is_rolling_year,\n        is_last_rolling_year,\n        comment\n    FROM virtual_logic\n\n)\n\nSELECT * FROM active_logic_combined\n),\nload_sdts as\n(\n    select sdts, \n            max(sdts) over () = sdts as is_latest\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_02_load.load_sdts\n),\ncte_esdts as\n(\n    select * \n        , COALESCE(LEAD(replacement_sdts - INTERVAL '1 MICROSECOND') OVER ( ORDER BY  replacement_sdts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS replacement_esdts\n    from control_snap_v1\n)\nselect    cte_esdts.* exclude (is_latest, is_active)  \n        , l.is_latest\n        , true as is_active\nfrom load_sdts l\nleft join cte_esdts\n    on l.sdts between cte_esdts.replacement_sdts and cte_esdts.replacement_esdts", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.control_snap_v1", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:53.939000Z", "completed_at": "2025-04-07T20:54:53.943810Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:53.944004Z", "completed_at": "2025-04-07T20:54:56.102522Z"}], "thread_id": "Thread-3", "execution_time": 2.1641080379486084, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0979-0003-ac120003055a"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.error_msc_s", "compiled": true, "compiled_code": "\n    \n    \n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\nsource_data AS (\n\n    SELECT\n        hk_error_h,\n        hd_error_s as hd_error_s,\n        \n        rsrc,\n        ldts,\n        raw_data,\n        chk_all_msg\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.stg_error_misc\n    WHERE ldts > (\n        SELECT\n            MAX(ldts) FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.error_msc_s\n        WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n    )\n),\n\n\nlatest_entries_in_sat AS (\n\n    SELECT\n        hk_error_h,\n        hd_error_s\n    FROM \n        WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.error_msc_s\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY hk_error_h ORDER BY ldts DESC) = 1  \n),\n\n\ndeduplicated_numbered_source AS (\n\n    SELECT\n    hk_error_h,\n    hd_error_s,\n    \n        rsrc,\n        ldts,\n        raw_data,\n        chk_all_msg\n    , ROW_NUMBER() OVER(PARTITION BY hk_error_h ORDER BY ldts) as rn\n    FROM source_data\n    QUALIFY\n        CASE\n            WHEN hd_error_s = LAG(hd_error_s) OVER(PARTITION BY hk_error_h ORDER BY ldts) THEN FALSE\n            ELSE TRUE\n        END\n),\n\n\nrecords_to_insert AS (\n\n    SELECT\n    hk_error_h,\n    hd_error_s,\n    \n        rsrc,\n        ldts,\n        raw_data,\n        chk_all_msg\n    FROM deduplicated_numbered_source\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE latest_entries_in_sat.hk_error_h = deduplicated_numbered_source.hk_error_h\n            AND latest_entries_in_sat.hd_error_s = deduplicated_numbered_source.hd_error_s\n            AND deduplicated_numbered_source.rn = 1)\n\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.error_msc_s", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:55.619258Z", "completed_at": "2025-04-07T20:54:55.644715Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:55.645117Z", "completed_at": "2025-04-07T20:54:56.139011Z"}], "thread_id": "Thread-2", "execution_time": 0.5210602283477783, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-0979-0003-ac1200030562"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.order_associationpartner_rs_es", "compiled": true, "compiled_code": "\n\n\n \n\n-- depends_on: WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_associationpartner_l\n\n\nwith union_sts as\n(\t\n\tSELECT *\n\tFROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_associationpartner_rs_sts\n), ledts_calculation as \n(\n\tselect \n\t\t  union_sts.hk_order_associationpartner_l\n\t\t, order_associationpartner_l.hk_order_h\n\t\t, order_associationpartner_l.hk_associationpartner_h\n\t\t, union_sts.ldts, coalesce(lead(union_sts.ldts- interval '1 microsecond') over (partition by order_associationpartner_l.hk_order_h order by union_sts.ldts),to_timestamp('8888-12-31t23:59:59', 'yyyy-mm-ddthh24:mi:ss')) as ledts\n\t\t, row_number() over (partition by order_associationpartner_l.hk_order_h order by union_sts.ldts desc) =1 is_active, union_sts.rsrc \n\t, union_sts.cdc\n\tfrom union_sts\n\tinner join  WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_associationpartner_l \n\t\ton union_sts.hk_order_associationpartner_l=order_associationpartner_l.hk_order_associationpartner_l)\nselect\n*\n, CASE WHEN ledts = TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n\tTHEN TRUE\n\tELSE FALSE\nEND AS IS_CURRENT\n\n\nfrom ledts_calculation\nwhere cdc<>'D'\n\n", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_associationpartner_rs_es", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:53.890429Z", "completed_at": "2025-04-07T20:54:53.922976Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:53.923644Z", "completed_at": "2025-04-07T20:54:56.515432Z"}], "thread_id": "Thread-4", "execution_time": 2.6262967586517334, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-09a8-0003-ac120002f506"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.customer_ws_la_ms", "compiled": true, "compiled_code": "\n\n\n\n    \n    WITH\n\n\nsource_data AS (\n\n    SELECT\n        hk_customer_h,\n        hd_customer_ws_la_ms as hd_customer_ws_la_ms,\n        \n        rsrc,\n        ldts,\n        von,\n        adresszusatz,\n        bis,\n        hausnummer,\n        land,\n        ort,\n        plz,\n        strasse\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_wohnort\n    WHERE ldts > (\n        SELECT\n            MAX(ldts) FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_ws_la_ms\n        WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n    )\n\n),\n\n\nlatest_entries_in_sat AS (\n\n    SELECT\n        hk_customer_h,\n        hd_customer_ws_la_ms\n    FROM \n        WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_ws_la_ms\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY hk_customer_h ORDER BY ldts DESC) = 1  \n),\n\n\ndeduped_row_hashdiff AS (\n\n  SELECT \n    hk_customer_h,\n    ldts,\n    hd_customer_ws_la_ms\n  FROM source_data\n  QUALIFY CASE\n            WHEN hd_customer_ws_la_ms = LAG(hd_customer_ws_la_ms) OVER (PARTITION BY hk_customer_h ORDER BY ldts) THEN FALSE\n            ELSE TRUE\n          END\n),\n\n\ndeduped_rows AS (\n\n  SELECT \n    source_data.hk_customer_h,\n    source_data.hd_customer_ws_la_ms,\n    source_data.rsrc\n        , source_data.ldts\n        , source_data.von\n        , source_data.adresszusatz\n        , source_data.bis\n        , source_data.hausnummer\n        , source_data.land\n        , source_data.ort\n        , source_data.plz\n        , source_data.strasse\n        \n  FROM source_data\n  INNER JOIN deduped_row_hashdiff\n    ON source_data.hk_customer_h = deduped_row_hashdiff.hk_customer_h\n    AND source_data.ldts = deduped_row_hashdiff.ldts\n    AND source_data.hd_customer_ws_la_ms = deduped_row_hashdiff.hd_customer_ws_la_ms\n\n),\n\nrecords_to_insert AS (\n\n    SELECT\n        deduped_rows.hk_customer_h,\n        deduped_rows.hd_customer_ws_la_ms,\n        deduped_rows.rsrc\n        , deduped_rows.ldts\n        , deduped_rows.von\n        , deduped_rows.adresszusatz\n        , deduped_rows.bis\n        , deduped_rows.hausnummer\n        , deduped_rows.land\n        , deduped_rows.ort\n        , deduped_rows.plz\n        , deduped_rows.strasse\n        \n    FROM deduped_rows\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE latest_entries_in_sat.hk_customer_h = deduped_rows.hk_customer_h\n            AND latest_entries_in_sat.hd_customer_ws_la_ms = deduped_rows.hd_customer_ws_la_ms \n            )\n\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_ws_la_ms", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:56.150818Z", "completed_at": "2025-04-07T20:54:56.159843Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:56.160139Z", "completed_at": "2025-04-07T20:54:56.720280Z"}], "thread_id": "Thread-2", "execution_time": 0.5701923370361328, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-0851-0003-ac12000314fa"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.order_customer_rs_es", "compiled": true, "compiled_code": "\n\n\n \n\n-- depends_on: WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_customer_l\n\n\nwith union_sts as\n(\t\n\tSELECT *\n\tFROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_customer_rs_sts\n), ledts_calculation as \n(\n\tselect \n\t\t  union_sts.hk_order_customer_l\n\t\t, order_customer_l.hk_order_h\n\t\t, order_customer_l.hk_customer_h\n\t\t, union_sts.ldts, coalesce(lead(union_sts.ldts- interval '1 microsecond') over (partition by order_customer_l.hk_order_h order by union_sts.ldts),to_timestamp('8888-12-31t23:59:59', 'yyyy-mm-ddthh24:mi:ss')) as ledts\n\t\t, row_number() over (partition by order_customer_l.hk_order_h order by union_sts.ldts desc) =1 is_active, union_sts.rsrc \n\t, union_sts.cdc\n\tfrom union_sts\n\tinner join  WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_customer_l \n\t\ton union_sts.hk_order_customer_l=order_customer_l.hk_order_customer_l)\nselect\n*\n, CASE WHEN ledts = TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n\tTHEN TRUE\n\tELSE FALSE\nEND AS IS_CURRENT\n\n\nfrom ledts_calculation\nwhere cdc<>'D'\n\n", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_customer_rs_es", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:56.141208Z", "completed_at": "2025-04-07T20:54:56.155233Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:56.155497Z", "completed_at": "2025-04-07T20:54:56.750000Z"}], "thread_id": "Thread-3", "execution_time": 0.6105363368988037, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-09a8-0003-ac120002f51e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.deliveryadress_customer_ws_es", "compiled": true, "compiled_code": "\n\n\n \n\n-- depends_on: WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryadress_customer_l\n\n\nwith union_sts as\n(\t\n\tSELECT *\n\tFROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryadress_customer_ws_sts\n), ledts_calculation as \n(\n\tselect \n\t\t  union_sts.hk_deliveryadress_customer_l\n\t\t, deliveryadress_customer_l.hk_customer_h\n\t\t, deliveryadress_customer_l.hk_deliveryadress_h\n\t\t, union_sts.ldts, coalesce(lead(union_sts.ldts- interval '1 microsecond') over (partition by deliveryadress_customer_l.hk_customer_h order by union_sts.ldts),to_timestamp('8888-12-31t23:59:59', 'yyyy-mm-ddthh24:mi:ss')) as ledts\n\t\t, row_number() over (partition by deliveryadress_customer_l.hk_customer_h order by union_sts.ldts desc) =1 is_active, union_sts.rsrc \n\t, union_sts.cdc\n\tfrom union_sts\n\tinner join  WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryadress_customer_l \n\t\ton union_sts.hk_deliveryadress_customer_l=deliveryadress_customer_l.hk_deliveryadress_customer_l)\nselect\n*\n, CASE WHEN ledts = TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n\tTHEN TRUE\n\tELSE FALSE\nEND AS IS_CURRENT\n\n\nfrom ledts_calculation\nwhere cdc<>'D'\n\n", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryadress_customer_ws_es", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:56.520711Z", "completed_at": "2025-04-07T20:54:56.530766Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:56.531074Z", "completed_at": "2025-04-07T20:54:57.097756Z"}], "thread_id": "Thread-4", "execution_time": 0.5788319110870361, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-0979-0003-ac120003057a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.order_customer_ws_es", "compiled": true, "compiled_code": "\n\n\n \n\n-- depends_on: WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_customer_l\n\n\nwith union_sts as\n(\t\n\tSELECT *\n\tFROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_customer_ws_sts\n), ledts_calculation as \n(\n\tselect \n\t\t  union_sts.hk_order_customer_l\n\t\t, order_customer_l.hk_order_h\n\t\t, order_customer_l.hk_customer_h\n\t\t, union_sts.ldts, coalesce(lead(union_sts.ldts- interval '1 microsecond') over (partition by order_customer_l.hk_order_h order by union_sts.ldts),to_timestamp('8888-12-31t23:59:59', 'yyyy-mm-ddthh24:mi:ss')) as ledts\n\t\t, row_number() over (partition by order_customer_l.hk_order_h order by union_sts.ldts desc) =1 is_active, union_sts.rsrc \n\t, union_sts.cdc\n\tfrom union_sts\n\tinner join  WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_customer_l \n\t\ton union_sts.hk_order_customer_l=order_customer_l.hk_order_customer_l)\nselect\n*\n, CASE WHEN ledts = TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n\tTHEN TRUE\n\tELSE FALSE\nEND AS IS_CURRENT\n\n\nfrom ledts_calculation\nwhere cdc<>'D'\n\n", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_customer_ws_es", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:56.726447Z", "completed_at": "2025-04-07T20:54:56.740030Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:56.740478Z", "completed_at": "2025-04-07T20:54:57.240424Z"}], "thread_id": "Thread-2", "execution_time": 0.5152359008789062, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-09a8-0003-ac120002f526"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.customer_associationpartner_ws_es", "compiled": true, "compiled_code": "\n\n\n \n\n-- depends_on: WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_associationpartner_l\n\n\nwith union_sts as\n(\t\n\tSELECT *\n\tFROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_associationpartner_ws_sts\n), ledts_calculation as \n(\n\tselect \n\t\t  union_sts.hk_customer_associationpartner_l\n\t\t, customer_associationpartner_l.hk_customer_h\n\t\t, customer_associationpartner_l.hk_associationpartner_h\n\t\t, union_sts.ldts, coalesce(lead(union_sts.ldts- interval '1 microsecond') over (partition by customer_associationpartner_l.hk_customer_h order by union_sts.ldts),to_timestamp('8888-12-31t23:59:59', 'yyyy-mm-ddthh24:mi:ss')) as ledts\n\t\t, row_number() over (partition by customer_associationpartner_l.hk_customer_h order by union_sts.ldts desc) =1 is_active, union_sts.rsrc \n\t, union_sts.cdc\n\tfrom union_sts\n\tinner join  WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_associationpartner_l \n\t\ton union_sts.hk_customer_associationpartner_l=customer_associationpartner_l.hk_customer_associationpartner_l)\nselect\n*\n, CASE WHEN ledts = TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n\tTHEN TRUE\n\tELSE FALSE\nEND AS IS_CURRENT\n\n\nfrom ledts_calculation\nwhere cdc<>'D'\n\n", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_associationpartner_ws_es", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:56.752996Z", "completed_at": "2025-04-07T20:54:56.761032Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:56.761276Z", "completed_at": "2025-04-07T20:54:57.267434Z"}], "thread_id": "Thread-3", "execution_time": 0.5151622295379639, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-0979-0003-ac120003057e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.position_product_rs_es", "compiled": true, "compiled_code": "\n\n\n \n\n-- depends_on: WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_product_l\n\n\nwith union_sts as\n(\t\n\tSELECT *\n\tFROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_product_rs_sts\n), ledts_calculation as \n(\n\tselect \n\t\t  union_sts.hk_position_product_l\n\t\t, position_product_l.hk_position_h\n\t\t, position_product_l.hk_product_h\n\t\t, union_sts.ldts, coalesce(lead(union_sts.ldts- interval '1 microsecond') over (partition by position_product_l.hk_position_h order by union_sts.ldts),to_timestamp('8888-12-31t23:59:59', 'yyyy-mm-ddthh24:mi:ss')) as ledts\n\t\t, row_number() over (partition by position_product_l.hk_position_h order by union_sts.ldts desc) =1 is_active, union_sts.rsrc \n\t, union_sts.cdc\n\tfrom union_sts\n\tinner join  WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_product_l \n\t\ton union_sts.hk_position_product_l=position_product_l.hk_position_product_l)\nselect\n*\n, CASE WHEN ledts = TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n\tTHEN TRUE\n\tELSE FALSE\nEND AS IS_CURRENT\n\n\nfrom ledts_calculation\nwhere cdc<>'D'\n\n", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_product_rs_es", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:57.102853Z", "completed_at": "2025-04-07T20:54:57.116974Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:57.117373Z", "completed_at": "2025-04-07T20:54:57.642156Z"}], "thread_id": "Thread-4", "execution_time": 0.540496826171875, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-0851-0003-ac120003150a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.position_product_ws_es", "compiled": true, "compiled_code": "\n\n\n \n\n-- depends_on: WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_product_l\n\n\nwith union_sts as\n(\t\n\tSELECT *\n\tFROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_product_ws_sts\n), ledts_calculation as \n(\n\tselect \n\t\t  union_sts.hk_position_product_l\n\t\t, position_product_l.hk_position_h\n\t\t, position_product_l.hk_product_h\n\t\t, union_sts.ldts, coalesce(lead(union_sts.ldts- interval '1 microsecond') over (partition by position_product_l.hk_position_h order by union_sts.ldts),to_timestamp('8888-12-31t23:59:59', 'yyyy-mm-ddthh24:mi:ss')) as ledts\n\t\t, row_number() over (partition by position_product_l.hk_position_h order by union_sts.ldts desc) =1 is_active, union_sts.rsrc \n\t, union_sts.cdc\n\tfrom union_sts\n\tinner join  WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_product_l \n\t\ton union_sts.hk_position_product_l=position_product_l.hk_position_product_l)\nselect\n*\n, CASE WHEN ledts = TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n\tTHEN TRUE\n\tELSE FALSE\nEND AS IS_CURRENT\n\n\nfrom ledts_calculation\nwhere cdc<>'D'\n\n", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_product_ws_es", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:57.245302Z", "completed_at": "2025-04-07T20:54:57.257398Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:57.257807Z", "completed_at": "2025-04-07T20:54:57.764518Z"}], "thread_id": "Thread-2", "execution_time": 0.5203039646148682, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-0979-0003-ac1200030582"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.product_productcategory_ws_es", "compiled": true, "compiled_code": "\n\n\n \n\n-- depends_on: WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_productcategory_l\n\n\nwith union_sts as\n(\t\n\tSELECT *\n\tFROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_productcategory_ws_sts\n), ledts_calculation as \n(\n\tselect \n\t\t  union_sts.hk_product_productcategory_l\n\t\t, product_productcategory_l.hk_product_h\n\t\t, product_productcategory_l.hk_productcategory_h\n\t\t, union_sts.ldts, coalesce(lead(union_sts.ldts- interval '1 microsecond') over (partition by product_productcategory_l.hk_product_h order by union_sts.ldts),to_timestamp('8888-12-31t23:59:59', 'yyyy-mm-ddthh24:mi:ss')) as ledts\n\t\t, row_number() over (partition by product_productcategory_l.hk_product_h order by union_sts.ldts desc) =1 is_active, union_sts.rsrc \n\t, union_sts.cdc\n\tfrom union_sts\n\tinner join  WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_productcategory_l \n\t\ton union_sts.hk_product_productcategory_l=product_productcategory_l.hk_product_productcategory_l)\nselect\n*\n, CASE WHEN ledts = TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n\tTHEN TRUE\n\tELSE FALSE\nEND AS IS_CURRENT\n\n\nfrom ledts_calculation\nwhere cdc<>'D'\n\n", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_productcategory_ws_es", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:57.271223Z", "completed_at": "2025-04-07T20:54:57.331880Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:57.332087Z", "completed_at": "2025-04-07T20:54:57.840227Z"}], "thread_id": "Thread-3", "execution_time": 0.5697259902954102, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-0851-0003-ac120003150e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.associationpartner_customer_ws_es", "compiled": true, "compiled_code": "\n\n\n \n\n-- depends_on: WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.associationpartner_customer_l\n\n\nwith union_sts as\n(\t\n\tSELECT *\n\tFROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.associationpartner_customer_ws_sts\n), ledts_calculation as \n(\n\tselect \n\t\t  union_sts.hk_associationpartner_customer_l\n\t\t, associationpartner_customer_l.hk_associationpartner_h\n\t\t, associationpartner_customer_l.hk_customer_h\n\t\t, union_sts.ldts, coalesce(lead(union_sts.ldts- interval '1 microsecond') over (partition by associationpartner_customer_l.hk_associationpartner_h order by union_sts.ldts),to_timestamp('8888-12-31t23:59:59', 'yyyy-mm-ddthh24:mi:ss')) as ledts\n\t\t, row_number() over (partition by associationpartner_customer_l.hk_associationpartner_h order by union_sts.ldts desc) =1 is_active, union_sts.rsrc \n\t, union_sts.cdc\n\tfrom union_sts\n\tinner join  WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.associationpartner_customer_l \n\t\ton union_sts.hk_associationpartner_customer_l=associationpartner_customer_l.hk_associationpartner_customer_l)\nselect\n*\n, CASE WHEN ledts = TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n\tTHEN TRUE\n\tELSE FALSE\nEND AS IS_CURRENT\n\n\nfrom ledts_calculation\nwhere cdc<>'D'\n\n", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.associationpartner_customer_ws_es", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:57.646943Z", "completed_at": "2025-04-07T20:54:57.654558Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:57.654958Z", "completed_at": "2025-04-07T20:54:58.111298Z"}], "thread_id": "Thread-4", "execution_time": 0.4654579162597656, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8986-0306-09a8-0003-ac120002f53a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.product_type_sns", "compiled": true, "compiled_code": "select \n\t  --control_snap_v1.sdts\n\t  product_type_ws_rs.product_type_nk\n\t, product_type_ws_rs.ldts \n\t, product_type_ws_rs.rsrc\n    , product_type_ws_rs.bezeichnung\nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_type_ws_rs product_type_ws_rs", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.product_type_sns", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:53.528964Z", "completed_at": "2025-04-07T20:54:54.399957Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:54.400511Z", "completed_at": "2025-04-07T20:54:58.146732Z"}], "thread_id": "Thread-1", "execution_time": 4.61837100982666, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0979-0003-ac1200030572"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.customer_h", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\n    distinct_target_hashkeys AS (\n\n        SELECT\n            hk_customer_h\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_h\n\n    ),\n         \n\n            \n\n            rsrc_static_1 AS (SELECT \n                    t.*,\n                    '*/roadshow/bestellung/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_h t\n                    WHERE rsrc like '*/roadshow/bestellung/*'),\n         \n\n            \n\n            rsrc_static_2 AS (SELECT \n                    t.*,\n                    '*/webshop/bestellung/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_h t\n                    WHERE rsrc like '*/webshop/bestellung/*'),\n         \n\n            \n\n            rsrc_static_3 AS (SELECT \n                    t.*,\n                    '*/webshop/kunde/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_h t\n                    WHERE rsrc like '*/webshop/kunde/*'),\n         \n\n            \n\n            rsrc_static_4 AS (SELECT \n                    t.*,\n                    '*/webshop/lieferadresse/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_h t\n                    WHERE rsrc like '*/webshop/lieferadresse/*'),\n         \n\n            \n\n            rsrc_static_5 AS (SELECT \n                    t.*,\n                    '*/webshop/vereinspartner/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_h t\n                    WHERE rsrc like '*/webshop/vereinspartner/*'),\n         \n\n            \n\n            rsrc_static_6 AS (SELECT \n                    t.*,\n                    '*/webshop/wohnort/*' AS rsrc_static\n                    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_h t\n                    WHERE rsrc like '*/webshop/wohnort/*'),\n\n        rsrc_static_union AS (\n            \n            SELECT rsrc_static_1.* FROM rsrc_static_1\n            UNION ALL\n            SELECT rsrc_static_2.* FROM rsrc_static_2\n            UNION ALL\n            SELECT rsrc_static_3.* FROM rsrc_static_3\n            UNION ALL\n            SELECT rsrc_static_4.* FROM rsrc_static_4\n            UNION ALL\n            SELECT rsrc_static_5.* FROM rsrc_static_5\n            UNION ALL\n            SELECT rsrc_static_6.* FROM rsrc_static_6),\n\n        max_ldts_per_rsrc_static_in_target AS (\n        \n            SELECT\n                rsrc_static,\n                MAX(ldts) as max_ldts\n            FROM rsrc_static_union\n            WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n            GROUP BY rsrc_static\n\n        ),\n\n\n    src_new_1 AS (\n\n        SELECT\n            hk_customer_h AS hk_customer_h,\n            customer_bk,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_roadshow_bestellung src\n        \n\n    ),\n\n    src_new_2 AS (\n\n        SELECT\n            hk_customer_h AS hk_customer_h,\n            customer_bk,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_bestellung src\n        \n\n    ),\n\n    src_new_3 AS (\n\n        SELECT\n            hk_customer_h AS hk_customer_h,\n            customer_bk,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_kunde src\n        \n\n    ),\n\n    src_new_4 AS (\n\n        SELECT\n            hk_customer_h AS hk_customer_h,\n            customer_bk,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_lieferadresse src\n        \n\n    ),\n\n    src_new_5 AS (\n\n        SELECT\n            hk_customer_h AS hk_customer_h,\n            customer_bk,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_vereinspartner src\n        \n\n    ),\n\n    src_new_6 AS (\n\n        SELECT\n            hk_customer_h AS hk_customer_h,\n            customer_bk,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.stg_webshop_wohnort src\n        \n\n    ),\n\nsource_new_union AS (SELECT\n        hk_customer_h,\n\n        customer_bk AS customer_bk,\n        ldts,\n        rsrc\n    FROM src_new_1\n    UNION ALL\n    SELECT\n        hk_customer_h,\n\n        customer_bk AS customer_bk,\n        ldts,\n        rsrc\n    FROM src_new_2\n    UNION ALL\n    SELECT\n        hk_customer_h,\n\n        customer_bk AS customer_bk,\n        ldts,\n        rsrc\n    FROM src_new_3\n    UNION ALL\n    SELECT\n        hk_customer_h,\n\n        customer_bk AS customer_bk,\n        ldts,\n        rsrc\n    FROM src_new_4\n    UNION ALL\n    SELECT\n        hk_customer_h,\n\n        customer_bk AS customer_bk,\n        ldts,\n        rsrc\n    FROM src_new_5\n    UNION ALL\n    SELECT\n        hk_customer_h,\n\n        customer_bk AS customer_bk,\n        ldts,\n        rsrc\n    FROM src_new_6),\n\nearliest_hk_over_all_sources AS (\n    SELECT\n        lcte.*\n    FROM source_new_union AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY hk_customer_h ORDER BY ldts) = 1),\n\nrecords_to_insert AS (\n    SELECT\n        \n        hk_customer_h,\n        customer_bk,\n        ldts,\n        rsrc\n    FROM earliest_hk_over_all_sources\n    WHERE hk_customer_h NOT IN (SELECT * FROM distinct_target_hashkeys)\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_h", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:57.842481Z", "completed_at": "2025-04-07T20:54:57.848472Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:57.848717Z", "completed_at": "2025-04-07T20:55:00.104102Z"}], "thread_id": "Thread-3", "execution_time": 2.262261152267456, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-09a8-0003-ac120002f556"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.error_ws_s", "compiled": true, "compiled_code": "\n    \n    \n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\nsource_data AS (\n\n    SELECT\n        hk_error_h,\n        hd_error_s as hd_error_s,\n        \n        rsrc,\n        ldts,\n        raw_data,\n        chk_all_msg\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.stg_error_webshop\n    WHERE ldts > (\n        SELECT\n            MAX(ldts) FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.error_ws_s\n        WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n    )\n),\n\n\nlatest_entries_in_sat AS (\n\n    SELECT\n        hk_error_h,\n        hd_error_s\n    FROM \n        WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.error_ws_s\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY hk_error_h ORDER BY ldts DESC) = 1  \n),\n\n\ndeduplicated_numbered_source AS (\n\n    SELECT\n    hk_error_h,\n    hd_error_s,\n    \n        rsrc,\n        ldts,\n        raw_data,\n        chk_all_msg\n    , ROW_NUMBER() OVER(PARTITION BY hk_error_h ORDER BY ldts) as rn\n    FROM source_data\n    QUALIFY\n        CASE\n            WHEN hd_error_s = LAG(hd_error_s) OVER(PARTITION BY hk_error_h ORDER BY ldts) THEN FALSE\n            ELSE TRUE\n        END\n),\n\n\nrecords_to_insert AS (\n\n    SELECT\n    hk_error_h,\n    hd_error_s,\n    \n        rsrc,\n        ldts,\n        raw_data,\n        chk_all_msg\n    FROM deduplicated_numbered_source\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE latest_entries_in_sat.hk_error_h = deduplicated_numbered_source.hk_error_h\n            AND latest_entries_in_sat.hd_error_s = deduplicated_numbered_source.hd_error_s\n            AND deduplicated_numbered_source.rn = 1)\n\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.error_ws_s", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:57.767655Z", "completed_at": "2025-04-07T20:54:57.778144Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:57.778423Z", "completed_at": "2025-04-07T20:55:00.264238Z"}], "thread_id": "Thread-2", "execution_time": 2.497317314147949, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0851-0003-ac120003153a"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.error_h", "compiled": true, "compiled_code": "\n\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\n    distinct_target_hashkeys AS (\n\n        SELECT\n            hk_error_h\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.error_h\n\n    ),\n\n\n    src_new_1 AS (\n\n        SELECT\n            hk_error_h AS hk_error_h,\n            error_row_no_bk,\n            error_file_bk,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.stg_error_roadshow src\n        \n\n    ),\n\n    src_new_2 AS (\n\n        SELECT\n            hk_error_h AS hk_error_h,\n            error_row_no_bk,\n            error_file_bk,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.stg_error_webshop src\n        \n\n    ),\n\n    src_new_3 AS (\n\n        SELECT\n            hk_error_h AS hk_error_h,\n            error_row_no_bk,\n            error_file_bk,\n            ldts,\n            rsrc\n        FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.stg_error_misc src\n        \n\n    ),\n\nsource_new_union AS (SELECT\n        hk_error_h,\n\n        error_row_no_bk AS error_row_no_bk,\n        error_file_bk AS error_file_bk,\n        ldts,\n        rsrc\n    FROM src_new_1\n    UNION ALL\n    SELECT\n        hk_error_h,\n\n        error_row_no_bk AS error_row_no_bk,\n        error_file_bk AS error_file_bk,\n        ldts,\n        rsrc\n    FROM src_new_2\n    UNION ALL\n    SELECT\n        hk_error_h,\n\n        error_row_no_bk AS error_row_no_bk,\n        error_file_bk AS error_file_bk,\n        ldts,\n        rsrc\n    FROM src_new_3),\n\nearliest_hk_over_all_sources AS (\n    SELECT\n        lcte.*\n    FROM source_new_union AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY hk_error_h ORDER BY ldts) = 1),\n\nrecords_to_insert AS (\n    SELECT\n        \n        hk_error_h,\n        error_row_no_bk,\n        error_file_bk,\n        ldts,\n        rsrc\n    FROM earliest_hk_over_all_sources\n    WHERE hk_error_h NOT IN (SELECT * FROM distinct_target_hashkeys)\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.error_h", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:58.154012Z", "completed_at": "2025-04-07T20:54:58.240260Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:58.240559Z", "completed_at": "2025-04-07T20:55:01.129727Z"}], "thread_id": "Thread-1", "execution_time": 2.977159261703491, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0851-0003-ac1200031546"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.category_deliveryadherence_r_snp", "compiled": true, "compiled_code": "\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\nexisting_dimension_keys AS (\n\n    SELECT\n        d_category_deliveryadherence_nk\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.category_deliveryadherence_r_snp\n\n),\n\npit_records AS (\n\n    SELECT\n        \n        '\"REGULAR PIT\"' as type,\n        'PIT table for category_deliveryadherence_r' as rsrc,\n        IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST('Regular PIT' AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(te.category_deliveryadherence_nk AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(snap.sdts AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n    ), '\\n', '') \n    , '\\t', '') \n    , '\\v', '') \n    , '\\r', '') AS STRING), '^^||^^||^^'))), '00000000000000000000000000000000') AS d_category_deliveryadherence_nk ,\n        te.category_deliveryadherence_nk,\n        snap.sdts,\n            COALESCE(category_deliveryadherence_misc_rs.category_deliveryadherence_nk, CAST('00000000000000000000000000000000' as STRING)) AS hk_category_deliveryadherence_misc_rs,\n            COALESCE(category_deliveryadherence_misc_rs.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_category_deliveryadherence_misc_rs\n\n    FROM\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.category_deliveryadherence_r te\n        FULL OUTER JOIN\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.control_snap_v1 snap\n            ON snap.is_active = true\n            \n        \n        LEFT JOIN (\n            SELECT\n                category_deliveryadherence_nk,\n                ldts,\n                COALESCE(LEAD(ldts - INTERVAL '1 MICROSECOND') OVER (PARTITION BY category_deliveryadherence_nk ORDER BY ldts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS ledts\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.category_deliveryadherence_misc_rs\n        ) category_deliveryadherence_misc_rs\n        \n            ON\n                category_deliveryadherence_misc_rs.category_deliveryadherence_nk = te.category_deliveryadherence_nk\n                AND snap.sdts BETWEEN category_deliveryadherence_misc_rs.ldts AND category_deliveryadherence_misc_rs.ledts\n        \n    \n        WHERE snap.is_active\n\n),\n\nrecords_to_insert AS (\n\n    SELECT DISTINCT *\n    FROM pit_records\n    WHERE d_category_deliveryadherence_nk NOT IN (SELECT * FROM existing_dimension_keys)\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.category_deliveryadherence_r_snp", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:54:58.116199Z", "completed_at": "2025-04-07T20:54:58.323046Z"}, {"name": "execute", "started_at": "2025-04-07T20:54:58.323418Z", "completed_at": "2025-04-07T20:55:01.336866Z"}], "thread_id": "Thread-4", "execution_time": 3.221611976623535, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8986-0306-0851-0003-ac120003154a"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.associationpartner_snp", "compiled": true, "compiled_code": "\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\nexisting_dimension_keys AS (\n\n    SELECT\n        hk_associationpartner_d\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.associationpartner_snp\n\n),\n\npit_records AS (\n\n    SELECT\n        \n        '\"REGULAR PIT\"' as type,\n        'PIT table for associationpartner' as rsrc,\n        IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST('Regular PIT' AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(te.hk_associationpartner_h AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(snap.sdts AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n    ), '\\n', '') \n    , '\\t', '') \n    , '\\v', '') \n    , '\\r', '') AS STRING), '^^||^^||^^'))), '00000000000000000000000000000000') AS hk_associationpartner_d ,\n        te.hk_associationpartner_h,\n        snap.sdts,\n            COALESCE(associationpartner_ws_s.hk_associationpartner_h, CAST('00000000000000000000000000000000' as STRING)) AS hk_associationpartner_ws_s,\n            COALESCE(associationpartner_ws_s.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_associationpartner_ws_s,\n            COALESCE(associationpartner_ws_sts.hk_associationpartner_h, CAST('00000000000000000000000000000000' as STRING)) AS hk_associationpartner_ws_sts,\n            COALESCE(associationpartner_ws_sts.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_associationpartner_ws_sts\n\n    FROM\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.associationpartner_h te\n        FULL OUTER JOIN\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.control_snap_v1 snap\n            ON snap.is_active = true\n            \n        \n        LEFT JOIN (\n            SELECT\n                hk_associationpartner_h,\n                ldts,\n                COALESCE(LEAD(ldts - INTERVAL '1 MICROSECOND') OVER (PARTITION BY hk_associationpartner_h ORDER BY ldts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS ledts\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.associationpartner_ws_s\n        ) associationpartner_ws_s\n        \n            ON\n                associationpartner_ws_s.hk_associationpartner_h = te.hk_associationpartner_h\n                AND snap.sdts BETWEEN associationpartner_ws_s.ldts AND associationpartner_ws_s.ledts\n        \n        LEFT JOIN (\n            SELECT\n                hk_associationpartner_h,\n                ldts,\n                COALESCE(LEAD(ldts - INTERVAL '1 MICROSECOND') OVER (PARTITION BY hk_associationpartner_h ORDER BY ldts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS ledts\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.associationpartner_ws_sts\n        ) associationpartner_ws_sts\n        \n            ON\n                associationpartner_ws_sts.hk_associationpartner_h = te.hk_associationpartner_h\n                AND snap.sdts BETWEEN associationpartner_ws_sts.ldts AND associationpartner_ws_sts.ledts\n        \n    \n        WHERE snap.is_active\n\n),\n\nrecords_to_insert AS (\n\n    SELECT DISTINCT *\n    FROM pit_records\n    WHERE hk_associationpartner_d NOT IN (SELECT * FROM existing_dimension_keys)\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.associationpartner_snp", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:00.109104Z", "completed_at": "2025-04-07T20:55:00.345632Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:00.345937Z", "completed_at": "2025-04-07T20:55:03.774207Z"}], "thread_id": "Thread-3", "execution_time": 3.6661298274993896, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8987-0306-0851-0003-ac1200031576"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.category_deliveryadherence_snp", "compiled": true, "compiled_code": "\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\nexisting_dimension_keys AS (\n\n    SELECT\n        hk_category_deliveryadherence_d\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.category_deliveryadherence_snp\n\n),\n\npit_records AS (\n\n    SELECT\n        \n        '\"REGULAR PIT\"' as type,\n        'PIT table for category delivery adherence' as rsrc,\n        IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST('Regular PIT' AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(te.category_deliveryadherence_nk AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(snap.sdts AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n    ), '\\n', '') \n    , '\\t', '') \n    , '\\v', '') \n    , '\\r', '') AS STRING), '^^||^^||^^'))), '00000000000000000000000000000000') AS hk_category_deliveryadherence_d ,\n        te.category_deliveryadherence_nk,\n        snap.sdts,\n            COALESCE(category_deliveryadherence_misc_rs.category_deliveryadherence_nk, CAST('00000000000000000000000000000000' as STRING)) AS hk_category_deliveryadherence_misc_rs,\n            COALESCE(category_deliveryadherence_misc_rs.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_category_deliveryadherence_misc_rs,\n            COALESCE(category_deliveryadherence_misc_sts.category_deliveryadherence_nk, CAST('00000000000000000000000000000000' as STRING)) AS hk_category_deliveryadherence_misc_sts,\n            COALESCE(category_deliveryadherence_misc_sts.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_category_deliveryadherence_misc_sts\n\n    FROM\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.category_deliveryadherence_r te\n        FULL OUTER JOIN\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.control_snap_v1 snap\n            ON snap.is_active = true\n            \n        \n        LEFT JOIN (\n            SELECT\n                category_deliveryadherence_nk,\n                ldts,\n                COALESCE(LEAD(ldts - INTERVAL '1 MICROSECOND') OVER (PARTITION BY category_deliveryadherence_nk ORDER BY ldts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS ledts\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.category_deliveryadherence_misc_rs\n        ) category_deliveryadherence_misc_rs\n        \n            ON\n                category_deliveryadherence_misc_rs.category_deliveryadherence_nk = te.category_deliveryadherence_nk\n                AND snap.sdts BETWEEN category_deliveryadherence_misc_rs.ldts AND category_deliveryadherence_misc_rs.ledts\n        \n        LEFT JOIN (\n            SELECT\n                category_deliveryadherence_nk,\n                ldts,\n                COALESCE(LEAD(ldts - INTERVAL '1 MICROSECOND') OVER (PARTITION BY category_deliveryadherence_nk ORDER BY ldts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS ledts\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.category_deliveryadherence_misc_sts\n        ) category_deliveryadherence_misc_sts\n        \n            ON\n                category_deliveryadherence_misc_sts.category_deliveryadherence_nk = te.category_deliveryadherence_nk\n                AND snap.sdts BETWEEN category_deliveryadherence_misc_sts.ldts AND category_deliveryadherence_misc_sts.ledts\n        \n    \n        WHERE snap.is_active\n\n),\n\nrecords_to_insert AS (\n\n    SELECT DISTINCT *\n    FROM pit_records\n    WHERE hk_category_deliveryadherence_d NOT IN (SELECT * FROM existing_dimension_keys)\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.category_deliveryadherence_snp", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:00.267770Z", "completed_at": "2025-04-07T20:55:00.356093Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:00.356351Z", "completed_at": "2025-04-07T20:55:03.842342Z"}], "thread_id": "Thread-2", "execution_time": 3.5752546787261963, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8987-0306-09a8-0003-ac120002f596"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.deliveryadress_snp", "compiled": true, "compiled_code": "\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\nexisting_dimension_keys AS (\n\n    SELECT\n        hk_deliveryadress_d\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.deliveryadress_snp\n\n),\n\npit_records AS (\n\n    SELECT\n        \n        '\"REGULAR PIT\"' as type,\n        'PIT table for deliveryadress' as rsrc,\n        IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST('Regular PIT' AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(te.hk_deliveryadress_h AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(snap.sdts AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n    ), '\\n', '') \n    , '\\t', '') \n    , '\\v', '') \n    , '\\r', '') AS STRING), '^^||^^||^^'))), '00000000000000000000000000000000') AS hk_deliveryadress_d ,\n        te.hk_deliveryadress_h,\n        snap.sdts,\n            COALESCE(deliveryadress_ws_s.hk_deliveryadress_h, CAST('00000000000000000000000000000000' as STRING)) AS hk_deliveryadress_ws_s,\n            COALESCE(deliveryadress_ws_s.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_deliveryadress_ws_s\n\n    FROM\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryadress_h te\n        FULL OUTER JOIN\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.control_snap_v1 snap\n            ON snap.is_active = true\n            \n        \n        LEFT JOIN (\n            SELECT\n                hk_deliveryadress_h,\n                ldts,\n                COALESCE(LEAD(ldts - INTERVAL '1 MICROSECOND') OVER (PARTITION BY hk_deliveryadress_h ORDER BY ldts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS ledts\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryadress_ws_s\n        ) deliveryadress_ws_s\n        \n            ON\n                deliveryadress_ws_s.hk_deliveryadress_h = te.hk_deliveryadress_h\n                AND snap.sdts BETWEEN deliveryadress_ws_s.ldts AND deliveryadress_ws_s.ledts\n        \n    \n        WHERE snap.is_active\n\n),\n\nrecords_to_insert AS (\n\n    SELECT DISTINCT *\n    FROM pit_records\n    WHERE hk_deliveryadress_d NOT IN (SELECT * FROM existing_dimension_keys)\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.deliveryadress_snp", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:01.131424Z", "completed_at": "2025-04-07T20:55:01.300644Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:01.300847Z", "completed_at": "2025-04-07T20:55:04.577339Z"}], "thread_id": "Thread-1", "execution_time": 3.446363925933838, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8987-0306-0979-0003-ac12000305fa"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.deliveryservice_snp", "compiled": true, "compiled_code": "\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\nexisting_dimension_keys AS (\n\n    SELECT\n        hk_deliveryservice_d\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.deliveryservice_snp\n\n),\n\npit_records AS (\n\n    SELECT\n        \n        '\"REGULAR PIT\"' as type,\n        'PIT table for deliveryservice' as rsrc,\n        IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST('Regular PIT' AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(te.hk_deliveryservice_h AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(snap.sdts AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n    ), '\\n', '') \n    , '\\t', '') \n    , '\\v', '') \n    , '\\r', '') AS STRING), '^^||^^||^^'))), '00000000000000000000000000000000') AS hk_deliveryservice_d ,\n        te.hk_deliveryservice_h,\n        snap.sdts,\n            COALESCE(deliveryservice_ws_s.hk_deliveryservice_h, CAST('00000000000000000000000000000000' as STRING)) AS hk_deliveryservice_ws_s,\n            COALESCE(deliveryservice_ws_s.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_deliveryservice_ws_s,\n            COALESCE(deliveryservice_ws_sts.hk_deliveryservice_h, CAST('00000000000000000000000000000000' as STRING)) AS hk_deliveryservice_ws_sts,\n            COALESCE(deliveryservice_ws_sts.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_deliveryservice_ws_sts\n\n    FROM\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryservice_h te\n        FULL OUTER JOIN\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.control_snap_v1 snap\n            ON snap.is_active = true\n            \n        \n        LEFT JOIN (\n            SELECT\n                hk_deliveryservice_h,\n                ldts,\n                COALESCE(LEAD(ldts - INTERVAL '1 MICROSECOND') OVER (PARTITION BY hk_deliveryservice_h ORDER BY ldts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS ledts\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryservice_ws_s\n        ) deliveryservice_ws_s\n        \n            ON\n                deliveryservice_ws_s.hk_deliveryservice_h = te.hk_deliveryservice_h\n                AND snap.sdts BETWEEN deliveryservice_ws_s.ldts AND deliveryservice_ws_s.ledts\n        \n        LEFT JOIN (\n            SELECT\n                hk_deliveryservice_h,\n                ldts,\n                COALESCE(LEAD(ldts - INTERVAL '1 MICROSECOND') OVER (PARTITION BY hk_deliveryservice_h ORDER BY ldts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS ledts\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryservice_ws_sts\n        ) deliveryservice_ws_sts\n        \n            ON\n                deliveryservice_ws_sts.hk_deliveryservice_h = te.hk_deliveryservice_h\n                AND snap.sdts BETWEEN deliveryservice_ws_sts.ldts AND deliveryservice_ws_sts.ledts\n        \n    \n        WHERE snap.is_active\n\n),\n\nrecords_to_insert AS (\n\n    SELECT DISTINCT *\n    FROM pit_records\n    WHERE hk_deliveryservice_d NOT IN (SELECT * FROM existing_dimension_keys)\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.deliveryservice_snp", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:01.339049Z", "completed_at": "2025-04-07T20:55:01.514975Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:01.515260Z", "completed_at": "2025-04-07T20:55:05.328220Z"}], "thread_id": "Thread-4", "execution_time": 3.9897091388702393, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8987-0306-0851-0003-ac120003158e"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.order_position_snp", "compiled": true, "compiled_code": "\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\nexisting_dimension_keys AS (\n\n    SELECT\n        hk_order_position_d\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.order_position_snp\n\n),\n\npit_records AS (\n\n    SELECT\n        \n        '\"REGULAR PIT\"' as type,\n        'PIT table for order_position' as rsrc,\n        IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST('Regular PIT' AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(te.hk_order_position_l AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(snap.sdts AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n    ), '\\n', '') \n    , '\\t', '') \n    , '\\v', '') \n    , '\\r', '') AS STRING), '^^||^^||^^'))), '00000000000000000000000000000000') AS hk_order_position_d ,\n        te.hk_order_position_l,\n        snap.sdts,\n            COALESCE(order_position_rs_sts.hk_order_position_l, CAST('00000000000000000000000000000000' as STRING)) AS hk_order_position_rs_sts,\n            COALESCE(order_position_rs_sts.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_order_position_rs_sts,\n            COALESCE(order_position_ws_sts.hk_order_position_l, CAST('00000000000000000000000000000000' as STRING)) AS hk_order_position_ws_sts,\n            COALESCE(order_position_ws_sts.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_order_position_ws_sts\n\n    FROM\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_position_l te\n        FULL OUTER JOIN\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.control_snap_v1 snap\n            ON snap.is_active = true\n            \n        \n        LEFT JOIN (\n            SELECT\n                hk_order_position_l,\n                ldts,\n                COALESCE(LEAD(ldts - INTERVAL '1 MICROSECOND') OVER (PARTITION BY hk_order_position_l ORDER BY ldts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS ledts\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_position_rs_sts\n        ) order_position_rs_sts\n        \n            ON\n                order_position_rs_sts.hk_order_position_l = te.hk_order_position_l\n                AND snap.sdts BETWEEN order_position_rs_sts.ldts AND order_position_rs_sts.ledts\n        \n        LEFT JOIN (\n            SELECT\n                hk_order_position_l,\n                ldts,\n                COALESCE(LEAD(ldts - INTERVAL '1 MICROSECOND') OVER (PARTITION BY hk_order_position_l ORDER BY ldts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS ledts\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_position_ws_sts\n        ) order_position_ws_sts\n        \n            ON\n                order_position_ws_sts.hk_order_position_l = te.hk_order_position_l\n                AND snap.sdts BETWEEN order_position_ws_sts.ldts AND order_position_ws_sts.ledts\n        \n    \n        WHERE snap.is_active\n\n),\n\nrecords_to_insert AS (\n\n    SELECT DISTINCT *\n    FROM pit_records\n    WHERE hk_order_position_d NOT IN (SELECT * FROM existing_dimension_keys)\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.order_position_snp", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:03.779440Z", "completed_at": "2025-04-07T20:55:04.105881Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:04.106074Z", "completed_at": "2025-04-07T20:55:07.506577Z"}], "thread_id": "Thread-3", "execution_time": 3.7282140254974365, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8987-0306-09a8-0003-ac120002f5da"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.order_snp", "compiled": true, "compiled_code": "\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\nexisting_dimension_keys AS (\n\n    SELECT\n        hk_order_d\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.order_snp\n\n),\n\npit_records AS (\n\n    SELECT\n        \n        '\"REGULAR PIT\"' as type,\n        'PIT table for order' as rsrc,\n        IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST('Regular PIT' AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(te.hk_order_h AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(snap.sdts AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n    ), '\\n', '') \n    , '\\t', '') \n    , '\\v', '') \n    , '\\r', '') AS STRING), '^^||^^||^^'))), '00000000000000000000000000000000') AS hk_order_d ,\n        te.hk_order_h,\n        snap.sdts,\n            COALESCE(order_rs_sts.hk_order_h, CAST('00000000000000000000000000000000' as STRING)) AS hk_order_rs_sts,\n            COALESCE(order_rs_sts.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_order_rs_sts,\n            COALESCE(order_ws_s.hk_order_h, CAST('00000000000000000000000000000000' as STRING)) AS hk_order_ws_s,\n            COALESCE(order_ws_s.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_order_ws_s,\n            COALESCE(order_ws_sts.hk_order_h, CAST('00000000000000000000000000000000' as STRING)) AS hk_order_ws_sts,\n            COALESCE(order_ws_sts.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_order_ws_sts\n\n    FROM\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_h te\n        FULL OUTER JOIN\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.control_snap_v1 snap\n            ON snap.is_active = true\n            \n        \n        LEFT JOIN (\n            SELECT\n                hk_order_h,\n                ldts,\n                COALESCE(LEAD(ldts - INTERVAL '1 MICROSECOND') OVER (PARTITION BY hk_order_h ORDER BY ldts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS ledts\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_rs_sts\n        ) order_rs_sts\n        \n            ON\n                order_rs_sts.hk_order_h = te.hk_order_h\n                AND snap.sdts BETWEEN order_rs_sts.ldts AND order_rs_sts.ledts\n        \n        LEFT JOIN (\n            SELECT\n                hk_order_h,\n                ldts,\n                COALESCE(LEAD(ldts - INTERVAL '1 MICROSECOND') OVER (PARTITION BY hk_order_h ORDER BY ldts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS ledts\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_ws_s\n        ) order_ws_s\n        \n            ON\n                order_ws_s.hk_order_h = te.hk_order_h\n                AND snap.sdts BETWEEN order_ws_s.ldts AND order_ws_s.ledts\n        \n        LEFT JOIN (\n            SELECT\n                hk_order_h,\n                ldts,\n                COALESCE(LEAD(ldts - INTERVAL '1 MICROSECOND') OVER (PARTITION BY hk_order_h ORDER BY ldts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS ledts\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_ws_sts\n        ) order_ws_sts\n        \n            ON\n                order_ws_sts.hk_order_h = te.hk_order_h\n                AND snap.sdts BETWEEN order_ws_sts.ldts AND order_ws_sts.ledts\n        \n    \n        WHERE snap.is_active\n\n),\n\nrecords_to_insert AS (\n\n    SELECT DISTINCT *\n    FROM pit_records\n    WHERE hk_order_d NOT IN (SELECT * FROM existing_dimension_keys)\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.order_snp", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:04.580937Z", "completed_at": "2025-04-07T20:55:04.753676Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:04.753972Z", "completed_at": "2025-04-07T20:55:07.690957Z"}], "thread_id": "Thread-1", "execution_time": 3.110740900039673, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8987-0306-0979-0003-ac1200030636"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.product_snp", "compiled": true, "compiled_code": "\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\nexisting_dimension_keys AS (\n\n    SELECT\n        hk_product_d\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.product_snp\n\n),\n\npit_records AS (\n\n    SELECT\n        \n        '\"REGULAR PIT\"' as type,\n        'PIT table for product' as rsrc,\n        IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST('Regular PIT' AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(te.hk_product_h AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(snap.sdts AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n    ), '\\n', '') \n    , '\\t', '') \n    , '\\v', '') \n    , '\\r', '') AS STRING), '^^||^^||^^'))), '00000000000000000000000000000000') AS hk_product_d ,\n        te.hk_product_h,\n        snap.sdts,\n            COALESCE(product_ws_s.hk_product_h, CAST('00000000000000000000000000000000' as STRING)) AS hk_product_ws_s,\n            COALESCE(product_ws_s.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_product_ws_s,\n            COALESCE(product_ws_sts.hk_product_h, CAST('00000000000000000000000000000000' as STRING)) AS hk_product_ws_sts,\n            COALESCE(product_ws_sts.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_product_ws_sts\n\n    FROM\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_h te\n        FULL OUTER JOIN\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.control_snap_v1 snap\n            ON snap.is_active = true\n            \n        \n        LEFT JOIN (\n            SELECT\n                hk_product_h,\n                ldts,\n                COALESCE(LEAD(ldts - INTERVAL '1 MICROSECOND') OVER (PARTITION BY hk_product_h ORDER BY ldts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS ledts\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_ws_s\n        ) product_ws_s\n        \n            ON\n                product_ws_s.hk_product_h = te.hk_product_h\n                AND snap.sdts BETWEEN product_ws_s.ldts AND product_ws_s.ledts\n        \n        LEFT JOIN (\n            SELECT\n                hk_product_h,\n                ldts,\n                COALESCE(LEAD(ldts - INTERVAL '1 MICROSECOND') OVER (PARTITION BY hk_product_h ORDER BY ldts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS ledts\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_ws_sts\n        ) product_ws_sts\n        \n            ON\n                product_ws_sts.hk_product_h = te.hk_product_h\n                AND snap.sdts BETWEEN product_ws_sts.ldts AND product_ws_sts.ledts\n        \n    \n        WHERE snap.is_active\n\n),\n\nrecords_to_insert AS (\n\n    SELECT DISTINCT *\n    FROM pit_records\n    WHERE hk_product_d NOT IN (SELECT * FROM existing_dimension_keys)\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.product_snp", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:05.333271Z", "completed_at": "2025-04-07T20:55:05.435825Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:05.436229Z", "completed_at": "2025-04-07T20:55:08.146124Z"}], "thread_id": "Thread-4", "execution_time": 2.81392502784729, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8987-0306-0979-0003-ac1200030646"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.productcategory_hierarchy_snp", "compiled": true, "compiled_code": "\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\nexisting_dimension_keys AS (\n\n    SELECT\n        hk_productcategory_hierarchy_d\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.productcategory_hierarchy_snp\n\n),\n\npit_records AS (\n\n    SELECT\n        \n        '\"REGULAR PIT\"' as type,\n        'PIT table for productcategory_hierarchy' as rsrc,\n        IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST('Regular PIT' AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(te.hk_productcategory_hierarchy_l AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(snap.sdts AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n    ), '\\n', '') \n    , '\\t', '') \n    , '\\v', '') \n    , '\\r', '') AS STRING), '^^||^^||^^'))), '00000000000000000000000000000000') AS hk_productcategory_hierarchy_d ,\n        te.hk_productcategory_hierarchy_l,\n        snap.sdts,\n            COALESCE(productcategory_hierarchy_ws_sts.hk_productcategory_hierarchy_l, CAST('00000000000000000000000000000000' as STRING)) AS hk_productcategory_hierarchy_ws_sts,\n            COALESCE(productcategory_hierarchy_ws_sts.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_productcategory_hierarchy_ws_sts\n\n    FROM\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.productcategory_hierarchy_l te\n        FULL OUTER JOIN\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.control_snap_v1 snap\n            ON snap.is_active = true\n            \n        \n        LEFT JOIN (\n            SELECT\n                hk_productcategory_hierarchy_l,\n                ldts,\n                COALESCE(LEAD(ldts - INTERVAL '1 MICROSECOND') OVER (PARTITION BY hk_productcategory_hierarchy_l ORDER BY ldts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS ledts\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.productcategory_hierarchy_ws_sts\n        ) productcategory_hierarchy_ws_sts\n        \n            ON\n                productcategory_hierarchy_ws_sts.hk_productcategory_hierarchy_l = te.hk_productcategory_hierarchy_l\n                AND snap.sdts BETWEEN productcategory_hierarchy_ws_sts.ldts AND productcategory_hierarchy_ws_sts.ledts\n        \n    \n        WHERE snap.is_active\n\n),\n\nrecords_to_insert AS (\n\n    SELECT DISTINCT *\n    FROM pit_records\n    WHERE hk_productcategory_hierarchy_d NOT IN (SELECT * FROM existing_dimension_keys)\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.productcategory_hierarchy_snp", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:07.693577Z", "completed_at": "2025-04-07T20:55:07.698012Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:07.698493Z", "completed_at": "2025-04-07T20:55:08.419270Z"}], "thread_id": "Thread-1", "execution_time": 0.7265300750732422, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8987-0306-0851-0003-ac12000315ea"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.relevant_date", "compiled": true, "compiled_code": "\n\tselect *\n\tfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.control_snap_v1 b", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.relevant_date", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:04.558752Z", "completed_at": "2025-04-07T20:55:04.915012Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:04.915398Z", "completed_at": "2025-04-07T20:55:08.550579Z"}], "thread_id": "Thread-2", "execution_time": 3.9929451942443848, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8987-0306-0979-0003-ac1200030642"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.position_snp", "compiled": true, "compiled_code": "\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\nexisting_dimension_keys AS (\n\n    SELECT\n        hk_position_d\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.position_snp\n\n),\n\npit_records AS (\n\n    SELECT\n        \n        '\"REGULAR PIT\"' as type,\n        'PIT table for position' as rsrc,\n        IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST('Regular PIT' AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(te.hk_position_h AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(snap.sdts AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n    ), '\\n', '') \n    , '\\t', '') \n    , '\\v', '') \n    , '\\r', '') AS STRING), '^^||^^||^^'))), '00000000000000000000000000000000') AS hk_position_d ,\n        te.hk_position_h,\n        snap.sdts,\n            COALESCE(position_rs_s.hk_position_h, CAST('00000000000000000000000000000000' as STRING)) AS hk_position_rs_s,\n            COALESCE(position_rs_s.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_position_rs_s,\n            COALESCE(position_rs_sts.hk_position_h, CAST('00000000000000000000000000000000' as STRING)) AS hk_position_rs_sts,\n            COALESCE(position_rs_sts.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_position_rs_sts,\n            COALESCE(position_ws_s.hk_position_h, CAST('00000000000000000000000000000000' as STRING)) AS hk_position_ws_s,\n            COALESCE(position_ws_s.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_position_ws_s,\n            COALESCE(position_ws_sts.hk_position_h, CAST('00000000000000000000000000000000' as STRING)) AS hk_position_ws_sts,\n            COALESCE(position_ws_sts.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_position_ws_sts\n\n    FROM\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_h te\n        FULL OUTER JOIN\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.control_snap_v1 snap\n            ON snap.is_active = true\n            \n        \n        LEFT JOIN (\n            SELECT\n                hk_position_h,\n                ldts,\n                COALESCE(LEAD(ldts - INTERVAL '1 MICROSECOND') OVER (PARTITION BY hk_position_h ORDER BY ldts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS ledts\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_rs_s\n        ) position_rs_s\n        \n            ON\n                position_rs_s.hk_position_h = te.hk_position_h\n                AND snap.sdts BETWEEN position_rs_s.ldts AND position_rs_s.ledts\n        \n        LEFT JOIN (\n            SELECT\n                hk_position_h,\n                ldts,\n                COALESCE(LEAD(ldts - INTERVAL '1 MICROSECOND') OVER (PARTITION BY hk_position_h ORDER BY ldts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS ledts\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_rs_sts\n        ) position_rs_sts\n        \n            ON\n                position_rs_sts.hk_position_h = te.hk_position_h\n                AND snap.sdts BETWEEN position_rs_sts.ldts AND position_rs_sts.ledts\n        \n        LEFT JOIN (\n            SELECT\n                hk_position_h,\n                ldts,\n                COALESCE(LEAD(ldts - INTERVAL '1 MICROSECOND') OVER (PARTITION BY hk_position_h ORDER BY ldts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS ledts\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_ws_s\n        ) position_ws_s\n        \n            ON\n                position_ws_s.hk_position_h = te.hk_position_h\n                AND snap.sdts BETWEEN position_ws_s.ldts AND position_ws_s.ledts\n        \n        LEFT JOIN (\n            SELECT\n                hk_position_h,\n                ldts,\n                COALESCE(LEAD(ldts - INTERVAL '1 MICROSECOND') OVER (PARTITION BY hk_position_h ORDER BY ldts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS ledts\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_ws_sts\n        ) position_ws_sts\n        \n            ON\n                position_ws_sts.hk_position_h = te.hk_position_h\n                AND snap.sdts BETWEEN position_ws_sts.ldts AND position_ws_sts.ledts\n        \n    \n        WHERE snap.is_active\n\n),\n\nrecords_to_insert AS (\n\n    SELECT DISTINCT *\n    FROM pit_records\n    WHERE hk_position_d NOT IN (SELECT * FROM existing_dimension_keys)\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.position_snp", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:07.516427Z", "completed_at": "2025-04-07T20:55:07.653258Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:07.653573Z", "completed_at": "2025-04-07T20:55:10.368457Z"}], "thread_id": "Thread-3", "execution_time": 2.858349084854126, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8987-0306-09a8-0003-ac120002f61e"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.productcategory_snp", "compiled": true, "compiled_code": "\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\nexisting_dimension_keys AS (\n\n    SELECT\n        hk_productcategory_d\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.productcategory_snp\n\n),\n\npit_records AS (\n\n    SELECT\n        \n        '\"REGULAR PIT\"' as type,\n        'PIT table for productcategory' as rsrc,\n        IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST('Regular PIT' AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(te.hk_productcategory_h AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(snap.sdts AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n    ), '\\n', '') \n    , '\\t', '') \n    , '\\v', '') \n    , '\\r', '') AS STRING), '^^||^^||^^'))), '00000000000000000000000000000000') AS hk_productcategory_d ,\n        te.hk_productcategory_h,\n        snap.sdts,\n            COALESCE(productcategory_ws_s.hk_productcategory_h, CAST('00000000000000000000000000000000' as STRING)) AS hk_productcategory_ws_s,\n            COALESCE(productcategory_ws_s.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_productcategory_ws_s\n\n    FROM\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.productcategory_h te\n        FULL OUTER JOIN\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.control_snap_v1 snap\n            ON snap.is_active = true\n            \n        \n        LEFT JOIN (\n            SELECT\n                hk_productcategory_h,\n                ldts,\n                COALESCE(LEAD(ldts - INTERVAL '1 MICROSECOND') OVER (PARTITION BY hk_productcategory_h ORDER BY ldts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS ledts\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.productcategory_ws_s\n        ) productcategory_ws_s\n        \n            ON\n                productcategory_ws_s.hk_productcategory_h = te.hk_productcategory_h\n                AND snap.sdts BETWEEN productcategory_ws_s.ldts AND productcategory_ws_s.ledts\n        \n    \n        WHERE snap.is_active\n\n),\n\nrecords_to_insert AS (\n\n    SELECT DISTINCT *\n    FROM pit_records\n    WHERE hk_productcategory_d NOT IN (SELECT * FROM existing_dimension_keys)\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.productcategory_snp", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:08.150155Z", "completed_at": "2025-04-07T20:55:08.352011Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:08.352357Z", "completed_at": "2025-04-07T20:55:11.261229Z"}], "thread_id": "Thread-4", "execution_time": 3.112078905105591, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8987-0306-0851-0003-ac120003161a"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.order_associationpartner_snp", "compiled": true, "compiled_code": "\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\nexisting_dimension_keys AS (\n\n    SELECT\n        hk_order_associationpartner_d\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.order_associationpartner_snp\n\n),\n\npit_records AS (\n\n    SELECT\n        \n        '\"REGULAR PIT\"' as type,\n        'PIT table for order_associationpartner' as rsrc,\n        IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST('Regular PIT' AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(te.hk_order_associationpartner_l AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(snap.sdts AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n    ), '\\n', '') \n    , '\\t', '') \n    , '\\v', '') \n    , '\\r', '') AS STRING), '^^||^^||^^'))), '00000000000000000000000000000000') AS hk_order_associationpartner_d ,\n        te.hk_order_associationpartner_l,\n        snap.sdts,\n            COALESCE(order_associationpartner_rs_es.hk_order_associationpartner_l, CAST('00000000000000000000000000000000' as STRING)) AS hk_order_associationpartner_rs_es,\n            COALESCE(order_associationpartner_rs_es.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_order_associationpartner_rs_es,\n            COALESCE(order_associationpartner_rs_sts.hk_order_associationpartner_l, CAST('00000000000000000000000000000000' as STRING)) AS hk_order_associationpartner_rs_sts,\n            COALESCE(order_associationpartner_rs_sts.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_order_associationpartner_rs_sts\n\n    FROM\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_associationpartner_l te\n        FULL OUTER JOIN\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.control_snap_v1 snap\n            ON snap.is_active = true\n            \n        \n        LEFT JOIN WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_associationpartner_rs_es\n            ON\n                order_associationpartner_rs_es.hk_order_associationpartner_l = te.hk_order_associationpartner_l\n                AND snap.sdts BETWEEN order_associationpartner_rs_es.ldts AND order_associationpartner_rs_es.ledts\n        \n        LEFT JOIN (\n            SELECT\n                hk_order_associationpartner_l,\n                ldts,\n                COALESCE(LEAD(ldts - INTERVAL '1 MICROSECOND') OVER (PARTITION BY hk_order_associationpartner_l ORDER BY ldts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS ledts\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_associationpartner_rs_sts\n        ) order_associationpartner_rs_sts\n        \n            ON\n                order_associationpartner_rs_sts.hk_order_associationpartner_l = te.hk_order_associationpartner_l\n                AND snap.sdts BETWEEN order_associationpartner_rs_sts.ldts AND order_associationpartner_rs_sts.ledts\n        \n    \n        WHERE snap.is_active\n\n),\n\nrecords_to_insert AS (\n\n    SELECT DISTINCT *\n    FROM pit_records\n    WHERE hk_order_associationpartner_d NOT IN (SELECT * FROM existing_dimension_keys)\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.order_associationpartner_snp", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:08.422523Z", "completed_at": "2025-04-07T20:55:08.644997Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:08.645454Z", "completed_at": "2025-04-07T20:55:11.562082Z"}], "thread_id": "Thread-1", "execution_time": 3.140291929244995, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8987-0306-0979-0003-ac120003068a"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.deliveryadress_customer_snp", "compiled": true, "compiled_code": "\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\nexisting_dimension_keys AS (\n\n    SELECT\n        hk_deliveryadress_customer_d\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.deliveryadress_customer_snp\n\n),\n\npit_records AS (\n\n    SELECT\n        \n        '\"REGULAR PIT\"' as type,\n        'PIT table for deliveryadress_customer' as rsrc,\n        IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST('Regular PIT' AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(te.hk_deliveryadress_customer_l AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(snap.sdts AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n    ), '\\n', '') \n    , '\\t', '') \n    , '\\v', '') \n    , '\\r', '') AS STRING), '^^||^^||^^'))), '00000000000000000000000000000000') AS hk_deliveryadress_customer_d ,\n        te.hk_deliveryadress_customer_l,\n        snap.sdts,\n            COALESCE(deliveryadress_customer_ws_es.hk_deliveryadress_customer_l, CAST('00000000000000000000000000000000' as STRING)) AS hk_deliveryadress_customer_ws_es,\n            COALESCE(deliveryadress_customer_ws_es.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_deliveryadress_customer_ws_es,\n            COALESCE(deliveryadress_customer_ws_sts.hk_deliveryadress_customer_l, CAST('00000000000000000000000000000000' as STRING)) AS hk_deliveryadress_customer_ws_sts,\n            COALESCE(deliveryadress_customer_ws_sts.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_deliveryadress_customer_ws_sts\n\n    FROM\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryadress_customer_l te\n        FULL OUTER JOIN\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.control_snap_v1 snap\n            ON snap.is_active = true\n            \n        \n        LEFT JOIN WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryadress_customer_ws_es\n            ON\n                deliveryadress_customer_ws_es.hk_deliveryadress_customer_l = te.hk_deliveryadress_customer_l\n                AND snap.sdts BETWEEN deliveryadress_customer_ws_es.ldts AND deliveryadress_customer_ws_es.ledts\n        \n        LEFT JOIN (\n            SELECT\n                hk_deliveryadress_customer_l,\n                ldts,\n                COALESCE(LEAD(ldts - INTERVAL '1 MICROSECOND') OVER (PARTITION BY hk_deliveryadress_customer_l ORDER BY ldts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS ledts\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryadress_customer_ws_sts\n        ) deliveryadress_customer_ws_sts\n        \n            ON\n                deliveryadress_customer_ws_sts.hk_deliveryadress_customer_l = te.hk_deliveryadress_customer_l\n                AND snap.sdts BETWEEN deliveryadress_customer_ws_sts.ldts AND deliveryadress_customer_ws_sts.ledts\n        \n    \n        WHERE snap.is_active\n\n),\n\nrecords_to_insert AS (\n\n    SELECT DISTINCT *\n    FROM pit_records\n    WHERE hk_deliveryadress_customer_d NOT IN (SELECT * FROM existing_dimension_keys)\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.deliveryadress_customer_snp", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:08.554207Z", "completed_at": "2025-04-07T20:55:08.898472Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:08.898804Z", "completed_at": "2025-04-07T20:55:12.478477Z"}], "thread_id": "Thread-2", "execution_time": 3.9251620769500732, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8987-0306-0979-0003-ac1200030696"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.order_customer_snp", "compiled": true, "compiled_code": "\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\nexisting_dimension_keys AS (\n\n    SELECT\n        hk_order_customer_d\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.order_customer_snp\n\n),\n\npit_records AS (\n\n    SELECT\n        \n        '\"REGULAR PIT\"' as type,\n        'PIT table for order_customer' as rsrc,\n        IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST('Regular PIT' AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(te.hk_order_customer_l AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(snap.sdts AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n    ), '\\n', '') \n    , '\\t', '') \n    , '\\v', '') \n    , '\\r', '') AS STRING), '^^||^^||^^'))), '00000000000000000000000000000000') AS hk_order_customer_d ,\n        te.hk_order_customer_l,\n        snap.sdts,\n            COALESCE(order_customer_rs_es.hk_order_customer_l, CAST('00000000000000000000000000000000' as STRING)) AS hk_order_customer_rs_es,\n            COALESCE(order_customer_rs_es.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_order_customer_rs_es,\n            COALESCE(order_customer_rs_sts.hk_order_customer_l, CAST('00000000000000000000000000000000' as STRING)) AS hk_order_customer_rs_sts,\n            COALESCE(order_customer_rs_sts.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_order_customer_rs_sts,\n            COALESCE(order_customer_ws_es.hk_order_customer_l, CAST('00000000000000000000000000000000' as STRING)) AS hk_order_customer_ws_es,\n            COALESCE(order_customer_ws_es.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_order_customer_ws_es,\n            COALESCE(order_customer_ws_sts.hk_order_customer_l, CAST('00000000000000000000000000000000' as STRING)) AS hk_order_customer_ws_sts,\n            COALESCE(order_customer_ws_sts.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_order_customer_ws_sts\n\n    FROM\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_customer_l te\n        FULL OUTER JOIN\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.control_snap_v1 snap\n            ON snap.is_active = true\n            \n        \n        LEFT JOIN WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_customer_rs_es\n            ON\n                order_customer_rs_es.hk_order_customer_l = te.hk_order_customer_l\n                AND snap.sdts BETWEEN order_customer_rs_es.ldts AND order_customer_rs_es.ledts\n        \n        LEFT JOIN (\n            SELECT\n                hk_order_customer_l,\n                ldts,\n                COALESCE(LEAD(ldts - INTERVAL '1 MICROSECOND') OVER (PARTITION BY hk_order_customer_l ORDER BY ldts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS ledts\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_customer_rs_sts\n        ) order_customer_rs_sts\n        \n            ON\n                order_customer_rs_sts.hk_order_customer_l = te.hk_order_customer_l\n                AND snap.sdts BETWEEN order_customer_rs_sts.ldts AND order_customer_rs_sts.ledts\n        \n        LEFT JOIN WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_customer_ws_es\n            ON\n                order_customer_ws_es.hk_order_customer_l = te.hk_order_customer_l\n                AND snap.sdts BETWEEN order_customer_ws_es.ldts AND order_customer_ws_es.ledts\n        \n        LEFT JOIN (\n            SELECT\n                hk_order_customer_l,\n                ldts,\n                COALESCE(LEAD(ldts - INTERVAL '1 MICROSECOND') OVER (PARTITION BY hk_order_customer_l ORDER BY ldts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS ledts\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_customer_ws_sts\n        ) order_customer_ws_sts\n        \n            ON\n                order_customer_ws_sts.hk_order_customer_l = te.hk_order_customer_l\n                AND snap.sdts BETWEEN order_customer_ws_sts.ldts AND order_customer_ws_sts.ledts\n        \n    \n        WHERE snap.is_active\n\n),\n\nrecords_to_insert AS (\n\n    SELECT DISTINCT *\n    FROM pit_records\n    WHERE hk_order_customer_d NOT IN (SELECT * FROM existing_dimension_keys)\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.order_customer_snp", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:10.372870Z", "completed_at": "2025-04-07T20:55:10.605460Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:10.605880Z", "completed_at": "2025-04-07T20:55:13.606536Z"}], "thread_id": "Thread-3", "execution_time": 3.234616279602051, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8987-0306-0979-0003-ac12000306c2"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.customer_associationpartner_snp", "compiled": true, "compiled_code": "\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\nexisting_dimension_keys AS (\n\n    SELECT\n        hk_customer_associationpartner_d\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.customer_associationpartner_snp\n\n),\n\npit_records AS (\n\n    SELECT\n        \n        '\"REGULAR PIT\"' as type,\n        'PIT table for customer_associationpartner' as rsrc,\n        IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST('Regular PIT' AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(te.hk_customer_associationpartner_l AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(snap.sdts AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n    ), '\\n', '') \n    , '\\t', '') \n    , '\\v', '') \n    , '\\r', '') AS STRING), '^^||^^||^^'))), '00000000000000000000000000000000') AS hk_customer_associationpartner_d ,\n        te.hk_customer_associationpartner_l,\n        snap.sdts,\n            COALESCE(customer_associationpartner_ws_es.hk_customer_associationpartner_l, CAST('00000000000000000000000000000000' as STRING)) AS hk_customer_associationpartner_ws_es,\n            COALESCE(customer_associationpartner_ws_es.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_customer_associationpartner_ws_es,\n            COALESCE(customer_associationpartner_ws_sts.hk_customer_associationpartner_l, CAST('00000000000000000000000000000000' as STRING)) AS hk_customer_associationpartner_ws_sts,\n            COALESCE(customer_associationpartner_ws_sts.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_customer_associationpartner_ws_sts\n\n    FROM\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_associationpartner_l te\n        FULL OUTER JOIN\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.control_snap_v1 snap\n            ON snap.is_active = true\n            \n        \n        LEFT JOIN WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_associationpartner_ws_es\n            ON\n                customer_associationpartner_ws_es.hk_customer_associationpartner_l = te.hk_customer_associationpartner_l\n                AND snap.sdts BETWEEN customer_associationpartner_ws_es.ldts AND customer_associationpartner_ws_es.ledts\n        \n        LEFT JOIN (\n            SELECT\n                hk_customer_associationpartner_l,\n                ldts,\n                COALESCE(LEAD(ldts - INTERVAL '1 MICROSECOND') OVER (PARTITION BY hk_customer_associationpartner_l ORDER BY ldts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS ledts\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_associationpartner_ws_sts\n        ) customer_associationpartner_ws_sts\n        \n            ON\n                customer_associationpartner_ws_sts.hk_customer_associationpartner_l = te.hk_customer_associationpartner_l\n                AND snap.sdts BETWEEN customer_associationpartner_ws_sts.ldts AND customer_associationpartner_ws_sts.ledts\n        \n    \n        WHERE snap.is_active\n\n),\n\nrecords_to_insert AS (\n\n    SELECT DISTINCT *\n    FROM pit_records\n    WHERE hk_customer_associationpartner_d NOT IN (SELECT * FROM existing_dimension_keys)\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.customer_associationpartner_snp", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:13.608778Z", "completed_at": "2025-04-07T20:55:13.611180Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:13.611378Z", "completed_at": "2025-04-07T20:55:14.067527Z"}], "thread_id": "Thread-3", "execution_time": 0.4592280387878418, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8987-0306-0979-0003-ac12000306ea"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.dim_product_type", "compiled": true, "compiled_code": "\nSELECT  *\nFROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.product_type_sns s", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_07_inmt.dim_product_type", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:11.565501Z", "completed_at": "2025-04-07T20:55:11.760463Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:11.760923Z", "completed_at": "2025-04-07T20:55:14.801556Z"}], "thread_id": "Thread-1", "execution_time": 3.236876964569092, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8987-0306-0979-0003-ac12000306de"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.product_productcategory_snp", "compiled": true, "compiled_code": "\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\nexisting_dimension_keys AS (\n\n    SELECT\n        hk_product_productcategory_d\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.product_productcategory_snp\n\n),\n\npit_records AS (\n\n    SELECT\n        \n        '\"REGULAR PIT\"' as type,\n        'PIT table for product_productcategory' as rsrc,\n        IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST('Regular PIT' AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(te.hk_product_productcategory_l AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(snap.sdts AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n    ), '\\n', '') \n    , '\\t', '') \n    , '\\v', '') \n    , '\\r', '') AS STRING), '^^||^^||^^'))), '00000000000000000000000000000000') AS hk_product_productcategory_d ,\n        te.hk_product_productcategory_l,\n        snap.sdts,\n            COALESCE(product_productcategory_ws_es.hk_product_productcategory_l, CAST('00000000000000000000000000000000' as STRING)) AS hk_product_productcategory_ws_es,\n            COALESCE(product_productcategory_ws_es.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_product_productcategory_ws_es,\n            COALESCE(product_productcategory_ws_sts.hk_product_productcategory_l, CAST('00000000000000000000000000000000' as STRING)) AS hk_product_productcategory_ws_sts,\n            COALESCE(product_productcategory_ws_sts.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_product_productcategory_ws_sts\n\n    FROM\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_productcategory_l te\n        FULL OUTER JOIN\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.control_snap_v1 snap\n            ON snap.is_active = true\n            \n        \n        LEFT JOIN WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_productcategory_ws_es\n            ON\n                product_productcategory_ws_es.hk_product_productcategory_l = te.hk_product_productcategory_l\n                AND snap.sdts BETWEEN product_productcategory_ws_es.ldts AND product_productcategory_ws_es.ledts\n        \n        LEFT JOIN (\n            SELECT\n                hk_product_productcategory_l,\n                ldts,\n                COALESCE(LEAD(ldts - INTERVAL '1 MICROSECOND') OVER (PARTITION BY hk_product_productcategory_l ORDER BY ldts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS ledts\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_productcategory_ws_sts\n        ) product_productcategory_ws_sts\n        \n            ON\n                product_productcategory_ws_sts.hk_product_productcategory_l = te.hk_product_productcategory_l\n                AND snap.sdts BETWEEN product_productcategory_ws_sts.ldts AND product_productcategory_ws_sts.ledts\n        \n    \n        WHERE snap.is_active\n\n),\n\nrecords_to_insert AS (\n\n    SELECT DISTINCT *\n    FROM pit_records\n    WHERE hk_product_productcategory_d NOT IN (SELECT * FROM existing_dimension_keys)\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.product_productcategory_snp", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:14.805280Z", "completed_at": "2025-04-07T20:55:14.810332Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:14.810625Z", "completed_at": "2025-04-07T20:55:15.412501Z"}], "thread_id": "Thread-1", "execution_time": 0.6080870628356934, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8987-0306-0979-0003-ac12000306fe"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.fact_error", "compiled": true, "compiled_code": "with cte_error_sats as\n(\n    select hk_error_h, hd_error_s, rsrc, ldts, raw_data, to_varchar(chk_all_msg) AS chk_all_msg, 'Misc' as source_system\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.error_msc_s msc\n    where not rsrc in ('SYSTEM','ERROR')\n    union\n    select hk_error_h, hd_error_s, rsrc, ldts, raw_data, to_varchar(chk_all_msg) AS chk_all_msg, 'WebShop' as source_system\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.error_ws_s ws\n    where not rsrc in ('SYSTEM','ERROR')\n    union \n    select hk_error_h, hd_error_s, rsrc, ldts, raw_data, to_varchar(chk_all_msg) AS chk_all_msg, 'RoadShow' as source_system\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.error_rs_s rs\n    where not rsrc in ('SYSTEM','ERROR')\n)\nselect    error_file_bk as rsrc\n        , case \n            when trim(lower(chk_all_msg)) like '%key_check%' and trim(lower(chk_all_msg)) like '%dub_check%' then 'Key-Error/Duplicate'\n            when trim(lower(chk_all_msg)) like '%dub_check%' then 'Duplicate'\n            when trim(lower(chk_all_msg)) like '%key_check%' then 'Key-Error'\n            else 'Type-Error'\n          end as error_type   \n        , try_to_number(error_row_no_bk, 18,0) as error_row_number\n        , source_system\n        , replace(replace(lower(chk_all_msg), '; duplicate',''), '; key-error','') as chk_all_msg\n        , raw_data as error_raw\nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_err.error_h h\nleft join cte_error_sats s\n    on h.hk_error_h = s.hk_error_h\nwhere not h.rsrc in ('SYSTEM','ERROR')", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_07_inmt.fact_error", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:11.268316Z", "completed_at": "2025-04-07T20:55:11.633515Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:11.633788Z", "completed_at": "2025-04-07T20:55:15.449697Z"}], "thread_id": "Thread-4", "execution_time": 4.183253049850464, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8987-0306-0979-0003-ac12000306da"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.position_product_snp", "compiled": true, "compiled_code": "\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\nexisting_dimension_keys AS (\n\n    SELECT\n        hk_position_product_d\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.position_product_snp\n\n),\n\npit_records AS (\n\n    SELECT\n        \n        '\"REGULAR PIT\"' as type,\n        'PIT table for position_product' as rsrc,\n        IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST('Regular PIT' AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(te.hk_position_product_l AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(snap.sdts AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n    ), '\\n', '') \n    , '\\t', '') \n    , '\\v', '') \n    , '\\r', '') AS STRING), '^^||^^||^^'))), '00000000000000000000000000000000') AS hk_position_product_d ,\n        te.hk_position_product_l,\n        snap.sdts,\n            COALESCE(position_product_rs_es.hk_position_product_l, CAST('00000000000000000000000000000000' as STRING)) AS hk_position_product_rs_es,\n            COALESCE(position_product_rs_es.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_position_product_rs_es,\n            COALESCE(position_product_rs_sts.hk_position_product_l, CAST('00000000000000000000000000000000' as STRING)) AS hk_position_product_rs_sts,\n            COALESCE(position_product_rs_sts.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_position_product_rs_sts,\n            COALESCE(position_product_ws_es.hk_position_product_l, CAST('00000000000000000000000000000000' as STRING)) AS hk_position_product_ws_es,\n            COALESCE(position_product_ws_es.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_position_product_ws_es,\n            COALESCE(position_product_ws_sts.hk_position_product_l, CAST('00000000000000000000000000000000' as STRING)) AS hk_position_product_ws_sts,\n            COALESCE(position_product_ws_sts.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_position_product_ws_sts\n\n    FROM\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_product_l te\n        FULL OUTER JOIN\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.control_snap_v1 snap\n            ON snap.is_active = true\n            \n        \n        LEFT JOIN WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_product_rs_es\n            ON\n                position_product_rs_es.hk_position_product_l = te.hk_position_product_l\n                AND snap.sdts BETWEEN position_product_rs_es.ldts AND position_product_rs_es.ledts\n        \n        LEFT JOIN (\n            SELECT\n                hk_position_product_l,\n                ldts,\n                COALESCE(LEAD(ldts - INTERVAL '1 MICROSECOND') OVER (PARTITION BY hk_position_product_l ORDER BY ldts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS ledts\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_product_rs_sts\n        ) position_product_rs_sts\n        \n            ON\n                position_product_rs_sts.hk_position_product_l = te.hk_position_product_l\n                AND snap.sdts BETWEEN position_product_rs_sts.ldts AND position_product_rs_sts.ledts\n        \n        LEFT JOIN WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_product_ws_es\n            ON\n                position_product_ws_es.hk_position_product_l = te.hk_position_product_l\n                AND snap.sdts BETWEEN position_product_ws_es.ldts AND position_product_ws_es.ledts\n        \n        LEFT JOIN (\n            SELECT\n                hk_position_product_l,\n                ldts,\n                COALESCE(LEAD(ldts - INTERVAL '1 MICROSECOND') OVER (PARTITION BY hk_position_product_l ORDER BY ldts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS ledts\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_product_ws_sts\n        ) position_product_ws_sts\n        \n            ON\n                position_product_ws_sts.hk_position_product_l = te.hk_position_product_l\n                AND snap.sdts BETWEEN position_product_ws_sts.ldts AND position_product_ws_sts.ledts\n        \n    \n        WHERE snap.is_active\n\n),\n\nrecords_to_insert AS (\n\n    SELECT DISTINCT *\n    FROM pit_records\n    WHERE hk_position_product_d NOT IN (SELECT * FROM existing_dimension_keys)\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.position_product_snp", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:12.482297Z", "completed_at": "2025-04-07T20:55:12.669861Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:12.670203Z", "completed_at": "2025-04-07T20:55:15.461290Z"}], "thread_id": "Thread-2", "execution_time": 2.979933261871338, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8987-0306-0851-0003-ac1200031676"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.associationpartner_customer_snp", "compiled": true, "compiled_code": "\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\nexisting_dimension_keys AS (\n\n    SELECT\n        hk_associationpartner_customer_d\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.associationpartner_customer_snp\n\n),\n\npit_records AS (\n\n    SELECT\n        \n        '\"REGULAR PIT\"' as type,\n        'PIT table for associationpartner_customer' as rsrc,\n        IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST('Regular PIT' AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(te.hk_associationpartner_customer_l AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(snap.sdts AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n    ), '\\n', '') \n    , '\\t', '') \n    , '\\v', '') \n    , '\\r', '') AS STRING), '^^||^^||^^'))), '00000000000000000000000000000000') AS hk_associationpartner_customer_d ,\n        te.hk_associationpartner_customer_l,\n        snap.sdts,\n            COALESCE(associationpartner_customer_ws_es.hk_associationpartner_customer_l, CAST('00000000000000000000000000000000' as STRING)) AS hk_associationpartner_customer_ws_es,\n            COALESCE(associationpartner_customer_ws_es.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_associationpartner_customer_ws_es,\n            COALESCE(associationpartner_customer_ws_sts.hk_associationpartner_customer_l, CAST('00000000000000000000000000000000' as STRING)) AS hk_associationpartner_customer_ws_sts,\n            COALESCE(associationpartner_customer_ws_sts.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_associationpartner_customer_ws_sts\n\n    FROM\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.associationpartner_customer_l te\n        FULL OUTER JOIN\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.control_snap_v1 snap\n            ON snap.is_active = true\n            \n        \n        LEFT JOIN WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.associationpartner_customer_ws_es\n            ON\n                associationpartner_customer_ws_es.hk_associationpartner_customer_l = te.hk_associationpartner_customer_l\n                AND snap.sdts BETWEEN associationpartner_customer_ws_es.ldts AND associationpartner_customer_ws_es.ledts\n        \n        LEFT JOIN (\n            SELECT\n                hk_associationpartner_customer_l,\n                ldts,\n                COALESCE(LEAD(ldts - INTERVAL '1 MICROSECOND') OVER (PARTITION BY hk_associationpartner_customer_l ORDER BY ldts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS ledts\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.associationpartner_customer_ws_sts\n        ) associationpartner_customer_ws_sts\n        \n            ON\n                associationpartner_customer_ws_sts.hk_associationpartner_customer_l = te.hk_associationpartner_customer_l\n                AND snap.sdts BETWEEN associationpartner_customer_ws_sts.ldts AND associationpartner_customer_ws_sts.ledts\n        \n    \n        WHERE snap.is_active\n\n),\n\nrecords_to_insert AS (\n\n    SELECT DISTINCT *\n    FROM pit_records\n    WHERE hk_associationpartner_customer_d NOT IN (SELECT * FROM existing_dimension_keys)\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.associationpartner_customer_snp", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:15.415044Z", "completed_at": "2025-04-07T20:55:15.530844Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:15.531075Z", "completed_at": "2025-04-07T20:55:16.203847Z"}], "thread_id": "Thread-1", "execution_time": 0.7895820140838623, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8987-0306-0979-0003-ac1200030712"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.associationpartner_sns", "compiled": true, "compiled_code": "\n\n\n\nselect\n  associationpartner_snp.sdts, \n  associationpartner_snp.hk_associationpartner_h, \n  associationpartner_snp.hk_associationpartner_d, \n  associationpartner_h.associationpartner_bk,associationpartner_ws_s.hk_associationpartner_h,\n  associationpartner_ws_s.hd_associationpartner_ws_s,\n  associationpartner_ws_s.rsrc,\n  associationpartner_ws_s.ldts,\n  associationpartner_ws_s.kundeidverein,\n  associationpartner_ws_s.rabatt1,\n  associationpartner_ws_s.rabatt2,\n  associationpartner_ws_s.rabatt3,  \n  lower(associationpartner_ws_s.rsrc)<>'system' has_ws_data\n,\nassociationpartner_ws_sts.ldts as ldts_associationpartner_ws_sts,\n\nassociationpartner_ws_sts.rsrc as rsrc_associationpartner_ws_sts\n \nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.associationpartner_snp  \ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.associationpartner_h  \non associationpartner_h.hk_associationpartner_h = associationpartner_snp.hk_associationpartner_h\ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.associationpartner_ws_s \non associationpartner_snp.hk_associationpartner_ws_s=associationpartner_ws_s.hk_associationpartner_h\nand associationpartner_snp.ldts_associationpartner_ws_s=associationpartner_ws_s.ldts\ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.associationpartner_ws_sts \non associationpartner_snp.hk_associationpartner_ws_sts=associationpartner_ws_sts.hk_associationpartner_h\nand associationpartner_snp.ldts_associationpartner_ws_sts=associationpartner_ws_sts.ldts \nwhere  \n(\nassociationpartner_snp.HK_associationpartner_ws_s <>'00000000000000000000000000000000' \nOR associationpartner_snp.HK_associationpartner_ws_sts <>'00000000000000000000000000000000' \n\n)\nAND\n    ((associationpartner_ws_sts.cdc <>'D' and associationpartner_ws_sts.hk_associationpartner_h <>'00000000000000000000000000000000')\n)\n  ", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.associationpartner_sns", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:15.455566Z", "completed_at": "2025-04-07T20:55:15.555950Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:15.556132Z", "completed_at": "2025-04-07T20:55:16.207997Z"}], "thread_id": "Thread-4", "execution_time": 0.7533907890319824, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8987-0306-09a8-0003-ac120002f6ba"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.category_deliveryadherence_sns", "compiled": true, "compiled_code": "select \n\t  category_deliveryadherence_snp.sdts\n\t, category_deliveryadherence_r.category_deliveryadherence_nk\n\t, category_deliveryadherence_r.ldts \n\t, category_deliveryadherence_r.rsrc\n\t, category_deliveryadherence_snp.hk_category_deliveryadherence_d\n    , category_deliveryadherence_misc_rs.CATEGORY_DELIVERYADHERENCE_NK as cdm_CATEGORY_DELIVERYADHERENCE_NK,\n  category_deliveryadherence_misc_rs.HD_CATEGORY_DELIVERYADHERENCE_MISC_RS as cdm_HD_CATEGORY_DELIVERYADHERENCE_MISC_RS,\n  category_deliveryadherence_misc_rs.COUNT_DAYS_FROM as cdm_COUNT_DAYS_FROM,\n  category_deliveryadherence_misc_rs.COUNT_DAYS_TO as cdm_COUNT_DAYS_TO,\n  category_deliveryadherence_misc_rs.NAME as cdm_NAME\nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.category_deliveryadherence_snp category_deliveryadherence_snp\ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.category_deliveryadherence_r category_deliveryadherence_r \n\ton  category_deliveryadherence_snp.hk_category_deliveryadherence_misc_rs=category_deliveryadherence_r.category_deliveryadherence_nk\ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.category_deliveryadherence_misc_rs category_deliveryadherence_misc_rs\n\ton  category_deliveryadherence_snp.hk_category_deliveryadherence_misc_rs  =category_deliveryadherence_misc_rs.category_deliveryadherence_nk\n\tand category_deliveryadherence_snp.ldts_category_deliveryadherence_misc_rs=category_deliveryadherence_misc_rs.ldts\nINNER JOIN WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.category_deliveryadherence_misc_sts\n\tON category_deliveryadherence_snp.hk_category_deliveryadherence_misc_sts=category_deliveryadherence_misc_sts.category_deliveryadherence_nk\n\tAND category_deliveryadherence_snp.ldts_category_deliveryadherence_misc_sts = category_deliveryadherence_misc_sts.ldts\nWHERE  category_deliveryadherence_misc_sts.cdc <>'D'", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.category_deliveryadherence_sns", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:15.464147Z", "completed_at": "2025-04-07T20:55:15.546907Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:15.547100Z", "completed_at": "2025-04-07T20:55:16.259570Z"}], "thread_id": "Thread-2", "execution_time": 0.7961499691009521, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8987-0306-09a8-0003-ac120002f6be"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.deliveryadress_sns", "compiled": true, "compiled_code": "\n\n\n\nselect\n  deliveryadress_snp.sdts, \n  deliveryadress_snp.hk_deliveryadress_h, \n  deliveryadress_snp.hk_deliveryadress_d, \n  deliveryadress_h.deliveryadress_bk,deliveryadress_ws_s.hk_deliveryadress_h,\n  deliveryadress_ws_s.hd_deliveryadress_ws_s,\n  deliveryadress_ws_s.rsrc,\n  deliveryadress_ws_s.ldts,\n  deliveryadress_ws_s.adresszusatz,\n  deliveryadress_ws_s.hausnummer,\n  deliveryadress_ws_s.land,\n  deliveryadress_ws_s.ort,\n  deliveryadress_ws_s.plz,\n  deliveryadress_ws_s.strasse,  \n  lower(deliveryadress_ws_s.rsrc)<>'system' has_ws_data\n \nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.deliveryadress_snp  \ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryadress_h  \non deliveryadress_h.hk_deliveryadress_h = deliveryadress_snp.hk_deliveryadress_h\ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryadress_ws_s \non deliveryadress_snp.hk_deliveryadress_ws_s=deliveryadress_ws_s.hk_deliveryadress_h\nand deliveryadress_snp.ldts_deliveryadress_ws_s=deliveryadress_ws_s.ldts \nwhere  \n(\ndeliveryadress_snp.HK_deliveryadress_ws_s <>'00000000000000000000000000000000' \n\n)\n", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.deliveryadress_sns", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:16.213480Z", "completed_at": "2025-04-07T20:55:16.340283Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:16.340545Z", "completed_at": "2025-04-07T20:55:17.023914Z"}], "thread_id": "Thread-1", "execution_time": 0.8125758171081543, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8987-0306-09a8-0003-ac120002f6ca"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.deliveryservice_sns", "compiled": true, "compiled_code": "\n\n\n\nselect\n  deliveryservice_snp.sdts, \n  deliveryservice_snp.hk_deliveryservice_h, \n  deliveryservice_snp.hk_deliveryservice_d, \n  deliveryservice_h.deliveryservice_bk,deliveryservice_ws_s.hk_deliveryservice_h,\n  deliveryservice_ws_s.hd_deliveryservice_ws_s,\n  deliveryservice_ws_s.rsrc,\n  deliveryservice_ws_s.ldts,\n  deliveryservice_ws_s.email,\n  deliveryservice_ws_s.fax,\n  deliveryservice_ws_s.hausnummer,\n  deliveryservice_ws_s.land,\n  deliveryservice_ws_s.name,\n  deliveryservice_ws_s.ort,\n  deliveryservice_ws_s.plz,\n  deliveryservice_ws_s.strasse,\n  deliveryservice_ws_s.telefon,  \n  lower(deliveryservice_ws_s.rsrc)<>'system' has_ws_data\n,\ndeliveryservice_ws_sts.ldts as ldts_deliveryservice_ws_sts,\n\ndeliveryservice_ws_sts.rsrc as rsrc_deliveryservice_ws_sts\n \nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.deliveryservice_snp  \ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryservice_h  \non deliveryservice_h.hk_deliveryservice_h = deliveryservice_snp.hk_deliveryservice_h\ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryservice_ws_s \non deliveryservice_snp.hk_deliveryservice_ws_s=deliveryservice_ws_s.hk_deliveryservice_h\nand deliveryservice_snp.ldts_deliveryservice_ws_s=deliveryservice_ws_s.ldts\ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryservice_ws_sts \non deliveryservice_snp.hk_deliveryservice_ws_sts=deliveryservice_ws_sts.hk_deliveryservice_h\nand deliveryservice_snp.ldts_deliveryservice_ws_sts=deliveryservice_ws_sts.ldts \nwhere  \n(\ndeliveryservice_snp.HK_deliveryservice_ws_s <>'00000000000000000000000000000000' \nOR deliveryservice_snp.HK_deliveryservice_ws_sts <>'00000000000000000000000000000000' \n\n)\nAND\n    ((deliveryservice_ws_sts.cdc <>'D' and deliveryservice_ws_sts.hk_deliveryservice_h <>'00000000000000000000000000000000')\n)\n  ", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.deliveryservice_sns", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:16.262075Z", "completed_at": "2025-04-07T20:55:16.345554Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:16.345795Z", "completed_at": "2025-04-07T20:55:17.037701Z"}], "thread_id": "Thread-2", "execution_time": 0.7762081623077393, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8987-0306-09a8-0003-ac120002f6ce"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.order_sns", "compiled": true, "compiled_code": "\n\n\n\nselect\n  order_snp.sdts, \n  order_snp.hk_order_h, \n  order_snp.hk_order_d, \n  order_h.order_bk,order_ws_s.hk_order_h,\n  order_ws_s.hd_order_ws_s,\n  order_ws_s.rsrc,\n  order_ws_s.ldts,\n  order_ws_s.allglieferadrid,\n  order_ws_s.bestelldatum,\n  order_ws_s.rabatt,\n  order_ws_s.wunschdatum,  \n  lower(order_ws_s.rsrc)<>'system' has_ws_data\n,\norder_rs_sts.ldts as ldts_order_rs_sts,\n\norder_rs_sts.rsrc as rsrc_order_rs_sts,\n\norder_ws_sts.ldts as ldts_order_ws_sts,\n\norder_ws_sts.rsrc as rsrc_order_ws_sts\n \nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.order_snp  \ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_h  \non order_h.hk_order_h = order_snp.hk_order_h\ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_rs_sts \non order_snp.hk_order_rs_sts=order_rs_sts.hk_order_h\nand order_snp.ldts_order_rs_sts=order_rs_sts.ldts\ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_ws_s \non order_snp.hk_order_ws_s=order_ws_s.hk_order_h\nand order_snp.ldts_order_ws_s=order_ws_s.ldts\ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_ws_sts \non order_snp.hk_order_ws_sts=order_ws_sts.hk_order_h\nand order_snp.ldts_order_ws_sts=order_ws_sts.ldts \nwhere  \n(\norder_snp.HK_order_rs_sts <>'00000000000000000000000000000000' \nOR order_snp.HK_order_ws_s <>'00000000000000000000000000000000' \nOR order_snp.HK_order_ws_sts <>'00000000000000000000000000000000' \n\n)\nAND\n    ((order_rs_sts.cdc <>'D' and order_rs_sts.hk_order_h <>'00000000000000000000000000000000')\n OR (order_ws_sts.cdc <>'D' and order_ws_sts.hk_order_h <>'00000000000000000000000000000000')\n)\n  ", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.order_sns", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:16.225048Z", "completed_at": "2025-04-07T20:55:16.315196Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:16.315462Z", "completed_at": "2025-04-07T20:55:17.068738Z"}], "thread_id": "Thread-4", "execution_time": 0.8495490550994873, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8987-0306-0851-0003-ac12000316b2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.order_position_sns", "compiled": true, "compiled_code": "\n\n\n\nselect\n  order_position_snp.sdts, \n  order_position_snp.hk_order_position_l, \n  order_position_snp.hk_order_position_d, \n  order_position_l.hk_position_h,\norder_position_l.hk_order_h\n,\norder_position_rs_sts.ldts as ldts_order_position_rs_sts,\n\norder_position_rs_sts.rsrc as rsrc_order_position_rs_sts,\n\norder_position_ws_sts.ldts as ldts_order_position_ws_sts,\n\norder_position_ws_sts.rsrc as rsrc_order_position_ws_sts\n \nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.order_position_snp  \ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_position_l  \non order_position_l.hk_order_position_l = order_position_snp.hk_order_position_l\ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_position_rs_sts \non order_position_snp.hk_order_position_rs_sts=order_position_rs_sts.hk_order_position_l\nand order_position_snp.ldts_order_position_rs_sts=order_position_rs_sts.ldts\ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_position_ws_sts \non order_position_snp.hk_order_position_ws_sts=order_position_ws_sts.hk_order_position_l\nand order_position_snp.ldts_order_position_ws_sts=order_position_ws_sts.ldts \nwhere  \n(\norder_position_snp.HK_order_position_rs_sts <>'00000000000000000000000000000000' \nOR order_position_snp.HK_order_position_ws_sts <>'00000000000000000000000000000000' \n\n)\nAND\n    ((order_position_rs_sts.cdc <>'D' and order_position_rs_sts.hk_order_position_l <>'00000000000000000000000000000000')\n OR (order_position_ws_sts.cdc <>'D' and order_position_ws_sts.hk_order_position_l <>'00000000000000000000000000000000')\n)\n  ", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.order_position_sns", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:14.070088Z", "completed_at": "2025-04-07T20:55:14.340445Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:14.340841Z", "completed_at": "2025-04-07T20:55:17.272616Z"}], "thread_id": "Thread-3", "execution_time": 3.2031569480895996, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01bb8987-0306-0851-0003-ac12000316a2"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.ddvug_willibald_samen.customer_snp", "compiled": true, "compiled_code": "\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\nexisting_dimension_keys AS (\n\n    SELECT\n        hk_customer_d\n    FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.customer_snp\n\n),\n\npit_records AS (\n\n    SELECT\n        \n        '\"REGULAR PIT\"' as type,\n        'PIT table for customer' as rsrc,\n        IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST('Regular PIT' AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(te.hk_customer_h AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\\"', REPLACE(REPLACE(REPLACE(TRIM(CAST(snap.sdts AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\\"')), '^^')\n    ), '\\n', '') \n    , '\\t', '') \n    , '\\v', '') \n    , '\\r', '') AS STRING), '^^||^^||^^'))), '00000000000000000000000000000000') AS hk_customer_d ,\n        te.hk_customer_h,\n        snap.sdts,\n            COALESCE(customer_ws_la_ms.hk_customer_h, CAST('00000000000000000000000000000000' as STRING)) AS hk_customer_ws_la_ms,\n            COALESCE(customer_ws_la_ms.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_customer_ws_la_ms,\n            COALESCE(customer_ws_s.hk_customer_h, CAST('00000000000000000000000000000000' as STRING)) AS hk_customer_ws_s,\n            COALESCE(customer_ws_s.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_customer_ws_s,\n            COALESCE(customer_ws_sts.hk_customer_h, CAST('00000000000000000000000000000000' as STRING)) AS hk_customer_ws_sts,\n            COALESCE(customer_ws_sts.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_customer_ws_sts\n\n    FROM\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_h te\n        FULL OUTER JOIN\n            WILLIBALD_DATA_VAULT_WITH_DBT.dwh_03_stage.control_snap_v1 snap\n            ON snap.is_active = true\n            \n        \n        LEFT JOIN (\n            SELECT\n                hk_customer_h,\n                ldts,\n                COALESCE(LEAD(ldts - INTERVAL '1 MICROSECOND') OVER (PARTITION BY hk_customer_h ORDER BY ldts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS ledts\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_ws_la_ms\n        ) customer_ws_la_ms\n        \n            ON\n                customer_ws_la_ms.hk_customer_h = te.hk_customer_h\n                AND snap.sdts BETWEEN customer_ws_la_ms.ldts AND customer_ws_la_ms.ledts\n        \n        LEFT JOIN (\n            SELECT\n                hk_customer_h,\n                ldts,\n                COALESCE(LEAD(ldts - INTERVAL '1 MICROSECOND') OVER (PARTITION BY hk_customer_h ORDER BY ldts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS ledts\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_ws_s\n        ) customer_ws_s\n        \n            ON\n                customer_ws_s.hk_customer_h = te.hk_customer_h\n                AND snap.sdts BETWEEN customer_ws_s.ldts AND customer_ws_s.ledts\n        \n        LEFT JOIN (\n            SELECT\n                hk_customer_h,\n                ldts,\n                COALESCE(LEAD(ldts - INTERVAL '1 MICROSECOND') OVER (PARTITION BY hk_customer_h ORDER BY ldts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS ledts\n            FROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_ws_sts\n        ) customer_ws_sts\n        \n            ON\n                customer_ws_sts.hk_customer_h = te.hk_customer_h\n                AND snap.sdts BETWEEN customer_ws_sts.ldts AND customer_ws_sts.ledts\n        \n    \n        WHERE snap.is_active\n\n),\n\nrecords_to_insert AS (\n\n    SELECT DISTINCT *\n    FROM pit_records\n    WHERE hk_customer_d NOT IN (SELECT * FROM existing_dimension_keys)\n    )\n\nSELECT * FROM records_to_insert", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.customer_snp", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:17.071011Z", "completed_at": "2025-04-07T20:55:17.073923Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:17.074152Z", "completed_at": "2025-04-07T20:55:17.612818Z"}], "thread_id": "Thread-4", "execution_time": 0.5424230098724365, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8987-0306-0851-0003-ac12000316c2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.delivery_sns", "compiled": true, "compiled_code": "WITH cte_relevant_date as\n(\n\tselect sdts\n\tfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.relevant_date \n)\nselect\n\t  cte_relevant_date.sdts\n\t, delivery_nhl.hk_position_h\n\t, delivery_nhl.hk_deliveryadress_h\n\t, delivery_nhl.lieferdatum\n\t, delivery_nhl.rsrc \n\t, delivery_nhl.ldts\nfrom  WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.delivery_nhl\ninner join  cte_relevant_date\non cte_relevant_date.sdts >= delivery_nhl.ldts", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.delivery_sns", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:17.045237Z", "completed_at": "2025-04-07T20:55:17.123987Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:17.124243Z", "completed_at": "2025-04-07T20:55:17.768463Z"}], "thread_id": "Thread-2", "execution_time": 0.7241899967193604, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8987-0306-0851-0003-ac12000316c6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.productcategory_hierarchy_sns", "compiled": true, "compiled_code": "\n\n\n\nselect\n  productcategory_hierarchy_snp.sdts, \n  productcategory_hierarchy_snp.hk_productcategory_hierarchy_l, \n  productcategory_hierarchy_snp.hk_productcategory_hierarchy_d, \n  productcategory_hierarchy_l.hk_productcategory_parent_h,\nproductcategory_hierarchy_l.hk_productcategory_h\n,\nproductcategory_hierarchy_ws_sts.ldts as ldts_productcategory_hierarchy_ws_sts,\n\nproductcategory_hierarchy_ws_sts.rsrc as rsrc_productcategory_hierarchy_ws_sts\n \nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.productcategory_hierarchy_snp  \ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.productcategory_hierarchy_l  \non productcategory_hierarchy_l.hk_productcategory_hierarchy_l = productcategory_hierarchy_snp.hk_productcategory_hierarchy_l\ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.productcategory_hierarchy_ws_sts \non productcategory_hierarchy_snp.hk_productcategory_hierarchy_ws_sts=productcategory_hierarchy_ws_sts.hk_productcategory_hierarchy_l\nand productcategory_hierarchy_snp.ldts_productcategory_hierarchy_ws_sts=productcategory_hierarchy_ws_sts.ldts \nwhere  \n(\nproductcategory_hierarchy_snp.HK_productcategory_hierarchy_ws_sts <>'00000000000000000000000000000000' \n\n)\nAND\n    ((productcategory_hierarchy_ws_sts.cdc <>'D' and productcategory_hierarchy_ws_sts.hk_productcategory_hierarchy_l <>'00000000000000000000000000000000')\n)\n  ", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.productcategory_hierarchy_sns", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:17.028889Z", "completed_at": "2025-04-07T20:55:17.136731Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:17.137012Z", "completed_at": "2025-04-07T20:55:17.883121Z"}], "thread_id": "Thread-1", "execution_time": 0.8558249473571777, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8987-0306-09a8-0003-ac120002f6de"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.product_sns", "compiled": true, "compiled_code": "\n\n\n\nselect\n  product_snp.sdts, \n  product_snp.hk_product_h, \n  product_snp.hk_product_d, \n  product_h.product_bk,product_ws_s.hk_product_h,\n  product_ws_s.hd_product_ws_s,\n  product_ws_s.rsrc,\n  product_ws_s.ldts,\n  product_ws_s.bezeichnung,\n  product_ws_s.pflanzabstand,\n  product_ws_s.pflanzort,\n  product_ws_s.preis,\n  product_ws_s.typ,\n  product_ws_s.umfang,  \n  lower(product_ws_s.rsrc)<>'system' has_ws_data\n,\nproduct_ws_sts.ldts as ldts_product_ws_sts,\n\nproduct_ws_sts.rsrc as rsrc_product_ws_sts\n \nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.product_snp  \ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_h  \non product_h.hk_product_h = product_snp.hk_product_h\ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_ws_s \non product_snp.hk_product_ws_s=product_ws_s.hk_product_h\nand product_snp.ldts_product_ws_s=product_ws_s.ldts\ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_ws_sts \non product_snp.hk_product_ws_sts=product_ws_sts.hk_product_h\nand product_snp.ldts_product_ws_sts=product_ws_sts.ldts \nwhere  \n(\nproduct_snp.HK_product_ws_s <>'00000000000000000000000000000000' \nOR product_snp.HK_product_ws_sts <>'00000000000000000000000000000000' \n\n)\nAND\n    ((product_ws_sts.cdc <>'D' and product_ws_sts.hk_product_h <>'00000000000000000000000000000000')\n)\n  ", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.product_sns", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:17.617904Z", "completed_at": "2025-04-07T20:55:17.759597Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:17.760008Z", "completed_at": "2025-04-07T20:55:18.349060Z"}], "thread_id": "Thread-4", "execution_time": 0.7322559356689453, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8987-0306-0851-0003-ac12000316d2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.productcategory_sns", "compiled": true, "compiled_code": "\n\n\n\nselect\n  productcategory_snp.sdts, \n  productcategory_snp.hk_productcategory_h, \n  productcategory_snp.hk_productcategory_d, \n  productcategory_h.productcategory_bk,productcategory_ws_s.hk_productcategory_h,\n  productcategory_ws_s.hd_productcategory_ws_s,\n  productcategory_ws_s.rsrc,\n  productcategory_ws_s.ldts,\n  productcategory_ws_s.name,  \n  lower(productcategory_ws_s.rsrc)<>'system' has_ws_data\n \nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.productcategory_snp  \ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.productcategory_h  \non productcategory_h.hk_productcategory_h = productcategory_snp.hk_productcategory_h\ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.productcategory_ws_s \non productcategory_snp.hk_productcategory_ws_s=productcategory_ws_s.hk_productcategory_h\nand productcategory_snp.ldts_productcategory_ws_s=productcategory_ws_s.ldts \nwhere  \n(\nproductcategory_snp.HK_productcategory_ws_s <>'00000000000000000000000000000000' \n\n)\n", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.productcategory_sns", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:17.772029Z", "completed_at": "2025-04-07T20:55:17.871402Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:17.871801Z", "completed_at": "2025-04-07T20:55:18.432665Z"}], "thread_id": "Thread-2", "execution_time": 0.6613187789916992, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8987-0306-0979-0003-ac1200030746"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.order_associationpartner_sns", "compiled": true, "compiled_code": "\n\n\n\nselect\n  order_associationpartner_snp.sdts, \n  order_associationpartner_snp.hk_order_associationpartner_l, \n  order_associationpartner_snp.hk_order_associationpartner_d, \n  order_associationpartner_l.hk_order_h,\norder_associationpartner_l.hk_associationpartner_h\n,\norder_associationpartner_rs_es.ldts as ldts_order_associationpartner_rs_es,\n\norder_associationpartner_rs_es.rsrc as rsrc_order_associationpartner_rs_es\n \nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.order_associationpartner_snp  \ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_associationpartner_l  \non order_associationpartner_l.hk_order_associationpartner_l = order_associationpartner_snp.hk_order_associationpartner_l\ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_associationpartner_rs_es \non order_associationpartner_snp.hk_order_associationpartner_rs_es=order_associationpartner_rs_es.hk_order_associationpartner_l\nand order_associationpartner_snp.ldts_order_associationpartner_rs_es=order_associationpartner_rs_es.ldts \nwhere  \n(\norder_associationpartner_snp.HK_order_associationpartner_rs_es <>'00000000000000000000000000000000' \n\n)\nAND\n    ((order_associationpartner_rs_es.cdc <>'D' and order_associationpartner_rs_es.hk_order_associationpartner_l <>'00000000000000000000000000000000')\n)\n  ", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.order_associationpartner_sns", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:17.280827Z", "completed_at": "2025-04-07T20:55:17.500532Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:17.500924Z", "completed_at": "2025-04-07T20:55:18.654962Z"}], "thread_id": "Thread-3", "execution_time": 1.3753330707550049, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8987-0306-0851-0003-ac12000316d6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.position_sns", "compiled": true, "compiled_code": "\n\n\n\nselect\n  position_snp.sdts, \n  position_snp.hk_position_h, \n  position_snp.hk_position_d, \n  position_h.position_bk,position_rs_s.hk_position_h as hk_position_h_rs,\n  position_rs_s.hd_position_rs_s as hd_position_rs_s_rs,\n  position_rs_s.rsrc as rsrc_rs,\n  position_rs_s.ldts as ldts_rs,\n  position_rs_s.bestellungid as bestellungid_rs,\n  position_rs_s.gueltigbis as gueltigbis_rs,\n  position_rs_s.kaufdatum as kaufdatum_rs,\n  position_rs_s.kkfirma as kkfirma_rs,\n  position_rs_s.kreditkarte as kreditkarte_rs,\n  position_rs_s.menge as menge_rs,\n  position_rs_s.preis as preis_rs,\n  position_rs_s.produktid as produktid_rs,\n  position_rs_s.rabatt as rabatt_rs,  \n  lower(position_rs_s.rsrc)<>'system' has_rs_data,\nposition_ws_s.hk_position_h,\n  position_ws_s.hd_position_ws_s,\n  position_ws_s.rsrc,\n  position_ws_s.ldts,\n  position_ws_s.bestellungid,\n  position_ws_s.menge,\n  position_ws_s.posid,\n  position_ws_s.preis,\n  position_ws_s.spezlieferadrid,  \n  lower(position_ws_s.rsrc)<>'system' has_ws_data\n,\nposition_rs_sts.ldts as ldts_position_rs_sts,\n\nposition_rs_sts.rsrc as rsrc_position_rs_sts,\n\nposition_ws_sts.ldts as ldts_position_ws_sts,\n\nposition_ws_sts.rsrc as rsrc_position_ws_sts\n \nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.position_snp  \ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_h  \non position_h.hk_position_h = position_snp.hk_position_h\ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_rs_s \non position_snp.hk_position_rs_s=position_rs_s.hk_position_h\nand position_snp.ldts_position_rs_s=position_rs_s.ldts\ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_rs_sts \non position_snp.hk_position_rs_sts=position_rs_sts.hk_position_h\nand position_snp.ldts_position_rs_sts=position_rs_sts.ldts\ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_ws_s \non position_snp.hk_position_ws_s=position_ws_s.hk_position_h\nand position_snp.ldts_position_ws_s=position_ws_s.ldts\ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_ws_sts \non position_snp.hk_position_ws_sts=position_ws_sts.hk_position_h\nand position_snp.ldts_position_ws_sts=position_ws_sts.ldts \nwhere  \n(\nposition_snp.HK_position_rs_s <>'00000000000000000000000000000000' \nOR position_snp.HK_position_rs_sts <>'00000000000000000000000000000000' \nOR position_snp.HK_position_ws_s <>'00000000000000000000000000000000' \nOR position_snp.HK_position_ws_sts <>'00000000000000000000000000000000' \n\n)\nAND\n    ((position_rs_sts.cdc <>'D' and position_rs_sts.hk_position_h <>'00000000000000000000000000000000')\n OR (position_ws_sts.cdc <>'D' and position_ws_sts.hk_position_h <>'00000000000000000000000000000000')\n)\n  ", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.position_sns", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:18.436292Z", "completed_at": "2025-04-07T20:55:18.526193Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:18.526480Z", "completed_at": "2025-04-07T20:55:19.133445Z"}], "thread_id": "Thread-2", "execution_time": 0.69801926612854, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8987-0306-09a8-0003-ac120002f6fe"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.customer_associationpartner_sns", "compiled": true, "compiled_code": "\n\n\n\nselect\n  customer_associationpartner_snp.sdts, \n  customer_associationpartner_snp.hk_customer_associationpartner_l, \n  customer_associationpartner_snp.hk_customer_associationpartner_d, \n  customer_associationpartner_l.hk_customer_h,\ncustomer_associationpartner_l.hk_associationpartner_h\n,\ncustomer_associationpartner_ws_es.ldts as ldts_customer_associationpartner_ws_es,\n\ncustomer_associationpartner_ws_es.rsrc as rsrc_customer_associationpartner_ws_es\n \nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.customer_associationpartner_snp  \ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_associationpartner_l  \non customer_associationpartner_l.hk_customer_associationpartner_l = customer_associationpartner_snp.hk_customer_associationpartner_l\ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_associationpartner_ws_es \non customer_associationpartner_snp.hk_customer_associationpartner_ws_es=customer_associationpartner_ws_es.hk_customer_associationpartner_l\nand customer_associationpartner_snp.ldts_customer_associationpartner_ws_es=customer_associationpartner_ws_es.ldts \nwhere  \n(\ncustomer_associationpartner_snp.HK_customer_associationpartner_ws_es <>'00000000000000000000000000000000' \n\n)\nAND\n    ((customer_associationpartner_ws_es.cdc <>'D' and customer_associationpartner_ws_es.hk_customer_associationpartner_l <>'00000000000000000000000000000000')\n)\n  ", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.customer_associationpartner_sns", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:18.352517Z", "completed_at": "2025-04-07T20:55:18.505160Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:18.505505Z", "completed_at": "2025-04-07T20:55:19.171099Z"}], "thread_id": "Thread-4", "execution_time": 0.8194410800933838, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8987-0306-09a8-0003-ac120002f702"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.order_customer_sns", "compiled": true, "compiled_code": "\n\n\n\nselect\n  order_customer_snp.sdts, \n  order_customer_snp.hk_order_customer_l, \n  order_customer_snp.hk_order_customer_d, \n  order_customer_l.hk_order_h,\norder_customer_l.hk_customer_h\n,\norder_customer_rs_es.ldts as ldts_order_customer_rs_es,\n\norder_customer_rs_es.rsrc as rsrc_order_customer_rs_es,\n\norder_customer_ws_es.ldts as ldts_order_customer_ws_es,\n\norder_customer_ws_es.rsrc as rsrc_order_customer_ws_es\n \nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.order_customer_snp  \ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_customer_l  \non order_customer_l.hk_order_customer_l = order_customer_snp.hk_order_customer_l\ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_customer_rs_es \non order_customer_snp.hk_order_customer_rs_es=order_customer_rs_es.hk_order_customer_l\nand order_customer_snp.ldts_order_customer_rs_es=order_customer_rs_es.ldts\ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.order_customer_ws_es \non order_customer_snp.hk_order_customer_ws_es=order_customer_ws_es.hk_order_customer_l\nand order_customer_snp.ldts_order_customer_ws_es=order_customer_ws_es.ldts \nwhere  \n(\norder_customer_snp.HK_order_customer_rs_es <>'00000000000000000000000000000000' \nOR order_customer_snp.HK_order_customer_ws_es <>'00000000000000000000000000000000' \n\n)\nAND\n    ((order_customer_rs_es.cdc <>'D' and order_customer_rs_es.hk_order_customer_l <>'00000000000000000000000000000000')\n OR (order_customer_ws_es.cdc <>'D' and order_customer_ws_es.hk_order_customer_l <>'00000000000000000000000000000000')\n)\n  ", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.order_customer_sns", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:17.885980Z", "completed_at": "2025-04-07T20:55:17.964195Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:17.964447Z", "completed_at": "2025-04-07T20:55:18.520639Z"}], "thread_id": "Thread-1", "execution_time": 0.635383129119873, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8987-0306-0851-0003-ac12000316da"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.deliveryadress_customer_sns", "compiled": true, "compiled_code": "\n\n\n\nselect\n  deliveryadress_customer_snp.sdts, \n  deliveryadress_customer_snp.hk_deliveryadress_customer_l, \n  deliveryadress_customer_snp.hk_deliveryadress_customer_d, \n  deliveryadress_customer_l.hk_deliveryadress_h,\ndeliveryadress_customer_l.hk_customer_h\n,\ndeliveryadress_customer_ws_es.ldts as ldts_deliveryadress_customer_ws_es,\n\ndeliveryadress_customer_ws_es.rsrc as rsrc_deliveryadress_customer_ws_es\n \nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.deliveryadress_customer_snp  \ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryadress_customer_l  \non deliveryadress_customer_l.hk_deliveryadress_customer_l = deliveryadress_customer_snp.hk_deliveryadress_customer_l\ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.deliveryadress_customer_ws_es \non deliveryadress_customer_snp.hk_deliveryadress_customer_ws_es=deliveryadress_customer_ws_es.hk_deliveryadress_customer_l\nand deliveryadress_customer_snp.ldts_deliveryadress_customer_ws_es=deliveryadress_customer_ws_es.ldts \nwhere  \n(\ndeliveryadress_customer_snp.HK_deliveryadress_customer_ws_es <>'00000000000000000000000000000000' \n\n)\nAND\n    ((deliveryadress_customer_ws_es.cdc <>'D' and deliveryadress_customer_ws_es.hk_deliveryadress_customer_l <>'00000000000000000000000000000000')\n)\n  ", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.deliveryadress_customer_sns", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:19.202620Z", "completed_at": "2025-04-07T20:55:19.362247Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:19.366251Z", "completed_at": "2025-04-07T20:55:20.002603Z"}], "thread_id": "Thread-3", "execution_time": 0.8030261993408203, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8987-0306-0979-0003-ac1200030766"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.product_productcategory_sns", "compiled": true, "compiled_code": "\n\n\n\nselect\n  product_productcategory_snp.sdts, \n  product_productcategory_snp.hk_product_productcategory_l, \n  product_productcategory_snp.hk_product_productcategory_d, \n  product_productcategory_l.hk_productcategory_h,\nproduct_productcategory_l.hk_product_h\n,\nproduct_productcategory_ws_es.ldts as ldts_product_productcategory_ws_es,\n\nproduct_productcategory_ws_es.rsrc as rsrc_product_productcategory_ws_es\n \nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.product_productcategory_snp  \ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_productcategory_l  \non product_productcategory_l.hk_product_productcategory_l = product_productcategory_snp.hk_product_productcategory_l\ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.product_productcategory_ws_es \non product_productcategory_snp.hk_product_productcategory_ws_es=product_productcategory_ws_es.hk_product_productcategory_l\nand product_productcategory_snp.ldts_product_productcategory_ws_es=product_productcategory_ws_es.ldts \nwhere  \n(\nproduct_productcategory_snp.HK_product_productcategory_ws_es <>'00000000000000000000000000000000' \n\n)\nAND\n    ((product_productcategory_ws_es.cdc <>'D' and product_productcategory_ws_es.hk_product_productcategory_l <>'00000000000000000000000000000000')\n)\n  ", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.product_productcategory_sns", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:19.216316Z", "completed_at": "2025-04-07T20:55:19.373183Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:19.373397Z", "completed_at": "2025-04-07T20:55:20.007832Z"}], "thread_id": "Thread-4", "execution_time": 0.8005070686340332, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8987-0306-0851-0003-ac12000316ee"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.associationpartner_customer_sns", "compiled": true, "compiled_code": "\n\n\n\nselect\n  associationpartner_customer_snp.sdts, \n  associationpartner_customer_snp.hk_associationpartner_customer_l, \n  associationpartner_customer_snp.hk_associationpartner_customer_d, \n  associationpartner_customer_l.hk_customer_h,\nassociationpartner_customer_l.hk_associationpartner_h\n,\nassociationpartner_customer_ws_es.ldts as ldts_associationpartner_customer_ws_es,\n\nassociationpartner_customer_ws_es.rsrc as rsrc_associationpartner_customer_ws_es\n \nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.associationpartner_customer_snp  \ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.associationpartner_customer_l  \non associationpartner_customer_l.hk_associationpartner_customer_l = associationpartner_customer_snp.hk_associationpartner_customer_l\ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.associationpartner_customer_ws_es \non associationpartner_customer_snp.hk_associationpartner_customer_ws_es=associationpartner_customer_ws_es.hk_associationpartner_customer_l\nand associationpartner_customer_snp.ldts_associationpartner_customer_ws_es=associationpartner_customer_ws_es.ldts \nwhere  \n(\nassociationpartner_customer_snp.HK_associationpartner_customer_ws_es <>'00000000000000000000000000000000' \n\n)\nAND\n    ((associationpartner_customer_ws_es.cdc <>'D' and associationpartner_customer_ws_es.hk_associationpartner_customer_l <>'00000000000000000000000000000000')\n)\n  ", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.associationpartner_customer_sns", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:19.219557Z", "completed_at": "2025-04-07T20:55:19.270702Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:19.271036Z", "completed_at": "2025-04-07T20:55:20.058358Z"}], "thread_id": "Thread-1", "execution_time": 0.850593090057373, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8987-0306-0979-0003-ac1200030762"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.dim_associationpartner", "compiled": true, "compiled_code": "\nselect \nhk_associationpartner_d\n, associationpartner_bk\nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.associationpartner_sns", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_07_inmt.dim_associationpartner", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:19.211389Z", "completed_at": "2025-04-07T20:55:19.362000Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:19.362462Z", "completed_at": "2025-04-07T20:55:20.219752Z"}], "thread_id": "Thread-2", "execution_time": 1.0175800323486328, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8987-0306-0851-0003-ac12000316f2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.position_product_sns", "compiled": true, "compiled_code": "\n\n\n\nselect\n  position_product_snp.sdts, \n  position_product_snp.hk_position_product_l, \n  position_product_snp.hk_position_product_d, \n  position_product_l.hk_product_h,\nposition_product_l.hk_position_h\n,\nposition_product_rs_es.ldts as ldts_position_product_rs_es,\n\nposition_product_rs_es.rsrc as rsrc_position_product_rs_es,\n\nposition_product_ws_es.ldts as ldts_position_product_ws_es,\n\nposition_product_ws_es.rsrc as rsrc_position_product_ws_es\n \nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.position_product_snp  \ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_product_l  \non position_product_l.hk_position_product_l = position_product_snp.hk_position_product_l\ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_product_rs_es \non position_product_snp.hk_position_product_rs_es=position_product_rs_es.hk_position_product_l\nand position_product_snp.ldts_position_product_rs_es=position_product_rs_es.ldts\ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.position_product_ws_es \non position_product_snp.hk_position_product_ws_es=position_product_ws_es.hk_position_product_l\nand position_product_snp.ldts_position_product_ws_es=position_product_ws_es.ldts \nwhere  \n(\nposition_product_snp.HK_position_product_rs_es <>'00000000000000000000000000000000' \nOR position_product_snp.HK_position_product_ws_es <>'00000000000000000000000000000000' \n\n)\nAND\n    ((position_product_rs_es.cdc <>'D' and position_product_rs_es.hk_position_product_l <>'00000000000000000000000000000000')\n OR (position_product_ws_es.cdc <>'D' and position_product_ws_es.hk_position_product_l <>'00000000000000000000000000000000')\n)\n  ", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.position_product_sns", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:20.011058Z", "completed_at": "2025-04-07T20:55:20.024932Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:20.025387Z", "completed_at": "2025-04-07T20:55:20.563064Z"}], "thread_id": "Thread-3", "execution_time": 0.5537991523742676, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8987-0306-0979-0003-ac1200030772"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.category_deliveryadherence_bs", "compiled": true, "compiled_code": "with d as\n(\n    select \n          try_to_number(s.cdm_count_days_from) as number_of_days_from_num\n        , try_to_number(s.cdm_count_days_to) as number_of_days_till_num\n        , s.cdm_count_days_from as number_of_days_from\n        , s.cdm_count_days_to as number_of_days_till\n        , s.cdm_name as name\n        , s.category_deliveryadherence_nk as rating\n        , CASE WHEN rating ='Abverkauf, keine Lieferung'\n               THEN 1\n               WHEN rating ='mehr als 10 Tage zu fr\u00fch'\n               THEN 2               \n               WHEN rating ='bis zu 10 Tagen zu fr\u00fch'\n               THEN 3\n               WHEN rating ='mehr als 5 Tage fr\u00fcher'\n               THEN 4               \n               WHEN rating ='bis zu 5 Tagen zu fr\u00fch'\n               THEN 5\n               WHEN rating ='bis zu 3 Tagen zu fr\u00fch'\n               THEN 6\n               WHEN rating ='p\u00fcnktlich'\n               THEN 7\n               WHEN rating ='bis zu 3 Tagen zu sp\u00e4t'\n               THEN 8 \n               WHEN rating ='4 bis 10 Tage zu sp\u00e4t'\n               THEN 9   \n               WHEN rating ='mehr als 10 Tage sp\u00e4t'\n               THEN 10                \n               WHEN rating ='bis zu 10 Tage zu sp\u00e4t'\n               THEN 11  \n               WHEN rating ='Auftrag zu lange aktiv'\n               THEN 12                  \n\t\t       ELSE -9999999 END AS sort_order       \n        , s.hk_category_deliveryadherence_d\n        , s.sdts\n    from WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.category_deliveryadherence_sns s\n )\nselect *\nfrom d", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_06_bv.category_deliveryadherence_bs", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:20.060780Z", "completed_at": "2025-04-07T20:55:20.064304Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:20.064532Z", "completed_at": "2025-04-07T20:55:20.794566Z"}], "thread_id": "Thread-1", "execution_time": 0.7344141006469727, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8987-0306-09a8-0003-ac120002f71a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.dim_product", "compiled": true, "compiled_code": "\nselect \nhk_product_d \n, product_bk \n, bezeichnung \n, umfang \n, typ \n, preis\n, pflanzort\nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.product_sns", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_07_inmt.dim_product", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:20.016364Z", "completed_at": "2025-04-07T20:55:20.111875Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:20.112123Z", "completed_at": "2025-04-07T20:55:20.901160Z"}], "thread_id": "Thread-4", "execution_time": 0.885648250579834, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8987-0306-09a8-0003-ac120002f722"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.customer_sns", "compiled": true, "compiled_code": "\n\n\n\nselect\n  customer_snp.sdts, \n  customer_snp.hk_customer_h, \n  customer_snp.hk_customer_d, \n  customer_h.customer_bk,customer_ws_s.hk_customer_h,\n  customer_ws_s.hd_customer_ws_s,\n  customer_ws_s.rsrc,\n  customer_ws_s.ldts,\n  customer_ws_s.email,\n  customer_ws_s.geburtsdatum,\n  customer_ws_s.geschlecht,\n  customer_ws_s.gueltigbis,\n  customer_ws_s.kkfirma,\n  customer_ws_s.kreditkarte,\n  customer_ws_s.mobil,\n  customer_ws_s.name,\n  customer_ws_s.telefon,\n  customer_ws_s.vorname,  \n  lower(customer_ws_s.rsrc)<>'system' has_ws_data\n,\ncustomer_ws_sts.ldts as ldts_customer_ws_sts,\n\ncustomer_ws_sts.rsrc as rsrc_customer_ws_sts\n \nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.customer_snp  \ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_h  \non customer_h.hk_customer_h = customer_snp.hk_customer_h\ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_ws_s \non customer_snp.hk_customer_ws_s=customer_ws_s.hk_customer_h\nand customer_snp.ldts_customer_ws_s=customer_ws_s.ldts\ninner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_04_rv.customer_ws_sts \non customer_snp.hk_customer_ws_sts=customer_ws_sts.hk_customer_h\nand customer_snp.ldts_customer_ws_sts=customer_ws_sts.ldts \nwhere  \n(\ncustomer_snp.HK_customer_ws_s <>'00000000000000000000000000000000' \nOR customer_snp.HK_customer_ws_sts <>'00000000000000000000000000000000' \n\n)\nAND\n    ((customer_ws_sts.cdc <>'D' and customer_ws_sts.hk_customer_h <>'00000000000000000000000000000000')\n)\n  ", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.customer_sns", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:20.226002Z", "completed_at": "2025-04-07T20:55:20.231528Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:20.231814Z", "completed_at": "2025-04-07T20:55:20.931106Z"}], "thread_id": "Thread-2", "execution_time": 0.7061309814453125, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8987-0306-0851-0003-ac12000316fe"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.productcategory_bs", "compiled": true, "compiled_code": "\n\nWITH cte_relevant_date as\n(\n\tselect sdts\n\tfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.relevant_date \n)\n, cte_productcategory_hierarchy as\n(\n\tselect s.*\n\tfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.productcategory_hierarchy_sns s\n\tcross join cte_relevant_date \n\twhere  s.sdts = cte_relevant_date.sdts\n)\n, cte_productcategory as\n(\n\tselect s.*\n\tfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.productcategory_sns s\n\tcross join cte_relevant_date \n\twhere  s.sdts = cte_relevant_date.sdts\n)\n,level AS\n(\n    SELECT    s.sdts\n            , s.hk_productcategory_h\n            , s.hk_productcategory_hierarchy_d\n            , hk_productcategory_parent_h\n            , p.name as name\n            , pp.name as parent_name\n            , p.hk_productcategory_d\n            , p.productcategory_bk as productcategory_bk\n            , pp.productcategory_bk as parent_productcategory_bk\n    FROM  cte_productcategory_hierarchy s\n    INNER JOIN cte_productcategory p\n         ON s.hk_productcategory_h = p.hk_productcategory_h\n         AND s.sdts = p.sdts\n    LEFT JOIN cte_productcategory pp\n         ON s.hk_productcategory_parent_h = pp.hk_productcategory_h\n         AND s.sdts = pp.sdts\n)\nSELECT    l1.sdts\n        , l1.hk_productcategory_d\n        , l1.productcategory_bk as productcategory_id_l3\n        , l1.name as productcategory_l3\n        , l1.parent_name as productcategory_l2\n        , l1.parent_productcategory_bk as productcategory_id_l2\n        , l2.parent_name as productcategory_l1\n        , l2.parent_productcategory_bk as productcategory_id_l1\nFROM LEVEL l1\nINNER JOIN level l2\n    ON l1.sdts = l2.sdts\n    AND l1.hk_productcategory_parent_h = l2.hk_productcategory_h\nINNER JOIN level l3\n    ON l2.sdts = l3.sdts\n    AND l2.hk_productcategory_parent_h = l3.hk_productcategory_h", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_06_bv.productcategory_bs", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:20.567052Z", "completed_at": "2025-04-07T20:55:20.572319Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:20.572663Z", "completed_at": "2025-04-07T20:55:21.378085Z"}], "thread_id": "Thread-3", "execution_time": 0.8119428157806396, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8987-0306-09a8-0003-ac120002f726"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.dim_category_deliveryadherence", "compiled": true, "compiled_code": "\nSELECT  *\nFROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_06_bv.category_deliveryadherence_bs s", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_07_inmt.dim_category_deliveryadherence", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:20.907150Z", "completed_at": "2025-04-07T20:55:20.918010Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:20.918329Z", "completed_at": "2025-04-07T20:55:21.548337Z"}], "thread_id": "Thread-1", "execution_time": 0.6428663730621338, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8987-0306-0851-0003-ac1200031706"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.customer_bs", "compiled": true, "compiled_code": "with cte_relevant_date as\n(\n\tselect sdts\n\tfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.relevant_date \n)\nselect \n  hk_customer_d\n, customer_bk\n, vorname\n, name \n, geschlecht\n, geburtsdatum\n, telefon\n, mobil\n, email\n, kreditkarte \n, gueltigbis \n, kkfirma \nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.customer_sns s\ncross join cte_relevant_date \n\twhere s.sdts = cte_relevant_date.sdts", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_06_bv.customer_bs", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:20.911837Z", "completed_at": "2025-04-07T20:55:20.921844Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:20.922437Z", "completed_at": "2025-04-07T20:55:21.785797Z"}], "thread_id": "Thread-4", "execution_time": 0.8798511028289795, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8987-0306-0979-0003-ac120003077e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.order_customer_bb", "compiled": true, "compiled_code": "\n-- this table contains all link information between a order and a customer.\n-- in case there is no information in the source-system, which customer made the order, \n-- the creditcard-information should be used to find the link between the order and the customer.\n\n\nwith cte_relevant_date as\n(\n\tselect sdts\n\tfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.relevant_date \n)\n, cte_order_position as\n(\n\tselect s.*\n\tfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.order_position_sns s\n\tcross join cte_relevant_date \n\twhere s.sdts = cte_relevant_date.sdts\n)\n, cte_order_customer as\n(\n\tselect s.*\n\tfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.order_customer_sns s\n\tcross join cte_relevant_date \n\twhere s.sdts = cte_relevant_date.sdts\n)\n, cte_position as\n(\n\tselect s.*\n\tfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.position_sns s\n\tcross join cte_relevant_date \n\twhere s.sdts = cte_relevant_date.sdts\n)\n, cte_customer as\n(\n\tselect s.*\n\tfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.customer_sns s\n\tcross join cte_relevant_date \n\twhere s.sdts = cte_relevant_date.sdts\n)\n, order_customer_by_creditcard_detail as\n(\n\tselect \n\t\t  order_position_sns.sdts\n\t\t, order_position_sns.hk_order_h\n\t\t, order_position_sns.hk_position_h \n\t\t, customer_sns.hk_customer_h\n\t\t, customer_sns.hk_customer_d\n\t\t, position_sns.kreditkarte_rs kreditkarte \n\t\t, position_sns.ldts_rs ldts\n\tfrom cte_order_position order_position_sns\n\tinner join cte_position position_sns \n\t\ton order_position_sns.hk_position_h=position_sns.hk_position_h\n\t\tand order_position_sns.sdts=position_sns.sdts\n\tinner join cte_customer customer_sns\n\ton position_sns.kreditkarte_rs=customer_sns.kreditkarte\n\t\tand position_sns.gueltigbis_rs=customer_sns.gueltigbis\n\t\tand position_sns.kkfirma_rs=customer_sns.kkfirma\n\t\tand position_sns.sdts=customer_sns.sdts\n\t\tand customer_sns.kreditkarte <> '(unknown)'\n)\n, order_customer_by_creditcard as \n(\n\tselect distinct \n\t\t  sdts \n\t\t, hk_customer_h\n\t\t, hk_customer_d\n\t\t, hk_order_h \n\t\t, 'br 1' as rsrc\n\t\t, ldts\n\tfrom order_customer_by_creditcard_detail\n    qualify row_number() over (partition by sdts, hk_order_h order by kreditkarte) = 1\n)\n, cte_order_customer_customer_join as \n(-- all order_customer-information available in raw vault\n\tselect \n\t\t  os.sdts\n\t\t, os.hk_customer_h\n\t\t, c.hk_customer_d\n\t\t, os.hk_order_h\n\t\t, os.ldts_order_customer_rs_es ldts\n\t\t, os.rsrc_order_customer_rs_es rsrc\n\tfrom cte_order_customer  os\n\tinner join cte_customer c\n\t\ton os.hk_customer_h = c.hk_customer_h\n\t\tand os.sdts = c.sdts\n\twhere os.hk_customer_h<> '00000000000000000000000000000000'\n)\n--select * from condensed_selection_order_customer;\nselect \n\t  sdts\n\t, hk_customer_h\n\t, hk_customer_d\n\t, hk_order_h\n\t, ldts\n\t, rsrc\nfrom cte_order_customer_customer_join\nunion all \nselect \n\t  order_customer_by_creditcard.sdts\n\t, order_customer_by_creditcard.hk_customer_h\n\t, order_customer_by_creditcard.hk_customer_d\n\t, order_customer_by_creditcard.hk_order_h\n\t, order_customer_by_creditcard.ldts\n\t, order_customer_by_creditcard.rsrc\nfrom order_customer_by_creditcard\nleft join cte_order_customer_customer_join cte_order_customer_customer_join\n\ton order_customer_by_creditcard.hk_order_h=cte_order_customer_customer_join.hk_order_h\n\tand order_customer_by_creditcard.sdts=cte_order_customer_customer_join.sdts\nwhere cte_order_customer_customer_join.hk_order_h is null", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_06_bv.order_customer_bb", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:20.934358Z", "completed_at": "2025-04-07T20:55:20.937077Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:20.937539Z", "completed_at": "2025-04-07T20:55:21.990985Z"}], "thread_id": "Thread-2", "execution_time": 1.0576460361480713, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8987-0306-09a8-0003-ac120002f72e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.dim_productcategory", "compiled": true, "compiled_code": "\nSELECT  *\nFROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_06_bv.productcategory_bs s", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_07_inmt.dim_productcategory", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:21.552410Z", "completed_at": "2025-04-07T20:55:21.559100Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:21.559447Z", "completed_at": "2025-04-07T20:55:22.526772Z"}], "thread_id": "Thread-3", "execution_time": 0.9753541946411133, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8987-0306-0851-0003-ac120003170a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.dim_customer", "compiled": true, "compiled_code": "\nSELECT  *\nFROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_06_bv.customer_bs s", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_07_inmt.dim_customer", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:21.790381Z", "completed_at": "2025-04-07T20:55:21.800465Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:21.800767Z", "completed_at": "2025-04-07T20:55:24.543481Z"}], "thread_id": "Thread-1", "execution_time": 2.754110813140869, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8987-0306-0851-0003-ac120003170e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.sales_bb", "compiled": true, "compiled_code": "with cte_relevant_date as\n(\n\tselect sdts\n\tfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.relevant_date \n),\ncte_const as\n(\n\tselect '0001-01-01T00:00:01' as beginning_of_all_times\n\t\t , '00000000000000000000000000000000' as unknown_key\n)\n, cte_order as\n(\nselect \n\t  s.sdts\n\t, s.hk_order_h\n\t, s.order_bk\n\t, s.bestelldatum\n\t, s.wunschdatum\n\t, s.rabatt\n\t, s.rsrc \n\t, s.ldts \nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.order_sns s\ncross join cte_const\ncross join cte_relevant_date\nwhere 1=1\nand s.hk_order_h<> cte_const.unknown_key -- ghost-record\nand s.sdts = cte_relevant_date.sdts\n--and order_sns.sdts='2022-02-01 07:30:00.000'\n--and order_bk in ('320')--'rs0002003','1000', 'rs0002458', '2028')\n)\n, cte_position_product as\n(\n\tselect s.*\n\tfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.position_product_sns s\n\tcross join cte_relevant_date \n\twhere s.sdts = cte_relevant_date.sdts\n)\n, cte_order_position as\n(\n\tselect s.*\n\tfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.order_position_sns s\n\tcross join cte_relevant_date \n\twhere s.sdts = cte_relevant_date.sdts\n)\n, cte_position as\n(\n\tselect s.*\n\tfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.position_sns s\n\tcross join cte_relevant_date \n\twhere s.sdts = cte_relevant_date.sdts\n)\n, cte_productcategory_hierarchy as\n(\n\tselect s.*\n\tfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.productcategory_hierarchy_sns s\n\tcross join cte_relevant_date \n\twhere s.sdts = cte_relevant_date.sdts\n)\n, cte_productcategory as\n(\n\tselect s.*\n\tfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.productcategory_sns s\n\tcross join cte_relevant_date \n\twhere s.sdts = cte_relevant_date.sdts\n)\n, cte_product as\n(\n\tselect s.*\n\tfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.product_sns s\n\tcross join cte_relevant_date \n\twhere s.sdts = cte_relevant_date.sdts\n)\n, cte_product_productcategory as\n(\n\tselect s.*\n\tfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.product_productcategory_sns s\n\tcross join cte_relevant_date \n\twhere s.sdts = cte_relevant_date.sdts\n)\n, cte_order_associationpartner as\n(\n\tselect s.*, p.hk_associationpartner_d\n\tfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.order_associationpartner_sns s\n\tinner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.associationpartner_snp p\n\t\ton s.hk_associationpartner_h = p.hk_associationpartner_h\n\t\tand s.sdts = p.sdts\t\t\t\t\t\t\t\t\t\t\n\tcross join cte_relevant_date \n\twhere s.sdts = cte_relevant_date.sdts\n)\n, cte_customer_associationpartner as\n(\n\tselect s.*, p.hk_associationpartner_d\n\tfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.customer_associationpartner_sns s\n\tinner join WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.associationpartner_snp p\n\t\ton s.hk_associationpartner_h = p.hk_associationpartner_h\n\t\tand s.sdts = p.sdts\t\t\t\t\t\t\t\t\t\t\n\tcross join cte_relevant_date \n\twhere s.sdts = cte_relevant_date.sdts\n)\n, cte_order_customer as\n(\n\tselect s.*\n\tfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.order_customer_sns s\n\tcross join cte_relevant_date \n\twhere s.sdts = cte_relevant_date.sdts\n)\n, cte_position_join as \n(\nselect \n\t  order_position_sns.hk_order_h\n\t, position_sns.hk_position_h\n\t, position_sns.position_bk\n\t, position_sns.has_rs_data\n\t, position_sns.has_ws_data\n\t, case when position_sns.has_rs_data\n\t       then position_sns.menge_rs\n\t       else menge end as amount\n\t, cast(case when position_sns.has_rs_data\n\t       then position_sns.preis_rs\n\t       else replace(replace(position_sns.preis, '\u20ac',''), ',', '.')\n\t\t   end as numeric(28,10) ) price\n\t, position_sns.rabatt_rs\t   \n\t, position_sns.kaufdatum_rs\n\t, case when order_position_sns.rsrc_order_position_rs_sts <>''\n\t       then order_position_sns.rsrc_order_position_rs_sts\n\t\t   else order_position_sns.rsrc_order_position_ws_sts \n\t\t   end as rsrc\n\t, case when order_position_sns.ldts_order_position_rs_sts <>'0001-01-01 00:00:01.000'\n\t       then order_position_sns.ldts_order_position_rs_sts\n\t\t   else order_position_sns.ldts_order_position_ws_sts \n\t\t   end as ldts\t   \n\t, order_position_sns.sdts\nfrom cte_order_position order_position_sns\ninner join cte_position position_sns\n\ton order_position_sns.hk_position_h=position_sns.hk_position_h\n\tand order_position_sns.sdts=position_sns.sdts\n--where order_position_sns.hk_position_h='fe41d9803fcb75de1c9962934d7aa629'\n)\n, cte_product_join as \n(\nselect \n\t  position_product_sns.hk_position_h\n\t, position_product_sns.hk_product_h\n\t, product_sns.hk_product_d\n\t, product_sns.typ\n\t, position_product_sns.rsrc_position_product_rs_es\n\t, position_product_sns.rsrc_position_product_ws_es\t\n\t, product_sns.sdts\nfrom cte_position_product position_product_sns\ninner join cte_product product_sns\non position_product_sns.sdts=product_sns.sdts\nand position_product_sns.hk_product_h=product_sns.hk_product_h \n)\n, cte_productcategory_join as\n(\nselect\n\t  product_productcategory_sns.hk_productcategory_h\n\t, product_productcategory_sns.hk_product_h\n\t, productcategory_sns.hk_productcategory_d\n\t, product_productcategory_sns.rsrc_product_productcategory_ws_es rsrc\n\t, productcategory_sns.sdts\nfrom cte_product_productcategory product_productcategory_sns\ninner join cte_productcategory productcategory_sns\non product_productcategory_sns.sdts=productcategory_sns.sdts\nand product_productcategory_sns.hk_productcategory_h=productcategory_sns.hk_productcategory_h\n)\n, cte_product_type as \n(\nselect \n\t  product_type_sns.product_type_nk\n\t, product_type_sns.rsrc \nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.product_type_sns\n)\n, cte_delivery as\n(\nselect\n\t  delivery_sns.hk_position_h\n\t, delivery_sns.hk_deliveryadress_h\n\t, delivery_sns.lieferdatum\n\t, delivery_sns.rsrc \n\t, delivery_sns.ldts\n\t, delivery_sns.sdts\nfrom  WILLIBALD_DATA_VAULT_WITH_DBT.dwh_05_sn.delivery_sns\n)\n, cte_customer as\n(\nselect\n\t  order_customer_bb.sdts\n\t, order_customer_bb.hk_order_h\n\t, order_customer_bb.hk_customer_h\n\t, order_customer_bb.hk_customer_d\n\t, order_customer_bb.rsrc \n\t, order_customer_bb.ldts\nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_06_bv.order_customer_bb\n)\n, cte_product as\n(\nselect\n\t  position_product_sns.sdts\n\t, position_product_sns.hk_position_h\n\t, position_product_sns.hk_product_h\n\t, case when position_product_sns.rsrc_position_product_rs_es <>''\n\t       then position_product_sns.rsrc_position_product_rs_es\n\t\t   else position_product_sns.rsrc_position_product_ws_es \n\t\t   end as rsrc\n\t, case when position_product_sns.ldts_position_product_rs_es <>'0001-01-01 00:00:01.000'\n\t       then position_product_sns.ldts_position_product_rs_es\n\t\t   else position_product_sns.ldts_position_product_ws_es \n\t\t   end as ldts\t\nfrom cte_position_product position_product_sns\n)\n, cte_associationpartner as\n(\n-- roadshow\nselect\n\t  ao.sdts\n\t, ao.hk_order_h\n\t, ao.hk_associationpartner_h\n\t, ao.hk_associationpartner_d\n\t, ao.rsrc_order_associationpartner_rs_es rsrc\n\t, ao.ldts_order_associationpartner_rs_es ldts\nfrom cte_order_associationpartner\tao\t\t\t\t\t\t\t\nunion all\n-- webshop\nselect\n\t  customer_associationpartner_sns.sdts\n\t, order_customer_sns.hk_order_h\n\t, customer_associationpartner_sns.hk_associationpartner_h\n\t, customer_associationpartner_sns.hk_associationpartner_d\n\t, case when order_customer_sns.rsrc_order_customer_rs_es <>''\n\t       then order_customer_sns.rsrc_order_customer_rs_es\n\t\t   else order_customer_sns.rsrc_order_customer_ws_es \n\t\t   end as rsrc\n\t, case when order_customer_sns.ldts_order_customer_rs_es <>'0001-01-01 00:00:01.000'\n\t       then order_customer_sns.ldts_order_customer_rs_es\n\t\t   else order_customer_sns.ldts_order_customer_ws_es \n\t\t   end as ldts\t\t\nfrom cte_customer_associationpartner customer_associationpartner_sns\ninner join cte_order_customer order_customer_sns\n\ton customer_associationpartner_sns.sdts=order_customer_sns.sdts\n\tand customer_associationpartner_sns.hk_customer_h=order_customer_sns.hk_customer_h\nwhere order_customer_sns.rsrc_order_customer_ws_es <>''\nand customer_associationpartner_sns.rsrc_customer_associationpartner_ws_es <>'' \n)\n, cte_category_deliveryadherence as\n(\nselect\n\t  sdts\n\t, hk_category_deliveryadherence_d\n\t, number_of_days_from_num\n\t, number_of_days_till_num\n\t, number_of_days_from\n\t--, case when number_of_days_from = 'xxx' then 'rs' else 'ws' end as ordersource\nfrom WILLIBALD_DATA_VAULT_WITH_DBT.dwh_06_bv.category_deliveryadherence_bs \n\n),\ncte_bv_level1 as\n(\n\tselect\n\t  cte_order.sdts \n\t, cte_order.hk_order_h\n\t, cte_position_join.hk_position_h\n\t, coalesce (cte_product_join.hk_product_d, cte_const.unknown_key) hk_product_d\n\t, coalesce (cte_customer.hk_customer_d, cte_const.unknown_key) hk_customer_d\n\t, coalesce (cte_productcategory_join.hk_productcategory_d, cte_const.unknown_key) hk_productcategory_d\t\n\t, coalesce (cte_customer.hk_customer_h, cte_const.unknown_key) hk_customer_h\n\t, coalesce (cte_delivery.hk_deliveryadress_h, cte_const.unknown_key) hk_deliveryadress_h\n\t, coalesce (cte_associationpartner.hk_associationpartner_d, cte_const.unknown_key) hk_associationpartner_d\t\t\t\t\t\t\t\t   \n\t, coalesce (cte_product_type.product_type_nk, cte_const.unknown_key) product_type_nk\t\t\t\t\t\t\t\t   \n\t, cte_order.order_bk\n\t, cte_position_join.position_bk\n\t, case when cte_position_join.has_rs_data\n\t\tthen 'rs'\n\t\twhen cte_position_join.has_ws_data\n\t\tthen 'ws'\n\t\telse '--'\n\t\tend as ordersource\n\t, cte_position_join.amount\n\t, cte_position_join.price\n\t, rabatt_rs as rs_discount_row_based\n\t, case when cte_position_join.has_rs_data\n\t       THEN (amount*price*(1-rabatt_rs/100))*0.02+ (amount*price*(rabatt_rs/100))\n\t       when cte_position_join.has_ws_data\n\t       --THEN  (amount*price)/(sum(amount*price) OVER (PARTITION BY order_bk))*coalesce (cte_order.rabatt, 0) -- if discount is delivered as absolute number\n\t\t   then amount*price*(cte_order.rabatt/100)\n\t       ELSE 0 END discount\n--\t, (cte_position_join.discount /*for rs-orders the discount is on position-level*/+\n--      /*breaking down the order discount for ws-orders based on the weighted revenue per position*/\n--\t  (amount*price)/(sum(amount*price) OVER (PARTITION BY order_bk))*coalesce (cte_order.rabatt, 0))*-1 discount \n\t, case when cte_position_join.has_rs_data\n\t\tthen cte_position_join.kaufdatum_rs\n\t\telse cte_order.bestelldatum\n\t\tend as sales_date\n\t, case when cte_position_join.has_rs_data\n\t\tthen cte_position_join.kaufdatum_rs\n\t\telse cte_order.wunschdatum\n\t\tend as requested_date\n\t, case when cte_position_join.has_rs_data \n\t\tthen cte_position_join.kaufdatum_rs\n\t\telse cte_delivery.lieferdatum\n\t\tend as delivery_date\n\t, case when cte_position_join.has_rs_data\n\t\tthen 0 -- order is delivered (there is no delivery for roadshow)\n\t\twhen min(coalesce(delivery_date, cte_const.beginning_of_all_times)) over (partition by cte_order.sdts, cte_order.hk_order_h) <> cte_const.beginning_of_all_times\n\t\tthen 0 -- order is delivered\n\t\telse 1 -- order is not delivered yet or only partly delivered\n\t\tend as openorder\n\t, min(coalesce(delivery_date, cte_const.beginning_of_all_times)) over (partition by cte_order.sdts, cte_order.hk_order_h) min_delivery_date\n\t, max(coalesce(delivery_date, cte_const.beginning_of_all_times)) over (partition by cte_order.sdts, cte_order.hk_order_h) max_delivery_date\n\t, max_delivery_date-requested_date deliveryadherence\n\t, cte_const.unknown_key\n\tfrom cte_order\n\tcross join cte_const\n\tinner join cte_position_join\n\t\ton cte_order.hk_order_h=cte_position_join.hk_order_h\n\t\tand cte_order.sdts=cte_position_join.sdts\n\tleft join cte_product_join\n\t\ton cte_product_join.hk_position_h=cte_position_join.hk_position_h\n\t\tand cte_product_join.sdts=cte_position_join.sdts\n\tleft join cte_product_type\n\t\ton cte_product_type.product_type_nk = cte_product_join.typ\n\tleft join cte_productcategory_join\n\t\ton cte_product_join.hk_product_h=cte_productcategory_join.hk_product_h\n\t\tand cte_product_join.sdts=cte_productcategory_join.sdts\t\t\n\tleft join cte_delivery\n\t\ton cte_position_join.hk_position_h=cte_delivery.hk_position_h\n\t\tand cte_position_join.sdts=cte_delivery.sdts\n\tleft join cte_customer\n\t\ton cte_order.hk_order_h=cte_customer.hk_order_h\n\t\tand cte_order.sdts=cte_customer.sdts\n\tleft join cte_associationpartner\n\t\ton cte_associationpartner.sdts=cte_order.sdts\n\t\tand cte_associationpartner.hk_order_h=cte_order.hk_order_h\n)\nselect \n      cte_bv_level1.sdts as reporting_date\n\t, hk_order_h\n\t, hk_position_h\n\t, hk_product_d\t\n\t, hk_productcategory_d\n\t, hk_customer_h\n\t, hk_customer_d\t\n\t, hk_deliveryadress_h\n\t, hk_associationpartner_d\t\t\t\t\t\t\t\t   \n\t, CASE WHEN openorder=1\n\t       THEN unknown_key\n\t       ELSE coalesce (cte_category_deliveryadherence.hk_category_deliveryadherence_d,unknown_key) END as hk_category_deliveryadherence_d\n\t, product_type_nk\n\t, order_bk\n\t, position_bk\n\t, cte_bv_level1.ordersource\n\t, amount\n\t, price\n\t, discount\n\t, (price * amount) gross_profit\n\t, (price * amount) - discount revenue\n\t, sales_date\n\t, requested_date\n\t, delivery_date\n\t, cte_bv_level1.openorder\nfrom cte_bv_level1\nleft join cte_category_deliveryadherence\n\ton cte_category_deliveryadherence.sdts = cte_bv_level1.sdts\n\tand ((cte_bv_level1.ordersource = 'ws' and deliveryadherence >= cte_category_deliveryadherence.number_of_days_from_num and deliveryadherence < cte_category_deliveryadherence.number_of_days_till_num)\n\t\tor (cte_bv_level1.ordersource != 'ws' and cte_category_deliveryadherence.number_of_days_from = 'zzz'))", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_06_bv.sales_bb", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-07T20:55:24.548846Z", "completed_at": "2025-04-07T20:55:24.557095Z"}, {"name": "execute", "started_at": "2025-04-07T20:55:24.557760Z", "completed_at": "2025-04-07T20:55:36.999154Z"}], "thread_id": "Thread-4", "execution_time": 12.451457738876343, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8987-0306-09a8-0003-ac120002f732"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.ddvug_willibald_samen.fact_sales", "compiled": true, "compiled_code": "\nSELECT  *\nFROM WILLIBALD_DATA_VAULT_WITH_DBT.dwh_06_bv.sales_bb s", "relation_name": "WILLIBALD_DATA_VAULT_WITH_DBT.dwh_07_inmt.fact_sales", "batch_results": null}], "elapsed_time": 101.59373903274536, "args": {"partial_parse_file_diff": true, "require_batched_execution_for_custom_microbatch_strategy": false, "require_yaml_configuration_for_mf_time_spines": false, "defer": false, "quiet": false, "favor_state": false, "use_colors_file": true, "write_json": true, "require_explicit_package_overrides_for_builtin_materializations": true, "partial_parse": true, "source_freshness_run_project_hooks": false, "log_path": "/Users/macin/Git/willibald-data-vault-with-dbt/logs", "empty": false, "printer_width": 80, "require_nested_cumulative_type_params": false, "indirect_selection": "eager", "state_modified_compare_vars": false, "log_level_file": "debug", "which": "run", "exclude": [], "invocation_command": "dbt run", "log_format_file": "debug", "show_resource_report": false, "introspect": true, "cache_selected_only": false, "select": [], "version_check": true, "skip_nodes_if_on_run_start_fails": false, "use_colors": true, "state_modified_compare_more_unrendered_values": false, "project_dir": "/Users/macin/Git/willibald-data-vault-with-dbt", "static_parser": true, "vars": {}, "strict_mode": false, "log_file_max_bytes": 10485760, "send_anonymous_usage_stats": true, "profiles_dir": ".", "macro_debugging": false, "populate_cache": true, "log_format": "default", "require_resource_names_without_spaces": false, "warn_error_options": {"include": [], "exclude": []}, "print": true, "log_level": "info"}}